// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/traffic_regulation.proto

package org.sensoris.categories.trafficregulation;

public interface TrafficSignOrBuilder extends
    // @@protoc_insertion_point(interface_extends:sensoris.protobuf.categories.trafficregulation.TrafficSign)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Event envelope.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
   */
  boolean hasEnvelope();
  /**
   * <pre>
   * Event envelope.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
   */
  org.sensoris.types.base.EventEnvelope getEnvelope();
  /**
   * <pre>
   * Event envelope.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
   */
  org.sensoris.types.base.EventEnvelopeOrBuilder getEnvelopeOrBuilder();

  /**
   * <pre>
   * Confidence that a main sign has been detected.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 2;</code>
   */
  boolean hasExistenceConfidence();
  /**
   * <pre>
   * Confidence that a main sign has been detected.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 2;</code>
   */
  org.sensoris.types.base.Confidence getExistenceConfidence();
  /**
   * <pre>
   * Confidence that a main sign has been detected.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 2;</code>
   */
  org.sensoris.types.base.ConfidenceOrBuilder getExistenceConfidenceOrBuilder();

  /**
   * <pre>
   * Event detection status.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;</code>
   */
  boolean hasDetectionStatus();
  /**
   * <pre>
   * Event detection status.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;</code>
   */
  org.sensoris.types.base.EventDetectionStatus getDetectionStatus();
  /**
   * <pre>
   * Event detection status.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;</code>
   */
  org.sensoris.types.base.EventDetectionStatusOrBuilder getDetectionStatusOrBuilder();

  /**
   * <pre>
   * Rectangular box and accuracy of main sign, i.e. without supplementary sign(s).
   * </pre>
   *
   * <code>.sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;</code>
   */
  boolean hasRectangularBoxAndAccuracy();
  /**
   * <pre>
   * Rectangular box and accuracy of main sign, i.e. without supplementary sign(s).
   * </pre>
   *
   * <code>.sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;</code>
   */
  org.sensoris.types.spatial.RectangularBoxAndAccuracy getRectangularBoxAndAccuracy();
  /**
   * <pre>
   * Rectangular box and accuracy of main sign, i.e. without supplementary sign(s).
   * </pre>
   *
   * <code>.sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;</code>
   */
  org.sensoris.types.spatial.RectangularBoxAndAccuracyOrBuilder getRectangularBoxAndAccuracyOrBuilder();

  /**
   * <pre>
   * Shape and confidence of main sign.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence shape_and_confidence = 5;</code>
   */
  boolean hasShapeAndConfidence();
  /**
   * <pre>
   * Shape and confidence of main sign.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence shape_and_confidence = 5;</code>
   */
  org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidence getShapeAndConfidence();
  /**
   * <pre>
   * Shape and confidence of main sign.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence shape_and_confidence = 5;</code>
   */
  org.sensoris.categories.trafficregulation.TrafficSign.ShapeAndConfidenceOrBuilder getShapeAndConfidenceOrBuilder();

  /**
   * <pre>
   * Type and confidence of main sign.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence type_and_confidence = 6;</code>
   */
  boolean hasTypeAndConfidence();
  /**
   * <pre>
   * Type and confidence of main sign.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence type_and_confidence = 6;</code>
   */
  org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidence getTypeAndConfidence();
  /**
   * <pre>
   * Type and confidence of main sign.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence type_and_confidence = 6;</code>
   */
  org.sensoris.categories.trafficregulation.TrafficSign.TypeAndConfidenceOrBuilder getTypeAndConfidenceOrBuilder();

  /**
   * <pre>
   * Value of main sign in addition to type.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 7;</code>
   */
  boolean hasValueAndConfidence();
  /**
   * <pre>
   * Value of main sign in addition to type.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 7;</code>
   */
  org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidence getValueAndConfidence();
  /**
   * <pre>
   * Value of main sign in addition to type.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 7;</code>
   */
  org.sensoris.categories.trafficregulation.TrafficSign.ValueAndConfidenceOrBuilder getValueAndConfidenceOrBuilder();

  /**
   * <pre>
   * Permanency of main sign provides information if a traffic sign is permanent of variable, e.g. LED.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanency_and_confidence = 8;</code>
   */
  boolean hasPermanencyAndConfidence();
  /**
   * <pre>
   * Permanency of main sign provides information if a traffic sign is permanent of variable, e.g. LED.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanency_and_confidence = 8;</code>
   */
  org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidence getPermanencyAndConfidence();
  /**
   * <pre>
   * Permanency of main sign provides information if a traffic sign is permanent of variable, e.g. LED.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanency_and_confidence = 8;</code>
   */
  org.sensoris.categories.trafficregulation.TrafficSign.PermanencyAndConfidenceOrBuilder getPermanencyAndConfidenceOrBuilder();

  /**
   * <pre>
   * Validation of main sign provides information if the traffic sign was invalidated by a traffic authority.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence validation_and_confidence = 9;</code>
   */
  boolean hasValidationAndConfidence();
  /**
   * <pre>
   * Validation of main sign provides information if the traffic sign was invalidated by a traffic authority.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence validation_and_confidence = 9;</code>
   */
  org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidence getValidationAndConfidence();
  /**
   * <pre>
   * Validation of main sign provides information if the traffic sign was invalidated by a traffic authority.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence validation_and_confidence = 9;</code>
   */
  org.sensoris.categories.trafficregulation.TrafficSign.ValidationAndConfidenceOrBuilder getValidationAndConfidenceOrBuilder();

  /**
   * <pre>
   * Dominant background color and confidence of main sign.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence background_color_and_confidence = 10;</code>
   */
  boolean hasBackgroundColorAndConfidence();
  /**
   * <pre>
   * Dominant background color and confidence of main sign.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence background_color_and_confidence = 10;</code>
   */
  org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence getBackgroundColorAndConfidence();
  /**
   * <pre>
   * Dominant background color and confidence of main sign.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence background_color_and_confidence = 10;</code>
   */
  org.sensoris.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidenceOrBuilder getBackgroundColorAndConfidenceOrBuilder();

  /**
   * <pre>
   * Supplementary sign, which is an attached sign in addition to main sign.
   * </pre>
   *
   * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
   */
  java.util.List<org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence> 
      getSupplementarySignAndConfidenceList();
  /**
   * <pre>
   * Supplementary sign, which is an attached sign in addition to main sign.
   * </pre>
   *
   * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
   */
  org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence getSupplementarySignAndConfidence(int index);
  /**
   * <pre>
   * Supplementary sign, which is an attached sign in addition to main sign.
   * </pre>
   *
   * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
   */
  int getSupplementarySignAndConfidenceCount();
  /**
   * <pre>
   * Supplementary sign, which is an attached sign in addition to main sign.
   * </pre>
   *
   * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
   */
  java.util.List<? extends org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidenceOrBuilder> 
      getSupplementarySignAndConfidenceOrBuilderList();
  /**
   * <pre>
   * Supplementary sign, which is an attached sign in addition to main sign.
   * </pre>
   *
   * <code>repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;</code>
   */
  org.sensoris.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidenceOrBuilder getSupplementarySignAndConfidenceOrBuilder(
      int index);
}
