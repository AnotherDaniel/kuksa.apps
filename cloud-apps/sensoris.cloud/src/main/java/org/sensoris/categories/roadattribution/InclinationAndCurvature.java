// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/road_attribution.proto

package org.sensoris.categories.roadattribution;

/**
 * <pre>
 * Inclination and curvature.
 * </pre>
 *
 * Protobuf type {@code sensoris.protobuf.categories.roadattribution.InclinationAndCurvature}
 */
public  final class InclinationAndCurvature extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
    InclinationAndCurvatureOrBuilder {
private static final long serialVersionUID = 0L;
  // Use InclinationAndCurvature.newBuilder() to construct.
  private InclinationAndCurvature(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private InclinationAndCurvature() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private InclinationAndCurvature(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            org.sensoris.types.base.Int64ValueAndAccuracy.Builder subBuilder = null;
            if (longitudinalInclinationAndAccuracy_ != null) {
              subBuilder = longitudinalInclinationAndAccuracy_.toBuilder();
            }
            longitudinalInclinationAndAccuracy_ = input.readMessage(org.sensoris.types.base.Int64ValueAndAccuracy.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(longitudinalInclinationAndAccuracy_);
              longitudinalInclinationAndAccuracy_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            org.sensoris.types.base.Int64ValueAndAccuracy.Builder subBuilder = null;
            if (lateralInclinationAndAccuracy_ != null) {
              subBuilder = lateralInclinationAndAccuracy_.toBuilder();
            }
            lateralInclinationAndAccuracy_ = input.readMessage(org.sensoris.types.base.Int64ValueAndAccuracy.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(lateralInclinationAndAccuracy_);
              lateralInclinationAndAccuracy_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            org.sensoris.types.base.Int64ValueAndAccuracy.Builder subBuilder = null;
            if (horizontalCurvatureAndAccuracy_ != null) {
              subBuilder = horizontalCurvatureAndAccuracy_.toBuilder();
            }
            horizontalCurvatureAndAccuracy_ = input.readMessage(org.sensoris.types.base.Int64ValueAndAccuracy.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(horizontalCurvatureAndAccuracy_);
              horizontalCurvatureAndAccuracy_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_InclinationAndCurvature_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_InclinationAndCurvature_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.sensoris.categories.roadattribution.InclinationAndCurvature.class, org.sensoris.categories.roadattribution.InclinationAndCurvature.Builder.class);
  }

  public static final int LONGITUDINAL_INCLINATION_AND_ACCURACY_FIELD_NUMBER = 1;
  private org.sensoris.types.base.Int64ValueAndAccuracy longitudinalInclinationAndAccuracy_;
  /**
   * <pre>
   * Longitudinal declination and accuracy, also referred as slope.
   * &#64;unit Degree
   * &#64;resolution 0.01
   * &#64;range (-90, 90)
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
   */
  public boolean hasLongitudinalInclinationAndAccuracy() {
    return longitudinalInclinationAndAccuracy_ != null;
  }
  /**
   * <pre>
   * Longitudinal declination and accuracy, also referred as slope.
   * &#64;unit Degree
   * &#64;resolution 0.01
   * &#64;range (-90, 90)
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
   */
  public org.sensoris.types.base.Int64ValueAndAccuracy getLongitudinalInclinationAndAccuracy() {
    return longitudinalInclinationAndAccuracy_ == null ? org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : longitudinalInclinationAndAccuracy_;
  }
  /**
   * <pre>
   * Longitudinal declination and accuracy, also referred as slope.
   * &#64;unit Degree
   * &#64;resolution 0.01
   * &#64;range (-90, 90)
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
   */
  public org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getLongitudinalInclinationAndAccuracyOrBuilder() {
    return getLongitudinalInclinationAndAccuracy();
  }

  public static final int LATERAL_INCLINATION_AND_ACCURACY_FIELD_NUMBER = 2;
  private org.sensoris.types.base.Int64ValueAndAccuracy lateralInclinationAndAccuracy_;
  /**
   * <pre>
   * Lateral declination and accuracy, also referred as cross fall.
   * &#64;unit Degree
   * &#64;resolution 0.01
   * &#64;range (-90, 90)
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
   */
  public boolean hasLateralInclinationAndAccuracy() {
    return lateralInclinationAndAccuracy_ != null;
  }
  /**
   * <pre>
   * Lateral declination and accuracy, also referred as cross fall.
   * &#64;unit Degree
   * &#64;resolution 0.01
   * &#64;range (-90, 90)
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
   */
  public org.sensoris.types.base.Int64ValueAndAccuracy getLateralInclinationAndAccuracy() {
    return lateralInclinationAndAccuracy_ == null ? org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : lateralInclinationAndAccuracy_;
  }
  /**
   * <pre>
   * Lateral declination and accuracy, also referred as cross fall.
   * &#64;unit Degree
   * &#64;resolution 0.01
   * &#64;range (-90, 90)
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
   */
  public org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getLateralInclinationAndAccuracyOrBuilder() {
    return getLateralInclinationAndAccuracy();
  }

  public static final int HORIZONTAL_CURVATURE_AND_ACCURACY_FIELD_NUMBER = 3;
  private org.sensoris.types.base.Int64ValueAndAccuracy horizontalCurvatureAndAccuracy_;
  /**
   * <pre>
   * Horizontal curvature and accuracy.
   * Negative value represents curve to the left, positive value represents curve to the right. Value of 0 represents straight road. The value is the reciproke of the radius (curvature = 1/radius) whereas high radii are represented by low values.
   * &#64;unit 1 per KiloMeter
   * &#64;resolution 0.1
   * &#64;range ( , )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];</code>
   */
  public boolean hasHorizontalCurvatureAndAccuracy() {
    return horizontalCurvatureAndAccuracy_ != null;
  }
  /**
   * <pre>
   * Horizontal curvature and accuracy.
   * Negative value represents curve to the left, positive value represents curve to the right. Value of 0 represents straight road. The value is the reciproke of the radius (curvature = 1/radius) whereas high radii are represented by low values.
   * &#64;unit 1 per KiloMeter
   * &#64;resolution 0.1
   * &#64;range ( , )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];</code>
   */
  public org.sensoris.types.base.Int64ValueAndAccuracy getHorizontalCurvatureAndAccuracy() {
    return horizontalCurvatureAndAccuracy_ == null ? org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : horizontalCurvatureAndAccuracy_;
  }
  /**
   * <pre>
   * Horizontal curvature and accuracy.
   * Negative value represents curve to the left, positive value represents curve to the right. Value of 0 represents straight road. The value is the reciproke of the radius (curvature = 1/radius) whereas high radii are represented by low values.
   * &#64;unit 1 per KiloMeter
   * &#64;resolution 0.1
   * &#64;range ( , )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];</code>
   */
  public org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getHorizontalCurvatureAndAccuracyOrBuilder() {
    return getHorizontalCurvatureAndAccuracy();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (longitudinalInclinationAndAccuracy_ != null) {
      output.writeMessage(1, getLongitudinalInclinationAndAccuracy());
    }
    if (lateralInclinationAndAccuracy_ != null) {
      output.writeMessage(2, getLateralInclinationAndAccuracy());
    }
    if (horizontalCurvatureAndAccuracy_ != null) {
      output.writeMessage(3, getHorizontalCurvatureAndAccuracy());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (longitudinalInclinationAndAccuracy_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getLongitudinalInclinationAndAccuracy());
    }
    if (lateralInclinationAndAccuracy_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getLateralInclinationAndAccuracy());
    }
    if (horizontalCurvatureAndAccuracy_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getHorizontalCurvatureAndAccuracy());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.sensoris.categories.roadattribution.InclinationAndCurvature)) {
      return super.equals(obj);
    }
    org.sensoris.categories.roadattribution.InclinationAndCurvature other = (org.sensoris.categories.roadattribution.InclinationAndCurvature) obj;

    boolean result = true;
    result = result && (hasLongitudinalInclinationAndAccuracy() == other.hasLongitudinalInclinationAndAccuracy());
    if (hasLongitudinalInclinationAndAccuracy()) {
      result = result && getLongitudinalInclinationAndAccuracy()
          .equals(other.getLongitudinalInclinationAndAccuracy());
    }
    result = result && (hasLateralInclinationAndAccuracy() == other.hasLateralInclinationAndAccuracy());
    if (hasLateralInclinationAndAccuracy()) {
      result = result && getLateralInclinationAndAccuracy()
          .equals(other.getLateralInclinationAndAccuracy());
    }
    result = result && (hasHorizontalCurvatureAndAccuracy() == other.hasHorizontalCurvatureAndAccuracy());
    if (hasHorizontalCurvatureAndAccuracy()) {
      result = result && getHorizontalCurvatureAndAccuracy()
          .equals(other.getHorizontalCurvatureAndAccuracy());
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasLongitudinalInclinationAndAccuracy()) {
      hash = (37 * hash) + LONGITUDINAL_INCLINATION_AND_ACCURACY_FIELD_NUMBER;
      hash = (53 * hash) + getLongitudinalInclinationAndAccuracy().hashCode();
    }
    if (hasLateralInclinationAndAccuracy()) {
      hash = (37 * hash) + LATERAL_INCLINATION_AND_ACCURACY_FIELD_NUMBER;
      hash = (53 * hash) + getLateralInclinationAndAccuracy().hashCode();
    }
    if (hasHorizontalCurvatureAndAccuracy()) {
      hash = (37 * hash) + HORIZONTAL_CURVATURE_AND_ACCURACY_FIELD_NUMBER;
      hash = (53 * hash) + getHorizontalCurvatureAndAccuracy().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.sensoris.categories.roadattribution.InclinationAndCurvature parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.sensoris.categories.roadattribution.InclinationAndCurvature parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.sensoris.categories.roadattribution.InclinationAndCurvature parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.sensoris.categories.roadattribution.InclinationAndCurvature parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.sensoris.categories.roadattribution.InclinationAndCurvature parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.sensoris.categories.roadattribution.InclinationAndCurvature parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.sensoris.categories.roadattribution.InclinationAndCurvature parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.sensoris.categories.roadattribution.InclinationAndCurvature parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.sensoris.categories.roadattribution.InclinationAndCurvature parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.sensoris.categories.roadattribution.InclinationAndCurvature parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.sensoris.categories.roadattribution.InclinationAndCurvature parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.sensoris.categories.roadattribution.InclinationAndCurvature parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.sensoris.categories.roadattribution.InclinationAndCurvature prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Inclination and curvature.
   * </pre>
   *
   * Protobuf type {@code sensoris.protobuf.categories.roadattribution.InclinationAndCurvature}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
      org.sensoris.categories.roadattribution.InclinationAndCurvatureOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_InclinationAndCurvature_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_InclinationAndCurvature_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.sensoris.categories.roadattribution.InclinationAndCurvature.class, org.sensoris.categories.roadattribution.InclinationAndCurvature.Builder.class);
    }

    // Construct using org.sensoris.categories.roadattribution.InclinationAndCurvature.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (longitudinalInclinationAndAccuracyBuilder_ == null) {
        longitudinalInclinationAndAccuracy_ = null;
      } else {
        longitudinalInclinationAndAccuracy_ = null;
        longitudinalInclinationAndAccuracyBuilder_ = null;
      }
      if (lateralInclinationAndAccuracyBuilder_ == null) {
        lateralInclinationAndAccuracy_ = null;
      } else {
        lateralInclinationAndAccuracy_ = null;
        lateralInclinationAndAccuracyBuilder_ = null;
      }
      if (horizontalCurvatureAndAccuracyBuilder_ == null) {
        horizontalCurvatureAndAccuracy_ = null;
      } else {
        horizontalCurvatureAndAccuracy_ = null;
        horizontalCurvatureAndAccuracyBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_InclinationAndCurvature_descriptor;
    }

    @java.lang.Override
    public org.sensoris.categories.roadattribution.InclinationAndCurvature getDefaultInstanceForType() {
      return org.sensoris.categories.roadattribution.InclinationAndCurvature.getDefaultInstance();
    }

    @java.lang.Override
    public org.sensoris.categories.roadattribution.InclinationAndCurvature build() {
      org.sensoris.categories.roadattribution.InclinationAndCurvature result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.sensoris.categories.roadattribution.InclinationAndCurvature buildPartial() {
      org.sensoris.categories.roadattribution.InclinationAndCurvature result = new org.sensoris.categories.roadattribution.InclinationAndCurvature(this);
      if (longitudinalInclinationAndAccuracyBuilder_ == null) {
        result.longitudinalInclinationAndAccuracy_ = longitudinalInclinationAndAccuracy_;
      } else {
        result.longitudinalInclinationAndAccuracy_ = longitudinalInclinationAndAccuracyBuilder_.build();
      }
      if (lateralInclinationAndAccuracyBuilder_ == null) {
        result.lateralInclinationAndAccuracy_ = lateralInclinationAndAccuracy_;
      } else {
        result.lateralInclinationAndAccuracy_ = lateralInclinationAndAccuracyBuilder_.build();
      }
      if (horizontalCurvatureAndAccuracyBuilder_ == null) {
        result.horizontalCurvatureAndAccuracy_ = horizontalCurvatureAndAccuracy_;
      } else {
        result.horizontalCurvatureAndAccuracy_ = horizontalCurvatureAndAccuracyBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.sensoris.categories.roadattribution.InclinationAndCurvature) {
        return mergeFrom((org.sensoris.categories.roadattribution.InclinationAndCurvature)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.sensoris.categories.roadattribution.InclinationAndCurvature other) {
      if (other == org.sensoris.categories.roadattribution.InclinationAndCurvature.getDefaultInstance()) return this;
      if (other.hasLongitudinalInclinationAndAccuracy()) {
        mergeLongitudinalInclinationAndAccuracy(other.getLongitudinalInclinationAndAccuracy());
      }
      if (other.hasLateralInclinationAndAccuracy()) {
        mergeLateralInclinationAndAccuracy(other.getLateralInclinationAndAccuracy());
      }
      if (other.hasHorizontalCurvatureAndAccuracy()) {
        mergeHorizontalCurvatureAndAccuracy(other.getHorizontalCurvatureAndAccuracy());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.sensoris.categories.roadattribution.InclinationAndCurvature parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.sensoris.categories.roadattribution.InclinationAndCurvature) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private org.sensoris.types.base.Int64ValueAndAccuracy longitudinalInclinationAndAccuracy_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder> longitudinalInclinationAndAccuracyBuilder_;
    /**
     * <pre>
     * Longitudinal declination and accuracy, also referred as slope.
     * &#64;unit Degree
     * &#64;resolution 0.01
     * &#64;range (-90, 90)
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
     */
    public boolean hasLongitudinalInclinationAndAccuracy() {
      return longitudinalInclinationAndAccuracyBuilder_ != null || longitudinalInclinationAndAccuracy_ != null;
    }
    /**
     * <pre>
     * Longitudinal declination and accuracy, also referred as slope.
     * &#64;unit Degree
     * &#64;resolution 0.01
     * &#64;range (-90, 90)
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
     */
    public org.sensoris.types.base.Int64ValueAndAccuracy getLongitudinalInclinationAndAccuracy() {
      if (longitudinalInclinationAndAccuracyBuilder_ == null) {
        return longitudinalInclinationAndAccuracy_ == null ? org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : longitudinalInclinationAndAccuracy_;
      } else {
        return longitudinalInclinationAndAccuracyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Longitudinal declination and accuracy, also referred as slope.
     * &#64;unit Degree
     * &#64;resolution 0.01
     * &#64;range (-90, 90)
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
     */
    public Builder setLongitudinalInclinationAndAccuracy(org.sensoris.types.base.Int64ValueAndAccuracy value) {
      if (longitudinalInclinationAndAccuracyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        longitudinalInclinationAndAccuracy_ = value;
        onChanged();
      } else {
        longitudinalInclinationAndAccuracyBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Longitudinal declination and accuracy, also referred as slope.
     * &#64;unit Degree
     * &#64;resolution 0.01
     * &#64;range (-90, 90)
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
     */
    public Builder setLongitudinalInclinationAndAccuracy(
        org.sensoris.types.base.Int64ValueAndAccuracy.Builder builderForValue) {
      if (longitudinalInclinationAndAccuracyBuilder_ == null) {
        longitudinalInclinationAndAccuracy_ = builderForValue.build();
        onChanged();
      } else {
        longitudinalInclinationAndAccuracyBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Longitudinal declination and accuracy, also referred as slope.
     * &#64;unit Degree
     * &#64;resolution 0.01
     * &#64;range (-90, 90)
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
     */
    public Builder mergeLongitudinalInclinationAndAccuracy(org.sensoris.types.base.Int64ValueAndAccuracy value) {
      if (longitudinalInclinationAndAccuracyBuilder_ == null) {
        if (longitudinalInclinationAndAccuracy_ != null) {
          longitudinalInclinationAndAccuracy_ =
            org.sensoris.types.base.Int64ValueAndAccuracy.newBuilder(longitudinalInclinationAndAccuracy_).mergeFrom(value).buildPartial();
        } else {
          longitudinalInclinationAndAccuracy_ = value;
        }
        onChanged();
      } else {
        longitudinalInclinationAndAccuracyBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Longitudinal declination and accuracy, also referred as slope.
     * &#64;unit Degree
     * &#64;resolution 0.01
     * &#64;range (-90, 90)
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
     */
    public Builder clearLongitudinalInclinationAndAccuracy() {
      if (longitudinalInclinationAndAccuracyBuilder_ == null) {
        longitudinalInclinationAndAccuracy_ = null;
        onChanged();
      } else {
        longitudinalInclinationAndAccuracy_ = null;
        longitudinalInclinationAndAccuracyBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Longitudinal declination and accuracy, also referred as slope.
     * &#64;unit Degree
     * &#64;resolution 0.01
     * &#64;range (-90, 90)
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
     */
    public org.sensoris.types.base.Int64ValueAndAccuracy.Builder getLongitudinalInclinationAndAccuracyBuilder() {
      
      onChanged();
      return getLongitudinalInclinationAndAccuracyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Longitudinal declination and accuracy, also referred as slope.
     * &#64;unit Degree
     * &#64;resolution 0.01
     * &#64;range (-90, 90)
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
     */
    public org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getLongitudinalInclinationAndAccuracyOrBuilder() {
      if (longitudinalInclinationAndAccuracyBuilder_ != null) {
        return longitudinalInclinationAndAccuracyBuilder_.getMessageOrBuilder();
      } else {
        return longitudinalInclinationAndAccuracy_ == null ?
            org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : longitudinalInclinationAndAccuracy_;
      }
    }
    /**
     * <pre>
     * Longitudinal declination and accuracy, also referred as slope.
     * &#64;unit Degree
     * &#64;resolution 0.01
     * &#64;range (-90, 90)
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder> 
        getLongitudinalInclinationAndAccuracyFieldBuilder() {
      if (longitudinalInclinationAndAccuracyBuilder_ == null) {
        longitudinalInclinationAndAccuracyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder>(
                getLongitudinalInclinationAndAccuracy(),
                getParentForChildren(),
                isClean());
        longitudinalInclinationAndAccuracy_ = null;
      }
      return longitudinalInclinationAndAccuracyBuilder_;
    }

    private org.sensoris.types.base.Int64ValueAndAccuracy lateralInclinationAndAccuracy_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder> lateralInclinationAndAccuracyBuilder_;
    /**
     * <pre>
     * Lateral declination and accuracy, also referred as cross fall.
     * &#64;unit Degree
     * &#64;resolution 0.01
     * &#64;range (-90, 90)
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
     */
    public boolean hasLateralInclinationAndAccuracy() {
      return lateralInclinationAndAccuracyBuilder_ != null || lateralInclinationAndAccuracy_ != null;
    }
    /**
     * <pre>
     * Lateral declination and accuracy, also referred as cross fall.
     * &#64;unit Degree
     * &#64;resolution 0.01
     * &#64;range (-90, 90)
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
     */
    public org.sensoris.types.base.Int64ValueAndAccuracy getLateralInclinationAndAccuracy() {
      if (lateralInclinationAndAccuracyBuilder_ == null) {
        return lateralInclinationAndAccuracy_ == null ? org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : lateralInclinationAndAccuracy_;
      } else {
        return lateralInclinationAndAccuracyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Lateral declination and accuracy, also referred as cross fall.
     * &#64;unit Degree
     * &#64;resolution 0.01
     * &#64;range (-90, 90)
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
     */
    public Builder setLateralInclinationAndAccuracy(org.sensoris.types.base.Int64ValueAndAccuracy value) {
      if (lateralInclinationAndAccuracyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        lateralInclinationAndAccuracy_ = value;
        onChanged();
      } else {
        lateralInclinationAndAccuracyBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Lateral declination and accuracy, also referred as cross fall.
     * &#64;unit Degree
     * &#64;resolution 0.01
     * &#64;range (-90, 90)
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
     */
    public Builder setLateralInclinationAndAccuracy(
        org.sensoris.types.base.Int64ValueAndAccuracy.Builder builderForValue) {
      if (lateralInclinationAndAccuracyBuilder_ == null) {
        lateralInclinationAndAccuracy_ = builderForValue.build();
        onChanged();
      } else {
        lateralInclinationAndAccuracyBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Lateral declination and accuracy, also referred as cross fall.
     * &#64;unit Degree
     * &#64;resolution 0.01
     * &#64;range (-90, 90)
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
     */
    public Builder mergeLateralInclinationAndAccuracy(org.sensoris.types.base.Int64ValueAndAccuracy value) {
      if (lateralInclinationAndAccuracyBuilder_ == null) {
        if (lateralInclinationAndAccuracy_ != null) {
          lateralInclinationAndAccuracy_ =
            org.sensoris.types.base.Int64ValueAndAccuracy.newBuilder(lateralInclinationAndAccuracy_).mergeFrom(value).buildPartial();
        } else {
          lateralInclinationAndAccuracy_ = value;
        }
        onChanged();
      } else {
        lateralInclinationAndAccuracyBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Lateral declination and accuracy, also referred as cross fall.
     * &#64;unit Degree
     * &#64;resolution 0.01
     * &#64;range (-90, 90)
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
     */
    public Builder clearLateralInclinationAndAccuracy() {
      if (lateralInclinationAndAccuracyBuilder_ == null) {
        lateralInclinationAndAccuracy_ = null;
        onChanged();
      } else {
        lateralInclinationAndAccuracy_ = null;
        lateralInclinationAndAccuracyBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Lateral declination and accuracy, also referred as cross fall.
     * &#64;unit Degree
     * &#64;resolution 0.01
     * &#64;range (-90, 90)
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
     */
    public org.sensoris.types.base.Int64ValueAndAccuracy.Builder getLateralInclinationAndAccuracyBuilder() {
      
      onChanged();
      return getLateralInclinationAndAccuracyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Lateral declination and accuracy, also referred as cross fall.
     * &#64;unit Degree
     * &#64;resolution 0.01
     * &#64;range (-90, 90)
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
     */
    public org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getLateralInclinationAndAccuracyOrBuilder() {
      if (lateralInclinationAndAccuracyBuilder_ != null) {
        return lateralInclinationAndAccuracyBuilder_.getMessageOrBuilder();
      } else {
        return lateralInclinationAndAccuracy_ == null ?
            org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : lateralInclinationAndAccuracy_;
      }
    }
    /**
     * <pre>
     * Lateral declination and accuracy, also referred as cross fall.
     * &#64;unit Degree
     * &#64;resolution 0.01
     * &#64;range (-90, 90)
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder> 
        getLateralInclinationAndAccuracyFieldBuilder() {
      if (lateralInclinationAndAccuracyBuilder_ == null) {
        lateralInclinationAndAccuracyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder>(
                getLateralInclinationAndAccuracy(),
                getParentForChildren(),
                isClean());
        lateralInclinationAndAccuracy_ = null;
      }
      return lateralInclinationAndAccuracyBuilder_;
    }

    private org.sensoris.types.base.Int64ValueAndAccuracy horizontalCurvatureAndAccuracy_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder> horizontalCurvatureAndAccuracyBuilder_;
    /**
     * <pre>
     * Horizontal curvature and accuracy.
     * Negative value represents curve to the left, positive value represents curve to the right. Value of 0 represents straight road. The value is the reciproke of the radius (curvature = 1/radius) whereas high radii are represented by low values.
     * &#64;unit 1 per KiloMeter
     * &#64;resolution 0.1
     * &#64;range ( , )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];</code>
     */
    public boolean hasHorizontalCurvatureAndAccuracy() {
      return horizontalCurvatureAndAccuracyBuilder_ != null || horizontalCurvatureAndAccuracy_ != null;
    }
    /**
     * <pre>
     * Horizontal curvature and accuracy.
     * Negative value represents curve to the left, positive value represents curve to the right. Value of 0 represents straight road. The value is the reciproke of the radius (curvature = 1/radius) whereas high radii are represented by low values.
     * &#64;unit 1 per KiloMeter
     * &#64;resolution 0.1
     * &#64;range ( , )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];</code>
     */
    public org.sensoris.types.base.Int64ValueAndAccuracy getHorizontalCurvatureAndAccuracy() {
      if (horizontalCurvatureAndAccuracyBuilder_ == null) {
        return horizontalCurvatureAndAccuracy_ == null ? org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : horizontalCurvatureAndAccuracy_;
      } else {
        return horizontalCurvatureAndAccuracyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Horizontal curvature and accuracy.
     * Negative value represents curve to the left, positive value represents curve to the right. Value of 0 represents straight road. The value is the reciproke of the radius (curvature = 1/radius) whereas high radii are represented by low values.
     * &#64;unit 1 per KiloMeter
     * &#64;resolution 0.1
     * &#64;range ( , )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];</code>
     */
    public Builder setHorizontalCurvatureAndAccuracy(org.sensoris.types.base.Int64ValueAndAccuracy value) {
      if (horizontalCurvatureAndAccuracyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        horizontalCurvatureAndAccuracy_ = value;
        onChanged();
      } else {
        horizontalCurvatureAndAccuracyBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Horizontal curvature and accuracy.
     * Negative value represents curve to the left, positive value represents curve to the right. Value of 0 represents straight road. The value is the reciproke of the radius (curvature = 1/radius) whereas high radii are represented by low values.
     * &#64;unit 1 per KiloMeter
     * &#64;resolution 0.1
     * &#64;range ( , )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];</code>
     */
    public Builder setHorizontalCurvatureAndAccuracy(
        org.sensoris.types.base.Int64ValueAndAccuracy.Builder builderForValue) {
      if (horizontalCurvatureAndAccuracyBuilder_ == null) {
        horizontalCurvatureAndAccuracy_ = builderForValue.build();
        onChanged();
      } else {
        horizontalCurvatureAndAccuracyBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Horizontal curvature and accuracy.
     * Negative value represents curve to the left, positive value represents curve to the right. Value of 0 represents straight road. The value is the reciproke of the radius (curvature = 1/radius) whereas high radii are represented by low values.
     * &#64;unit 1 per KiloMeter
     * &#64;resolution 0.1
     * &#64;range ( , )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];</code>
     */
    public Builder mergeHorizontalCurvatureAndAccuracy(org.sensoris.types.base.Int64ValueAndAccuracy value) {
      if (horizontalCurvatureAndAccuracyBuilder_ == null) {
        if (horizontalCurvatureAndAccuracy_ != null) {
          horizontalCurvatureAndAccuracy_ =
            org.sensoris.types.base.Int64ValueAndAccuracy.newBuilder(horizontalCurvatureAndAccuracy_).mergeFrom(value).buildPartial();
        } else {
          horizontalCurvatureAndAccuracy_ = value;
        }
        onChanged();
      } else {
        horizontalCurvatureAndAccuracyBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Horizontal curvature and accuracy.
     * Negative value represents curve to the left, positive value represents curve to the right. Value of 0 represents straight road. The value is the reciproke of the radius (curvature = 1/radius) whereas high radii are represented by low values.
     * &#64;unit 1 per KiloMeter
     * &#64;resolution 0.1
     * &#64;range ( , )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];</code>
     */
    public Builder clearHorizontalCurvatureAndAccuracy() {
      if (horizontalCurvatureAndAccuracyBuilder_ == null) {
        horizontalCurvatureAndAccuracy_ = null;
        onChanged();
      } else {
        horizontalCurvatureAndAccuracy_ = null;
        horizontalCurvatureAndAccuracyBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Horizontal curvature and accuracy.
     * Negative value represents curve to the left, positive value represents curve to the right. Value of 0 represents straight road. The value is the reciproke of the radius (curvature = 1/radius) whereas high radii are represented by low values.
     * &#64;unit 1 per KiloMeter
     * &#64;resolution 0.1
     * &#64;range ( , )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];</code>
     */
    public org.sensoris.types.base.Int64ValueAndAccuracy.Builder getHorizontalCurvatureAndAccuracyBuilder() {
      
      onChanged();
      return getHorizontalCurvatureAndAccuracyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Horizontal curvature and accuracy.
     * Negative value represents curve to the left, positive value represents curve to the right. Value of 0 represents straight road. The value is the reciproke of the radius (curvature = 1/radius) whereas high radii are represented by low values.
     * &#64;unit 1 per KiloMeter
     * &#64;resolution 0.1
     * &#64;range ( , )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];</code>
     */
    public org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getHorizontalCurvatureAndAccuracyOrBuilder() {
      if (horizontalCurvatureAndAccuracyBuilder_ != null) {
        return horizontalCurvatureAndAccuracyBuilder_.getMessageOrBuilder();
      } else {
        return horizontalCurvatureAndAccuracy_ == null ?
            org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : horizontalCurvatureAndAccuracy_;
      }
    }
    /**
     * <pre>
     * Horizontal curvature and accuracy.
     * Negative value represents curve to the left, positive value represents curve to the right. Value of 0 represents straight road. The value is the reciproke of the radius (curvature = 1/radius) whereas high radii are represented by low values.
     * &#64;unit 1 per KiloMeter
     * &#64;resolution 0.1
     * &#64;range ( , )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder> 
        getHorizontalCurvatureAndAccuracyFieldBuilder() {
      if (horizontalCurvatureAndAccuracyBuilder_ == null) {
        horizontalCurvatureAndAccuracyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder>(
                getHorizontalCurvatureAndAccuracy(),
                getParentForChildren(),
                isClean());
        horizontalCurvatureAndAccuracy_ = null;
      }
      return horizontalCurvatureAndAccuracyBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  }

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  private static final org.sensoris.categories.roadattribution.InclinationAndCurvature DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.sensoris.categories.roadattribution.InclinationAndCurvature();
  }

  public static org.sensoris.categories.roadattribution.InclinationAndCurvature getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<InclinationAndCurvature>
      PARSER = new com.google.protobuf.AbstractParser<InclinationAndCurvature>() {
    @java.lang.Override
    public InclinationAndCurvature parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new InclinationAndCurvature(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<InclinationAndCurvature> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<InclinationAndCurvature> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.sensoris.categories.roadattribution.InclinationAndCurvature getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

