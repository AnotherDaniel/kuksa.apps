// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/road_attribution.proto

package org.sensoris.categories.roadattribution;

/**
 * <pre>
 * Lane boundary.
 * For a single lane several lane boundaries to the left or right may be given. If a lane has several lane boundaries in one direction, then the lane boundaries shall be sorted by their distance to the lane.
 * &#64;relation 1..* sensoris.protobuf.categories.roadattribution.LaneBoundary LEFT_OF 1 sensoris.protobuf.categories.roadattribution.Lane
 * &#64;relation 1..* sensoris.protobuf.categories.roadattribution.LaneBoundary RIGHT_OF 1 sensoris.protobuf.categories.roadattribution.Lane
 * &#64;relation 1 sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit DERIVED_FROM 2..* sensoris.protobuf.categories.roadattribution.LaneBoundary
 * &#64;example L1 Lane R1 R2
 * Lane with lane boundary L1 to the left of type LINE_SINGLE_SOLID and lane boundaries R1 and R2 to the right with R1 of type LINE_SINGLE_SOLID and R2 of type ROAD_EDGE.
 * </pre>
 *
 * Protobuf type {@code sensoris.protobuf.categories.roadattribution.LaneBoundary}
 */
public  final class LaneBoundary extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:sensoris.protobuf.categories.roadattribution.LaneBoundary)
    LaneBoundaryOrBuilder {
private static final long serialVersionUID = 0L;
  // Use LaneBoundary.newBuilder() to construct.
  private LaneBoundary(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private LaneBoundary() {
    positionReference_ = 0;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private LaneBoundary(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            org.sensoris.types.base.EventEnvelope.Builder subBuilder = null;
            if (envelope_ != null) {
              subBuilder = envelope_.toBuilder();
            }
            envelope_ = input.readMessage(org.sensoris.types.base.EventEnvelope.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(envelope_);
              envelope_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.google.protobuf.Int64Value.Builder subBuilder = null;
            if (laneBoundaryId_ != null) {
              subBuilder = laneBoundaryId_.toBuilder();
            }
            laneBoundaryId_ = input.readMessage(com.google.protobuf.Int64Value.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(laneBoundaryId_);
              laneBoundaryId_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            org.sensoris.types.base.Confidence.Builder subBuilder = null;
            if (existenceConfidence_ != null) {
              subBuilder = existenceConfidence_.toBuilder();
            }
            existenceConfidence_ = input.readMessage(org.sensoris.types.base.Confidence.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(existenceConfidence_);
              existenceConfidence_ = subBuilder.buildPartial();
            }

            break;
          }
          case 34: {
            org.sensoris.types.base.EventDetectionStatus.Builder subBuilder = null;
            if (detectionStatus_ != null) {
              subBuilder = detectionStatus_.toBuilder();
            }
            detectionStatus_ = input.readMessage(org.sensoris.types.base.EventDetectionStatus.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(detectionStatus_);
              detectionStatus_ = subBuilder.buildPartial();
            }

            break;
          }
          case 42: {
            org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.Builder subBuilder = null;
            if (typeAndConfidence_ != null) {
              subBuilder = typeAndConfidence_.toBuilder();
            }
            typeAndConfidence_ = input.readMessage(org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(typeAndConfidence_);
              typeAndConfidence_ = subBuilder.buildPartial();
            }

            break;
          }
          case 50: {
            org.sensoris.categories.roadattribution.MarkingMaterialAndConfidence.Builder subBuilder = null;
            if (materialAndConfidence_ != null) {
              subBuilder = materialAndConfidence_.toBuilder();
            }
            materialAndConfidence_ = input.readMessage(org.sensoris.categories.roadattribution.MarkingMaterialAndConfidence.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(materialAndConfidence_);
              materialAndConfidence_ = subBuilder.buildPartial();
            }

            break;
          }
          case 58: {
            org.sensoris.categories.roadattribution.MarkingColorAndConfidence.Builder subBuilder = null;
            if (colorAndConfidence_ != null) {
              subBuilder = colorAndConfidence_.toBuilder();
            }
            colorAndConfidence_ = input.readMessage(org.sensoris.categories.roadattribution.MarkingColorAndConfidence.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(colorAndConfidence_);
              colorAndConfidence_ = subBuilder.buildPartial();
            }

            break;
          }
          case 64: {
            int rawValue = input.readEnum();

            positionReference_ = rawValue;
            break;
          }
          case 74: {
            org.sensoris.types.spatial.PolylineAndAccuracy.Builder subBuilder = null;
            if (geometryCase_ == 9) {
              subBuilder = ((org.sensoris.types.spatial.PolylineAndAccuracy) geometry_).toBuilder();
            }
            geometry_ =
                input.readMessage(org.sensoris.types.spatial.PolylineAndAccuracy.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.sensoris.types.spatial.PolylineAndAccuracy) geometry_);
              geometry_ = subBuilder.buildPartial();
            }
            geometryCase_ = 9;
            break;
          }
          case 82: {
            org.sensoris.types.base.Int64ValueAndAccuracy.Builder subBuilder = null;
            if (widthAndAccuracy_ != null) {
              subBuilder = widthAndAccuracy_.toBuilder();
            }
            widthAndAccuracy_ = input.readMessage(org.sensoris.types.base.Int64ValueAndAccuracy.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(widthAndAccuracy_);
              widthAndAccuracy_ = subBuilder.buildPartial();
            }

            break;
          }
          case 90: {
            org.sensoris.types.base.Int64ValueAndAccuracy.Builder subBuilder = null;
            if (heightAndAccuracy_ != null) {
              subBuilder = heightAndAccuracy_.toBuilder();
            }
            heightAndAccuracy_ = input.readMessage(org.sensoris.types.base.Int64ValueAndAccuracy.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(heightAndAccuracy_);
              heightAndAccuracy_ = subBuilder.buildPartial();
            }

            break;
          }
          case 98: {
            org.sensoris.types.base.Int64ValueAndAccuracy.Builder subBuilder = null;
            if (distanceBetweenDoubleAndAccuracy_ != null) {
              subBuilder = distanceBetweenDoubleAndAccuracy_.toBuilder();
            }
            distanceBetweenDoubleAndAccuracy_ = input.readMessage(org.sensoris.types.base.Int64ValueAndAccuracy.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(distanceBetweenDoubleAndAccuracy_);
              distanceBetweenDoubleAndAccuracy_ = subBuilder.buildPartial();
            }

            break;
          }
          case 106: {
            org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics.Builder subBuilder = null;
            if (markingsCase_ == 13) {
              subBuilder = ((org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics) markings_).toBuilder();
            }
            markings_ =
                input.readMessage(org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics) markings_);
              markings_ = subBuilder.buildPartial();
            }
            markingsCase_ = 13;
            break;
          }
          case 114: {
            org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.Builder subBuilder = null;
            if (markingsCase_ == 14) {
              subBuilder = ((org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets) markings_).toBuilder();
            }
            markings_ =
                input.readMessage(org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets) markings_);
              markings_ = subBuilder.buildPartial();
            }
            markingsCase_ = 14;
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.sensoris.categories.roadattribution.LaneBoundary.class, org.sensoris.categories.roadattribution.LaneBoundary.Builder.class);
  }

  /**
   * <pre>
   * Position reference of lane boundary marking geometry, i.e. polyline_and_accuracy represents left boundary, center line or right boundary of the lane boundary markings.
   * Whereas for e.g. lines all values may be used, for physical barriers the geometry shall represent the boundary closest to the vehicle.
   * </pre>
   *
   * Protobuf enum {@code sensoris.protobuf.categories.roadattribution.LaneBoundary.PositionReference}
   */
  public enum PositionReference
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Unknown.
     * </pre>
     *
     * <code>UNKNOWN_POSITION_REFERENCE = 0;</code>
     */
    UNKNOWN_POSITION_REFERENCE(0),
    /**
     * <pre>
     * Left marking boundary.
     * </pre>
     *
     * <code>LEFT_MARKING_BOUNDARY = 1;</code>
     */
    LEFT_MARKING_BOUNDARY(1),
    /**
     * <pre>
     * Center line.
     * </pre>
     *
     * <code>CENTER_LINE = 2;</code>
     */
    CENTER_LINE(2),
    /**
     * <pre>
     * Right marking boundary.
     * </pre>
     *
     * <code>RIGHT_MARKING_BOUNDARY = 3;</code>
     */
    RIGHT_MARKING_BOUNDARY(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Unknown.
     * </pre>
     *
     * <code>UNKNOWN_POSITION_REFERENCE = 0;</code>
     */
    public static final int UNKNOWN_POSITION_REFERENCE_VALUE = 0;
    /**
     * <pre>
     * Left marking boundary.
     * </pre>
     *
     * <code>LEFT_MARKING_BOUNDARY = 1;</code>
     */
    public static final int LEFT_MARKING_BOUNDARY_VALUE = 1;
    /**
     * <pre>
     * Center line.
     * </pre>
     *
     * <code>CENTER_LINE = 2;</code>
     */
    public static final int CENTER_LINE_VALUE = 2;
    /**
     * <pre>
     * Right marking boundary.
     * </pre>
     *
     * <code>RIGHT_MARKING_BOUNDARY = 3;</code>
     */
    public static final int RIGHT_MARKING_BOUNDARY_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PositionReference valueOf(int value) {
      return forNumber(value);
    }

    public static PositionReference forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_POSITION_REFERENCE;
        case 1: return LEFT_MARKING_BOUNDARY;
        case 2: return CENTER_LINE;
        case 3: return RIGHT_MARKING_BOUNDARY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PositionReference>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PositionReference> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PositionReference>() {
            public PositionReference findValueByNumber(int number) {
              return PositionReference.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.sensoris.categories.roadattribution.LaneBoundary.getDescriptor().getEnumTypes().get(0);
    }

    private static final PositionReference[] VALUES = values();

    public static PositionReference valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PositionReference(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:sensoris.protobuf.categories.roadattribution.LaneBoundary.PositionReference)
  }

  public interface TypeAndConfidenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type type = 1;</code>
     */
    int getTypeValue();
    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type type = 1;</code>
     */
    org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type getType();

    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     */
    boolean hasConfidence();
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     */
    org.sensoris.types.base.Confidence getConfidence();
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     */
    org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder();
  }
  /**
   * <pre>
   * Type and confidence.
   * </pre>
   *
   * Protobuf type {@code sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence}
   */
  public  static final class TypeAndConfidence extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
      TypeAndConfidenceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TypeAndConfidence.newBuilder() to construct.
    private TypeAndConfidence(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TypeAndConfidence() {
      type_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TypeAndConfidence(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();

              type_ = rawValue;
              break;
            }
            case 18: {
              org.sensoris.types.base.Confidence.Builder subBuilder = null;
              if (confidence_ != null) {
                subBuilder = confidence_.toBuilder();
              }
              confidence_ = input.readMessage(org.sensoris.types.base.Confidence.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(confidence_);
                confidence_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_TypeAndConfidence_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_TypeAndConfidence_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.class, org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.Builder.class);
    }

    /**
     * <pre>
     * Type.
     * </pre>
     *
     * Protobuf enum {@code sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Unknown.
       * </pre>
       *
       * <code>UNKNOWN_TYPE = 0;</code>
       */
      UNKNOWN_TYPE(0),
      /**
       * <pre>
       * Any line.
       * </pre>
       *
       * <code>LINE = 1;</code>
       */
      LINE(1),
      /**
       * <pre>
       * Any single line.
       * </pre>
       *
       * <code>LINE_SINGLE = 2;</code>
       */
      LINE_SINGLE(2),
      /**
       * <pre>
       * Single solid line.
       * </pre>
       *
       * <code>LINE_SINGLE_SOLID = 3;</code>
       */
      LINE_SINGLE_SOLID(3),
      /**
       * <pre>
       * Any single dashed line.
       * </pre>
       *
       * <code>LINE_SINGLE_DASHED = 4;</code>
       */
      LINE_SINGLE_DASHED(4),
      /**
       * <pre>
       * Single dashed line with short dashes.
       * </pre>
       *
       * <code>LINE_SINGLE_DASHED_SHORT = 5;</code>
       */
      LINE_SINGLE_DASHED_SHORT(5),
      /**
       * <pre>
       * Single dashed line with long dashes.
       * </pre>
       *
       * <code>LINE_SINGLE_DASHED_LONG = 6;</code>
       */
      LINE_SINGLE_DASHED_LONG(6),
      /**
       * <pre>
       * Any double line.
       * </pre>
       *
       * <code>LINE_DOUBLE = 7;</code>
       */
      LINE_DOUBLE(7),
      /**
       * <pre>
       * Double line composed of two solid lines.
       * </pre>
       *
       * <code>LINE_DOUBLE_SOLID = 8;</code>
       */
      LINE_DOUBLE_SOLID(8),
      /**
       * <pre>
       * Double line composed of two dashed lines.
       * </pre>
       *
       * <code>LINE_DOUBLE_DASHED = 9;</code>
       */
      LINE_DOUBLE_DASHED(9),
      /**
       * <pre>
       * Double line composed of solid left line and dashed right line in direction of lane boundary geometry.
       * </pre>
       *
       * <code>LINE_DOUBLE_SOLID_DASHED = 10;</code>
       */
      LINE_DOUBLE_SOLID_DASHED(10),
      /**
       * <pre>
       * Double line composed of dashed left line and solid right line in direction of lane boundary geometry.
       * </pre>
       *
       * <code>LINE_DOUBLE_DASHED_SOLID = 11;</code>
       */
      LINE_DOUBLE_DASHED_SOLID(11),
      /**
       * <pre>
       * Single marking inside of shaded area.
       * </pre>
       *
       * <code>SHADED_AREA_MARKING = 12;</code>
       */
      SHADED_AREA_MARKING(12),
      /**
       * <pre>
       * Dashed blocks.
       * </pre>
       *
       * <code>BLOCKS_DASHED = 13;</code>
       */
      BLOCKS_DASHED(13),
      /**
       * <pre>
       * Crossing alert.
       * </pre>
       *
       * <code>CROSSING_ALERT = 14;</code>
       */
      CROSSING_ALERT(14),
      /**
       * <pre>
       * Any curb.
       * </pre>
       *
       * <code>CURB = 15;</code>
       */
      CURB(15),
      /**
       * <pre>
       * Traversable curb, i.e. vehicle is allowed to cross traversable curbs in normal traffic situations.
       * </pre>
       *
       * <code>CURB_TRAVERSABLE = 16;</code>
       */
      CURB_TRAVERSABLE(16),
      /**
       * <pre>
       * Non-traversable curb.
       * </pre>
       *
       * <code>CURB_NON_TRAVERSABLE = 17;</code>
       */
      CURB_NON_TRAVERSABLE(17),
      /**
       * <pre>
       * Any physical divider.
       * </pre>
       *
       * <code>PHYSICAL_DIVIDER = 18;</code>
       */
      PHYSICAL_DIVIDER(18),
      /**
       * <pre>
       * Any wall.
       * </pre>
       *
       * <code>WALL = 19;</code>
       */
      WALL(19),
      /**
       * <pre>
       * Flat wall.
       * </pre>
       *
       * <code>WALL_FLAT = 20;</code>
       */
      WALL_FLAT(20),
      /**
       * <pre>
       * Curved wall, e.g. wall of a tunnel.
       * </pre>
       *
       * <code>WALL_CURVED = 21;</code>
       */
      WALL_CURVED(21),
      /**
       * <pre>
       * Any barrier.
       * </pre>
       *
       * <code>BARRIER = 22;</code>
       */
      BARRIER(22),
      /**
       * <pre>
       * Jersey barrier.
       * </pre>
       *
       * <code>BARRIER_JERSEY = 23;</code>
       */
      BARRIER_JERSEY(23),
      /**
       * <pre>
       * Sound barrier.
       * </pre>
       *
       * <code>BARRIER_SOUND = 24;</code>
       */
      BARRIER_SOUND(24),
      /**
       * <pre>
       * Cable barrier.
       * </pre>
       *
       * <code>BARRIER_CABLE = 25;</code>
       */
      BARRIER_CABLE(25),
      /**
       * <pre>
       * Guardrail.
       * </pre>
       *
       * <code>GUARDRAIL = 26;</code>
       */
      GUARDRAIL(26),
      /**
       * <pre>
       * Fence.
       * </pre>
       *
       * <code>FENCE = 27;</code>
       */
      FENCE(27),
      /**
       * <pre>
       * Edge of road pavement.
       * </pre>
       *
       * <code>ROAD_EDGE = 28;</code>
       */
      ROAD_EDGE(28),
      /**
       * <pre>
       * Cliff.
       * </pre>
       *
       * <code>CLIFF = 29;</code>
       */
      CLIFF(29),
      /**
       * <pre>
       * Ditch.
       * </pre>
       *
       * <code>DITCH = 30;</code>
       */
      DITCH(30),
      /**
       * <pre>
       * Asphalt joint.
       * </pre>
       *
       * <code>ASPHALT_JOINT = 31;</code>
       */
      ASPHALT_JOINT(31),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * Unknown.
       * </pre>
       *
       * <code>UNKNOWN_TYPE = 0;</code>
       */
      public static final int UNKNOWN_TYPE_VALUE = 0;
      /**
       * <pre>
       * Any line.
       * </pre>
       *
       * <code>LINE = 1;</code>
       */
      public static final int LINE_VALUE = 1;
      /**
       * <pre>
       * Any single line.
       * </pre>
       *
       * <code>LINE_SINGLE = 2;</code>
       */
      public static final int LINE_SINGLE_VALUE = 2;
      /**
       * <pre>
       * Single solid line.
       * </pre>
       *
       * <code>LINE_SINGLE_SOLID = 3;</code>
       */
      public static final int LINE_SINGLE_SOLID_VALUE = 3;
      /**
       * <pre>
       * Any single dashed line.
       * </pre>
       *
       * <code>LINE_SINGLE_DASHED = 4;</code>
       */
      public static final int LINE_SINGLE_DASHED_VALUE = 4;
      /**
       * <pre>
       * Single dashed line with short dashes.
       * </pre>
       *
       * <code>LINE_SINGLE_DASHED_SHORT = 5;</code>
       */
      public static final int LINE_SINGLE_DASHED_SHORT_VALUE = 5;
      /**
       * <pre>
       * Single dashed line with long dashes.
       * </pre>
       *
       * <code>LINE_SINGLE_DASHED_LONG = 6;</code>
       */
      public static final int LINE_SINGLE_DASHED_LONG_VALUE = 6;
      /**
       * <pre>
       * Any double line.
       * </pre>
       *
       * <code>LINE_DOUBLE = 7;</code>
       */
      public static final int LINE_DOUBLE_VALUE = 7;
      /**
       * <pre>
       * Double line composed of two solid lines.
       * </pre>
       *
       * <code>LINE_DOUBLE_SOLID = 8;</code>
       */
      public static final int LINE_DOUBLE_SOLID_VALUE = 8;
      /**
       * <pre>
       * Double line composed of two dashed lines.
       * </pre>
       *
       * <code>LINE_DOUBLE_DASHED = 9;</code>
       */
      public static final int LINE_DOUBLE_DASHED_VALUE = 9;
      /**
       * <pre>
       * Double line composed of solid left line and dashed right line in direction of lane boundary geometry.
       * </pre>
       *
       * <code>LINE_DOUBLE_SOLID_DASHED = 10;</code>
       */
      public static final int LINE_DOUBLE_SOLID_DASHED_VALUE = 10;
      /**
       * <pre>
       * Double line composed of dashed left line and solid right line in direction of lane boundary geometry.
       * </pre>
       *
       * <code>LINE_DOUBLE_DASHED_SOLID = 11;</code>
       */
      public static final int LINE_DOUBLE_DASHED_SOLID_VALUE = 11;
      /**
       * <pre>
       * Single marking inside of shaded area.
       * </pre>
       *
       * <code>SHADED_AREA_MARKING = 12;</code>
       */
      public static final int SHADED_AREA_MARKING_VALUE = 12;
      /**
       * <pre>
       * Dashed blocks.
       * </pre>
       *
       * <code>BLOCKS_DASHED = 13;</code>
       */
      public static final int BLOCKS_DASHED_VALUE = 13;
      /**
       * <pre>
       * Crossing alert.
       * </pre>
       *
       * <code>CROSSING_ALERT = 14;</code>
       */
      public static final int CROSSING_ALERT_VALUE = 14;
      /**
       * <pre>
       * Any curb.
       * </pre>
       *
       * <code>CURB = 15;</code>
       */
      public static final int CURB_VALUE = 15;
      /**
       * <pre>
       * Traversable curb, i.e. vehicle is allowed to cross traversable curbs in normal traffic situations.
       * </pre>
       *
       * <code>CURB_TRAVERSABLE = 16;</code>
       */
      public static final int CURB_TRAVERSABLE_VALUE = 16;
      /**
       * <pre>
       * Non-traversable curb.
       * </pre>
       *
       * <code>CURB_NON_TRAVERSABLE = 17;</code>
       */
      public static final int CURB_NON_TRAVERSABLE_VALUE = 17;
      /**
       * <pre>
       * Any physical divider.
       * </pre>
       *
       * <code>PHYSICAL_DIVIDER = 18;</code>
       */
      public static final int PHYSICAL_DIVIDER_VALUE = 18;
      /**
       * <pre>
       * Any wall.
       * </pre>
       *
       * <code>WALL = 19;</code>
       */
      public static final int WALL_VALUE = 19;
      /**
       * <pre>
       * Flat wall.
       * </pre>
       *
       * <code>WALL_FLAT = 20;</code>
       */
      public static final int WALL_FLAT_VALUE = 20;
      /**
       * <pre>
       * Curved wall, e.g. wall of a tunnel.
       * </pre>
       *
       * <code>WALL_CURVED = 21;</code>
       */
      public static final int WALL_CURVED_VALUE = 21;
      /**
       * <pre>
       * Any barrier.
       * </pre>
       *
       * <code>BARRIER = 22;</code>
       */
      public static final int BARRIER_VALUE = 22;
      /**
       * <pre>
       * Jersey barrier.
       * </pre>
       *
       * <code>BARRIER_JERSEY = 23;</code>
       */
      public static final int BARRIER_JERSEY_VALUE = 23;
      /**
       * <pre>
       * Sound barrier.
       * </pre>
       *
       * <code>BARRIER_SOUND = 24;</code>
       */
      public static final int BARRIER_SOUND_VALUE = 24;
      /**
       * <pre>
       * Cable barrier.
       * </pre>
       *
       * <code>BARRIER_CABLE = 25;</code>
       */
      public static final int BARRIER_CABLE_VALUE = 25;
      /**
       * <pre>
       * Guardrail.
       * </pre>
       *
       * <code>GUARDRAIL = 26;</code>
       */
      public static final int GUARDRAIL_VALUE = 26;
      /**
       * <pre>
       * Fence.
       * </pre>
       *
       * <code>FENCE = 27;</code>
       */
      public static final int FENCE_VALUE = 27;
      /**
       * <pre>
       * Edge of road pavement.
       * </pre>
       *
       * <code>ROAD_EDGE = 28;</code>
       */
      public static final int ROAD_EDGE_VALUE = 28;
      /**
       * <pre>
       * Cliff.
       * </pre>
       *
       * <code>CLIFF = 29;</code>
       */
      public static final int CLIFF_VALUE = 29;
      /**
       * <pre>
       * Ditch.
       * </pre>
       *
       * <code>DITCH = 30;</code>
       */
      public static final int DITCH_VALUE = 30;
      /**
       * <pre>
       * Asphalt joint.
       * </pre>
       *
       * <code>ASPHALT_JOINT = 31;</code>
       */
      public static final int ASPHALT_JOINT_VALUE = 31;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      public static Type forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWN_TYPE;
          case 1: return LINE;
          case 2: return LINE_SINGLE;
          case 3: return LINE_SINGLE_SOLID;
          case 4: return LINE_SINGLE_DASHED;
          case 5: return LINE_SINGLE_DASHED_SHORT;
          case 6: return LINE_SINGLE_DASHED_LONG;
          case 7: return LINE_DOUBLE;
          case 8: return LINE_DOUBLE_SOLID;
          case 9: return LINE_DOUBLE_DASHED;
          case 10: return LINE_DOUBLE_SOLID_DASHED;
          case 11: return LINE_DOUBLE_DASHED_SOLID;
          case 12: return SHADED_AREA_MARKING;
          case 13: return BLOCKS_DASHED;
          case 14: return CROSSING_ALERT;
          case 15: return CURB;
          case 16: return CURB_TRAVERSABLE;
          case 17: return CURB_NON_TRAVERSABLE;
          case 18: return PHYSICAL_DIVIDER;
          case 19: return WALL;
          case 20: return WALL_FLAT;
          case 21: return WALL_CURVED;
          case 22: return BARRIER;
          case 23: return BARRIER_JERSEY;
          case 24: return BARRIER_SOUND;
          case 25: return BARRIER_CABLE;
          case 26: return GUARDRAIL;
          case 27: return FENCE;
          case 28: return ROAD_EDGE;
          case 29: return CLIFF;
          case 30: return DITCH;
          case 31: return ASPHALT_JOINT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type)
    }

    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type type = 1;</code>
     */
    public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * Type.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type type = 1;</code>
     */
    public org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type getType() {
      org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type result = org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type.valueOf(type_);
      return result == null ? org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type.UNRECOGNIZED : result;
    }

    public static final int CONFIDENCE_FIELD_NUMBER = 2;
    private org.sensoris.types.base.Confidence confidence_;
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     */
    public boolean hasConfidence() {
      return confidence_ != null;
    }
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     */
    public org.sensoris.types.base.Confidence getConfidence() {
      return confidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
    }
    /**
     * <pre>
     * Confidence of type.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
     */
    public org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder() {
      return getConfidence();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type.UNKNOWN_TYPE.getNumber()) {
        output.writeEnum(1, type_);
      }
      if (confidence_ != null) {
        output.writeMessage(2, getConfidence());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type.UNKNOWN_TYPE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (confidence_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getConfidence());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence)) {
        return super.equals(obj);
      }
      org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence other = (org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence) obj;

      boolean result = true;
      result = result && type_ == other.type_;
      result = result && (hasConfidence() == other.hasConfidence());
      if (hasConfidence()) {
        result = result && getConfidence()
            .equals(other.getConfidence());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      if (hasConfidence()) {
        hash = (37 * hash) + CONFIDENCE_FIELD_NUMBER;
        hash = (53 * hash) + getConfidence().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Type and confidence.
     * </pre>
     *
     * Protobuf type {@code sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
        org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidenceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_TypeAndConfidence_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_TypeAndConfidence_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.class, org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.Builder.class);
      }

      // Construct using org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        type_ = 0;

        if (confidenceBuilder_ == null) {
          confidence_ = null;
        } else {
          confidence_ = null;
          confidenceBuilder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_TypeAndConfidence_descriptor;
      }

      public org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence getDefaultInstanceForType() {
        return org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.getDefaultInstance();
      }

      public org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence build() {
        org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence buildPartial() {
        org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence result = new org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence(this);
        result.type_ = type_;
        if (confidenceBuilder_ == null) {
          result.confidence_ = confidence_;
        } else {
          result.confidence_ = confidenceBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence) {
          return mergeFrom((org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence other) {
        if (other == org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.getDefaultInstance()) return this;
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (other.hasConfidence()) {
          mergeConfidence(other.getConfidence());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int type_ = 0;
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type type = 1;</code>
       */
      public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type type = 1;</code>
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type type = 1;</code>
       */
      public org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type getType() {
        org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type result = org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type.valueOf(type_);
        return result == null ? org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type type = 1;</code>
       */
      public Builder setType(org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type type = 1;</code>
       */
      public Builder clearType() {
        
        type_ = 0;
        onChanged();
        return this;
      }

      private org.sensoris.types.base.Confidence confidence_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder> confidenceBuilder_;
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public boolean hasConfidence() {
        return confidenceBuilder_ != null || confidence_ != null;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public org.sensoris.types.base.Confidence getConfidence() {
        if (confidenceBuilder_ == null) {
          return confidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
        } else {
          return confidenceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder setConfidence(org.sensoris.types.base.Confidence value) {
        if (confidenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          confidence_ = value;
          onChanged();
        } else {
          confidenceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder setConfidence(
          org.sensoris.types.base.Confidence.Builder builderForValue) {
        if (confidenceBuilder_ == null) {
          confidence_ = builderForValue.build();
          onChanged();
        } else {
          confidenceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder mergeConfidence(org.sensoris.types.base.Confidence value) {
        if (confidenceBuilder_ == null) {
          if (confidence_ != null) {
            confidence_ =
              org.sensoris.types.base.Confidence.newBuilder(confidence_).mergeFrom(value).buildPartial();
          } else {
            confidence_ = value;
          }
          onChanged();
        } else {
          confidenceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public Builder clearConfidence() {
        if (confidenceBuilder_ == null) {
          confidence_ = null;
          onChanged();
        } else {
          confidence_ = null;
          confidenceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public org.sensoris.types.base.Confidence.Builder getConfidenceBuilder() {
        
        onChanged();
        return getConfidenceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      public org.sensoris.types.base.ConfidenceOrBuilder getConfidenceOrBuilder() {
        if (confidenceBuilder_ != null) {
          return confidenceBuilder_.getMessageOrBuilder();
        } else {
          return confidence_ == null ?
              org.sensoris.types.base.Confidence.getDefaultInstance() : confidence_;
        }
      }
      /**
       * <pre>
       * Confidence of type.
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Confidence confidence = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder> 
          getConfidenceFieldBuilder() {
        if (confidenceBuilder_ == null) {
          confidenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder>(
                  getConfidence(),
                  getParentForChildren(),
                  isClean());
          confidence_ = null;
        }
        return confidenceBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
    }

    // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
    private static final org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence();
    }

    public static org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TypeAndConfidence>
        PARSER = new com.google.protobuf.AbstractParser<TypeAndConfidence>() {
      public TypeAndConfidence parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TypeAndConfidence(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TypeAndConfidence> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TypeAndConfidence> getParserForType() {
      return PARSER;
    }

    public org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DashStatisticsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Length of single lane dash.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    boolean hasLengthAndAccuracy();
    /**
     * <pre>
     * Length of single lane dash.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    org.sensoris.types.base.Int64ValueAndAccuracy getLengthAndAccuracy();
    /**
     * <pre>
     * Length of single lane dash.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getLengthAndAccuracyOrBuilder();

    /**
     * <pre>
     * Distance between single lane dashes.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    boolean hasDistanceAndAccuracy();
    /**
     * <pre>
     * Distance between single lane dashes.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    org.sensoris.types.base.Int64ValueAndAccuracy getDistanceAndAccuracy();
    /**
     * <pre>
     * Distance between single lane dashes.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getDistanceAndAccuracyOrBuilder();
  }
  /**
   * <pre>
   * Statistics of length of single lane dashes and distance between single dashes on lane boundary geometry.
   * Only applicable for lane boundaries of type LINE_SINGLE_DASHED, LINE_SINGLE_DASHED_SHORT, LINE_SINGLE_DASHED_LONG, LINE_DOUBLE_DASHED, LINE_DOUBLE_SOLID_DASHED, LINE_DOUBLE_DASHED_SOLID and BLOCKS_DASHED.
   * </pre>
   *
   * Protobuf type {@code sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics}
   */
  public  static final class DashStatistics extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
      DashStatisticsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DashStatistics.newBuilder() to construct.
    private DashStatistics(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DashStatistics() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DashStatistics(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 18: {
              org.sensoris.types.base.Int64ValueAndAccuracy.Builder subBuilder = null;
              if (lengthAndAccuracy_ != null) {
                subBuilder = lengthAndAccuracy_.toBuilder();
              }
              lengthAndAccuracy_ = input.readMessage(org.sensoris.types.base.Int64ValueAndAccuracy.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(lengthAndAccuracy_);
                lengthAndAccuracy_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              org.sensoris.types.base.Int64ValueAndAccuracy.Builder subBuilder = null;
              if (distanceAndAccuracy_ != null) {
                subBuilder = distanceAndAccuracy_.toBuilder();
              }
              distanceAndAccuracy_ = input.readMessage(org.sensoris.types.base.Int64ValueAndAccuracy.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(distanceAndAccuracy_);
                distanceAndAccuracy_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_DashStatistics_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_DashStatistics_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics.class, org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics.Builder.class);
    }

    public static final int LENGTH_AND_ACCURACY_FIELD_NUMBER = 2;
    private org.sensoris.types.base.Int64ValueAndAccuracy lengthAndAccuracy_;
    /**
     * <pre>
     * Length of single lane dash.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public boolean hasLengthAndAccuracy() {
      return lengthAndAccuracy_ != null;
    }
    /**
     * <pre>
     * Length of single lane dash.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public org.sensoris.types.base.Int64ValueAndAccuracy getLengthAndAccuracy() {
      return lengthAndAccuracy_ == null ? org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : lengthAndAccuracy_;
    }
    /**
     * <pre>
     * Length of single lane dash.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getLengthAndAccuracyOrBuilder() {
      return getLengthAndAccuracy();
    }

    public static final int DISTANCE_AND_ACCURACY_FIELD_NUMBER = 3;
    private org.sensoris.types.base.Int64ValueAndAccuracy distanceAndAccuracy_;
    /**
     * <pre>
     * Distance between single lane dashes.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public boolean hasDistanceAndAccuracy() {
      return distanceAndAccuracy_ != null;
    }
    /**
     * <pre>
     * Distance between single lane dashes.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public org.sensoris.types.base.Int64ValueAndAccuracy getDistanceAndAccuracy() {
      return distanceAndAccuracy_ == null ? org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : distanceAndAccuracy_;
    }
    /**
     * <pre>
     * Distance between single lane dashes.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getDistanceAndAccuracyOrBuilder() {
      return getDistanceAndAccuracy();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (lengthAndAccuracy_ != null) {
        output.writeMessage(2, getLengthAndAccuracy());
      }
      if (distanceAndAccuracy_ != null) {
        output.writeMessage(3, getDistanceAndAccuracy());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (lengthAndAccuracy_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getLengthAndAccuracy());
      }
      if (distanceAndAccuracy_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getDistanceAndAccuracy());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics)) {
        return super.equals(obj);
      }
      org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics other = (org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics) obj;

      boolean result = true;
      result = result && (hasLengthAndAccuracy() == other.hasLengthAndAccuracy());
      if (hasLengthAndAccuracy()) {
        result = result && getLengthAndAccuracy()
            .equals(other.getLengthAndAccuracy());
      }
      result = result && (hasDistanceAndAccuracy() == other.hasDistanceAndAccuracy());
      if (hasDistanceAndAccuracy()) {
        result = result && getDistanceAndAccuracy()
            .equals(other.getDistanceAndAccuracy());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasLengthAndAccuracy()) {
        hash = (37 * hash) + LENGTH_AND_ACCURACY_FIELD_NUMBER;
        hash = (53 * hash) + getLengthAndAccuracy().hashCode();
      }
      if (hasDistanceAndAccuracy()) {
        hash = (37 * hash) + DISTANCE_AND_ACCURACY_FIELD_NUMBER;
        hash = (53 * hash) + getDistanceAndAccuracy().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Statistics of length of single lane dashes and distance between single dashes on lane boundary geometry.
     * Only applicable for lane boundaries of type LINE_SINGLE_DASHED, LINE_SINGLE_DASHED_SHORT, LINE_SINGLE_DASHED_LONG, LINE_DOUBLE_DASHED, LINE_DOUBLE_SOLID_DASHED, LINE_DOUBLE_DASHED_SOLID and BLOCKS_DASHED.
     * </pre>
     *
     * Protobuf type {@code sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
        org.sensoris.categories.roadattribution.LaneBoundary.DashStatisticsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_DashStatistics_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_DashStatistics_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics.class, org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics.Builder.class);
      }

      // Construct using org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (lengthAndAccuracyBuilder_ == null) {
          lengthAndAccuracy_ = null;
        } else {
          lengthAndAccuracy_ = null;
          lengthAndAccuracyBuilder_ = null;
        }
        if (distanceAndAccuracyBuilder_ == null) {
          distanceAndAccuracy_ = null;
        } else {
          distanceAndAccuracy_ = null;
          distanceAndAccuracyBuilder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_DashStatistics_descriptor;
      }

      public org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics getDefaultInstanceForType() {
        return org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics.getDefaultInstance();
      }

      public org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics build() {
        org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics buildPartial() {
        org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics result = new org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics(this);
        if (lengthAndAccuracyBuilder_ == null) {
          result.lengthAndAccuracy_ = lengthAndAccuracy_;
        } else {
          result.lengthAndAccuracy_ = lengthAndAccuracyBuilder_.build();
        }
        if (distanceAndAccuracyBuilder_ == null) {
          result.distanceAndAccuracy_ = distanceAndAccuracy_;
        } else {
          result.distanceAndAccuracy_ = distanceAndAccuracyBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics) {
          return mergeFrom((org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics other) {
        if (other == org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics.getDefaultInstance()) return this;
        if (other.hasLengthAndAccuracy()) {
          mergeLengthAndAccuracy(other.getLengthAndAccuracy());
        }
        if (other.hasDistanceAndAccuracy()) {
          mergeDistanceAndAccuracy(other.getDistanceAndAccuracy());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private org.sensoris.types.base.Int64ValueAndAccuracy lengthAndAccuracy_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder> lengthAndAccuracyBuilder_;
      /**
       * <pre>
       * Length of single lane dash.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range (0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      public boolean hasLengthAndAccuracy() {
        return lengthAndAccuracyBuilder_ != null || lengthAndAccuracy_ != null;
      }
      /**
       * <pre>
       * Length of single lane dash.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range (0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      public org.sensoris.types.base.Int64ValueAndAccuracy getLengthAndAccuracy() {
        if (lengthAndAccuracyBuilder_ == null) {
          return lengthAndAccuracy_ == null ? org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : lengthAndAccuracy_;
        } else {
          return lengthAndAccuracyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Length of single lane dash.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range (0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      public Builder setLengthAndAccuracy(org.sensoris.types.base.Int64ValueAndAccuracy value) {
        if (lengthAndAccuracyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          lengthAndAccuracy_ = value;
          onChanged();
        } else {
          lengthAndAccuracyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Length of single lane dash.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range (0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      public Builder setLengthAndAccuracy(
          org.sensoris.types.base.Int64ValueAndAccuracy.Builder builderForValue) {
        if (lengthAndAccuracyBuilder_ == null) {
          lengthAndAccuracy_ = builderForValue.build();
          onChanged();
        } else {
          lengthAndAccuracyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Length of single lane dash.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range (0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      public Builder mergeLengthAndAccuracy(org.sensoris.types.base.Int64ValueAndAccuracy value) {
        if (lengthAndAccuracyBuilder_ == null) {
          if (lengthAndAccuracy_ != null) {
            lengthAndAccuracy_ =
              org.sensoris.types.base.Int64ValueAndAccuracy.newBuilder(lengthAndAccuracy_).mergeFrom(value).buildPartial();
          } else {
            lengthAndAccuracy_ = value;
          }
          onChanged();
        } else {
          lengthAndAccuracyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Length of single lane dash.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range (0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      public Builder clearLengthAndAccuracy() {
        if (lengthAndAccuracyBuilder_ == null) {
          lengthAndAccuracy_ = null;
          onChanged();
        } else {
          lengthAndAccuracy_ = null;
          lengthAndAccuracyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Length of single lane dash.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range (0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      public org.sensoris.types.base.Int64ValueAndAccuracy.Builder getLengthAndAccuracyBuilder() {
        
        onChanged();
        return getLengthAndAccuracyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Length of single lane dash.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range (0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      public org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getLengthAndAccuracyOrBuilder() {
        if (lengthAndAccuracyBuilder_ != null) {
          return lengthAndAccuracyBuilder_.getMessageOrBuilder();
        } else {
          return lengthAndAccuracy_ == null ?
              org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : lengthAndAccuracy_;
        }
      }
      /**
       * <pre>
       * Length of single lane dash.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range (0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder> 
          getLengthAndAccuracyFieldBuilder() {
        if (lengthAndAccuracyBuilder_ == null) {
          lengthAndAccuracyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder>(
                  getLengthAndAccuracy(),
                  getParentForChildren(),
                  isClean());
          lengthAndAccuracy_ = null;
        }
        return lengthAndAccuracyBuilder_;
      }

      private org.sensoris.types.base.Int64ValueAndAccuracy distanceAndAccuracy_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder> distanceAndAccuracyBuilder_;
      /**
       * <pre>
       * Distance between single lane dashes.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range (0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      public boolean hasDistanceAndAccuracy() {
        return distanceAndAccuracyBuilder_ != null || distanceAndAccuracy_ != null;
      }
      /**
       * <pre>
       * Distance between single lane dashes.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range (0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      public org.sensoris.types.base.Int64ValueAndAccuracy getDistanceAndAccuracy() {
        if (distanceAndAccuracyBuilder_ == null) {
          return distanceAndAccuracy_ == null ? org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : distanceAndAccuracy_;
        } else {
          return distanceAndAccuracyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Distance between single lane dashes.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range (0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      public Builder setDistanceAndAccuracy(org.sensoris.types.base.Int64ValueAndAccuracy value) {
        if (distanceAndAccuracyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          distanceAndAccuracy_ = value;
          onChanged();
        } else {
          distanceAndAccuracyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Distance between single lane dashes.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range (0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      public Builder setDistanceAndAccuracy(
          org.sensoris.types.base.Int64ValueAndAccuracy.Builder builderForValue) {
        if (distanceAndAccuracyBuilder_ == null) {
          distanceAndAccuracy_ = builderForValue.build();
          onChanged();
        } else {
          distanceAndAccuracyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Distance between single lane dashes.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range (0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      public Builder mergeDistanceAndAccuracy(org.sensoris.types.base.Int64ValueAndAccuracy value) {
        if (distanceAndAccuracyBuilder_ == null) {
          if (distanceAndAccuracy_ != null) {
            distanceAndAccuracy_ =
              org.sensoris.types.base.Int64ValueAndAccuracy.newBuilder(distanceAndAccuracy_).mergeFrom(value).buildPartial();
          } else {
            distanceAndAccuracy_ = value;
          }
          onChanged();
        } else {
          distanceAndAccuracyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Distance between single lane dashes.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range (0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      public Builder clearDistanceAndAccuracy() {
        if (distanceAndAccuracyBuilder_ == null) {
          distanceAndAccuracy_ = null;
          onChanged();
        } else {
          distanceAndAccuracy_ = null;
          distanceAndAccuracyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Distance between single lane dashes.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range (0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      public org.sensoris.types.base.Int64ValueAndAccuracy.Builder getDistanceAndAccuracyBuilder() {
        
        onChanged();
        return getDistanceAndAccuracyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Distance between single lane dashes.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range (0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      public org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getDistanceAndAccuracyOrBuilder() {
        if (distanceAndAccuracyBuilder_ != null) {
          return distanceAndAccuracyBuilder_.getMessageOrBuilder();
        } else {
          return distanceAndAccuracy_ == null ?
              org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : distanceAndAccuracy_;
        }
      }
      /**
       * <pre>
       * Distance between single lane dashes.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range (0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder> 
          getDistanceAndAccuracyFieldBuilder() {
        if (distanceAndAccuracyBuilder_ == null) {
          distanceAndAccuracyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder>(
                  getDistanceAndAccuracy(),
                  getParentForChildren(),
                  isClean());
          distanceAndAccuracy_ = null;
        }
        return distanceAndAccuracyBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
    }

    // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
    private static final org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics();
    }

    public static org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DashStatistics>
        PARSER = new com.google.protobuf.AbstractParser<DashStatistics>() {
      public DashStatistics parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DashStatistics(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DashStatistics> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DashStatistics> getParserForType() {
      return PARSER;
    }

    public org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MarkingOffsetsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
     */
    java.util.List<org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset> 
        getTypeAndOffsetList();
    /**
     * <pre>
     * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
     */
    org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset getTypeAndOffset(int index);
    /**
     * <pre>
     * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
     */
    int getTypeAndOffsetCount();
    /**
     * <pre>
     * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
     */
    java.util.List<? extends org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffsetOrBuilder> 
        getTypeAndOffsetOrBuilderList();
    /**
     * <pre>
     * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
     */
    org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffsetOrBuilder getTypeAndOffsetOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Offsets of markings as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
   * &#64;example S---E    S--E for two lane dashes with S as START_OF_MARKING, and E as END_OF_MARKING.
   * &#64;example -O-O-  N O--O for two lane dashes with O as ON_MARKING and N as NO_MARKING.
   * </pre>
   *
   * Protobuf type {@code sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets}
   */
  public  static final class MarkingOffsets extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
      MarkingOffsetsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MarkingOffsets.newBuilder() to construct.
    private MarkingOffsets(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MarkingOffsets() {
      typeAndOffset_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MarkingOffsets(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                typeAndOffset_ = new java.util.ArrayList<org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset>();
                mutable_bitField0_ |= 0x00000001;
              }
              typeAndOffset_.add(
                  input.readMessage(org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          typeAndOffset_ = java.util.Collections.unmodifiableList(typeAndOffset_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_MarkingOffsets_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_MarkingOffsets_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.class, org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.Builder.class);
    }

    public interface TypeAndOffsetOrBuilder extends
        // @@protoc_insertion_point(interface_extends:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type type = 1;</code>
       */
      int getTypeValue();
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type type = 1;</code>
       */
      org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type getType();

      /**
       * <pre>
       * Offset and accuracy.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range [0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      boolean hasOffsetAndAccuracy();
      /**
       * <pre>
       * Offset and accuracy.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range [0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      org.sensoris.types.base.Int64ValueAndAccuracy getOffsetAndAccuracy();
      /**
       * <pre>
       * Offset and accuracy.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range [0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getOffsetAndAccuracyOrBuilder();
    }
    /**
     * <pre>
     * Offset of markings as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
     * </pre>
     *
     * Protobuf type {@code sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset}
     */
    public  static final class TypeAndOffset extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
        TypeAndOffsetOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use TypeAndOffset.newBuilder() to construct.
      private TypeAndOffset(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private TypeAndOffset() {
        type_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private TypeAndOffset(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownFieldProto3(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();

                type_ = rawValue;
                break;
              }
              case 18: {
                org.sensoris.types.base.Int64ValueAndAccuracy.Builder subBuilder = null;
                if (offsetAndAccuracy_ != null) {
                  subBuilder = offsetAndAccuracy_.toBuilder();
                }
                offsetAndAccuracy_ = input.readMessage(org.sensoris.types.base.Int64ValueAndAccuracy.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(offsetAndAccuracy_);
                  offsetAndAccuracy_ = subBuilder.buildPartial();
                }

                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_MarkingOffsets_TypeAndOffset_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_MarkingOffsets_TypeAndOffset_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.class, org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Builder.class);
      }

      /**
       * <pre>
       * Type.
       * </pre>
       *
       * Protobuf enum {@code sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type}
       */
      public enum Type
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * Unknown.
         * </pre>
         *
         * <code>UNKNOWN_TYPE = 0;</code>
         */
        UNKNOWN_TYPE(0),
        /**
         * <pre>
         * Start of marking.
         * </pre>
         *
         * <code>START_OF_MARKING = 1;</code>
         */
        START_OF_MARKING(1),
        /**
         * <pre>
         * End of marking.
         * </pre>
         *
         * <code>END_OF_MARKING = 2;</code>
         */
        END_OF_MARKING(2),
        /**
         * <pre>
         * On marking.
         * </pre>
         *
         * <code>ON_MARKING = 3;</code>
         */
        ON_MARKING(3),
        /**
         * <pre>
         * No marking, e.g. between two markings.
         * </pre>
         *
         * <code>NO_MARKING = 4;</code>
         */
        NO_MARKING(4),
        UNRECOGNIZED(-1),
        ;

        /**
         * <pre>
         * Unknown.
         * </pre>
         *
         * <code>UNKNOWN_TYPE = 0;</code>
         */
        public static final int UNKNOWN_TYPE_VALUE = 0;
        /**
         * <pre>
         * Start of marking.
         * </pre>
         *
         * <code>START_OF_MARKING = 1;</code>
         */
        public static final int START_OF_MARKING_VALUE = 1;
        /**
         * <pre>
         * End of marking.
         * </pre>
         *
         * <code>END_OF_MARKING = 2;</code>
         */
        public static final int END_OF_MARKING_VALUE = 2;
        /**
         * <pre>
         * On marking.
         * </pre>
         *
         * <code>ON_MARKING = 3;</code>
         */
        public static final int ON_MARKING_VALUE = 3;
        /**
         * <pre>
         * No marking, e.g. between two markings.
         * </pre>
         *
         * <code>NO_MARKING = 4;</code>
         */
        public static final int NO_MARKING_VALUE = 4;


        public final int getNumber() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
                "Can't get the number of an unknown enum value.");
          }
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static Type valueOf(int value) {
          return forNumber(value);
        }

        public static Type forNumber(int value) {
          switch (value) {
            case 0: return UNKNOWN_TYPE;
            case 1: return START_OF_MARKING;
            case 2: return END_OF_MARKING;
            case 3: return ON_MARKING;
            case 4: return NO_MARKING;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<Type>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            Type> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<Type>() {
                public Type findValueByNumber(int number) {
                  return Type.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.getDescriptor().getEnumTypes().get(0);
        }

        private static final Type[] VALUES = values();

        public static Type valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private Type(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type)
      }

      public static final int TYPE_FIELD_NUMBER = 1;
      private int type_;
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type type = 1;</code>
       */
      public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * Type.
       * </pre>
       *
       * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type type = 1;</code>
       */
      public org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type getType() {
        org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type result = org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type.valueOf(type_);
        return result == null ? org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type.UNRECOGNIZED : result;
      }

      public static final int OFFSET_AND_ACCURACY_FIELD_NUMBER = 2;
      private org.sensoris.types.base.Int64ValueAndAccuracy offsetAndAccuracy_;
      /**
       * <pre>
       * Offset and accuracy.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range [0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      public boolean hasOffsetAndAccuracy() {
        return offsetAndAccuracy_ != null;
      }
      /**
       * <pre>
       * Offset and accuracy.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range [0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      public org.sensoris.types.base.Int64ValueAndAccuracy getOffsetAndAccuracy() {
        return offsetAndAccuracy_ == null ? org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : offsetAndAccuracy_;
      }
      /**
       * <pre>
       * Offset and accuracy.
       * &#64;unit MilliMeter
       * &#64;resolution 1
       * &#64;range [0, )
       * </pre>
       *
       * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
       */
      public org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getOffsetAndAccuracyOrBuilder() {
        return getOffsetAndAccuracy();
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (type_ != org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type.UNKNOWN_TYPE.getNumber()) {
          output.writeEnum(1, type_);
        }
        if (offsetAndAccuracy_ != null) {
          output.writeMessage(2, getOffsetAndAccuracy());
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (type_ != org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type.UNKNOWN_TYPE.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, type_);
        }
        if (offsetAndAccuracy_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getOffsetAndAccuracy());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)) {
          return super.equals(obj);
        }
        org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset other = (org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset) obj;

        boolean result = true;
        result = result && type_ == other.type_;
        result = result && (hasOffsetAndAccuracy() == other.hasOffsetAndAccuracy());
        if (hasOffsetAndAccuracy()) {
          result = result && getOffsetAndAccuracy()
              .equals(other.getOffsetAndAccuracy());
        }
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + type_;
        if (hasOffsetAndAccuracy()) {
          hash = (37 * hash) + OFFSET_AND_ACCURACY_FIELD_NUMBER;
          hash = (53 * hash) + getOffsetAndAccuracy().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Offset of markings as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
       * </pre>
       *
       * Protobuf type {@code sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
          org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffsetOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_MarkingOffsets_TypeAndOffset_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_MarkingOffsets_TypeAndOffset_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.class, org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Builder.class);
        }

        // Construct using org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          type_ = 0;

          if (offsetAndAccuracyBuilder_ == null) {
            offsetAndAccuracy_ = null;
          } else {
            offsetAndAccuracy_ = null;
            offsetAndAccuracyBuilder_ = null;
          }
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_MarkingOffsets_TypeAndOffset_descriptor;
        }

        public org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset getDefaultInstanceForType() {
          return org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.getDefaultInstance();
        }

        public org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset build() {
          org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset buildPartial() {
          org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset result = new org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset(this);
          result.type_ = type_;
          if (offsetAndAccuracyBuilder_ == null) {
            result.offsetAndAccuracy_ = offsetAndAccuracy_;
          } else {
            result.offsetAndAccuracy_ = offsetAndAccuracyBuilder_.build();
          }
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset) {
            return mergeFrom((org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset other) {
          if (other == org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.getDefaultInstance()) return this;
          if (other.type_ != 0) {
            setTypeValue(other.getTypeValue());
          }
          if (other.hasOffsetAndAccuracy()) {
            mergeOffsetAndAccuracy(other.getOffsetAndAccuracy());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int type_ = 0;
        /**
         * <pre>
         * Type.
         * </pre>
         *
         * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type type = 1;</code>
         */
        public int getTypeValue() {
          return type_;
        }
        /**
         * <pre>
         * Type.
         * </pre>
         *
         * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type type = 1;</code>
         */
        public Builder setTypeValue(int value) {
          type_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Type.
         * </pre>
         *
         * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type type = 1;</code>
         */
        public org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type getType() {
          org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type result = org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type.valueOf(type_);
          return result == null ? org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type.UNRECOGNIZED : result;
        }
        /**
         * <pre>
         * Type.
         * </pre>
         *
         * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type type = 1;</code>
         */
        public Builder setType(org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          type_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Type.
         * </pre>
         *
         * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type type = 1;</code>
         */
        public Builder clearType() {
          
          type_ = 0;
          onChanged();
          return this;
        }

        private org.sensoris.types.base.Int64ValueAndAccuracy offsetAndAccuracy_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder> offsetAndAccuracyBuilder_;
        /**
         * <pre>
         * Offset and accuracy.
         * &#64;unit MilliMeter
         * &#64;resolution 1
         * &#64;range [0, )
         * </pre>
         *
         * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
         */
        public boolean hasOffsetAndAccuracy() {
          return offsetAndAccuracyBuilder_ != null || offsetAndAccuracy_ != null;
        }
        /**
         * <pre>
         * Offset and accuracy.
         * &#64;unit MilliMeter
         * &#64;resolution 1
         * &#64;range [0, )
         * </pre>
         *
         * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
         */
        public org.sensoris.types.base.Int64ValueAndAccuracy getOffsetAndAccuracy() {
          if (offsetAndAccuracyBuilder_ == null) {
            return offsetAndAccuracy_ == null ? org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : offsetAndAccuracy_;
          } else {
            return offsetAndAccuracyBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Offset and accuracy.
         * &#64;unit MilliMeter
         * &#64;resolution 1
         * &#64;range [0, )
         * </pre>
         *
         * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
         */
        public Builder setOffsetAndAccuracy(org.sensoris.types.base.Int64ValueAndAccuracy value) {
          if (offsetAndAccuracyBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            offsetAndAccuracy_ = value;
            onChanged();
          } else {
            offsetAndAccuracyBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Offset and accuracy.
         * &#64;unit MilliMeter
         * &#64;resolution 1
         * &#64;range [0, )
         * </pre>
         *
         * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
         */
        public Builder setOffsetAndAccuracy(
            org.sensoris.types.base.Int64ValueAndAccuracy.Builder builderForValue) {
          if (offsetAndAccuracyBuilder_ == null) {
            offsetAndAccuracy_ = builderForValue.build();
            onChanged();
          } else {
            offsetAndAccuracyBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Offset and accuracy.
         * &#64;unit MilliMeter
         * &#64;resolution 1
         * &#64;range [0, )
         * </pre>
         *
         * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
         */
        public Builder mergeOffsetAndAccuracy(org.sensoris.types.base.Int64ValueAndAccuracy value) {
          if (offsetAndAccuracyBuilder_ == null) {
            if (offsetAndAccuracy_ != null) {
              offsetAndAccuracy_ =
                org.sensoris.types.base.Int64ValueAndAccuracy.newBuilder(offsetAndAccuracy_).mergeFrom(value).buildPartial();
            } else {
              offsetAndAccuracy_ = value;
            }
            onChanged();
          } else {
            offsetAndAccuracyBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Offset and accuracy.
         * &#64;unit MilliMeter
         * &#64;resolution 1
         * &#64;range [0, )
         * </pre>
         *
         * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
         */
        public Builder clearOffsetAndAccuracy() {
          if (offsetAndAccuracyBuilder_ == null) {
            offsetAndAccuracy_ = null;
            onChanged();
          } else {
            offsetAndAccuracy_ = null;
            offsetAndAccuracyBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Offset and accuracy.
         * &#64;unit MilliMeter
         * &#64;resolution 1
         * &#64;range [0, )
         * </pre>
         *
         * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
         */
        public org.sensoris.types.base.Int64ValueAndAccuracy.Builder getOffsetAndAccuracyBuilder() {
          
          onChanged();
          return getOffsetAndAccuracyFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Offset and accuracy.
         * &#64;unit MilliMeter
         * &#64;resolution 1
         * &#64;range [0, )
         * </pre>
         *
         * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
         */
        public org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getOffsetAndAccuracyOrBuilder() {
          if (offsetAndAccuracyBuilder_ != null) {
            return offsetAndAccuracyBuilder_.getMessageOrBuilder();
          } else {
            return offsetAndAccuracy_ == null ?
                org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : offsetAndAccuracy_;
          }
        }
        /**
         * <pre>
         * Offset and accuracy.
         * &#64;unit MilliMeter
         * &#64;resolution 1
         * &#64;range [0, )
         * </pre>
         *
         * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder> 
            getOffsetAndAccuracyFieldBuilder() {
          if (offsetAndAccuracyBuilder_ == null) {
            offsetAndAccuracyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder>(
                    getOffsetAndAccuracy(),
                    getParentForChildren(),
                    isClean());
            offsetAndAccuracy_ = null;
          }
          return offsetAndAccuracyBuilder_;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFieldsProto3(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
      }

      // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
      private static final org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset();
      }

      public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<TypeAndOffset>
          PARSER = new com.google.protobuf.AbstractParser<TypeAndOffset>() {
        public TypeAndOffset parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new TypeAndOffset(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<TypeAndOffset> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TypeAndOffset> getParserForType() {
        return PARSER;
      }

      public org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int TYPE_AND_OFFSET_FIELD_NUMBER = 2;
    private java.util.List<org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset> typeAndOffset_;
    /**
     * <pre>
     * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
     */
    public java.util.List<org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset> getTypeAndOffsetList() {
      return typeAndOffset_;
    }
    /**
     * <pre>
     * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
     */
    public java.util.List<? extends org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffsetOrBuilder> 
        getTypeAndOffsetOrBuilderList() {
      return typeAndOffset_;
    }
    /**
     * <pre>
     * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
     */
    public int getTypeAndOffsetCount() {
      return typeAndOffset_.size();
    }
    /**
     * <pre>
     * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
     */
    public org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset getTypeAndOffset(int index) {
      return typeAndOffset_.get(index);
    }
    /**
     * <pre>
     * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
     * </pre>
     *
     * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
     */
    public org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffsetOrBuilder getTypeAndOffsetOrBuilder(
        int index) {
      return typeAndOffset_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < typeAndOffset_.size(); i++) {
        output.writeMessage(2, typeAndOffset_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < typeAndOffset_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, typeAndOffset_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets)) {
        return super.equals(obj);
      }
      org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets other = (org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets) obj;

      boolean result = true;
      result = result && getTypeAndOffsetList()
          .equals(other.getTypeAndOffsetList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getTypeAndOffsetCount() > 0) {
        hash = (37 * hash) + TYPE_AND_OFFSET_FIELD_NUMBER;
        hash = (53 * hash) + getTypeAndOffsetList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Offsets of markings as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
     * &#64;example S---E    S--E for two lane dashes with S as START_OF_MARKING, and E as END_OF_MARKING.
     * &#64;example -O-O-  N O--O for two lane dashes with O as ON_MARKING and N as NO_MARKING.
     * </pre>
     *
     * Protobuf type {@code sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
        org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsetsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_MarkingOffsets_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_MarkingOffsets_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.class, org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.Builder.class);
      }

      // Construct using org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getTypeAndOffsetFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (typeAndOffsetBuilder_ == null) {
          typeAndOffset_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          typeAndOffsetBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_MarkingOffsets_descriptor;
      }

      public org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets getDefaultInstanceForType() {
        return org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.getDefaultInstance();
      }

      public org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets build() {
        org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets buildPartial() {
        org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets result = new org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets(this);
        int from_bitField0_ = bitField0_;
        if (typeAndOffsetBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            typeAndOffset_ = java.util.Collections.unmodifiableList(typeAndOffset_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.typeAndOffset_ = typeAndOffset_;
        } else {
          result.typeAndOffset_ = typeAndOffsetBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets) {
          return mergeFrom((org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets other) {
        if (other == org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.getDefaultInstance()) return this;
        if (typeAndOffsetBuilder_ == null) {
          if (!other.typeAndOffset_.isEmpty()) {
            if (typeAndOffset_.isEmpty()) {
              typeAndOffset_ = other.typeAndOffset_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureTypeAndOffsetIsMutable();
              typeAndOffset_.addAll(other.typeAndOffset_);
            }
            onChanged();
          }
        } else {
          if (!other.typeAndOffset_.isEmpty()) {
            if (typeAndOffsetBuilder_.isEmpty()) {
              typeAndOffsetBuilder_.dispose();
              typeAndOffsetBuilder_ = null;
              typeAndOffset_ = other.typeAndOffset_;
              bitField0_ = (bitField0_ & ~0x00000001);
              typeAndOffsetBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTypeAndOffsetFieldBuilder() : null;
            } else {
              typeAndOffsetBuilder_.addAllMessages(other.typeAndOffset_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset> typeAndOffset_ =
        java.util.Collections.emptyList();
      private void ensureTypeAndOffsetIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          typeAndOffset_ = new java.util.ArrayList<org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset>(typeAndOffset_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset, org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Builder, org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffsetOrBuilder> typeAndOffsetBuilder_;

      /**
       * <pre>
       * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
       * </pre>
       *
       * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
       */
      public java.util.List<org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset> getTypeAndOffsetList() {
        if (typeAndOffsetBuilder_ == null) {
          return java.util.Collections.unmodifiableList(typeAndOffset_);
        } else {
          return typeAndOffsetBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
       * </pre>
       *
       * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
       */
      public int getTypeAndOffsetCount() {
        if (typeAndOffsetBuilder_ == null) {
          return typeAndOffset_.size();
        } else {
          return typeAndOffsetBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
       * </pre>
       *
       * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
       */
      public org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset getTypeAndOffset(int index) {
        if (typeAndOffsetBuilder_ == null) {
          return typeAndOffset_.get(index);
        } else {
          return typeAndOffsetBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
       * </pre>
       *
       * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
       */
      public Builder setTypeAndOffset(
          int index, org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset value) {
        if (typeAndOffsetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeAndOffsetIsMutable();
          typeAndOffset_.set(index, value);
          onChanged();
        } else {
          typeAndOffsetBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
       * </pre>
       *
       * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
       */
      public Builder setTypeAndOffset(
          int index, org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Builder builderForValue) {
        if (typeAndOffsetBuilder_ == null) {
          ensureTypeAndOffsetIsMutable();
          typeAndOffset_.set(index, builderForValue.build());
          onChanged();
        } else {
          typeAndOffsetBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
       * </pre>
       *
       * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
       */
      public Builder addTypeAndOffset(org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset value) {
        if (typeAndOffsetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeAndOffsetIsMutable();
          typeAndOffset_.add(value);
          onChanged();
        } else {
          typeAndOffsetBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
       * </pre>
       *
       * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
       */
      public Builder addTypeAndOffset(
          int index, org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset value) {
        if (typeAndOffsetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTypeAndOffsetIsMutable();
          typeAndOffset_.add(index, value);
          onChanged();
        } else {
          typeAndOffsetBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
       * </pre>
       *
       * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
       */
      public Builder addTypeAndOffset(
          org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Builder builderForValue) {
        if (typeAndOffsetBuilder_ == null) {
          ensureTypeAndOffsetIsMutable();
          typeAndOffset_.add(builderForValue.build());
          onChanged();
        } else {
          typeAndOffsetBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
       * </pre>
       *
       * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
       */
      public Builder addTypeAndOffset(
          int index, org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Builder builderForValue) {
        if (typeAndOffsetBuilder_ == null) {
          ensureTypeAndOffsetIsMutable();
          typeAndOffset_.add(index, builderForValue.build());
          onChanged();
        } else {
          typeAndOffsetBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
       * </pre>
       *
       * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
       */
      public Builder addAllTypeAndOffset(
          java.lang.Iterable<? extends org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset> values) {
        if (typeAndOffsetBuilder_ == null) {
          ensureTypeAndOffsetIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, typeAndOffset_);
          onChanged();
        } else {
          typeAndOffsetBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
       * </pre>
       *
       * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
       */
      public Builder clearTypeAndOffset() {
        if (typeAndOffsetBuilder_ == null) {
          typeAndOffset_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          typeAndOffsetBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
       * </pre>
       *
       * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
       */
      public Builder removeTypeAndOffset(int index) {
        if (typeAndOffsetBuilder_ == null) {
          ensureTypeAndOffsetIsMutable();
          typeAndOffset_.remove(index);
          onChanged();
        } else {
          typeAndOffsetBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
       * </pre>
       *
       * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
       */
      public org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Builder getTypeAndOffsetBuilder(
          int index) {
        return getTypeAndOffsetFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
       * </pre>
       *
       * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
       */
      public org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffsetOrBuilder getTypeAndOffsetOrBuilder(
          int index) {
        if (typeAndOffsetBuilder_ == null) {
          return typeAndOffset_.get(index);  } else {
          return typeAndOffsetBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
       * </pre>
       *
       * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
       */
      public java.util.List<? extends org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffsetOrBuilder> 
           getTypeAndOffsetOrBuilderList() {
        if (typeAndOffsetBuilder_ != null) {
          return typeAndOffsetBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(typeAndOffset_);
        }
      }
      /**
       * <pre>
       * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
       * </pre>
       *
       * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
       */
      public org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Builder addTypeAndOffsetBuilder() {
        return getTypeAndOffsetFieldBuilder().addBuilder(
            org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.getDefaultInstance());
      }
      /**
       * <pre>
       * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
       * </pre>
       *
       * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
       */
      public org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Builder addTypeAndOffsetBuilder(
          int index) {
        return getTypeAndOffsetFieldBuilder().addBuilder(
            index, org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.getDefaultInstance());
      }
      /**
       * <pre>
       * Offset of marking as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
       * </pre>
       *
       * <code>repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;</code>
       */
      public java.util.List<org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Builder> 
           getTypeAndOffsetBuilderList() {
        return getTypeAndOffsetFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset, org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Builder, org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffsetOrBuilder> 
          getTypeAndOffsetFieldBuilder() {
        if (typeAndOffsetBuilder_ == null) {
          typeAndOffsetBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset, org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Builder, org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffsetOrBuilder>(
                  typeAndOffset_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          typeAndOffset_ = null;
        }
        return typeAndOffsetBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
    }

    // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
    private static final org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets();
    }

    public static org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MarkingOffsets>
        PARSER = new com.google.protobuf.AbstractParser<MarkingOffsets>() {
      public MarkingOffsets parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MarkingOffsets(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MarkingOffsets> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MarkingOffsets> getParserForType() {
      return PARSER;
    }

    public org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int geometryCase_ = 0;
  private java.lang.Object geometry_;
  public enum GeometryCase
      implements com.google.protobuf.Internal.EnumLite {
    POLYLINE_AND_ACCURACY(9),
    GEOMETRY_NOT_SET(0);
    private final int value;
    private GeometryCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static GeometryCase valueOf(int value) {
      return forNumber(value);
    }

    public static GeometryCase forNumber(int value) {
      switch (value) {
        case 9: return POLYLINE_AND_ACCURACY;
        case 0: return GEOMETRY_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public GeometryCase
  getGeometryCase() {
    return GeometryCase.forNumber(
        geometryCase_);
  }

  private int markingsCase_ = 0;
  private java.lang.Object markings_;
  public enum MarkingsCase
      implements com.google.protobuf.Internal.EnumLite {
    DASH_STATISTICS(13),
    MARKING_OFFSETS(14),
    MARKINGS_NOT_SET(0);
    private final int value;
    private MarkingsCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static MarkingsCase valueOf(int value) {
      return forNumber(value);
    }

    public static MarkingsCase forNumber(int value) {
      switch (value) {
        case 13: return DASH_STATISTICS;
        case 14: return MARKING_OFFSETS;
        case 0: return MARKINGS_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public MarkingsCase
  getMarkingsCase() {
    return MarkingsCase.forNumber(
        markingsCase_);
  }

  public static final int ENVELOPE_FIELD_NUMBER = 1;
  private org.sensoris.types.base.EventEnvelope envelope_;
  /**
   * <pre>
   * Event envelope.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
   */
  public boolean hasEnvelope() {
    return envelope_ != null;
  }
  /**
   * <pre>
   * Event envelope.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
   */
  public org.sensoris.types.base.EventEnvelope getEnvelope() {
    return envelope_ == null ? org.sensoris.types.base.EventEnvelope.getDefaultInstance() : envelope_;
  }
  /**
   * <pre>
   * Event envelope.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
   */
  public org.sensoris.types.base.EventEnvelopeOrBuilder getEnvelopeOrBuilder() {
    return getEnvelope();
  }

  public static final int LANE_BOUNDARY_ID_FIELD_NUMBER = 2;
  private com.google.protobuf.Int64Value laneBoundaryId_;
  /**
   * <pre>
   * Lane boundary identifier.
   * Identifier is unique within a DataMessage and can be used to trace lane boundaries between LaneBoundary events.
   * &#64;unit 1
   * &#64;resolution 1
   * &#64;range [1, )
   * </pre>
   *
   * <code>.google.protobuf.Int64Value lane_boundary_id = 2;</code>
   */
  public boolean hasLaneBoundaryId() {
    return laneBoundaryId_ != null;
  }
  /**
   * <pre>
   * Lane boundary identifier.
   * Identifier is unique within a DataMessage and can be used to trace lane boundaries between LaneBoundary events.
   * &#64;unit 1
   * &#64;resolution 1
   * &#64;range [1, )
   * </pre>
   *
   * <code>.google.protobuf.Int64Value lane_boundary_id = 2;</code>
   */
  public com.google.protobuf.Int64Value getLaneBoundaryId() {
    return laneBoundaryId_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : laneBoundaryId_;
  }
  /**
   * <pre>
   * Lane boundary identifier.
   * Identifier is unique within a DataMessage and can be used to trace lane boundaries between LaneBoundary events.
   * &#64;unit 1
   * &#64;resolution 1
   * &#64;range [1, )
   * </pre>
   *
   * <code>.google.protobuf.Int64Value lane_boundary_id = 2;</code>
   */
  public com.google.protobuf.Int64ValueOrBuilder getLaneBoundaryIdOrBuilder() {
    return getLaneBoundaryId();
  }

  public static final int EXISTENCE_CONFIDENCE_FIELD_NUMBER = 3;
  private org.sensoris.types.base.Confidence existenceConfidence_;
  /**
   * <pre>
   * Confidence that a lane boundary has been detected.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 3;</code>
   */
  public boolean hasExistenceConfidence() {
    return existenceConfidence_ != null;
  }
  /**
   * <pre>
   * Confidence that a lane boundary has been detected.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 3;</code>
   */
  public org.sensoris.types.base.Confidence getExistenceConfidence() {
    return existenceConfidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : existenceConfidence_;
  }
  /**
   * <pre>
   * Confidence that a lane boundary has been detected.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 3;</code>
   */
  public org.sensoris.types.base.ConfidenceOrBuilder getExistenceConfidenceOrBuilder() {
    return getExistenceConfidence();
  }

  public static final int DETECTION_STATUS_FIELD_NUMBER = 4;
  private org.sensoris.types.base.EventDetectionStatus detectionStatus_;
  /**
   * <pre>
   * Event detection status.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;</code>
   */
  public boolean hasDetectionStatus() {
    return detectionStatus_ != null;
  }
  /**
   * <pre>
   * Event detection status.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;</code>
   */
  public org.sensoris.types.base.EventDetectionStatus getDetectionStatus() {
    return detectionStatus_ == null ? org.sensoris.types.base.EventDetectionStatus.getDefaultInstance() : detectionStatus_;
  }
  /**
   * <pre>
   * Event detection status.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;</code>
   */
  public org.sensoris.types.base.EventDetectionStatusOrBuilder getDetectionStatusOrBuilder() {
    return getDetectionStatus();
  }

  public static final int TYPE_AND_CONFIDENCE_FIELD_NUMBER = 5;
  private org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence typeAndConfidence_;
  /**
   * <pre>
   * Type and confidence.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;</code>
   */
  public boolean hasTypeAndConfidence() {
    return typeAndConfidence_ != null;
  }
  /**
   * <pre>
   * Type and confidence.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;</code>
   */
  public org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence getTypeAndConfidence() {
    return typeAndConfidence_ == null ? org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.getDefaultInstance() : typeAndConfidence_;
  }
  /**
   * <pre>
   * Type and confidence.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;</code>
   */
  public org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidenceOrBuilder getTypeAndConfidenceOrBuilder() {
    return getTypeAndConfidence();
  }

  public static final int MATERIAL_AND_CONFIDENCE_FIELD_NUMBER = 6;
  private org.sensoris.categories.roadattribution.MarkingMaterialAndConfidence materialAndConfidence_;
  /**
   * <pre>
   * Material and confidence.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;</code>
   */
  public boolean hasMaterialAndConfidence() {
    return materialAndConfidence_ != null;
  }
  /**
   * <pre>
   * Material and confidence.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;</code>
   */
  public org.sensoris.categories.roadattribution.MarkingMaterialAndConfidence getMaterialAndConfidence() {
    return materialAndConfidence_ == null ? org.sensoris.categories.roadattribution.MarkingMaterialAndConfidence.getDefaultInstance() : materialAndConfidence_;
  }
  /**
   * <pre>
   * Material and confidence.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;</code>
   */
  public org.sensoris.categories.roadattribution.MarkingMaterialAndConfidenceOrBuilder getMaterialAndConfidenceOrBuilder() {
    return getMaterialAndConfidence();
  }

  public static final int COLOR_AND_CONFIDENCE_FIELD_NUMBER = 7;
  private org.sensoris.categories.roadattribution.MarkingColorAndConfidence colorAndConfidence_;
  /**
   * <pre>
   * Marking color and confidence.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;</code>
   */
  public boolean hasColorAndConfidence() {
    return colorAndConfidence_ != null;
  }
  /**
   * <pre>
   * Marking color and confidence.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;</code>
   */
  public org.sensoris.categories.roadattribution.MarkingColorAndConfidence getColorAndConfidence() {
    return colorAndConfidence_ == null ? org.sensoris.categories.roadattribution.MarkingColorAndConfidence.getDefaultInstance() : colorAndConfidence_;
  }
  /**
   * <pre>
   * Marking color and confidence.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;</code>
   */
  public org.sensoris.categories.roadattribution.MarkingColorAndConfidenceOrBuilder getColorAndConfidenceOrBuilder() {
    return getColorAndConfidence();
  }

  public static final int POSITION_REFERENCE_FIELD_NUMBER = 8;
  private int positionReference_;
  /**
   * <pre>
   * Position reference of lane boundary marking geometry, i.e. polyline_and_accuracy represents left boundary, center line or right boundary of the lane boundary markings.
   * Whereas for e.g. lines all values may be used, for physical barriers the geometry shall represent the boundary closest to the vehicle.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.PositionReference position_reference = 8;</code>
   */
  public int getPositionReferenceValue() {
    return positionReference_;
  }
  /**
   * <pre>
   * Position reference of lane boundary marking geometry, i.e. polyline_and_accuracy represents left boundary, center line or right boundary of the lane boundary markings.
   * Whereas for e.g. lines all values may be used, for physical barriers the geometry shall represent the boundary closest to the vehicle.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.PositionReference position_reference = 8;</code>
   */
  public org.sensoris.categories.roadattribution.LaneBoundary.PositionReference getPositionReference() {
    org.sensoris.categories.roadattribution.LaneBoundary.PositionReference result = org.sensoris.categories.roadattribution.LaneBoundary.PositionReference.valueOf(positionReference_);
    return result == null ? org.sensoris.categories.roadattribution.LaneBoundary.PositionReference.UNRECOGNIZED : result;
  }

  public static final int POLYLINE_AND_ACCURACY_FIELD_NUMBER = 9;
  /**
   * <pre>
   * Polyline geometry.
   * Polyline can also be a single point.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.spatial.PolylineAndAccuracy polyline_and_accuracy = 9;</code>
   */
  public boolean hasPolylineAndAccuracy() {
    return geometryCase_ == 9;
  }
  /**
   * <pre>
   * Polyline geometry.
   * Polyline can also be a single point.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.spatial.PolylineAndAccuracy polyline_and_accuracy = 9;</code>
   */
  public org.sensoris.types.spatial.PolylineAndAccuracy getPolylineAndAccuracy() {
    if (geometryCase_ == 9) {
       return (org.sensoris.types.spatial.PolylineAndAccuracy) geometry_;
    }
    return org.sensoris.types.spatial.PolylineAndAccuracy.getDefaultInstance();
  }
  /**
   * <pre>
   * Polyline geometry.
   * Polyline can also be a single point.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.spatial.PolylineAndAccuracy polyline_and_accuracy = 9;</code>
   */
  public org.sensoris.types.spatial.PolylineAndAccuracyOrBuilder getPolylineAndAccuracyOrBuilder() {
    if (geometryCase_ == 9) {
       return (org.sensoris.types.spatial.PolylineAndAccuracy) geometry_;
    }
    return org.sensoris.types.spatial.PolylineAndAccuracy.getDefaultInstance();
  }

  public static final int WIDTH_AND_ACCURACY_FIELD_NUMBER = 10;
  private org.sensoris.types.base.Int64ValueAndAccuracy widthAndAccuracy_;
  /**
   * <pre>
   * Width and accuracy.
   * &#64;unit MilliMeter
   * &#64;resolution 1
   * &#64;range (0, )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   */
  public boolean hasWidthAndAccuracy() {
    return widthAndAccuracy_ != null;
  }
  /**
   * <pre>
   * Width and accuracy.
   * &#64;unit MilliMeter
   * &#64;resolution 1
   * &#64;range (0, )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   */
  public org.sensoris.types.base.Int64ValueAndAccuracy getWidthAndAccuracy() {
    return widthAndAccuracy_ == null ? org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : widthAndAccuracy_;
  }
  /**
   * <pre>
   * Width and accuracy.
   * &#64;unit MilliMeter
   * &#64;resolution 1
   * &#64;range (0, )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   */
  public org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getWidthAndAccuracyOrBuilder() {
    return getWidthAndAccuracy();
  }

  public static final int HEIGHT_AND_ACCURACY_FIELD_NUMBER = 11;
  private org.sensoris.types.base.Int64ValueAndAccuracy heightAndAccuracy_;
  /**
   * <pre>
   * Height and accuracy.
   * &#64;unit MilliMeter
   * &#64;resolution 1
   * &#64;range [0, )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   */
  public boolean hasHeightAndAccuracy() {
    return heightAndAccuracy_ != null;
  }
  /**
   * <pre>
   * Height and accuracy.
   * &#64;unit MilliMeter
   * &#64;resolution 1
   * &#64;range [0, )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   */
  public org.sensoris.types.base.Int64ValueAndAccuracy getHeightAndAccuracy() {
    return heightAndAccuracy_ == null ? org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : heightAndAccuracy_;
  }
  /**
   * <pre>
   * Height and accuracy.
   * &#64;unit MilliMeter
   * &#64;resolution 1
   * &#64;range [0, )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   */
  public org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getHeightAndAccuracyOrBuilder() {
    return getHeightAndAccuracy();
  }

  public static final int DISTANCE_BETWEEN_DOUBLE_AND_ACCURACY_FIELD_NUMBER = 12;
  private org.sensoris.types.base.Int64ValueAndAccuracy distanceBetweenDoubleAndAccuracy_;
  /**
   * <pre>
   * Distance between parallel double lines.
   * Only applicable for types LINE_DOUBLE, LINE_DOUBLE_SOLID, LINE_DOUBLE_DASHED, LINE_DOUBLE_SOLID_DASHED and LINE_DOUBLE_DASHED_SOLID.
   * &#64;unit MilliMeter
   * &#64;resolution 1
   * &#64;range (0, )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   */
  public boolean hasDistanceBetweenDoubleAndAccuracy() {
    return distanceBetweenDoubleAndAccuracy_ != null;
  }
  /**
   * <pre>
   * Distance between parallel double lines.
   * Only applicable for types LINE_DOUBLE, LINE_DOUBLE_SOLID, LINE_DOUBLE_DASHED, LINE_DOUBLE_SOLID_DASHED and LINE_DOUBLE_DASHED_SOLID.
   * &#64;unit MilliMeter
   * &#64;resolution 1
   * &#64;range (0, )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   */
  public org.sensoris.types.base.Int64ValueAndAccuracy getDistanceBetweenDoubleAndAccuracy() {
    return distanceBetweenDoubleAndAccuracy_ == null ? org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : distanceBetweenDoubleAndAccuracy_;
  }
  /**
   * <pre>
   * Distance between parallel double lines.
   * Only applicable for types LINE_DOUBLE, LINE_DOUBLE_SOLID, LINE_DOUBLE_DASHED, LINE_DOUBLE_SOLID_DASHED and LINE_DOUBLE_DASHED_SOLID.
   * &#64;unit MilliMeter
   * &#64;resolution 1
   * &#64;range (0, )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
   */
  public org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getDistanceBetweenDoubleAndAccuracyOrBuilder() {
    return getDistanceBetweenDoubleAndAccuracy();
  }

  public static final int DASH_STATISTICS_FIELD_NUMBER = 13;
  /**
   * <pre>
   * Statistics of length of single lane dashes and offset between dashes on lane boundary geometry.
   * Only applicable for lane boundaries of type LONG_DASHED_LINE, SOLID_LINE_DASHED_LINE, DASHED_LINE_SOLID_LINE, SHORT_DASHED, DASHED_BLOCKS and DOUBLE_DASHED_LINE.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics dash_statistics = 13;</code>
   */
  public boolean hasDashStatistics() {
    return markingsCase_ == 13;
  }
  /**
   * <pre>
   * Statistics of length of single lane dashes and offset between dashes on lane boundary geometry.
   * Only applicable for lane boundaries of type LONG_DASHED_LINE, SOLID_LINE_DASHED_LINE, DASHED_LINE_SOLID_LINE, SHORT_DASHED, DASHED_BLOCKS and DOUBLE_DASHED_LINE.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics dash_statistics = 13;</code>
   */
  public org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics getDashStatistics() {
    if (markingsCase_ == 13) {
       return (org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics) markings_;
    }
    return org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics.getDefaultInstance();
  }
  /**
   * <pre>
   * Statistics of length of single lane dashes and offset between dashes on lane boundary geometry.
   * Only applicable for lane boundaries of type LONG_DASHED_LINE, SOLID_LINE_DASHED_LINE, DASHED_LINE_SOLID_LINE, SHORT_DASHED, DASHED_BLOCKS and DOUBLE_DASHED_LINE.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics dash_statistics = 13;</code>
   */
  public org.sensoris.categories.roadattribution.LaneBoundary.DashStatisticsOrBuilder getDashStatisticsOrBuilder() {
    if (markingsCase_ == 13) {
       return (org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics) markings_;
    }
    return org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics.getDefaultInstance();
  }

  public static final int MARKING_OFFSETS_FIELD_NUMBER = 14;
  /**
   * <pre>
   * Offsets of markings as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets marking_offsets = 14;</code>
   */
  public boolean hasMarkingOffsets() {
    return markingsCase_ == 14;
  }
  /**
   * <pre>
   * Offsets of markings as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets marking_offsets = 14;</code>
   */
  public org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets getMarkingOffsets() {
    if (markingsCase_ == 14) {
       return (org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets) markings_;
    }
    return org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.getDefaultInstance();
  }
  /**
   * <pre>
   * Offsets of markings as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets marking_offsets = 14;</code>
   */
  public org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsetsOrBuilder getMarkingOffsetsOrBuilder() {
    if (markingsCase_ == 14) {
       return (org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets) markings_;
    }
    return org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (envelope_ != null) {
      output.writeMessage(1, getEnvelope());
    }
    if (laneBoundaryId_ != null) {
      output.writeMessage(2, getLaneBoundaryId());
    }
    if (existenceConfidence_ != null) {
      output.writeMessage(3, getExistenceConfidence());
    }
    if (detectionStatus_ != null) {
      output.writeMessage(4, getDetectionStatus());
    }
    if (typeAndConfidence_ != null) {
      output.writeMessage(5, getTypeAndConfidence());
    }
    if (materialAndConfidence_ != null) {
      output.writeMessage(6, getMaterialAndConfidence());
    }
    if (colorAndConfidence_ != null) {
      output.writeMessage(7, getColorAndConfidence());
    }
    if (positionReference_ != org.sensoris.categories.roadattribution.LaneBoundary.PositionReference.UNKNOWN_POSITION_REFERENCE.getNumber()) {
      output.writeEnum(8, positionReference_);
    }
    if (geometryCase_ == 9) {
      output.writeMessage(9, (org.sensoris.types.spatial.PolylineAndAccuracy) geometry_);
    }
    if (widthAndAccuracy_ != null) {
      output.writeMessage(10, getWidthAndAccuracy());
    }
    if (heightAndAccuracy_ != null) {
      output.writeMessage(11, getHeightAndAccuracy());
    }
    if (distanceBetweenDoubleAndAccuracy_ != null) {
      output.writeMessage(12, getDistanceBetweenDoubleAndAccuracy());
    }
    if (markingsCase_ == 13) {
      output.writeMessage(13, (org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics) markings_);
    }
    if (markingsCase_ == 14) {
      output.writeMessage(14, (org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets) markings_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (envelope_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getEnvelope());
    }
    if (laneBoundaryId_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getLaneBoundaryId());
    }
    if (existenceConfidence_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getExistenceConfidence());
    }
    if (detectionStatus_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getDetectionStatus());
    }
    if (typeAndConfidence_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getTypeAndConfidence());
    }
    if (materialAndConfidence_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getMaterialAndConfidence());
    }
    if (colorAndConfidence_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getColorAndConfidence());
    }
    if (positionReference_ != org.sensoris.categories.roadattribution.LaneBoundary.PositionReference.UNKNOWN_POSITION_REFERENCE.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(8, positionReference_);
    }
    if (geometryCase_ == 9) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, (org.sensoris.types.spatial.PolylineAndAccuracy) geometry_);
    }
    if (widthAndAccuracy_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, getWidthAndAccuracy());
    }
    if (heightAndAccuracy_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, getHeightAndAccuracy());
    }
    if (distanceBetweenDoubleAndAccuracy_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, getDistanceBetweenDoubleAndAccuracy());
    }
    if (markingsCase_ == 13) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, (org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics) markings_);
    }
    if (markingsCase_ == 14) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, (org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets) markings_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.sensoris.categories.roadattribution.LaneBoundary)) {
      return super.equals(obj);
    }
    org.sensoris.categories.roadattribution.LaneBoundary other = (org.sensoris.categories.roadattribution.LaneBoundary) obj;

    boolean result = true;
    result = result && (hasEnvelope() == other.hasEnvelope());
    if (hasEnvelope()) {
      result = result && getEnvelope()
          .equals(other.getEnvelope());
    }
    result = result && (hasLaneBoundaryId() == other.hasLaneBoundaryId());
    if (hasLaneBoundaryId()) {
      result = result && getLaneBoundaryId()
          .equals(other.getLaneBoundaryId());
    }
    result = result && (hasExistenceConfidence() == other.hasExistenceConfidence());
    if (hasExistenceConfidence()) {
      result = result && getExistenceConfidence()
          .equals(other.getExistenceConfidence());
    }
    result = result && (hasDetectionStatus() == other.hasDetectionStatus());
    if (hasDetectionStatus()) {
      result = result && getDetectionStatus()
          .equals(other.getDetectionStatus());
    }
    result = result && (hasTypeAndConfidence() == other.hasTypeAndConfidence());
    if (hasTypeAndConfidence()) {
      result = result && getTypeAndConfidence()
          .equals(other.getTypeAndConfidence());
    }
    result = result && (hasMaterialAndConfidence() == other.hasMaterialAndConfidence());
    if (hasMaterialAndConfidence()) {
      result = result && getMaterialAndConfidence()
          .equals(other.getMaterialAndConfidence());
    }
    result = result && (hasColorAndConfidence() == other.hasColorAndConfidence());
    if (hasColorAndConfidence()) {
      result = result && getColorAndConfidence()
          .equals(other.getColorAndConfidence());
    }
    result = result && positionReference_ == other.positionReference_;
    result = result && (hasWidthAndAccuracy() == other.hasWidthAndAccuracy());
    if (hasWidthAndAccuracy()) {
      result = result && getWidthAndAccuracy()
          .equals(other.getWidthAndAccuracy());
    }
    result = result && (hasHeightAndAccuracy() == other.hasHeightAndAccuracy());
    if (hasHeightAndAccuracy()) {
      result = result && getHeightAndAccuracy()
          .equals(other.getHeightAndAccuracy());
    }
    result = result && (hasDistanceBetweenDoubleAndAccuracy() == other.hasDistanceBetweenDoubleAndAccuracy());
    if (hasDistanceBetweenDoubleAndAccuracy()) {
      result = result && getDistanceBetweenDoubleAndAccuracy()
          .equals(other.getDistanceBetweenDoubleAndAccuracy());
    }
    result = result && getGeometryCase().equals(
        other.getGeometryCase());
    if (!result) return false;
    switch (geometryCase_) {
      case 9:
        result = result && getPolylineAndAccuracy()
            .equals(other.getPolylineAndAccuracy());
        break;
      case 0:
      default:
    }
    result = result && getMarkingsCase().equals(
        other.getMarkingsCase());
    if (!result) return false;
    switch (markingsCase_) {
      case 13:
        result = result && getDashStatistics()
            .equals(other.getDashStatistics());
        break;
      case 14:
        result = result && getMarkingOffsets()
            .equals(other.getMarkingOffsets());
        break;
      case 0:
      default:
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasEnvelope()) {
      hash = (37 * hash) + ENVELOPE_FIELD_NUMBER;
      hash = (53 * hash) + getEnvelope().hashCode();
    }
    if (hasLaneBoundaryId()) {
      hash = (37 * hash) + LANE_BOUNDARY_ID_FIELD_NUMBER;
      hash = (53 * hash) + getLaneBoundaryId().hashCode();
    }
    if (hasExistenceConfidence()) {
      hash = (37 * hash) + EXISTENCE_CONFIDENCE_FIELD_NUMBER;
      hash = (53 * hash) + getExistenceConfidence().hashCode();
    }
    if (hasDetectionStatus()) {
      hash = (37 * hash) + DETECTION_STATUS_FIELD_NUMBER;
      hash = (53 * hash) + getDetectionStatus().hashCode();
    }
    if (hasTypeAndConfidence()) {
      hash = (37 * hash) + TYPE_AND_CONFIDENCE_FIELD_NUMBER;
      hash = (53 * hash) + getTypeAndConfidence().hashCode();
    }
    if (hasMaterialAndConfidence()) {
      hash = (37 * hash) + MATERIAL_AND_CONFIDENCE_FIELD_NUMBER;
      hash = (53 * hash) + getMaterialAndConfidence().hashCode();
    }
    if (hasColorAndConfidence()) {
      hash = (37 * hash) + COLOR_AND_CONFIDENCE_FIELD_NUMBER;
      hash = (53 * hash) + getColorAndConfidence().hashCode();
    }
    hash = (37 * hash) + POSITION_REFERENCE_FIELD_NUMBER;
    hash = (53 * hash) + positionReference_;
    if (hasWidthAndAccuracy()) {
      hash = (37 * hash) + WIDTH_AND_ACCURACY_FIELD_NUMBER;
      hash = (53 * hash) + getWidthAndAccuracy().hashCode();
    }
    if (hasHeightAndAccuracy()) {
      hash = (37 * hash) + HEIGHT_AND_ACCURACY_FIELD_NUMBER;
      hash = (53 * hash) + getHeightAndAccuracy().hashCode();
    }
    if (hasDistanceBetweenDoubleAndAccuracy()) {
      hash = (37 * hash) + DISTANCE_BETWEEN_DOUBLE_AND_ACCURACY_FIELD_NUMBER;
      hash = (53 * hash) + getDistanceBetweenDoubleAndAccuracy().hashCode();
    }
    switch (geometryCase_) {
      case 9:
        hash = (37 * hash) + POLYLINE_AND_ACCURACY_FIELD_NUMBER;
        hash = (53 * hash) + getPolylineAndAccuracy().hashCode();
        break;
      case 0:
      default:
    }
    switch (markingsCase_) {
      case 13:
        hash = (37 * hash) + DASH_STATISTICS_FIELD_NUMBER;
        hash = (53 * hash) + getDashStatistics().hashCode();
        break;
      case 14:
        hash = (37 * hash) + MARKING_OFFSETS_FIELD_NUMBER;
        hash = (53 * hash) + getMarkingOffsets().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.sensoris.categories.roadattribution.LaneBoundary parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.sensoris.categories.roadattribution.LaneBoundary parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.sensoris.categories.roadattribution.LaneBoundary parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.sensoris.categories.roadattribution.LaneBoundary parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.sensoris.categories.roadattribution.LaneBoundary parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.sensoris.categories.roadattribution.LaneBoundary parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.sensoris.categories.roadattribution.LaneBoundary parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.sensoris.categories.roadattribution.LaneBoundary parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.sensoris.categories.roadattribution.LaneBoundary parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.sensoris.categories.roadattribution.LaneBoundary parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.sensoris.categories.roadattribution.LaneBoundary parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.sensoris.categories.roadattribution.LaneBoundary parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.sensoris.categories.roadattribution.LaneBoundary prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Lane boundary.
   * For a single lane several lane boundaries to the left or right may be given. If a lane has several lane boundaries in one direction, then the lane boundaries shall be sorted by their distance to the lane.
   * &#64;relation 1..* sensoris.protobuf.categories.roadattribution.LaneBoundary LEFT_OF 1 sensoris.protobuf.categories.roadattribution.Lane
   * &#64;relation 1..* sensoris.protobuf.categories.roadattribution.LaneBoundary RIGHT_OF 1 sensoris.protobuf.categories.roadattribution.Lane
   * &#64;relation 1 sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit DERIVED_FROM 2..* sensoris.protobuf.categories.roadattribution.LaneBoundary
   * &#64;example L1 Lane R1 R2
   * Lane with lane boundary L1 to the left of type LINE_SINGLE_SOLID and lane boundaries R1 and R2 to the right with R1 of type LINE_SINGLE_SOLID and R2 of type ROAD_EDGE.
   * </pre>
   *
   * Protobuf type {@code sensoris.protobuf.categories.roadattribution.LaneBoundary}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:sensoris.protobuf.categories.roadattribution.LaneBoundary)
      org.sensoris.categories.roadattribution.LaneBoundaryOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.sensoris.categories.roadattribution.LaneBoundary.class, org.sensoris.categories.roadattribution.LaneBoundary.Builder.class);
    }

    // Construct using org.sensoris.categories.roadattribution.LaneBoundary.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      if (envelopeBuilder_ == null) {
        envelope_ = null;
      } else {
        envelope_ = null;
        envelopeBuilder_ = null;
      }
      if (laneBoundaryIdBuilder_ == null) {
        laneBoundaryId_ = null;
      } else {
        laneBoundaryId_ = null;
        laneBoundaryIdBuilder_ = null;
      }
      if (existenceConfidenceBuilder_ == null) {
        existenceConfidence_ = null;
      } else {
        existenceConfidence_ = null;
        existenceConfidenceBuilder_ = null;
      }
      if (detectionStatusBuilder_ == null) {
        detectionStatus_ = null;
      } else {
        detectionStatus_ = null;
        detectionStatusBuilder_ = null;
      }
      if (typeAndConfidenceBuilder_ == null) {
        typeAndConfidence_ = null;
      } else {
        typeAndConfidence_ = null;
        typeAndConfidenceBuilder_ = null;
      }
      if (materialAndConfidenceBuilder_ == null) {
        materialAndConfidence_ = null;
      } else {
        materialAndConfidence_ = null;
        materialAndConfidenceBuilder_ = null;
      }
      if (colorAndConfidenceBuilder_ == null) {
        colorAndConfidence_ = null;
      } else {
        colorAndConfidence_ = null;
        colorAndConfidenceBuilder_ = null;
      }
      positionReference_ = 0;

      if (widthAndAccuracyBuilder_ == null) {
        widthAndAccuracy_ = null;
      } else {
        widthAndAccuracy_ = null;
        widthAndAccuracyBuilder_ = null;
      }
      if (heightAndAccuracyBuilder_ == null) {
        heightAndAccuracy_ = null;
      } else {
        heightAndAccuracy_ = null;
        heightAndAccuracyBuilder_ = null;
      }
      if (distanceBetweenDoubleAndAccuracyBuilder_ == null) {
        distanceBetweenDoubleAndAccuracy_ = null;
      } else {
        distanceBetweenDoubleAndAccuracy_ = null;
        distanceBetweenDoubleAndAccuracyBuilder_ = null;
      }
      geometryCase_ = 0;
      geometry_ = null;
      markingsCase_ = 0;
      markings_ = null;
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.sensoris.categories.roadattribution.SensorisRoadAttributionCategory.internal_static_sensoris_protobuf_categories_roadattribution_LaneBoundary_descriptor;
    }

    public org.sensoris.categories.roadattribution.LaneBoundary getDefaultInstanceForType() {
      return org.sensoris.categories.roadattribution.LaneBoundary.getDefaultInstance();
    }

    public org.sensoris.categories.roadattribution.LaneBoundary build() {
      org.sensoris.categories.roadattribution.LaneBoundary result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.sensoris.categories.roadattribution.LaneBoundary buildPartial() {
      org.sensoris.categories.roadattribution.LaneBoundary result = new org.sensoris.categories.roadattribution.LaneBoundary(this);
      if (envelopeBuilder_ == null) {
        result.envelope_ = envelope_;
      } else {
        result.envelope_ = envelopeBuilder_.build();
      }
      if (laneBoundaryIdBuilder_ == null) {
        result.laneBoundaryId_ = laneBoundaryId_;
      } else {
        result.laneBoundaryId_ = laneBoundaryIdBuilder_.build();
      }
      if (existenceConfidenceBuilder_ == null) {
        result.existenceConfidence_ = existenceConfidence_;
      } else {
        result.existenceConfidence_ = existenceConfidenceBuilder_.build();
      }
      if (detectionStatusBuilder_ == null) {
        result.detectionStatus_ = detectionStatus_;
      } else {
        result.detectionStatus_ = detectionStatusBuilder_.build();
      }
      if (typeAndConfidenceBuilder_ == null) {
        result.typeAndConfidence_ = typeAndConfidence_;
      } else {
        result.typeAndConfidence_ = typeAndConfidenceBuilder_.build();
      }
      if (materialAndConfidenceBuilder_ == null) {
        result.materialAndConfidence_ = materialAndConfidence_;
      } else {
        result.materialAndConfidence_ = materialAndConfidenceBuilder_.build();
      }
      if (colorAndConfidenceBuilder_ == null) {
        result.colorAndConfidence_ = colorAndConfidence_;
      } else {
        result.colorAndConfidence_ = colorAndConfidenceBuilder_.build();
      }
      result.positionReference_ = positionReference_;
      if (geometryCase_ == 9) {
        if (polylineAndAccuracyBuilder_ == null) {
          result.geometry_ = geometry_;
        } else {
          result.geometry_ = polylineAndAccuracyBuilder_.build();
        }
      }
      if (widthAndAccuracyBuilder_ == null) {
        result.widthAndAccuracy_ = widthAndAccuracy_;
      } else {
        result.widthAndAccuracy_ = widthAndAccuracyBuilder_.build();
      }
      if (heightAndAccuracyBuilder_ == null) {
        result.heightAndAccuracy_ = heightAndAccuracy_;
      } else {
        result.heightAndAccuracy_ = heightAndAccuracyBuilder_.build();
      }
      if (distanceBetweenDoubleAndAccuracyBuilder_ == null) {
        result.distanceBetweenDoubleAndAccuracy_ = distanceBetweenDoubleAndAccuracy_;
      } else {
        result.distanceBetweenDoubleAndAccuracy_ = distanceBetweenDoubleAndAccuracyBuilder_.build();
      }
      if (markingsCase_ == 13) {
        if (dashStatisticsBuilder_ == null) {
          result.markings_ = markings_;
        } else {
          result.markings_ = dashStatisticsBuilder_.build();
        }
      }
      if (markingsCase_ == 14) {
        if (markingOffsetsBuilder_ == null) {
          result.markings_ = markings_;
        } else {
          result.markings_ = markingOffsetsBuilder_.build();
        }
      }
      result.geometryCase_ = geometryCase_;
      result.markingsCase_ = markingsCase_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.sensoris.categories.roadattribution.LaneBoundary) {
        return mergeFrom((org.sensoris.categories.roadattribution.LaneBoundary)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.sensoris.categories.roadattribution.LaneBoundary other) {
      if (other == org.sensoris.categories.roadattribution.LaneBoundary.getDefaultInstance()) return this;
      if (other.hasEnvelope()) {
        mergeEnvelope(other.getEnvelope());
      }
      if (other.hasLaneBoundaryId()) {
        mergeLaneBoundaryId(other.getLaneBoundaryId());
      }
      if (other.hasExistenceConfidence()) {
        mergeExistenceConfidence(other.getExistenceConfidence());
      }
      if (other.hasDetectionStatus()) {
        mergeDetectionStatus(other.getDetectionStatus());
      }
      if (other.hasTypeAndConfidence()) {
        mergeTypeAndConfidence(other.getTypeAndConfidence());
      }
      if (other.hasMaterialAndConfidence()) {
        mergeMaterialAndConfidence(other.getMaterialAndConfidence());
      }
      if (other.hasColorAndConfidence()) {
        mergeColorAndConfidence(other.getColorAndConfidence());
      }
      if (other.positionReference_ != 0) {
        setPositionReferenceValue(other.getPositionReferenceValue());
      }
      if (other.hasWidthAndAccuracy()) {
        mergeWidthAndAccuracy(other.getWidthAndAccuracy());
      }
      if (other.hasHeightAndAccuracy()) {
        mergeHeightAndAccuracy(other.getHeightAndAccuracy());
      }
      if (other.hasDistanceBetweenDoubleAndAccuracy()) {
        mergeDistanceBetweenDoubleAndAccuracy(other.getDistanceBetweenDoubleAndAccuracy());
      }
      switch (other.getGeometryCase()) {
        case POLYLINE_AND_ACCURACY: {
          mergePolylineAndAccuracy(other.getPolylineAndAccuracy());
          break;
        }
        case GEOMETRY_NOT_SET: {
          break;
        }
      }
      switch (other.getMarkingsCase()) {
        case DASH_STATISTICS: {
          mergeDashStatistics(other.getDashStatistics());
          break;
        }
        case MARKING_OFFSETS: {
          mergeMarkingOffsets(other.getMarkingOffsets());
          break;
        }
        case MARKINGS_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.sensoris.categories.roadattribution.LaneBoundary parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.sensoris.categories.roadattribution.LaneBoundary) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int geometryCase_ = 0;
    private java.lang.Object geometry_;
    public GeometryCase
        getGeometryCase() {
      return GeometryCase.forNumber(
          geometryCase_);
    }

    public Builder clearGeometry() {
      geometryCase_ = 0;
      geometry_ = null;
      onChanged();
      return this;
    }

    private int markingsCase_ = 0;
    private java.lang.Object markings_;
    public MarkingsCase
        getMarkingsCase() {
      return MarkingsCase.forNumber(
          markingsCase_);
    }

    public Builder clearMarkings() {
      markingsCase_ = 0;
      markings_ = null;
      onChanged();
      return this;
    }


    private org.sensoris.types.base.EventEnvelope envelope_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.EventEnvelope, org.sensoris.types.base.EventEnvelope.Builder, org.sensoris.types.base.EventEnvelopeOrBuilder> envelopeBuilder_;
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    public boolean hasEnvelope() {
      return envelopeBuilder_ != null || envelope_ != null;
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    public org.sensoris.types.base.EventEnvelope getEnvelope() {
      if (envelopeBuilder_ == null) {
        return envelope_ == null ? org.sensoris.types.base.EventEnvelope.getDefaultInstance() : envelope_;
      } else {
        return envelopeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    public Builder setEnvelope(org.sensoris.types.base.EventEnvelope value) {
      if (envelopeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        envelope_ = value;
        onChanged();
      } else {
        envelopeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    public Builder setEnvelope(
        org.sensoris.types.base.EventEnvelope.Builder builderForValue) {
      if (envelopeBuilder_ == null) {
        envelope_ = builderForValue.build();
        onChanged();
      } else {
        envelopeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    public Builder mergeEnvelope(org.sensoris.types.base.EventEnvelope value) {
      if (envelopeBuilder_ == null) {
        if (envelope_ != null) {
          envelope_ =
            org.sensoris.types.base.EventEnvelope.newBuilder(envelope_).mergeFrom(value).buildPartial();
        } else {
          envelope_ = value;
        }
        onChanged();
      } else {
        envelopeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    public Builder clearEnvelope() {
      if (envelopeBuilder_ == null) {
        envelope_ = null;
        onChanged();
      } else {
        envelope_ = null;
        envelopeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    public org.sensoris.types.base.EventEnvelope.Builder getEnvelopeBuilder() {
      
      onChanged();
      return getEnvelopeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    public org.sensoris.types.base.EventEnvelopeOrBuilder getEnvelopeOrBuilder() {
      if (envelopeBuilder_ != null) {
        return envelopeBuilder_.getMessageOrBuilder();
      } else {
        return envelope_ == null ?
            org.sensoris.types.base.EventEnvelope.getDefaultInstance() : envelope_;
      }
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.EventEnvelope, org.sensoris.types.base.EventEnvelope.Builder, org.sensoris.types.base.EventEnvelopeOrBuilder> 
        getEnvelopeFieldBuilder() {
      if (envelopeBuilder_ == null) {
        envelopeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.types.base.EventEnvelope, org.sensoris.types.base.EventEnvelope.Builder, org.sensoris.types.base.EventEnvelopeOrBuilder>(
                getEnvelope(),
                getParentForChildren(),
                isClean());
        envelope_ = null;
      }
      return envelopeBuilder_;
    }

    private com.google.protobuf.Int64Value laneBoundaryId_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> laneBoundaryIdBuilder_;
    /**
     * <pre>
     * Lane boundary identifier.
     * Identifier is unique within a DataMessage and can be used to trace lane boundaries between LaneBoundary events.
     * &#64;unit 1
     * &#64;resolution 1
     * &#64;range [1, )
     * </pre>
     *
     * <code>.google.protobuf.Int64Value lane_boundary_id = 2;</code>
     */
    public boolean hasLaneBoundaryId() {
      return laneBoundaryIdBuilder_ != null || laneBoundaryId_ != null;
    }
    /**
     * <pre>
     * Lane boundary identifier.
     * Identifier is unique within a DataMessage and can be used to trace lane boundaries between LaneBoundary events.
     * &#64;unit 1
     * &#64;resolution 1
     * &#64;range [1, )
     * </pre>
     *
     * <code>.google.protobuf.Int64Value lane_boundary_id = 2;</code>
     */
    public com.google.protobuf.Int64Value getLaneBoundaryId() {
      if (laneBoundaryIdBuilder_ == null) {
        return laneBoundaryId_ == null ? com.google.protobuf.Int64Value.getDefaultInstance() : laneBoundaryId_;
      } else {
        return laneBoundaryIdBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Lane boundary identifier.
     * Identifier is unique within a DataMessage and can be used to trace lane boundaries between LaneBoundary events.
     * &#64;unit 1
     * &#64;resolution 1
     * &#64;range [1, )
     * </pre>
     *
     * <code>.google.protobuf.Int64Value lane_boundary_id = 2;</code>
     */
    public Builder setLaneBoundaryId(com.google.protobuf.Int64Value value) {
      if (laneBoundaryIdBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        laneBoundaryId_ = value;
        onChanged();
      } else {
        laneBoundaryIdBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Lane boundary identifier.
     * Identifier is unique within a DataMessage and can be used to trace lane boundaries between LaneBoundary events.
     * &#64;unit 1
     * &#64;resolution 1
     * &#64;range [1, )
     * </pre>
     *
     * <code>.google.protobuf.Int64Value lane_boundary_id = 2;</code>
     */
    public Builder setLaneBoundaryId(
        com.google.protobuf.Int64Value.Builder builderForValue) {
      if (laneBoundaryIdBuilder_ == null) {
        laneBoundaryId_ = builderForValue.build();
        onChanged();
      } else {
        laneBoundaryIdBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Lane boundary identifier.
     * Identifier is unique within a DataMessage and can be used to trace lane boundaries between LaneBoundary events.
     * &#64;unit 1
     * &#64;resolution 1
     * &#64;range [1, )
     * </pre>
     *
     * <code>.google.protobuf.Int64Value lane_boundary_id = 2;</code>
     */
    public Builder mergeLaneBoundaryId(com.google.protobuf.Int64Value value) {
      if (laneBoundaryIdBuilder_ == null) {
        if (laneBoundaryId_ != null) {
          laneBoundaryId_ =
            com.google.protobuf.Int64Value.newBuilder(laneBoundaryId_).mergeFrom(value).buildPartial();
        } else {
          laneBoundaryId_ = value;
        }
        onChanged();
      } else {
        laneBoundaryIdBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Lane boundary identifier.
     * Identifier is unique within a DataMessage and can be used to trace lane boundaries between LaneBoundary events.
     * &#64;unit 1
     * &#64;resolution 1
     * &#64;range [1, )
     * </pre>
     *
     * <code>.google.protobuf.Int64Value lane_boundary_id = 2;</code>
     */
    public Builder clearLaneBoundaryId() {
      if (laneBoundaryIdBuilder_ == null) {
        laneBoundaryId_ = null;
        onChanged();
      } else {
        laneBoundaryId_ = null;
        laneBoundaryIdBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Lane boundary identifier.
     * Identifier is unique within a DataMessage and can be used to trace lane boundaries between LaneBoundary events.
     * &#64;unit 1
     * &#64;resolution 1
     * &#64;range [1, )
     * </pre>
     *
     * <code>.google.protobuf.Int64Value lane_boundary_id = 2;</code>
     */
    public com.google.protobuf.Int64Value.Builder getLaneBoundaryIdBuilder() {
      
      onChanged();
      return getLaneBoundaryIdFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Lane boundary identifier.
     * Identifier is unique within a DataMessage and can be used to trace lane boundaries between LaneBoundary events.
     * &#64;unit 1
     * &#64;resolution 1
     * &#64;range [1, )
     * </pre>
     *
     * <code>.google.protobuf.Int64Value lane_boundary_id = 2;</code>
     */
    public com.google.protobuf.Int64ValueOrBuilder getLaneBoundaryIdOrBuilder() {
      if (laneBoundaryIdBuilder_ != null) {
        return laneBoundaryIdBuilder_.getMessageOrBuilder();
      } else {
        return laneBoundaryId_ == null ?
            com.google.protobuf.Int64Value.getDefaultInstance() : laneBoundaryId_;
      }
    }
    /**
     * <pre>
     * Lane boundary identifier.
     * Identifier is unique within a DataMessage and can be used to trace lane boundaries between LaneBoundary events.
     * &#64;unit 1
     * &#64;resolution 1
     * &#64;range [1, )
     * </pre>
     *
     * <code>.google.protobuf.Int64Value lane_boundary_id = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder> 
        getLaneBoundaryIdFieldBuilder() {
      if (laneBoundaryIdBuilder_ == null) {
        laneBoundaryIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Int64Value, com.google.protobuf.Int64Value.Builder, com.google.protobuf.Int64ValueOrBuilder>(
                getLaneBoundaryId(),
                getParentForChildren(),
                isClean());
        laneBoundaryId_ = null;
      }
      return laneBoundaryIdBuilder_;
    }

    private org.sensoris.types.base.Confidence existenceConfidence_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder> existenceConfidenceBuilder_;
    /**
     * <pre>
     * Confidence that a lane boundary has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 3;</code>
     */
    public boolean hasExistenceConfidence() {
      return existenceConfidenceBuilder_ != null || existenceConfidence_ != null;
    }
    /**
     * <pre>
     * Confidence that a lane boundary has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 3;</code>
     */
    public org.sensoris.types.base.Confidence getExistenceConfidence() {
      if (existenceConfidenceBuilder_ == null) {
        return existenceConfidence_ == null ? org.sensoris.types.base.Confidence.getDefaultInstance() : existenceConfidence_;
      } else {
        return existenceConfidenceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Confidence that a lane boundary has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 3;</code>
     */
    public Builder setExistenceConfidence(org.sensoris.types.base.Confidence value) {
      if (existenceConfidenceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        existenceConfidence_ = value;
        onChanged();
      } else {
        existenceConfidenceBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Confidence that a lane boundary has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 3;</code>
     */
    public Builder setExistenceConfidence(
        org.sensoris.types.base.Confidence.Builder builderForValue) {
      if (existenceConfidenceBuilder_ == null) {
        existenceConfidence_ = builderForValue.build();
        onChanged();
      } else {
        existenceConfidenceBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Confidence that a lane boundary has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 3;</code>
     */
    public Builder mergeExistenceConfidence(org.sensoris.types.base.Confidence value) {
      if (existenceConfidenceBuilder_ == null) {
        if (existenceConfidence_ != null) {
          existenceConfidence_ =
            org.sensoris.types.base.Confidence.newBuilder(existenceConfidence_).mergeFrom(value).buildPartial();
        } else {
          existenceConfidence_ = value;
        }
        onChanged();
      } else {
        existenceConfidenceBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Confidence that a lane boundary has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 3;</code>
     */
    public Builder clearExistenceConfidence() {
      if (existenceConfidenceBuilder_ == null) {
        existenceConfidence_ = null;
        onChanged();
      } else {
        existenceConfidence_ = null;
        existenceConfidenceBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Confidence that a lane boundary has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 3;</code>
     */
    public org.sensoris.types.base.Confidence.Builder getExistenceConfidenceBuilder() {
      
      onChanged();
      return getExistenceConfidenceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Confidence that a lane boundary has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 3;</code>
     */
    public org.sensoris.types.base.ConfidenceOrBuilder getExistenceConfidenceOrBuilder() {
      if (existenceConfidenceBuilder_ != null) {
        return existenceConfidenceBuilder_.getMessageOrBuilder();
      } else {
        return existenceConfidence_ == null ?
            org.sensoris.types.base.Confidence.getDefaultInstance() : existenceConfidence_;
      }
    }
    /**
     * <pre>
     * Confidence that a lane boundary has been detected.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Confidence existence_confidence = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder> 
        getExistenceConfidenceFieldBuilder() {
      if (existenceConfidenceBuilder_ == null) {
        existenceConfidenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.types.base.Confidence, org.sensoris.types.base.Confidence.Builder, org.sensoris.types.base.ConfidenceOrBuilder>(
                getExistenceConfidence(),
                getParentForChildren(),
                isClean());
        existenceConfidence_ = null;
      }
      return existenceConfidenceBuilder_;
    }

    private org.sensoris.types.base.EventDetectionStatus detectionStatus_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.EventDetectionStatus, org.sensoris.types.base.EventDetectionStatus.Builder, org.sensoris.types.base.EventDetectionStatusOrBuilder> detectionStatusBuilder_;
    /**
     * <pre>
     * Event detection status.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;</code>
     */
    public boolean hasDetectionStatus() {
      return detectionStatusBuilder_ != null || detectionStatus_ != null;
    }
    /**
     * <pre>
     * Event detection status.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;</code>
     */
    public org.sensoris.types.base.EventDetectionStatus getDetectionStatus() {
      if (detectionStatusBuilder_ == null) {
        return detectionStatus_ == null ? org.sensoris.types.base.EventDetectionStatus.getDefaultInstance() : detectionStatus_;
      } else {
        return detectionStatusBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Event detection status.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;</code>
     */
    public Builder setDetectionStatus(org.sensoris.types.base.EventDetectionStatus value) {
      if (detectionStatusBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        detectionStatus_ = value;
        onChanged();
      } else {
        detectionStatusBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Event detection status.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;</code>
     */
    public Builder setDetectionStatus(
        org.sensoris.types.base.EventDetectionStatus.Builder builderForValue) {
      if (detectionStatusBuilder_ == null) {
        detectionStatus_ = builderForValue.build();
        onChanged();
      } else {
        detectionStatusBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Event detection status.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;</code>
     */
    public Builder mergeDetectionStatus(org.sensoris.types.base.EventDetectionStatus value) {
      if (detectionStatusBuilder_ == null) {
        if (detectionStatus_ != null) {
          detectionStatus_ =
            org.sensoris.types.base.EventDetectionStatus.newBuilder(detectionStatus_).mergeFrom(value).buildPartial();
        } else {
          detectionStatus_ = value;
        }
        onChanged();
      } else {
        detectionStatusBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Event detection status.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;</code>
     */
    public Builder clearDetectionStatus() {
      if (detectionStatusBuilder_ == null) {
        detectionStatus_ = null;
        onChanged();
      } else {
        detectionStatus_ = null;
        detectionStatusBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Event detection status.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;</code>
     */
    public org.sensoris.types.base.EventDetectionStatus.Builder getDetectionStatusBuilder() {
      
      onChanged();
      return getDetectionStatusFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Event detection status.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;</code>
     */
    public org.sensoris.types.base.EventDetectionStatusOrBuilder getDetectionStatusOrBuilder() {
      if (detectionStatusBuilder_ != null) {
        return detectionStatusBuilder_.getMessageOrBuilder();
      } else {
        return detectionStatus_ == null ?
            org.sensoris.types.base.EventDetectionStatus.getDefaultInstance() : detectionStatus_;
      }
    }
    /**
     * <pre>
     * Event detection status.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.EventDetectionStatus, org.sensoris.types.base.EventDetectionStatus.Builder, org.sensoris.types.base.EventDetectionStatusOrBuilder> 
        getDetectionStatusFieldBuilder() {
      if (detectionStatusBuilder_ == null) {
        detectionStatusBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.types.base.EventDetectionStatus, org.sensoris.types.base.EventDetectionStatus.Builder, org.sensoris.types.base.EventDetectionStatusOrBuilder>(
                getDetectionStatus(),
                getParentForChildren(),
                isClean());
        detectionStatus_ = null;
      }
      return detectionStatusBuilder_;
    }

    private org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence typeAndConfidence_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence, org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.Builder, org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidenceOrBuilder> typeAndConfidenceBuilder_;
    /**
     * <pre>
     * Type and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;</code>
     */
    public boolean hasTypeAndConfidence() {
      return typeAndConfidenceBuilder_ != null || typeAndConfidence_ != null;
    }
    /**
     * <pre>
     * Type and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;</code>
     */
    public org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence getTypeAndConfidence() {
      if (typeAndConfidenceBuilder_ == null) {
        return typeAndConfidence_ == null ? org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.getDefaultInstance() : typeAndConfidence_;
      } else {
        return typeAndConfidenceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Type and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;</code>
     */
    public Builder setTypeAndConfidence(org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence value) {
      if (typeAndConfidenceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        typeAndConfidence_ = value;
        onChanged();
      } else {
        typeAndConfidenceBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Type and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;</code>
     */
    public Builder setTypeAndConfidence(
        org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.Builder builderForValue) {
      if (typeAndConfidenceBuilder_ == null) {
        typeAndConfidence_ = builderForValue.build();
        onChanged();
      } else {
        typeAndConfidenceBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Type and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;</code>
     */
    public Builder mergeTypeAndConfidence(org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence value) {
      if (typeAndConfidenceBuilder_ == null) {
        if (typeAndConfidence_ != null) {
          typeAndConfidence_ =
            org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.newBuilder(typeAndConfidence_).mergeFrom(value).buildPartial();
        } else {
          typeAndConfidence_ = value;
        }
        onChanged();
      } else {
        typeAndConfidenceBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Type and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;</code>
     */
    public Builder clearTypeAndConfidence() {
      if (typeAndConfidenceBuilder_ == null) {
        typeAndConfidence_ = null;
        onChanged();
      } else {
        typeAndConfidence_ = null;
        typeAndConfidenceBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Type and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;</code>
     */
    public org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.Builder getTypeAndConfidenceBuilder() {
      
      onChanged();
      return getTypeAndConfidenceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Type and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;</code>
     */
    public org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidenceOrBuilder getTypeAndConfidenceOrBuilder() {
      if (typeAndConfidenceBuilder_ != null) {
        return typeAndConfidenceBuilder_.getMessageOrBuilder();
      } else {
        return typeAndConfidence_ == null ?
            org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.getDefaultInstance() : typeAndConfidence_;
      }
    }
    /**
     * <pre>
     * Type and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence, org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.Builder, org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidenceOrBuilder> 
        getTypeAndConfidenceFieldBuilder() {
      if (typeAndConfidenceBuilder_ == null) {
        typeAndConfidenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence, org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidence.Builder, org.sensoris.categories.roadattribution.LaneBoundary.TypeAndConfidenceOrBuilder>(
                getTypeAndConfidence(),
                getParentForChildren(),
                isClean());
        typeAndConfidence_ = null;
      }
      return typeAndConfidenceBuilder_;
    }

    private org.sensoris.categories.roadattribution.MarkingMaterialAndConfidence materialAndConfidence_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.categories.roadattribution.MarkingMaterialAndConfidence, org.sensoris.categories.roadattribution.MarkingMaterialAndConfidence.Builder, org.sensoris.categories.roadattribution.MarkingMaterialAndConfidenceOrBuilder> materialAndConfidenceBuilder_;
    /**
     * <pre>
     * Material and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;</code>
     */
    public boolean hasMaterialAndConfidence() {
      return materialAndConfidenceBuilder_ != null || materialAndConfidence_ != null;
    }
    /**
     * <pre>
     * Material and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;</code>
     */
    public org.sensoris.categories.roadattribution.MarkingMaterialAndConfidence getMaterialAndConfidence() {
      if (materialAndConfidenceBuilder_ == null) {
        return materialAndConfidence_ == null ? org.sensoris.categories.roadattribution.MarkingMaterialAndConfidence.getDefaultInstance() : materialAndConfidence_;
      } else {
        return materialAndConfidenceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Material and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;</code>
     */
    public Builder setMaterialAndConfidence(org.sensoris.categories.roadattribution.MarkingMaterialAndConfidence value) {
      if (materialAndConfidenceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        materialAndConfidence_ = value;
        onChanged();
      } else {
        materialAndConfidenceBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Material and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;</code>
     */
    public Builder setMaterialAndConfidence(
        org.sensoris.categories.roadattribution.MarkingMaterialAndConfidence.Builder builderForValue) {
      if (materialAndConfidenceBuilder_ == null) {
        materialAndConfidence_ = builderForValue.build();
        onChanged();
      } else {
        materialAndConfidenceBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Material and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;</code>
     */
    public Builder mergeMaterialAndConfidence(org.sensoris.categories.roadattribution.MarkingMaterialAndConfidence value) {
      if (materialAndConfidenceBuilder_ == null) {
        if (materialAndConfidence_ != null) {
          materialAndConfidence_ =
            org.sensoris.categories.roadattribution.MarkingMaterialAndConfidence.newBuilder(materialAndConfidence_).mergeFrom(value).buildPartial();
        } else {
          materialAndConfidence_ = value;
        }
        onChanged();
      } else {
        materialAndConfidenceBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Material and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;</code>
     */
    public Builder clearMaterialAndConfidence() {
      if (materialAndConfidenceBuilder_ == null) {
        materialAndConfidence_ = null;
        onChanged();
      } else {
        materialAndConfidence_ = null;
        materialAndConfidenceBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Material and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;</code>
     */
    public org.sensoris.categories.roadattribution.MarkingMaterialAndConfidence.Builder getMaterialAndConfidenceBuilder() {
      
      onChanged();
      return getMaterialAndConfidenceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Material and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;</code>
     */
    public org.sensoris.categories.roadattribution.MarkingMaterialAndConfidenceOrBuilder getMaterialAndConfidenceOrBuilder() {
      if (materialAndConfidenceBuilder_ != null) {
        return materialAndConfidenceBuilder_.getMessageOrBuilder();
      } else {
        return materialAndConfidence_ == null ?
            org.sensoris.categories.roadattribution.MarkingMaterialAndConfidence.getDefaultInstance() : materialAndConfidence_;
      }
    }
    /**
     * <pre>
     * Material and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.categories.roadattribution.MarkingMaterialAndConfidence, org.sensoris.categories.roadattribution.MarkingMaterialAndConfidence.Builder, org.sensoris.categories.roadattribution.MarkingMaterialAndConfidenceOrBuilder> 
        getMaterialAndConfidenceFieldBuilder() {
      if (materialAndConfidenceBuilder_ == null) {
        materialAndConfidenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.categories.roadattribution.MarkingMaterialAndConfidence, org.sensoris.categories.roadattribution.MarkingMaterialAndConfidence.Builder, org.sensoris.categories.roadattribution.MarkingMaterialAndConfidenceOrBuilder>(
                getMaterialAndConfidence(),
                getParentForChildren(),
                isClean());
        materialAndConfidence_ = null;
      }
      return materialAndConfidenceBuilder_;
    }

    private org.sensoris.categories.roadattribution.MarkingColorAndConfidence colorAndConfidence_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.categories.roadattribution.MarkingColorAndConfidence, org.sensoris.categories.roadattribution.MarkingColorAndConfidence.Builder, org.sensoris.categories.roadattribution.MarkingColorAndConfidenceOrBuilder> colorAndConfidenceBuilder_;
    /**
     * <pre>
     * Marking color and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;</code>
     */
    public boolean hasColorAndConfidence() {
      return colorAndConfidenceBuilder_ != null || colorAndConfidence_ != null;
    }
    /**
     * <pre>
     * Marking color and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;</code>
     */
    public org.sensoris.categories.roadattribution.MarkingColorAndConfidence getColorAndConfidence() {
      if (colorAndConfidenceBuilder_ == null) {
        return colorAndConfidence_ == null ? org.sensoris.categories.roadattribution.MarkingColorAndConfidence.getDefaultInstance() : colorAndConfidence_;
      } else {
        return colorAndConfidenceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Marking color and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;</code>
     */
    public Builder setColorAndConfidence(org.sensoris.categories.roadattribution.MarkingColorAndConfidence value) {
      if (colorAndConfidenceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        colorAndConfidence_ = value;
        onChanged();
      } else {
        colorAndConfidenceBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Marking color and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;</code>
     */
    public Builder setColorAndConfidence(
        org.sensoris.categories.roadattribution.MarkingColorAndConfidence.Builder builderForValue) {
      if (colorAndConfidenceBuilder_ == null) {
        colorAndConfidence_ = builderForValue.build();
        onChanged();
      } else {
        colorAndConfidenceBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Marking color and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;</code>
     */
    public Builder mergeColorAndConfidence(org.sensoris.categories.roadattribution.MarkingColorAndConfidence value) {
      if (colorAndConfidenceBuilder_ == null) {
        if (colorAndConfidence_ != null) {
          colorAndConfidence_ =
            org.sensoris.categories.roadattribution.MarkingColorAndConfidence.newBuilder(colorAndConfidence_).mergeFrom(value).buildPartial();
        } else {
          colorAndConfidence_ = value;
        }
        onChanged();
      } else {
        colorAndConfidenceBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Marking color and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;</code>
     */
    public Builder clearColorAndConfidence() {
      if (colorAndConfidenceBuilder_ == null) {
        colorAndConfidence_ = null;
        onChanged();
      } else {
        colorAndConfidence_ = null;
        colorAndConfidenceBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Marking color and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;</code>
     */
    public org.sensoris.categories.roadattribution.MarkingColorAndConfidence.Builder getColorAndConfidenceBuilder() {
      
      onChanged();
      return getColorAndConfidenceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Marking color and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;</code>
     */
    public org.sensoris.categories.roadattribution.MarkingColorAndConfidenceOrBuilder getColorAndConfidenceOrBuilder() {
      if (colorAndConfidenceBuilder_ != null) {
        return colorAndConfidenceBuilder_.getMessageOrBuilder();
      } else {
        return colorAndConfidence_ == null ?
            org.sensoris.categories.roadattribution.MarkingColorAndConfidence.getDefaultInstance() : colorAndConfidence_;
      }
    }
    /**
     * <pre>
     * Marking color and confidence.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.categories.roadattribution.MarkingColorAndConfidence, org.sensoris.categories.roadattribution.MarkingColorAndConfidence.Builder, org.sensoris.categories.roadattribution.MarkingColorAndConfidenceOrBuilder> 
        getColorAndConfidenceFieldBuilder() {
      if (colorAndConfidenceBuilder_ == null) {
        colorAndConfidenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.categories.roadattribution.MarkingColorAndConfidence, org.sensoris.categories.roadattribution.MarkingColorAndConfidence.Builder, org.sensoris.categories.roadattribution.MarkingColorAndConfidenceOrBuilder>(
                getColorAndConfidence(),
                getParentForChildren(),
                isClean());
        colorAndConfidence_ = null;
      }
      return colorAndConfidenceBuilder_;
    }

    private int positionReference_ = 0;
    /**
     * <pre>
     * Position reference of lane boundary marking geometry, i.e. polyline_and_accuracy represents left boundary, center line or right boundary of the lane boundary markings.
     * Whereas for e.g. lines all values may be used, for physical barriers the geometry shall represent the boundary closest to the vehicle.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.PositionReference position_reference = 8;</code>
     */
    public int getPositionReferenceValue() {
      return positionReference_;
    }
    /**
     * <pre>
     * Position reference of lane boundary marking geometry, i.e. polyline_and_accuracy represents left boundary, center line or right boundary of the lane boundary markings.
     * Whereas for e.g. lines all values may be used, for physical barriers the geometry shall represent the boundary closest to the vehicle.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.PositionReference position_reference = 8;</code>
     */
    public Builder setPositionReferenceValue(int value) {
      positionReference_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Position reference of lane boundary marking geometry, i.e. polyline_and_accuracy represents left boundary, center line or right boundary of the lane boundary markings.
     * Whereas for e.g. lines all values may be used, for physical barriers the geometry shall represent the boundary closest to the vehicle.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.PositionReference position_reference = 8;</code>
     */
    public org.sensoris.categories.roadattribution.LaneBoundary.PositionReference getPositionReference() {
      org.sensoris.categories.roadattribution.LaneBoundary.PositionReference result = org.sensoris.categories.roadattribution.LaneBoundary.PositionReference.valueOf(positionReference_);
      return result == null ? org.sensoris.categories.roadattribution.LaneBoundary.PositionReference.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Position reference of lane boundary marking geometry, i.e. polyline_and_accuracy represents left boundary, center line or right boundary of the lane boundary markings.
     * Whereas for e.g. lines all values may be used, for physical barriers the geometry shall represent the boundary closest to the vehicle.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.PositionReference position_reference = 8;</code>
     */
    public Builder setPositionReference(org.sensoris.categories.roadattribution.LaneBoundary.PositionReference value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      positionReference_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Position reference of lane boundary marking geometry, i.e. polyline_and_accuracy represents left boundary, center line or right boundary of the lane boundary markings.
     * Whereas for e.g. lines all values may be used, for physical barriers the geometry shall represent the boundary closest to the vehicle.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.PositionReference position_reference = 8;</code>
     */
    public Builder clearPositionReference() {
      
      positionReference_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.spatial.PolylineAndAccuracy, org.sensoris.types.spatial.PolylineAndAccuracy.Builder, org.sensoris.types.spatial.PolylineAndAccuracyOrBuilder> polylineAndAccuracyBuilder_;
    /**
     * <pre>
     * Polyline geometry.
     * Polyline can also be a single point.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.spatial.PolylineAndAccuracy polyline_and_accuracy = 9;</code>
     */
    public boolean hasPolylineAndAccuracy() {
      return geometryCase_ == 9;
    }
    /**
     * <pre>
     * Polyline geometry.
     * Polyline can also be a single point.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.spatial.PolylineAndAccuracy polyline_and_accuracy = 9;</code>
     */
    public org.sensoris.types.spatial.PolylineAndAccuracy getPolylineAndAccuracy() {
      if (polylineAndAccuracyBuilder_ == null) {
        if (geometryCase_ == 9) {
          return (org.sensoris.types.spatial.PolylineAndAccuracy) geometry_;
        }
        return org.sensoris.types.spatial.PolylineAndAccuracy.getDefaultInstance();
      } else {
        if (geometryCase_ == 9) {
          return polylineAndAccuracyBuilder_.getMessage();
        }
        return org.sensoris.types.spatial.PolylineAndAccuracy.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Polyline geometry.
     * Polyline can also be a single point.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.spatial.PolylineAndAccuracy polyline_and_accuracy = 9;</code>
     */
    public Builder setPolylineAndAccuracy(org.sensoris.types.spatial.PolylineAndAccuracy value) {
      if (polylineAndAccuracyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        geometry_ = value;
        onChanged();
      } else {
        polylineAndAccuracyBuilder_.setMessage(value);
      }
      geometryCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * Polyline geometry.
     * Polyline can also be a single point.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.spatial.PolylineAndAccuracy polyline_and_accuracy = 9;</code>
     */
    public Builder setPolylineAndAccuracy(
        org.sensoris.types.spatial.PolylineAndAccuracy.Builder builderForValue) {
      if (polylineAndAccuracyBuilder_ == null) {
        geometry_ = builderForValue.build();
        onChanged();
      } else {
        polylineAndAccuracyBuilder_.setMessage(builderForValue.build());
      }
      geometryCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * Polyline geometry.
     * Polyline can also be a single point.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.spatial.PolylineAndAccuracy polyline_and_accuracy = 9;</code>
     */
    public Builder mergePolylineAndAccuracy(org.sensoris.types.spatial.PolylineAndAccuracy value) {
      if (polylineAndAccuracyBuilder_ == null) {
        if (geometryCase_ == 9 &&
            geometry_ != org.sensoris.types.spatial.PolylineAndAccuracy.getDefaultInstance()) {
          geometry_ = org.sensoris.types.spatial.PolylineAndAccuracy.newBuilder((org.sensoris.types.spatial.PolylineAndAccuracy) geometry_)
              .mergeFrom(value).buildPartial();
        } else {
          geometry_ = value;
        }
        onChanged();
      } else {
        if (geometryCase_ == 9) {
          polylineAndAccuracyBuilder_.mergeFrom(value);
        }
        polylineAndAccuracyBuilder_.setMessage(value);
      }
      geometryCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * Polyline geometry.
     * Polyline can also be a single point.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.spatial.PolylineAndAccuracy polyline_and_accuracy = 9;</code>
     */
    public Builder clearPolylineAndAccuracy() {
      if (polylineAndAccuracyBuilder_ == null) {
        if (geometryCase_ == 9) {
          geometryCase_ = 0;
          geometry_ = null;
          onChanged();
        }
      } else {
        if (geometryCase_ == 9) {
          geometryCase_ = 0;
          geometry_ = null;
        }
        polylineAndAccuracyBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Polyline geometry.
     * Polyline can also be a single point.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.spatial.PolylineAndAccuracy polyline_and_accuracy = 9;</code>
     */
    public org.sensoris.types.spatial.PolylineAndAccuracy.Builder getPolylineAndAccuracyBuilder() {
      return getPolylineAndAccuracyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Polyline geometry.
     * Polyline can also be a single point.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.spatial.PolylineAndAccuracy polyline_and_accuracy = 9;</code>
     */
    public org.sensoris.types.spatial.PolylineAndAccuracyOrBuilder getPolylineAndAccuracyOrBuilder() {
      if ((geometryCase_ == 9) && (polylineAndAccuracyBuilder_ != null)) {
        return polylineAndAccuracyBuilder_.getMessageOrBuilder();
      } else {
        if (geometryCase_ == 9) {
          return (org.sensoris.types.spatial.PolylineAndAccuracy) geometry_;
        }
        return org.sensoris.types.spatial.PolylineAndAccuracy.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Polyline geometry.
     * Polyline can also be a single point.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.spatial.PolylineAndAccuracy polyline_and_accuracy = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.spatial.PolylineAndAccuracy, org.sensoris.types.spatial.PolylineAndAccuracy.Builder, org.sensoris.types.spatial.PolylineAndAccuracyOrBuilder> 
        getPolylineAndAccuracyFieldBuilder() {
      if (polylineAndAccuracyBuilder_ == null) {
        if (!(geometryCase_ == 9)) {
          geometry_ = org.sensoris.types.spatial.PolylineAndAccuracy.getDefaultInstance();
        }
        polylineAndAccuracyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.types.spatial.PolylineAndAccuracy, org.sensoris.types.spatial.PolylineAndAccuracy.Builder, org.sensoris.types.spatial.PolylineAndAccuracyOrBuilder>(
                (org.sensoris.types.spatial.PolylineAndAccuracy) geometry_,
                getParentForChildren(),
                isClean());
        geometry_ = null;
      }
      geometryCase_ = 9;
      onChanged();;
      return polylineAndAccuracyBuilder_;
    }

    private org.sensoris.types.base.Int64ValueAndAccuracy widthAndAccuracy_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder> widthAndAccuracyBuilder_;
    /**
     * <pre>
     * Width and accuracy.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public boolean hasWidthAndAccuracy() {
      return widthAndAccuracyBuilder_ != null || widthAndAccuracy_ != null;
    }
    /**
     * <pre>
     * Width and accuracy.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public org.sensoris.types.base.Int64ValueAndAccuracy getWidthAndAccuracy() {
      if (widthAndAccuracyBuilder_ == null) {
        return widthAndAccuracy_ == null ? org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : widthAndAccuracy_;
      } else {
        return widthAndAccuracyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Width and accuracy.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public Builder setWidthAndAccuracy(org.sensoris.types.base.Int64ValueAndAccuracy value) {
      if (widthAndAccuracyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        widthAndAccuracy_ = value;
        onChanged();
      } else {
        widthAndAccuracyBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Width and accuracy.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public Builder setWidthAndAccuracy(
        org.sensoris.types.base.Int64ValueAndAccuracy.Builder builderForValue) {
      if (widthAndAccuracyBuilder_ == null) {
        widthAndAccuracy_ = builderForValue.build();
        onChanged();
      } else {
        widthAndAccuracyBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Width and accuracy.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public Builder mergeWidthAndAccuracy(org.sensoris.types.base.Int64ValueAndAccuracy value) {
      if (widthAndAccuracyBuilder_ == null) {
        if (widthAndAccuracy_ != null) {
          widthAndAccuracy_ =
            org.sensoris.types.base.Int64ValueAndAccuracy.newBuilder(widthAndAccuracy_).mergeFrom(value).buildPartial();
        } else {
          widthAndAccuracy_ = value;
        }
        onChanged();
      } else {
        widthAndAccuracyBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Width and accuracy.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public Builder clearWidthAndAccuracy() {
      if (widthAndAccuracyBuilder_ == null) {
        widthAndAccuracy_ = null;
        onChanged();
      } else {
        widthAndAccuracy_ = null;
        widthAndAccuracyBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Width and accuracy.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public org.sensoris.types.base.Int64ValueAndAccuracy.Builder getWidthAndAccuracyBuilder() {
      
      onChanged();
      return getWidthAndAccuracyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Width and accuracy.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getWidthAndAccuracyOrBuilder() {
      if (widthAndAccuracyBuilder_ != null) {
        return widthAndAccuracyBuilder_.getMessageOrBuilder();
      } else {
        return widthAndAccuracy_ == null ?
            org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : widthAndAccuracy_;
      }
    }
    /**
     * <pre>
     * Width and accuracy.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder> 
        getWidthAndAccuracyFieldBuilder() {
      if (widthAndAccuracyBuilder_ == null) {
        widthAndAccuracyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder>(
                getWidthAndAccuracy(),
                getParentForChildren(),
                isClean());
        widthAndAccuracy_ = null;
      }
      return widthAndAccuracyBuilder_;
    }

    private org.sensoris.types.base.Int64ValueAndAccuracy heightAndAccuracy_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder> heightAndAccuracyBuilder_;
    /**
     * <pre>
     * Height and accuracy.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range [0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public boolean hasHeightAndAccuracy() {
      return heightAndAccuracyBuilder_ != null || heightAndAccuracy_ != null;
    }
    /**
     * <pre>
     * Height and accuracy.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range [0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public org.sensoris.types.base.Int64ValueAndAccuracy getHeightAndAccuracy() {
      if (heightAndAccuracyBuilder_ == null) {
        return heightAndAccuracy_ == null ? org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : heightAndAccuracy_;
      } else {
        return heightAndAccuracyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Height and accuracy.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range [0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public Builder setHeightAndAccuracy(org.sensoris.types.base.Int64ValueAndAccuracy value) {
      if (heightAndAccuracyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        heightAndAccuracy_ = value;
        onChanged();
      } else {
        heightAndAccuracyBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Height and accuracy.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range [0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public Builder setHeightAndAccuracy(
        org.sensoris.types.base.Int64ValueAndAccuracy.Builder builderForValue) {
      if (heightAndAccuracyBuilder_ == null) {
        heightAndAccuracy_ = builderForValue.build();
        onChanged();
      } else {
        heightAndAccuracyBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Height and accuracy.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range [0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public Builder mergeHeightAndAccuracy(org.sensoris.types.base.Int64ValueAndAccuracy value) {
      if (heightAndAccuracyBuilder_ == null) {
        if (heightAndAccuracy_ != null) {
          heightAndAccuracy_ =
            org.sensoris.types.base.Int64ValueAndAccuracy.newBuilder(heightAndAccuracy_).mergeFrom(value).buildPartial();
        } else {
          heightAndAccuracy_ = value;
        }
        onChanged();
      } else {
        heightAndAccuracyBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Height and accuracy.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range [0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public Builder clearHeightAndAccuracy() {
      if (heightAndAccuracyBuilder_ == null) {
        heightAndAccuracy_ = null;
        onChanged();
      } else {
        heightAndAccuracy_ = null;
        heightAndAccuracyBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Height and accuracy.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range [0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public org.sensoris.types.base.Int64ValueAndAccuracy.Builder getHeightAndAccuracyBuilder() {
      
      onChanged();
      return getHeightAndAccuracyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Height and accuracy.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range [0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getHeightAndAccuracyOrBuilder() {
      if (heightAndAccuracyBuilder_ != null) {
        return heightAndAccuracyBuilder_.getMessageOrBuilder();
      } else {
        return heightAndAccuracy_ == null ?
            org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : heightAndAccuracy_;
      }
    }
    /**
     * <pre>
     * Height and accuracy.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range [0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder> 
        getHeightAndAccuracyFieldBuilder() {
      if (heightAndAccuracyBuilder_ == null) {
        heightAndAccuracyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder>(
                getHeightAndAccuracy(),
                getParentForChildren(),
                isClean());
        heightAndAccuracy_ = null;
      }
      return heightAndAccuracyBuilder_;
    }

    private org.sensoris.types.base.Int64ValueAndAccuracy distanceBetweenDoubleAndAccuracy_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder> distanceBetweenDoubleAndAccuracyBuilder_;
    /**
     * <pre>
     * Distance between parallel double lines.
     * Only applicable for types LINE_DOUBLE, LINE_DOUBLE_SOLID, LINE_DOUBLE_DASHED, LINE_DOUBLE_SOLID_DASHED and LINE_DOUBLE_DASHED_SOLID.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public boolean hasDistanceBetweenDoubleAndAccuracy() {
      return distanceBetweenDoubleAndAccuracyBuilder_ != null || distanceBetweenDoubleAndAccuracy_ != null;
    }
    /**
     * <pre>
     * Distance between parallel double lines.
     * Only applicable for types LINE_DOUBLE, LINE_DOUBLE_SOLID, LINE_DOUBLE_DASHED, LINE_DOUBLE_SOLID_DASHED and LINE_DOUBLE_DASHED_SOLID.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public org.sensoris.types.base.Int64ValueAndAccuracy getDistanceBetweenDoubleAndAccuracy() {
      if (distanceBetweenDoubleAndAccuracyBuilder_ == null) {
        return distanceBetweenDoubleAndAccuracy_ == null ? org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : distanceBetweenDoubleAndAccuracy_;
      } else {
        return distanceBetweenDoubleAndAccuracyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Distance between parallel double lines.
     * Only applicable for types LINE_DOUBLE, LINE_DOUBLE_SOLID, LINE_DOUBLE_DASHED, LINE_DOUBLE_SOLID_DASHED and LINE_DOUBLE_DASHED_SOLID.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public Builder setDistanceBetweenDoubleAndAccuracy(org.sensoris.types.base.Int64ValueAndAccuracy value) {
      if (distanceBetweenDoubleAndAccuracyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        distanceBetweenDoubleAndAccuracy_ = value;
        onChanged();
      } else {
        distanceBetweenDoubleAndAccuracyBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Distance between parallel double lines.
     * Only applicable for types LINE_DOUBLE, LINE_DOUBLE_SOLID, LINE_DOUBLE_DASHED, LINE_DOUBLE_SOLID_DASHED and LINE_DOUBLE_DASHED_SOLID.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public Builder setDistanceBetweenDoubleAndAccuracy(
        org.sensoris.types.base.Int64ValueAndAccuracy.Builder builderForValue) {
      if (distanceBetweenDoubleAndAccuracyBuilder_ == null) {
        distanceBetweenDoubleAndAccuracy_ = builderForValue.build();
        onChanged();
      } else {
        distanceBetweenDoubleAndAccuracyBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Distance between parallel double lines.
     * Only applicable for types LINE_DOUBLE, LINE_DOUBLE_SOLID, LINE_DOUBLE_DASHED, LINE_DOUBLE_SOLID_DASHED and LINE_DOUBLE_DASHED_SOLID.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public Builder mergeDistanceBetweenDoubleAndAccuracy(org.sensoris.types.base.Int64ValueAndAccuracy value) {
      if (distanceBetweenDoubleAndAccuracyBuilder_ == null) {
        if (distanceBetweenDoubleAndAccuracy_ != null) {
          distanceBetweenDoubleAndAccuracy_ =
            org.sensoris.types.base.Int64ValueAndAccuracy.newBuilder(distanceBetweenDoubleAndAccuracy_).mergeFrom(value).buildPartial();
        } else {
          distanceBetweenDoubleAndAccuracy_ = value;
        }
        onChanged();
      } else {
        distanceBetweenDoubleAndAccuracyBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Distance between parallel double lines.
     * Only applicable for types LINE_DOUBLE, LINE_DOUBLE_SOLID, LINE_DOUBLE_DASHED, LINE_DOUBLE_SOLID_DASHED and LINE_DOUBLE_DASHED_SOLID.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public Builder clearDistanceBetweenDoubleAndAccuracy() {
      if (distanceBetweenDoubleAndAccuracyBuilder_ == null) {
        distanceBetweenDoubleAndAccuracy_ = null;
        onChanged();
      } else {
        distanceBetweenDoubleAndAccuracy_ = null;
        distanceBetweenDoubleAndAccuracyBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Distance between parallel double lines.
     * Only applicable for types LINE_DOUBLE, LINE_DOUBLE_SOLID, LINE_DOUBLE_DASHED, LINE_DOUBLE_SOLID_DASHED and LINE_DOUBLE_DASHED_SOLID.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public org.sensoris.types.base.Int64ValueAndAccuracy.Builder getDistanceBetweenDoubleAndAccuracyBuilder() {
      
      onChanged();
      return getDistanceBetweenDoubleAndAccuracyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Distance between parallel double lines.
     * Only applicable for types LINE_DOUBLE, LINE_DOUBLE_SOLID, LINE_DOUBLE_DASHED, LINE_DOUBLE_SOLID_DASHED and LINE_DOUBLE_DASHED_SOLID.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    public org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder getDistanceBetweenDoubleAndAccuracyOrBuilder() {
      if (distanceBetweenDoubleAndAccuracyBuilder_ != null) {
        return distanceBetweenDoubleAndAccuracyBuilder_.getMessageOrBuilder();
      } else {
        return distanceBetweenDoubleAndAccuracy_ == null ?
            org.sensoris.types.base.Int64ValueAndAccuracy.getDefaultInstance() : distanceBetweenDoubleAndAccuracy_;
      }
    }
    /**
     * <pre>
     * Distance between parallel double lines.
     * Only applicable for types LINE_DOUBLE, LINE_DOUBLE_SOLID, LINE_DOUBLE_DASHED, LINE_DOUBLE_SOLID_DASHED and LINE_DOUBLE_DASHED_SOLID.
     * &#64;unit MilliMeter
     * &#64;resolution 1
     * &#64;range (0, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder> 
        getDistanceBetweenDoubleAndAccuracyFieldBuilder() {
      if (distanceBetweenDoubleAndAccuracyBuilder_ == null) {
        distanceBetweenDoubleAndAccuracyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.types.base.Int64ValueAndAccuracy, org.sensoris.types.base.Int64ValueAndAccuracy.Builder, org.sensoris.types.base.Int64ValueAndAccuracyOrBuilder>(
                getDistanceBetweenDoubleAndAccuracy(),
                getParentForChildren(),
                isClean());
        distanceBetweenDoubleAndAccuracy_ = null;
      }
      return distanceBetweenDoubleAndAccuracyBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics, org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics.Builder, org.sensoris.categories.roadattribution.LaneBoundary.DashStatisticsOrBuilder> dashStatisticsBuilder_;
    /**
     * <pre>
     * Statistics of length of single lane dashes and offset between dashes on lane boundary geometry.
     * Only applicable for lane boundaries of type LONG_DASHED_LINE, SOLID_LINE_DASHED_LINE, DASHED_LINE_SOLID_LINE, SHORT_DASHED, DASHED_BLOCKS and DOUBLE_DASHED_LINE.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics dash_statistics = 13;</code>
     */
    public boolean hasDashStatistics() {
      return markingsCase_ == 13;
    }
    /**
     * <pre>
     * Statistics of length of single lane dashes and offset between dashes on lane boundary geometry.
     * Only applicable for lane boundaries of type LONG_DASHED_LINE, SOLID_LINE_DASHED_LINE, DASHED_LINE_SOLID_LINE, SHORT_DASHED, DASHED_BLOCKS and DOUBLE_DASHED_LINE.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics dash_statistics = 13;</code>
     */
    public org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics getDashStatistics() {
      if (dashStatisticsBuilder_ == null) {
        if (markingsCase_ == 13) {
          return (org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics) markings_;
        }
        return org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics.getDefaultInstance();
      } else {
        if (markingsCase_ == 13) {
          return dashStatisticsBuilder_.getMessage();
        }
        return org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Statistics of length of single lane dashes and offset between dashes on lane boundary geometry.
     * Only applicable for lane boundaries of type LONG_DASHED_LINE, SOLID_LINE_DASHED_LINE, DASHED_LINE_SOLID_LINE, SHORT_DASHED, DASHED_BLOCKS and DOUBLE_DASHED_LINE.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics dash_statistics = 13;</code>
     */
    public Builder setDashStatistics(org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics value) {
      if (dashStatisticsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        markings_ = value;
        onChanged();
      } else {
        dashStatisticsBuilder_.setMessage(value);
      }
      markingsCase_ = 13;
      return this;
    }
    /**
     * <pre>
     * Statistics of length of single lane dashes and offset between dashes on lane boundary geometry.
     * Only applicable for lane boundaries of type LONG_DASHED_LINE, SOLID_LINE_DASHED_LINE, DASHED_LINE_SOLID_LINE, SHORT_DASHED, DASHED_BLOCKS and DOUBLE_DASHED_LINE.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics dash_statistics = 13;</code>
     */
    public Builder setDashStatistics(
        org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics.Builder builderForValue) {
      if (dashStatisticsBuilder_ == null) {
        markings_ = builderForValue.build();
        onChanged();
      } else {
        dashStatisticsBuilder_.setMessage(builderForValue.build());
      }
      markingsCase_ = 13;
      return this;
    }
    /**
     * <pre>
     * Statistics of length of single lane dashes and offset between dashes on lane boundary geometry.
     * Only applicable for lane boundaries of type LONG_DASHED_LINE, SOLID_LINE_DASHED_LINE, DASHED_LINE_SOLID_LINE, SHORT_DASHED, DASHED_BLOCKS and DOUBLE_DASHED_LINE.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics dash_statistics = 13;</code>
     */
    public Builder mergeDashStatistics(org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics value) {
      if (dashStatisticsBuilder_ == null) {
        if (markingsCase_ == 13 &&
            markings_ != org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics.getDefaultInstance()) {
          markings_ = org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics.newBuilder((org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics) markings_)
              .mergeFrom(value).buildPartial();
        } else {
          markings_ = value;
        }
        onChanged();
      } else {
        if (markingsCase_ == 13) {
          dashStatisticsBuilder_.mergeFrom(value);
        }
        dashStatisticsBuilder_.setMessage(value);
      }
      markingsCase_ = 13;
      return this;
    }
    /**
     * <pre>
     * Statistics of length of single lane dashes and offset between dashes on lane boundary geometry.
     * Only applicable for lane boundaries of type LONG_DASHED_LINE, SOLID_LINE_DASHED_LINE, DASHED_LINE_SOLID_LINE, SHORT_DASHED, DASHED_BLOCKS and DOUBLE_DASHED_LINE.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics dash_statistics = 13;</code>
     */
    public Builder clearDashStatistics() {
      if (dashStatisticsBuilder_ == null) {
        if (markingsCase_ == 13) {
          markingsCase_ = 0;
          markings_ = null;
          onChanged();
        }
      } else {
        if (markingsCase_ == 13) {
          markingsCase_ = 0;
          markings_ = null;
        }
        dashStatisticsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Statistics of length of single lane dashes and offset between dashes on lane boundary geometry.
     * Only applicable for lane boundaries of type LONG_DASHED_LINE, SOLID_LINE_DASHED_LINE, DASHED_LINE_SOLID_LINE, SHORT_DASHED, DASHED_BLOCKS and DOUBLE_DASHED_LINE.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics dash_statistics = 13;</code>
     */
    public org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics.Builder getDashStatisticsBuilder() {
      return getDashStatisticsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Statistics of length of single lane dashes and offset between dashes on lane boundary geometry.
     * Only applicable for lane boundaries of type LONG_DASHED_LINE, SOLID_LINE_DASHED_LINE, DASHED_LINE_SOLID_LINE, SHORT_DASHED, DASHED_BLOCKS and DOUBLE_DASHED_LINE.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics dash_statistics = 13;</code>
     */
    public org.sensoris.categories.roadattribution.LaneBoundary.DashStatisticsOrBuilder getDashStatisticsOrBuilder() {
      if ((markingsCase_ == 13) && (dashStatisticsBuilder_ != null)) {
        return dashStatisticsBuilder_.getMessageOrBuilder();
      } else {
        if (markingsCase_ == 13) {
          return (org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics) markings_;
        }
        return org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Statistics of length of single lane dashes and offset between dashes on lane boundary geometry.
     * Only applicable for lane boundaries of type LONG_DASHED_LINE, SOLID_LINE_DASHED_LINE, DASHED_LINE_SOLID_LINE, SHORT_DASHED, DASHED_BLOCKS and DOUBLE_DASHED_LINE.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics dash_statistics = 13;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics, org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics.Builder, org.sensoris.categories.roadattribution.LaneBoundary.DashStatisticsOrBuilder> 
        getDashStatisticsFieldBuilder() {
      if (dashStatisticsBuilder_ == null) {
        if (!(markingsCase_ == 13)) {
          markings_ = org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics.getDefaultInstance();
        }
        dashStatisticsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics, org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics.Builder, org.sensoris.categories.roadattribution.LaneBoundary.DashStatisticsOrBuilder>(
                (org.sensoris.categories.roadattribution.LaneBoundary.DashStatistics) markings_,
                getParentForChildren(),
                isClean());
        markings_ = null;
      }
      markingsCase_ = 13;
      onChanged();;
      return dashStatisticsBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets, org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.Builder, org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsetsOrBuilder> markingOffsetsBuilder_;
    /**
     * <pre>
     * Offsets of markings as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets marking_offsets = 14;</code>
     */
    public boolean hasMarkingOffsets() {
      return markingsCase_ == 14;
    }
    /**
     * <pre>
     * Offsets of markings as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets marking_offsets = 14;</code>
     */
    public org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets getMarkingOffsets() {
      if (markingOffsetsBuilder_ == null) {
        if (markingsCase_ == 14) {
          return (org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets) markings_;
        }
        return org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.getDefaultInstance();
      } else {
        if (markingsCase_ == 14) {
          return markingOffsetsBuilder_.getMessage();
        }
        return org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Offsets of markings as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets marking_offsets = 14;</code>
     */
    public Builder setMarkingOffsets(org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets value) {
      if (markingOffsetsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        markings_ = value;
        onChanged();
      } else {
        markingOffsetsBuilder_.setMessage(value);
      }
      markingsCase_ = 14;
      return this;
    }
    /**
     * <pre>
     * Offsets of markings as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets marking_offsets = 14;</code>
     */
    public Builder setMarkingOffsets(
        org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.Builder builderForValue) {
      if (markingOffsetsBuilder_ == null) {
        markings_ = builderForValue.build();
        onChanged();
      } else {
        markingOffsetsBuilder_.setMessage(builderForValue.build());
      }
      markingsCase_ = 14;
      return this;
    }
    /**
     * <pre>
     * Offsets of markings as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets marking_offsets = 14;</code>
     */
    public Builder mergeMarkingOffsets(org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets value) {
      if (markingOffsetsBuilder_ == null) {
        if (markingsCase_ == 14 &&
            markings_ != org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.getDefaultInstance()) {
          markings_ = org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.newBuilder((org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets) markings_)
              .mergeFrom(value).buildPartial();
        } else {
          markings_ = value;
        }
        onChanged();
      } else {
        if (markingsCase_ == 14) {
          markingOffsetsBuilder_.mergeFrom(value);
        }
        markingOffsetsBuilder_.setMessage(value);
      }
      markingsCase_ = 14;
      return this;
    }
    /**
     * <pre>
     * Offsets of markings as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets marking_offsets = 14;</code>
     */
    public Builder clearMarkingOffsets() {
      if (markingOffsetsBuilder_ == null) {
        if (markingsCase_ == 14) {
          markingsCase_ = 0;
          markings_ = null;
          onChanged();
        }
      } else {
        if (markingsCase_ == 14) {
          markingsCase_ = 0;
          markings_ = null;
        }
        markingOffsetsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Offsets of markings as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets marking_offsets = 14;</code>
     */
    public org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.Builder getMarkingOffsetsBuilder() {
      return getMarkingOffsetsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Offsets of markings as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets marking_offsets = 14;</code>
     */
    public org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsetsOrBuilder getMarkingOffsetsOrBuilder() {
      if ((markingsCase_ == 14) && (markingOffsetsBuilder_ != null)) {
        return markingOffsetsBuilder_.getMessageOrBuilder();
      } else {
        if (markingsCase_ == 14) {
          return (org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets) markings_;
        }
        return org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Offsets of markings as type and offset on lane boundary geometry relative to first vertex of lane boundary geometry.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets marking_offsets = 14;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets, org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.Builder, org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsetsOrBuilder> 
        getMarkingOffsetsFieldBuilder() {
      if (markingOffsetsBuilder_ == null) {
        if (!(markingsCase_ == 14)) {
          markings_ = org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.getDefaultInstance();
        }
        markingOffsetsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets, org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets.Builder, org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsetsOrBuilder>(
                (org.sensoris.categories.roadattribution.LaneBoundary.MarkingOffsets) markings_,
                getParentForChildren(),
                isClean());
        markings_ = null;
      }
      markingsCase_ = 14;
      onChanged();;
      return markingOffsetsBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  }

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  private static final org.sensoris.categories.roadattribution.LaneBoundary DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.sensoris.categories.roadattribution.LaneBoundary();
  }

  public static org.sensoris.categories.roadattribution.LaneBoundary getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<LaneBoundary>
      PARSER = new com.google.protobuf.AbstractParser<LaneBoundary>() {
    public LaneBoundary parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new LaneBoundary(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<LaneBoundary> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<LaneBoundary> getParserForType() {
    return PARSER;
  }

  public org.sensoris.categories.roadattribution.LaneBoundary getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

