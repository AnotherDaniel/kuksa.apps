// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/powertrain.proto

package org.sensoris.categories.powertrain;

/**
 * <pre>
 * Status of transmission.
 * </pre>
 *
 * Protobuf type {@code sensoris.protobuf.categories.powertrain.TransmissionStatus}
 */
public  final class TransmissionStatus extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:sensoris.protobuf.categories.powertrain.TransmissionStatus)
    TransmissionStatusOrBuilder {
private static final long serialVersionUID = 0L;
  // Use TransmissionStatus.newBuilder() to construct.
  private TransmissionStatus(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private TransmissionStatus() {
    gearMode_ = 0;
    driveMode_ = 0;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private TransmissionStatus(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            org.sensoris.types.base.EventEnvelope.Builder subBuilder = null;
            if (envelope_ != null) {
              subBuilder = envelope_.toBuilder();
            }
            envelope_ = input.readMessage(org.sensoris.types.base.EventEnvelope.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(envelope_);
              envelope_ = subBuilder.buildPartial();
            }

            break;
          }
          case 16: {
            int rawValue = input.readEnum();

            gearMode_ = rawValue;
            break;
          }
          case 24: {
            int rawValue = input.readEnum();

            driveMode_ = rawValue;
            break;
          }
          case 34: {
            org.sensoris.types.base.Int64Value.Builder subBuilder = null;
            if (currentGear_ != null) {
              subBuilder = currentGear_.toBuilder();
            }
            currentGear_ = input.readMessage(org.sensoris.types.base.Int64Value.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(currentGear_);
              currentGear_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.sensoris.categories.powertrain.SensorisPowertrainCategory.internal_static_sensoris_protobuf_categories_powertrain_TransmissionStatus_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.sensoris.categories.powertrain.SensorisPowertrainCategory.internal_static_sensoris_protobuf_categories_powertrain_TransmissionStatus_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.sensoris.categories.powertrain.TransmissionStatus.class, org.sensoris.categories.powertrain.TransmissionStatus.Builder.class);
  }

  /**
   * <pre>
   * Gear mode.
   * </pre>
   *
   * Protobuf enum {@code sensoris.protobuf.categories.powertrain.TransmissionStatus.GearMode}
   */
  public enum GearMode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Unknown.
     * </pre>
     *
     * <code>UNKNOWN_GEAR_MODE = 0;</code>
     */
    UNKNOWN_GEAR_MODE(0),
    /**
     * <pre>
     * Automatic gear (drive).
     * </pre>
     *
     * <code>DRIVE = 1;</code>
     */
    DRIVE(1),
    /**
     * <pre>
     * Manual gear.
     * </pre>
     *
     * <code>MANUAL = 2;</code>
     */
    MANUAL(2),
    /**
     * <pre>
     * Reverse gear.
     * </pre>
     *
     * <code>REVERSE = 3;</code>
     */
    REVERSE(3),
    /**
     * <pre>
     * Park.
     * </pre>
     *
     * <code>PARK = 4;</code>
     */
    PARK(4),
    /**
     * <pre>
     * Neutral.
     * </pre>
     *
     * <code>NEUTRAL = 5;</code>
     */
    NEUTRAL(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Unknown.
     * </pre>
     *
     * <code>UNKNOWN_GEAR_MODE = 0;</code>
     */
    public static final int UNKNOWN_GEAR_MODE_VALUE = 0;
    /**
     * <pre>
     * Automatic gear (drive).
     * </pre>
     *
     * <code>DRIVE = 1;</code>
     */
    public static final int DRIVE_VALUE = 1;
    /**
     * <pre>
     * Manual gear.
     * </pre>
     *
     * <code>MANUAL = 2;</code>
     */
    public static final int MANUAL_VALUE = 2;
    /**
     * <pre>
     * Reverse gear.
     * </pre>
     *
     * <code>REVERSE = 3;</code>
     */
    public static final int REVERSE_VALUE = 3;
    /**
     * <pre>
     * Park.
     * </pre>
     *
     * <code>PARK = 4;</code>
     */
    public static final int PARK_VALUE = 4;
    /**
     * <pre>
     * Neutral.
     * </pre>
     *
     * <code>NEUTRAL = 5;</code>
     */
    public static final int NEUTRAL_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static GearMode valueOf(int value) {
      return forNumber(value);
    }

    public static GearMode forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_GEAR_MODE;
        case 1: return DRIVE;
        case 2: return MANUAL;
        case 3: return REVERSE;
        case 4: return PARK;
        case 5: return NEUTRAL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<GearMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        GearMode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<GearMode>() {
            public GearMode findValueByNumber(int number) {
              return GearMode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.sensoris.categories.powertrain.TransmissionStatus.getDescriptor().getEnumTypes().get(0);
    }

    private static final GearMode[] VALUES = values();

    public static GearMode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private GearMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:sensoris.protobuf.categories.powertrain.TransmissionStatus.GearMode)
  }

  /**
   * <pre>
   * Drive mode.
   * </pre>
   *
   * Protobuf enum {@code sensoris.protobuf.categories.powertrain.TransmissionStatus.DriveMode}
   */
  public enum DriveMode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Unknown.
     * </pre>
     *
     * <code>UNKNOWN_DRIVE_MODE = 0;</code>
     */
    UNKNOWN_DRIVE_MODE(0),
    /**
     * <pre>
     * Eco drive mode.
     * </pre>
     *
     * <code>ECO = 1;</code>
     */
    ECO(1),
    /**
     * <pre>
     * Normal or comfort mode.
     * </pre>
     *
     * <code>COMFORT = 2;</code>
     */
    COMFORT(2),
    /**
     * <pre>
     * Sport mode.
     * </pre>
     *
     * <code>SPORT = 3;</code>
     */
    SPORT(3),
    /**
     * <pre>
     * Super sport mode.
     * </pre>
     *
     * <code>SUPER_SPORT = 4;</code>
     */
    SUPER_SPORT(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Unknown.
     * </pre>
     *
     * <code>UNKNOWN_DRIVE_MODE = 0;</code>
     */
    public static final int UNKNOWN_DRIVE_MODE_VALUE = 0;
    /**
     * <pre>
     * Eco drive mode.
     * </pre>
     *
     * <code>ECO = 1;</code>
     */
    public static final int ECO_VALUE = 1;
    /**
     * <pre>
     * Normal or comfort mode.
     * </pre>
     *
     * <code>COMFORT = 2;</code>
     */
    public static final int COMFORT_VALUE = 2;
    /**
     * <pre>
     * Sport mode.
     * </pre>
     *
     * <code>SPORT = 3;</code>
     */
    public static final int SPORT_VALUE = 3;
    /**
     * <pre>
     * Super sport mode.
     * </pre>
     *
     * <code>SUPER_SPORT = 4;</code>
     */
    public static final int SUPER_SPORT_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DriveMode valueOf(int value) {
      return forNumber(value);
    }

    public static DriveMode forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_DRIVE_MODE;
        case 1: return ECO;
        case 2: return COMFORT;
        case 3: return SPORT;
        case 4: return SUPER_SPORT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DriveMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DriveMode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DriveMode>() {
            public DriveMode findValueByNumber(int number) {
              return DriveMode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.sensoris.categories.powertrain.TransmissionStatus.getDescriptor().getEnumTypes().get(1);
    }

    private static final DriveMode[] VALUES = values();

    public static DriveMode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DriveMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:sensoris.protobuf.categories.powertrain.TransmissionStatus.DriveMode)
  }

  public static final int ENVELOPE_FIELD_NUMBER = 1;
  private org.sensoris.types.base.EventEnvelope envelope_;
  /**
   * <pre>
   * Event envelope.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
   */
  public boolean hasEnvelope() {
    return envelope_ != null;
  }
  /**
   * <pre>
   * Event envelope.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
   */
  public org.sensoris.types.base.EventEnvelope getEnvelope() {
    return envelope_ == null ? org.sensoris.types.base.EventEnvelope.getDefaultInstance() : envelope_;
  }
  /**
   * <pre>
   * Event envelope.
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
   */
  public org.sensoris.types.base.EventEnvelopeOrBuilder getEnvelopeOrBuilder() {
    return getEnvelope();
  }

  public static final int GEAR_MODE_FIELD_NUMBER = 2;
  private int gearMode_;
  /**
   * <pre>
   * Mode of gear.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.powertrain.TransmissionStatus.GearMode gear_mode = 2;</code>
   */
  public int getGearModeValue() {
    return gearMode_;
  }
  /**
   * <pre>
   * Mode of gear.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.powertrain.TransmissionStatus.GearMode gear_mode = 2;</code>
   */
  public org.sensoris.categories.powertrain.TransmissionStatus.GearMode getGearMode() {
    @SuppressWarnings("deprecation")
    org.sensoris.categories.powertrain.TransmissionStatus.GearMode result = org.sensoris.categories.powertrain.TransmissionStatus.GearMode.valueOf(gearMode_);
    return result == null ? org.sensoris.categories.powertrain.TransmissionStatus.GearMode.UNRECOGNIZED : result;
  }

  public static final int DRIVE_MODE_FIELD_NUMBER = 3;
  private int driveMode_;
  /**
   * <pre>
   * Drive mode.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.powertrain.TransmissionStatus.DriveMode drive_mode = 3;</code>
   */
  public int getDriveModeValue() {
    return driveMode_;
  }
  /**
   * <pre>
   * Drive mode.
   * </pre>
   *
   * <code>.sensoris.protobuf.categories.powertrain.TransmissionStatus.DriveMode drive_mode = 3;</code>
   */
  public org.sensoris.categories.powertrain.TransmissionStatus.DriveMode getDriveMode() {
    @SuppressWarnings("deprecation")
    org.sensoris.categories.powertrain.TransmissionStatus.DriveMode result = org.sensoris.categories.powertrain.TransmissionStatus.DriveMode.valueOf(driveMode_);
    return result == null ? org.sensoris.categories.powertrain.TransmissionStatus.DriveMode.UNRECOGNIZED : result;
  }

  public static final int CURRENT_GEAR_FIELD_NUMBER = 4;
  private org.sensoris.types.base.Int64Value currentGear_;
  /**
   * <pre>
   * Current gear in the selected mode for which 1 is the gear with the highest ratio (slowest possible speed) and the maximum number (e.g. 6) is the gear with the lowest ratio (highest possible speed).
   * If gear mode is REVERSE, then current gear refers to the gear in reverse as vehicles might have multiple reverse gears.
   * If gear mode is PARK or NEUTRAL, the current gear is not relevant.
   * &#64;unit 1
   * &#64;resolution 1
   * &#64;range [1, )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64Value current_gear = 4;</code>
   */
  public boolean hasCurrentGear() {
    return currentGear_ != null;
  }
  /**
   * <pre>
   * Current gear in the selected mode for which 1 is the gear with the highest ratio (slowest possible speed) and the maximum number (e.g. 6) is the gear with the lowest ratio (highest possible speed).
   * If gear mode is REVERSE, then current gear refers to the gear in reverse as vehicles might have multiple reverse gears.
   * If gear mode is PARK or NEUTRAL, the current gear is not relevant.
   * &#64;unit 1
   * &#64;resolution 1
   * &#64;range [1, )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64Value current_gear = 4;</code>
   */
  public org.sensoris.types.base.Int64Value getCurrentGear() {
    return currentGear_ == null ? org.sensoris.types.base.Int64Value.getDefaultInstance() : currentGear_;
  }
  /**
   * <pre>
   * Current gear in the selected mode for which 1 is the gear with the highest ratio (slowest possible speed) and the maximum number (e.g. 6) is the gear with the lowest ratio (highest possible speed).
   * If gear mode is REVERSE, then current gear refers to the gear in reverse as vehicles might have multiple reverse gears.
   * If gear mode is PARK or NEUTRAL, the current gear is not relevant.
   * &#64;unit 1
   * &#64;resolution 1
   * &#64;range [1, )
   * </pre>
   *
   * <code>.sensoris.protobuf.types.base.Int64Value current_gear = 4;</code>
   */
  public org.sensoris.types.base.Int64ValueOrBuilder getCurrentGearOrBuilder() {
    return getCurrentGear();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (envelope_ != null) {
      output.writeMessage(1, getEnvelope());
    }
    if (gearMode_ != org.sensoris.categories.powertrain.TransmissionStatus.GearMode.UNKNOWN_GEAR_MODE.getNumber()) {
      output.writeEnum(2, gearMode_);
    }
    if (driveMode_ != org.sensoris.categories.powertrain.TransmissionStatus.DriveMode.UNKNOWN_DRIVE_MODE.getNumber()) {
      output.writeEnum(3, driveMode_);
    }
    if (currentGear_ != null) {
      output.writeMessage(4, getCurrentGear());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (envelope_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getEnvelope());
    }
    if (gearMode_ != org.sensoris.categories.powertrain.TransmissionStatus.GearMode.UNKNOWN_GEAR_MODE.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, gearMode_);
    }
    if (driveMode_ != org.sensoris.categories.powertrain.TransmissionStatus.DriveMode.UNKNOWN_DRIVE_MODE.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, driveMode_);
    }
    if (currentGear_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getCurrentGear());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.sensoris.categories.powertrain.TransmissionStatus)) {
      return super.equals(obj);
    }
    org.sensoris.categories.powertrain.TransmissionStatus other = (org.sensoris.categories.powertrain.TransmissionStatus) obj;

    boolean result = true;
    result = result && (hasEnvelope() == other.hasEnvelope());
    if (hasEnvelope()) {
      result = result && getEnvelope()
          .equals(other.getEnvelope());
    }
    result = result && gearMode_ == other.gearMode_;
    result = result && driveMode_ == other.driveMode_;
    result = result && (hasCurrentGear() == other.hasCurrentGear());
    if (hasCurrentGear()) {
      result = result && getCurrentGear()
          .equals(other.getCurrentGear());
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasEnvelope()) {
      hash = (37 * hash) + ENVELOPE_FIELD_NUMBER;
      hash = (53 * hash) + getEnvelope().hashCode();
    }
    hash = (37 * hash) + GEAR_MODE_FIELD_NUMBER;
    hash = (53 * hash) + gearMode_;
    hash = (37 * hash) + DRIVE_MODE_FIELD_NUMBER;
    hash = (53 * hash) + driveMode_;
    if (hasCurrentGear()) {
      hash = (37 * hash) + CURRENT_GEAR_FIELD_NUMBER;
      hash = (53 * hash) + getCurrentGear().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.sensoris.categories.powertrain.TransmissionStatus parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.sensoris.categories.powertrain.TransmissionStatus parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.sensoris.categories.powertrain.TransmissionStatus parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.sensoris.categories.powertrain.TransmissionStatus parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.sensoris.categories.powertrain.TransmissionStatus parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.sensoris.categories.powertrain.TransmissionStatus parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.sensoris.categories.powertrain.TransmissionStatus parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.sensoris.categories.powertrain.TransmissionStatus parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.sensoris.categories.powertrain.TransmissionStatus parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.sensoris.categories.powertrain.TransmissionStatus parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.sensoris.categories.powertrain.TransmissionStatus parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.sensoris.categories.powertrain.TransmissionStatus parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.sensoris.categories.powertrain.TransmissionStatus prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Status of transmission.
   * </pre>
   *
   * Protobuf type {@code sensoris.protobuf.categories.powertrain.TransmissionStatus}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:sensoris.protobuf.categories.powertrain.TransmissionStatus)
      org.sensoris.categories.powertrain.TransmissionStatusOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.sensoris.categories.powertrain.SensorisPowertrainCategory.internal_static_sensoris_protobuf_categories_powertrain_TransmissionStatus_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.sensoris.categories.powertrain.SensorisPowertrainCategory.internal_static_sensoris_protobuf_categories_powertrain_TransmissionStatus_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.sensoris.categories.powertrain.TransmissionStatus.class, org.sensoris.categories.powertrain.TransmissionStatus.Builder.class);
    }

    // Construct using org.sensoris.categories.powertrain.TransmissionStatus.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (envelopeBuilder_ == null) {
        envelope_ = null;
      } else {
        envelope_ = null;
        envelopeBuilder_ = null;
      }
      gearMode_ = 0;

      driveMode_ = 0;

      if (currentGearBuilder_ == null) {
        currentGear_ = null;
      } else {
        currentGear_ = null;
        currentGearBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.sensoris.categories.powertrain.SensorisPowertrainCategory.internal_static_sensoris_protobuf_categories_powertrain_TransmissionStatus_descriptor;
    }

    @java.lang.Override
    public org.sensoris.categories.powertrain.TransmissionStatus getDefaultInstanceForType() {
      return org.sensoris.categories.powertrain.TransmissionStatus.getDefaultInstance();
    }

    @java.lang.Override
    public org.sensoris.categories.powertrain.TransmissionStatus build() {
      org.sensoris.categories.powertrain.TransmissionStatus result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.sensoris.categories.powertrain.TransmissionStatus buildPartial() {
      org.sensoris.categories.powertrain.TransmissionStatus result = new org.sensoris.categories.powertrain.TransmissionStatus(this);
      if (envelopeBuilder_ == null) {
        result.envelope_ = envelope_;
      } else {
        result.envelope_ = envelopeBuilder_.build();
      }
      result.gearMode_ = gearMode_;
      result.driveMode_ = driveMode_;
      if (currentGearBuilder_ == null) {
        result.currentGear_ = currentGear_;
      } else {
        result.currentGear_ = currentGearBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.sensoris.categories.powertrain.TransmissionStatus) {
        return mergeFrom((org.sensoris.categories.powertrain.TransmissionStatus)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.sensoris.categories.powertrain.TransmissionStatus other) {
      if (other == org.sensoris.categories.powertrain.TransmissionStatus.getDefaultInstance()) return this;
      if (other.hasEnvelope()) {
        mergeEnvelope(other.getEnvelope());
      }
      if (other.gearMode_ != 0) {
        setGearModeValue(other.getGearModeValue());
      }
      if (other.driveMode_ != 0) {
        setDriveModeValue(other.getDriveModeValue());
      }
      if (other.hasCurrentGear()) {
        mergeCurrentGear(other.getCurrentGear());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.sensoris.categories.powertrain.TransmissionStatus parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.sensoris.categories.powertrain.TransmissionStatus) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private org.sensoris.types.base.EventEnvelope envelope_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.EventEnvelope, org.sensoris.types.base.EventEnvelope.Builder, org.sensoris.types.base.EventEnvelopeOrBuilder> envelopeBuilder_;
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    public boolean hasEnvelope() {
      return envelopeBuilder_ != null || envelope_ != null;
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    public org.sensoris.types.base.EventEnvelope getEnvelope() {
      if (envelopeBuilder_ == null) {
        return envelope_ == null ? org.sensoris.types.base.EventEnvelope.getDefaultInstance() : envelope_;
      } else {
        return envelopeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    public Builder setEnvelope(org.sensoris.types.base.EventEnvelope value) {
      if (envelopeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        envelope_ = value;
        onChanged();
      } else {
        envelopeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    public Builder setEnvelope(
        org.sensoris.types.base.EventEnvelope.Builder builderForValue) {
      if (envelopeBuilder_ == null) {
        envelope_ = builderForValue.build();
        onChanged();
      } else {
        envelopeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    public Builder mergeEnvelope(org.sensoris.types.base.EventEnvelope value) {
      if (envelopeBuilder_ == null) {
        if (envelope_ != null) {
          envelope_ =
            org.sensoris.types.base.EventEnvelope.newBuilder(envelope_).mergeFrom(value).buildPartial();
        } else {
          envelope_ = value;
        }
        onChanged();
      } else {
        envelopeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    public Builder clearEnvelope() {
      if (envelopeBuilder_ == null) {
        envelope_ = null;
        onChanged();
      } else {
        envelope_ = null;
        envelopeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    public org.sensoris.types.base.EventEnvelope.Builder getEnvelopeBuilder() {
      
      onChanged();
      return getEnvelopeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    public org.sensoris.types.base.EventEnvelopeOrBuilder getEnvelopeOrBuilder() {
      if (envelopeBuilder_ != null) {
        return envelopeBuilder_.getMessageOrBuilder();
      } else {
        return envelope_ == null ?
            org.sensoris.types.base.EventEnvelope.getDefaultInstance() : envelope_;
      }
    }
    /**
     * <pre>
     * Event envelope.
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.EventEnvelope envelope = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.EventEnvelope, org.sensoris.types.base.EventEnvelope.Builder, org.sensoris.types.base.EventEnvelopeOrBuilder> 
        getEnvelopeFieldBuilder() {
      if (envelopeBuilder_ == null) {
        envelopeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.types.base.EventEnvelope, org.sensoris.types.base.EventEnvelope.Builder, org.sensoris.types.base.EventEnvelopeOrBuilder>(
                getEnvelope(),
                getParentForChildren(),
                isClean());
        envelope_ = null;
      }
      return envelopeBuilder_;
    }

    private int gearMode_ = 0;
    /**
     * <pre>
     * Mode of gear.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.powertrain.TransmissionStatus.GearMode gear_mode = 2;</code>
     */
    public int getGearModeValue() {
      return gearMode_;
    }
    /**
     * <pre>
     * Mode of gear.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.powertrain.TransmissionStatus.GearMode gear_mode = 2;</code>
     */
    public Builder setGearModeValue(int value) {
      gearMode_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Mode of gear.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.powertrain.TransmissionStatus.GearMode gear_mode = 2;</code>
     */
    public org.sensoris.categories.powertrain.TransmissionStatus.GearMode getGearMode() {
      @SuppressWarnings("deprecation")
      org.sensoris.categories.powertrain.TransmissionStatus.GearMode result = org.sensoris.categories.powertrain.TransmissionStatus.GearMode.valueOf(gearMode_);
      return result == null ? org.sensoris.categories.powertrain.TransmissionStatus.GearMode.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Mode of gear.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.powertrain.TransmissionStatus.GearMode gear_mode = 2;</code>
     */
    public Builder setGearMode(org.sensoris.categories.powertrain.TransmissionStatus.GearMode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      gearMode_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Mode of gear.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.powertrain.TransmissionStatus.GearMode gear_mode = 2;</code>
     */
    public Builder clearGearMode() {
      
      gearMode_ = 0;
      onChanged();
      return this;
    }

    private int driveMode_ = 0;
    /**
     * <pre>
     * Drive mode.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.powertrain.TransmissionStatus.DriveMode drive_mode = 3;</code>
     */
    public int getDriveModeValue() {
      return driveMode_;
    }
    /**
     * <pre>
     * Drive mode.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.powertrain.TransmissionStatus.DriveMode drive_mode = 3;</code>
     */
    public Builder setDriveModeValue(int value) {
      driveMode_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Drive mode.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.powertrain.TransmissionStatus.DriveMode drive_mode = 3;</code>
     */
    public org.sensoris.categories.powertrain.TransmissionStatus.DriveMode getDriveMode() {
      @SuppressWarnings("deprecation")
      org.sensoris.categories.powertrain.TransmissionStatus.DriveMode result = org.sensoris.categories.powertrain.TransmissionStatus.DriveMode.valueOf(driveMode_);
      return result == null ? org.sensoris.categories.powertrain.TransmissionStatus.DriveMode.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Drive mode.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.powertrain.TransmissionStatus.DriveMode drive_mode = 3;</code>
     */
    public Builder setDriveMode(org.sensoris.categories.powertrain.TransmissionStatus.DriveMode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      driveMode_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Drive mode.
     * </pre>
     *
     * <code>.sensoris.protobuf.categories.powertrain.TransmissionStatus.DriveMode drive_mode = 3;</code>
     */
    public Builder clearDriveMode() {
      
      driveMode_ = 0;
      onChanged();
      return this;
    }

    private org.sensoris.types.base.Int64Value currentGear_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.Int64Value, org.sensoris.types.base.Int64Value.Builder, org.sensoris.types.base.Int64ValueOrBuilder> currentGearBuilder_;
    /**
     * <pre>
     * Current gear in the selected mode for which 1 is the gear with the highest ratio (slowest possible speed) and the maximum number (e.g. 6) is the gear with the lowest ratio (highest possible speed).
     * If gear mode is REVERSE, then current gear refers to the gear in reverse as vehicles might have multiple reverse gears.
     * If gear mode is PARK or NEUTRAL, the current gear is not relevant.
     * &#64;unit 1
     * &#64;resolution 1
     * &#64;range [1, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64Value current_gear = 4;</code>
     */
    public boolean hasCurrentGear() {
      return currentGearBuilder_ != null || currentGear_ != null;
    }
    /**
     * <pre>
     * Current gear in the selected mode for which 1 is the gear with the highest ratio (slowest possible speed) and the maximum number (e.g. 6) is the gear with the lowest ratio (highest possible speed).
     * If gear mode is REVERSE, then current gear refers to the gear in reverse as vehicles might have multiple reverse gears.
     * If gear mode is PARK or NEUTRAL, the current gear is not relevant.
     * &#64;unit 1
     * &#64;resolution 1
     * &#64;range [1, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64Value current_gear = 4;</code>
     */
    public org.sensoris.types.base.Int64Value getCurrentGear() {
      if (currentGearBuilder_ == null) {
        return currentGear_ == null ? org.sensoris.types.base.Int64Value.getDefaultInstance() : currentGear_;
      } else {
        return currentGearBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Current gear in the selected mode for which 1 is the gear with the highest ratio (slowest possible speed) and the maximum number (e.g. 6) is the gear with the lowest ratio (highest possible speed).
     * If gear mode is REVERSE, then current gear refers to the gear in reverse as vehicles might have multiple reverse gears.
     * If gear mode is PARK or NEUTRAL, the current gear is not relevant.
     * &#64;unit 1
     * &#64;resolution 1
     * &#64;range [1, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64Value current_gear = 4;</code>
     */
    public Builder setCurrentGear(org.sensoris.types.base.Int64Value value) {
      if (currentGearBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        currentGear_ = value;
        onChanged();
      } else {
        currentGearBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Current gear in the selected mode for which 1 is the gear with the highest ratio (slowest possible speed) and the maximum number (e.g. 6) is the gear with the lowest ratio (highest possible speed).
     * If gear mode is REVERSE, then current gear refers to the gear in reverse as vehicles might have multiple reverse gears.
     * If gear mode is PARK or NEUTRAL, the current gear is not relevant.
     * &#64;unit 1
     * &#64;resolution 1
     * &#64;range [1, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64Value current_gear = 4;</code>
     */
    public Builder setCurrentGear(
        org.sensoris.types.base.Int64Value.Builder builderForValue) {
      if (currentGearBuilder_ == null) {
        currentGear_ = builderForValue.build();
        onChanged();
      } else {
        currentGearBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Current gear in the selected mode for which 1 is the gear with the highest ratio (slowest possible speed) and the maximum number (e.g. 6) is the gear with the lowest ratio (highest possible speed).
     * If gear mode is REVERSE, then current gear refers to the gear in reverse as vehicles might have multiple reverse gears.
     * If gear mode is PARK or NEUTRAL, the current gear is not relevant.
     * &#64;unit 1
     * &#64;resolution 1
     * &#64;range [1, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64Value current_gear = 4;</code>
     */
    public Builder mergeCurrentGear(org.sensoris.types.base.Int64Value value) {
      if (currentGearBuilder_ == null) {
        if (currentGear_ != null) {
          currentGear_ =
            org.sensoris.types.base.Int64Value.newBuilder(currentGear_).mergeFrom(value).buildPartial();
        } else {
          currentGear_ = value;
        }
        onChanged();
      } else {
        currentGearBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Current gear in the selected mode for which 1 is the gear with the highest ratio (slowest possible speed) and the maximum number (e.g. 6) is the gear with the lowest ratio (highest possible speed).
     * If gear mode is REVERSE, then current gear refers to the gear in reverse as vehicles might have multiple reverse gears.
     * If gear mode is PARK or NEUTRAL, the current gear is not relevant.
     * &#64;unit 1
     * &#64;resolution 1
     * &#64;range [1, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64Value current_gear = 4;</code>
     */
    public Builder clearCurrentGear() {
      if (currentGearBuilder_ == null) {
        currentGear_ = null;
        onChanged();
      } else {
        currentGear_ = null;
        currentGearBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Current gear in the selected mode for which 1 is the gear with the highest ratio (slowest possible speed) and the maximum number (e.g. 6) is the gear with the lowest ratio (highest possible speed).
     * If gear mode is REVERSE, then current gear refers to the gear in reverse as vehicles might have multiple reverse gears.
     * If gear mode is PARK or NEUTRAL, the current gear is not relevant.
     * &#64;unit 1
     * &#64;resolution 1
     * &#64;range [1, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64Value current_gear = 4;</code>
     */
    public org.sensoris.types.base.Int64Value.Builder getCurrentGearBuilder() {
      
      onChanged();
      return getCurrentGearFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Current gear in the selected mode for which 1 is the gear with the highest ratio (slowest possible speed) and the maximum number (e.g. 6) is the gear with the lowest ratio (highest possible speed).
     * If gear mode is REVERSE, then current gear refers to the gear in reverse as vehicles might have multiple reverse gears.
     * If gear mode is PARK or NEUTRAL, the current gear is not relevant.
     * &#64;unit 1
     * &#64;resolution 1
     * &#64;range [1, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64Value current_gear = 4;</code>
     */
    public org.sensoris.types.base.Int64ValueOrBuilder getCurrentGearOrBuilder() {
      if (currentGearBuilder_ != null) {
        return currentGearBuilder_.getMessageOrBuilder();
      } else {
        return currentGear_ == null ?
            org.sensoris.types.base.Int64Value.getDefaultInstance() : currentGear_;
      }
    }
    /**
     * <pre>
     * Current gear in the selected mode for which 1 is the gear with the highest ratio (slowest possible speed) and the maximum number (e.g. 6) is the gear with the lowest ratio (highest possible speed).
     * If gear mode is REVERSE, then current gear refers to the gear in reverse as vehicles might have multiple reverse gears.
     * If gear mode is PARK or NEUTRAL, the current gear is not relevant.
     * &#64;unit 1
     * &#64;resolution 1
     * &#64;range [1, )
     * </pre>
     *
     * <code>.sensoris.protobuf.types.base.Int64Value current_gear = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.sensoris.types.base.Int64Value, org.sensoris.types.base.Int64Value.Builder, org.sensoris.types.base.Int64ValueOrBuilder> 
        getCurrentGearFieldBuilder() {
      if (currentGearBuilder_ == null) {
        currentGearBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.sensoris.types.base.Int64Value, org.sensoris.types.base.Int64Value.Builder, org.sensoris.types.base.Int64ValueOrBuilder>(
                getCurrentGear(),
                getParentForChildren(),
                isClean());
        currentGear_ = null;
      }
      return currentGearBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:sensoris.protobuf.categories.powertrain.TransmissionStatus)
  }

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.powertrain.TransmissionStatus)
  private static final org.sensoris.categories.powertrain.TransmissionStatus DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.sensoris.categories.powertrain.TransmissionStatus();
  }

  public static org.sensoris.categories.powertrain.TransmissionStatus getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<TransmissionStatus>
      PARSER = new com.google.protobuf.AbstractParser<TransmissionStatus>() {
    @java.lang.Override
    public TransmissionStatus parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new TransmissionStatus(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<TransmissionStatus> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TransmissionStatus> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.sensoris.categories.powertrain.TransmissionStatus getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

