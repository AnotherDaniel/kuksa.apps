// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/intersection_attribution.proto

#ifndef PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto
#define PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "sensoris/protobuf/types/base.pb.h"
#include "sensoris/protobuf/types/spatial.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto 

namespace protobuf_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace intersectionattribution {
class IntersectionAttributionCategory;
class IntersectionAttributionCategoryDefaultTypeInternal;
extern IntersectionAttributionCategoryDefaultTypeInternal _IntersectionAttributionCategory_default_instance_;
class TrafficSignal;
class TrafficSignalDefaultTypeInternal;
extern TrafficSignalDefaultTypeInternal _TrafficSignal_default_instance_;
class TrafficSignalBulb;
class TrafficSignalBulbDefaultTypeInternal;
extern TrafficSignalBulbDefaultTypeInternal _TrafficSignalBulb_default_instance_;
class TrafficSignalBulb_ColorAndConfidence;
class TrafficSignalBulb_ColorAndConfidenceDefaultTypeInternal;
extern TrafficSignalBulb_ColorAndConfidenceDefaultTypeInternal _TrafficSignalBulb_ColorAndConfidence_default_instance_;
class TrafficSignalBulb_ShapeAndConfidence;
class TrafficSignalBulb_ShapeAndConfidenceDefaultTypeInternal;
extern TrafficSignalBulb_ShapeAndConfidenceDefaultTypeInternal _TrafficSignalBulb_ShapeAndConfidence_default_instance_;
class TrafficSignalBulb_StatusAndConfidence;
class TrafficSignalBulb_StatusAndConfidenceDefaultTypeInternal;
extern TrafficSignalBulb_StatusAndConfidenceDefaultTypeInternal _TrafficSignalBulb_StatusAndConfidence_default_instance_;
class TrafficSignal_OrientationAndConfidence;
class TrafficSignal_OrientationAndConfidenceDefaultTypeInternal;
extern TrafficSignal_OrientationAndConfidenceDefaultTypeInternal _TrafficSignal_OrientationAndConfidence_default_instance_;
}  // namespace intersectionattribution
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
template<> ::sensoris::protobuf::categories::intersectionattribution::IntersectionAttributionCategory* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::intersectionattribution::IntersectionAttributionCategory>(Arena*);
template<> ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal>(Arena*);
template<> ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb>(Arena*);
template<> ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence>(Arena*);
template<> ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence>(Arena*);
template<> ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence>(Arena*);
template<> ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sensoris {
namespace protobuf {
namespace categories {
namespace intersectionattribution {

enum TrafficSignalBulb_StatusAndConfidence_Type {
  TrafficSignalBulb_StatusAndConfidence_Type_UNKNOWN_TYPE = 0,
  TrafficSignalBulb_StatusAndConfidence_Type_OFF = 1,
  TrafficSignalBulb_StatusAndConfidence_Type_ON = 2,
  TrafficSignalBulb_StatusAndConfidence_Type_BLINKING = 3,
  TrafficSignalBulb_StatusAndConfidence_Type_TrafficSignalBulb_StatusAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TrafficSignalBulb_StatusAndConfidence_Type_TrafficSignalBulb_StatusAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TrafficSignalBulb_StatusAndConfidence_Type_IsValid(int value);
const TrafficSignalBulb_StatusAndConfidence_Type TrafficSignalBulb_StatusAndConfidence_Type_Type_MIN = TrafficSignalBulb_StatusAndConfidence_Type_UNKNOWN_TYPE;
const TrafficSignalBulb_StatusAndConfidence_Type TrafficSignalBulb_StatusAndConfidence_Type_Type_MAX = TrafficSignalBulb_StatusAndConfidence_Type_BLINKING;
const int TrafficSignalBulb_StatusAndConfidence_Type_Type_ARRAYSIZE = TrafficSignalBulb_StatusAndConfidence_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSignalBulb_StatusAndConfidence_Type_descriptor();
inline const ::std::string& TrafficSignalBulb_StatusAndConfidence_Type_Name(TrafficSignalBulb_StatusAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSignalBulb_StatusAndConfidence_Type_descriptor(), value);
}
inline bool TrafficSignalBulb_StatusAndConfidence_Type_Parse(
    const ::std::string& name, TrafficSignalBulb_StatusAndConfidence_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignalBulb_StatusAndConfidence_Type>(
    TrafficSignalBulb_StatusAndConfidence_Type_descriptor(), name, value);
}
enum TrafficSignalBulb_ColorAndConfidence_Type {
  TrafficSignalBulb_ColorAndConfidence_Type_UNKNOWN_TYPE = 0,
  TrafficSignalBulb_ColorAndConfidence_Type_GREEN = 1,
  TrafficSignalBulb_ColorAndConfidence_Type_YELLOW = 2,
  TrafficSignalBulb_ColorAndConfidence_Type_RED = 3,
  TrafficSignalBulb_ColorAndConfidence_Type_TrafficSignalBulb_ColorAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TrafficSignalBulb_ColorAndConfidence_Type_TrafficSignalBulb_ColorAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TrafficSignalBulb_ColorAndConfidence_Type_IsValid(int value);
const TrafficSignalBulb_ColorAndConfidence_Type TrafficSignalBulb_ColorAndConfidence_Type_Type_MIN = TrafficSignalBulb_ColorAndConfidence_Type_UNKNOWN_TYPE;
const TrafficSignalBulb_ColorAndConfidence_Type TrafficSignalBulb_ColorAndConfidence_Type_Type_MAX = TrafficSignalBulb_ColorAndConfidence_Type_RED;
const int TrafficSignalBulb_ColorAndConfidence_Type_Type_ARRAYSIZE = TrafficSignalBulb_ColorAndConfidence_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSignalBulb_ColorAndConfidence_Type_descriptor();
inline const ::std::string& TrafficSignalBulb_ColorAndConfidence_Type_Name(TrafficSignalBulb_ColorAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSignalBulb_ColorAndConfidence_Type_descriptor(), value);
}
inline bool TrafficSignalBulb_ColorAndConfidence_Type_Parse(
    const ::std::string& name, TrafficSignalBulb_ColorAndConfidence_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignalBulb_ColorAndConfidence_Type>(
    TrafficSignalBulb_ColorAndConfidence_Type_descriptor(), name, value);
}
enum TrafficSignalBulb_ShapeAndConfidence_Type {
  TrafficSignalBulb_ShapeAndConfidence_Type_UNKNOWN_TYPE = 0,
  TrafficSignalBulb_ShapeAndConfidence_Type_CIRCLE = 1,
  TrafficSignalBulb_ShapeAndConfidence_Type_ARROW_STRAIGHT = 2,
  TrafficSignalBulb_ShapeAndConfidence_Type_ARROW_LEFT = 3,
  TrafficSignalBulb_ShapeAndConfidence_Type_ARROW_RIGHT = 4,
  TrafficSignalBulb_ShapeAndConfidence_Type_ARROW_STRAIGHT_AND_LEFT = 5,
  TrafficSignalBulb_ShapeAndConfidence_Type_ARROW_STRAIGHT_AND_RIGHT = 6,
  TrafficSignalBulb_ShapeAndConfidence_Type_TrafficSignalBulb_ShapeAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TrafficSignalBulb_ShapeAndConfidence_Type_TrafficSignalBulb_ShapeAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TrafficSignalBulb_ShapeAndConfidence_Type_IsValid(int value);
const TrafficSignalBulb_ShapeAndConfidence_Type TrafficSignalBulb_ShapeAndConfidence_Type_Type_MIN = TrafficSignalBulb_ShapeAndConfidence_Type_UNKNOWN_TYPE;
const TrafficSignalBulb_ShapeAndConfidence_Type TrafficSignalBulb_ShapeAndConfidence_Type_Type_MAX = TrafficSignalBulb_ShapeAndConfidence_Type_ARROW_STRAIGHT_AND_RIGHT;
const int TrafficSignalBulb_ShapeAndConfidence_Type_Type_ARRAYSIZE = TrafficSignalBulb_ShapeAndConfidence_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSignalBulb_ShapeAndConfidence_Type_descriptor();
inline const ::std::string& TrafficSignalBulb_ShapeAndConfidence_Type_Name(TrafficSignalBulb_ShapeAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSignalBulb_ShapeAndConfidence_Type_descriptor(), value);
}
inline bool TrafficSignalBulb_ShapeAndConfidence_Type_Parse(
    const ::std::string& name, TrafficSignalBulb_ShapeAndConfidence_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignalBulb_ShapeAndConfidence_Type>(
    TrafficSignalBulb_ShapeAndConfidence_Type_descriptor(), name, value);
}
enum TrafficSignal_OrientationAndConfidence_Type {
  TrafficSignal_OrientationAndConfidence_Type_UNKNOWN_TYPE = 0,
  TrafficSignal_OrientationAndConfidence_Type_OTHER = 1,
  TrafficSignal_OrientationAndConfidence_Type_HORIZONTAL = 2,
  TrafficSignal_OrientationAndConfidence_Type_VERTICAL = 3,
  TrafficSignal_OrientationAndConfidence_Type_MIXED = 4,
  TrafficSignal_OrientationAndConfidence_Type_TrafficSignal_OrientationAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TrafficSignal_OrientationAndConfidence_Type_TrafficSignal_OrientationAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TrafficSignal_OrientationAndConfidence_Type_IsValid(int value);
const TrafficSignal_OrientationAndConfidence_Type TrafficSignal_OrientationAndConfidence_Type_Type_MIN = TrafficSignal_OrientationAndConfidence_Type_UNKNOWN_TYPE;
const TrafficSignal_OrientationAndConfidence_Type TrafficSignal_OrientationAndConfidence_Type_Type_MAX = TrafficSignal_OrientationAndConfidence_Type_MIXED;
const int TrafficSignal_OrientationAndConfidence_Type_Type_ARRAYSIZE = TrafficSignal_OrientationAndConfidence_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrafficSignal_OrientationAndConfidence_Type_descriptor();
inline const ::std::string& TrafficSignal_OrientationAndConfidence_Type_Name(TrafficSignal_OrientationAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrafficSignal_OrientationAndConfidence_Type_descriptor(), value);
}
inline bool TrafficSignal_OrientationAndConfidence_Type_Parse(
    const ::std::string& name, TrafficSignal_OrientationAndConfidence_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrafficSignal_OrientationAndConfidence_Type>(
    TrafficSignal_OrientationAndConfidence_Type_descriptor(), name, value);
}
// ===================================================================

class TrafficSignalBulb_StatusAndConfidence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence) */ {
 public:
  TrafficSignalBulb_StatusAndConfidence();
  virtual ~TrafficSignalBulb_StatusAndConfidence();

  TrafficSignalBulb_StatusAndConfidence(const TrafficSignalBulb_StatusAndConfidence& from);

  inline TrafficSignalBulb_StatusAndConfidence& operator=(const TrafficSignalBulb_StatusAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficSignalBulb_StatusAndConfidence(TrafficSignalBulb_StatusAndConfidence&& from) noexcept
    : TrafficSignalBulb_StatusAndConfidence() {
    *this = ::std::move(from);
  }

  inline TrafficSignalBulb_StatusAndConfidence& operator=(TrafficSignalBulb_StatusAndConfidence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSignalBulb_StatusAndConfidence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignalBulb_StatusAndConfidence* internal_default_instance() {
    return reinterpret_cast<const TrafficSignalBulb_StatusAndConfidence*>(
               &_TrafficSignalBulb_StatusAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(TrafficSignalBulb_StatusAndConfidence* other);
  void Swap(TrafficSignalBulb_StatusAndConfidence* other);
  friend void swap(TrafficSignalBulb_StatusAndConfidence& a, TrafficSignalBulb_StatusAndConfidence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignalBulb_StatusAndConfidence* New() const final {
    return CreateMaybeMessage<TrafficSignalBulb_StatusAndConfidence>(NULL);
  }

  TrafficSignalBulb_StatusAndConfidence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignalBulb_StatusAndConfidence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficSignalBulb_StatusAndConfidence& from);
  void MergeFrom(const TrafficSignalBulb_StatusAndConfidence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignalBulb_StatusAndConfidence* other);
  protected:
  explicit TrafficSignalBulb_StatusAndConfidence(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrafficSignalBulb_StatusAndConfidence_Type Type;
  static const Type UNKNOWN_TYPE =
    TrafficSignalBulb_StatusAndConfidence_Type_UNKNOWN_TYPE;
  static const Type OFF =
    TrafficSignalBulb_StatusAndConfidence_Type_OFF;
  static const Type ON =
    TrafficSignalBulb_StatusAndConfidence_Type_ON;
  static const Type BLINKING =
    TrafficSignalBulb_StatusAndConfidence_Type_BLINKING;
  static inline bool Type_IsValid(int value) {
    return TrafficSignalBulb_StatusAndConfidence_Type_IsValid(value);
  }
  static const Type Type_MIN =
    TrafficSignalBulb_StatusAndConfidence_Type_Type_MIN;
  static const Type Type_MAX =
    TrafficSignalBulb_StatusAndConfidence_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    TrafficSignalBulb_StatusAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return TrafficSignalBulb_StatusAndConfidence_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return TrafficSignalBulb_StatusAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return TrafficSignalBulb_StatusAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  public:
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  ::sensoris::protobuf::types::base::Confidence* release_confidence();
  ::sensoris::protobuf::types::base::Confidence* mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence);
  void unsafe_arena_set_allocated_confidence(
      ::sensoris::protobuf::types::base::Confidence* confidence);
  ::sensoris::protobuf::types::base::Confidence* unsafe_arena_release_confidence();

  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence_Type value);

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::base::Confidence* confidence_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafficSignalBulb_ColorAndConfidence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence) */ {
 public:
  TrafficSignalBulb_ColorAndConfidence();
  virtual ~TrafficSignalBulb_ColorAndConfidence();

  TrafficSignalBulb_ColorAndConfidence(const TrafficSignalBulb_ColorAndConfidence& from);

  inline TrafficSignalBulb_ColorAndConfidence& operator=(const TrafficSignalBulb_ColorAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficSignalBulb_ColorAndConfidence(TrafficSignalBulb_ColorAndConfidence&& from) noexcept
    : TrafficSignalBulb_ColorAndConfidence() {
    *this = ::std::move(from);
  }

  inline TrafficSignalBulb_ColorAndConfidence& operator=(TrafficSignalBulb_ColorAndConfidence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSignalBulb_ColorAndConfidence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignalBulb_ColorAndConfidence* internal_default_instance() {
    return reinterpret_cast<const TrafficSignalBulb_ColorAndConfidence*>(
               &_TrafficSignalBulb_ColorAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(TrafficSignalBulb_ColorAndConfidence* other);
  void Swap(TrafficSignalBulb_ColorAndConfidence* other);
  friend void swap(TrafficSignalBulb_ColorAndConfidence& a, TrafficSignalBulb_ColorAndConfidence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignalBulb_ColorAndConfidence* New() const final {
    return CreateMaybeMessage<TrafficSignalBulb_ColorAndConfidence>(NULL);
  }

  TrafficSignalBulb_ColorAndConfidence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignalBulb_ColorAndConfidence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficSignalBulb_ColorAndConfidence& from);
  void MergeFrom(const TrafficSignalBulb_ColorAndConfidence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignalBulb_ColorAndConfidence* other);
  protected:
  explicit TrafficSignalBulb_ColorAndConfidence(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrafficSignalBulb_ColorAndConfidence_Type Type;
  static const Type UNKNOWN_TYPE =
    TrafficSignalBulb_ColorAndConfidence_Type_UNKNOWN_TYPE;
  static const Type GREEN =
    TrafficSignalBulb_ColorAndConfidence_Type_GREEN;
  static const Type YELLOW =
    TrafficSignalBulb_ColorAndConfidence_Type_YELLOW;
  static const Type RED =
    TrafficSignalBulb_ColorAndConfidence_Type_RED;
  static inline bool Type_IsValid(int value) {
    return TrafficSignalBulb_ColorAndConfidence_Type_IsValid(value);
  }
  static const Type Type_MIN =
    TrafficSignalBulb_ColorAndConfidence_Type_Type_MIN;
  static const Type Type_MAX =
    TrafficSignalBulb_ColorAndConfidence_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    TrafficSignalBulb_ColorAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return TrafficSignalBulb_ColorAndConfidence_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return TrafficSignalBulb_ColorAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return TrafficSignalBulb_ColorAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  public:
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  ::sensoris::protobuf::types::base::Confidence* release_confidence();
  ::sensoris::protobuf::types::base::Confidence* mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence);
  void unsafe_arena_set_allocated_confidence(
      ::sensoris::protobuf::types::base::Confidence* confidence);
  ::sensoris::protobuf::types::base::Confidence* unsafe_arena_release_confidence();

  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence_Type value);

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::base::Confidence* confidence_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafficSignalBulb_ShapeAndConfidence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence) */ {
 public:
  TrafficSignalBulb_ShapeAndConfidence();
  virtual ~TrafficSignalBulb_ShapeAndConfidence();

  TrafficSignalBulb_ShapeAndConfidence(const TrafficSignalBulb_ShapeAndConfidence& from);

  inline TrafficSignalBulb_ShapeAndConfidence& operator=(const TrafficSignalBulb_ShapeAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficSignalBulb_ShapeAndConfidence(TrafficSignalBulb_ShapeAndConfidence&& from) noexcept
    : TrafficSignalBulb_ShapeAndConfidence() {
    *this = ::std::move(from);
  }

  inline TrafficSignalBulb_ShapeAndConfidence& operator=(TrafficSignalBulb_ShapeAndConfidence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSignalBulb_ShapeAndConfidence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignalBulb_ShapeAndConfidence* internal_default_instance() {
    return reinterpret_cast<const TrafficSignalBulb_ShapeAndConfidence*>(
               &_TrafficSignalBulb_ShapeAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(TrafficSignalBulb_ShapeAndConfidence* other);
  void Swap(TrafficSignalBulb_ShapeAndConfidence* other);
  friend void swap(TrafficSignalBulb_ShapeAndConfidence& a, TrafficSignalBulb_ShapeAndConfidence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignalBulb_ShapeAndConfidence* New() const final {
    return CreateMaybeMessage<TrafficSignalBulb_ShapeAndConfidence>(NULL);
  }

  TrafficSignalBulb_ShapeAndConfidence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignalBulb_ShapeAndConfidence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficSignalBulb_ShapeAndConfidence& from);
  void MergeFrom(const TrafficSignalBulb_ShapeAndConfidence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignalBulb_ShapeAndConfidence* other);
  protected:
  explicit TrafficSignalBulb_ShapeAndConfidence(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrafficSignalBulb_ShapeAndConfidence_Type Type;
  static const Type UNKNOWN_TYPE =
    TrafficSignalBulb_ShapeAndConfidence_Type_UNKNOWN_TYPE;
  static const Type CIRCLE =
    TrafficSignalBulb_ShapeAndConfidence_Type_CIRCLE;
  static const Type ARROW_STRAIGHT =
    TrafficSignalBulb_ShapeAndConfidence_Type_ARROW_STRAIGHT;
  static const Type ARROW_LEFT =
    TrafficSignalBulb_ShapeAndConfidence_Type_ARROW_LEFT;
  static const Type ARROW_RIGHT =
    TrafficSignalBulb_ShapeAndConfidence_Type_ARROW_RIGHT;
  static const Type ARROW_STRAIGHT_AND_LEFT =
    TrafficSignalBulb_ShapeAndConfidence_Type_ARROW_STRAIGHT_AND_LEFT;
  static const Type ARROW_STRAIGHT_AND_RIGHT =
    TrafficSignalBulb_ShapeAndConfidence_Type_ARROW_STRAIGHT_AND_RIGHT;
  static inline bool Type_IsValid(int value) {
    return TrafficSignalBulb_ShapeAndConfidence_Type_IsValid(value);
  }
  static const Type Type_MIN =
    TrafficSignalBulb_ShapeAndConfidence_Type_Type_MIN;
  static const Type Type_MAX =
    TrafficSignalBulb_ShapeAndConfidence_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    TrafficSignalBulb_ShapeAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return TrafficSignalBulb_ShapeAndConfidence_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return TrafficSignalBulb_ShapeAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return TrafficSignalBulb_ShapeAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  public:
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  ::sensoris::protobuf::types::base::Confidence* release_confidence();
  ::sensoris::protobuf::types::base::Confidence* mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence);
  void unsafe_arena_set_allocated_confidence(
      ::sensoris::protobuf::types::base::Confidence* confidence);
  ::sensoris::protobuf::types::base::Confidence* unsafe_arena_release_confidence();

  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence_Type value);

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::base::Confidence* confidence_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafficSignalBulb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb) */ {
 public:
  TrafficSignalBulb();
  virtual ~TrafficSignalBulb();

  TrafficSignalBulb(const TrafficSignalBulb& from);

  inline TrafficSignalBulb& operator=(const TrafficSignalBulb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficSignalBulb(TrafficSignalBulb&& from) noexcept
    : TrafficSignalBulb() {
    *this = ::std::move(from);
  }

  inline TrafficSignalBulb& operator=(TrafficSignalBulb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSignalBulb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignalBulb* internal_default_instance() {
    return reinterpret_cast<const TrafficSignalBulb*>(
               &_TrafficSignalBulb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(TrafficSignalBulb* other);
  void Swap(TrafficSignalBulb* other);
  friend void swap(TrafficSignalBulb& a, TrafficSignalBulb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignalBulb* New() const final {
    return CreateMaybeMessage<TrafficSignalBulb>(NULL);
  }

  TrafficSignalBulb* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignalBulb>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficSignalBulb& from);
  void MergeFrom(const TrafficSignalBulb& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignalBulb* other);
  protected:
  explicit TrafficSignalBulb(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrafficSignalBulb_StatusAndConfidence StatusAndConfidence;
  typedef TrafficSignalBulb_ColorAndConfidence ColorAndConfidence;
  typedef TrafficSignalBulb_ShapeAndConfidence ShapeAndConfidence;

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope();
  static const int kEnvelopeFieldNumber = 1;
  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  public:
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* envelope);
  void unsafe_arena_set_allocated_envelope(
      ::sensoris::protobuf::types::base::EventEnvelope* envelope);
  ::sensoris::protobuf::types::base::EventEnvelope* unsafe_arena_release_envelope();

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
  bool has_existence_confidence() const;
  void clear_existence_confidence();
  static const int kExistenceConfidenceFieldNumber = 2;
  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_existence_confidence() const;
  public:
  const ::sensoris::protobuf::types::base::Confidence& existence_confidence() const;
  ::sensoris::protobuf::types::base::Confidence* release_existence_confidence();
  ::sensoris::protobuf::types::base::Confidence* mutable_existence_confidence();
  void set_allocated_existence_confidence(::sensoris::protobuf::types::base::Confidence* existence_confidence);
  void unsafe_arena_set_allocated_existence_confidence(
      ::sensoris::protobuf::types::base::Confidence* existence_confidence);
  ::sensoris::protobuf::types::base::Confidence* unsafe_arena_release_existence_confidence();

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 3;
  bool has_position_and_accuracy() const;
  void clear_position_and_accuracy();
  static const int kPositionAndAccuracyFieldNumber = 3;
  private:
  const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& _internal_position_and_accuracy() const;
  public:
  const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& position_and_accuracy() const;
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* release_position_and_accuracy();
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* mutable_position_and_accuracy();
  void set_allocated_position_and_accuracy(::sensoris::protobuf::types::spatial::PositionAndAccuracy* position_and_accuracy);
  void unsafe_arena_set_allocated_position_and_accuracy(
      ::sensoris::protobuf::types::spatial::PositionAndAccuracy* position_and_accuracy);
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* unsafe_arena_release_position_and_accuracy();

  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence status_and_confidence = 4;
  bool has_status_and_confidence() const;
  void clear_status_and_confidence();
  static const int kStatusAndConfidenceFieldNumber = 4;
  private:
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence& _internal_status_and_confidence() const;
  public:
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence& status_and_confidence() const;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* release_status_and_confidence();
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* mutable_status_and_confidence();
  void set_allocated_status_and_confidence(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* status_and_confidence);
  void unsafe_arena_set_allocated_status_and_confidence(
      ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* status_and_confidence);
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* unsafe_arena_release_status_and_confidence();

  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence color_and_confidence = 5;
  bool has_color_and_confidence() const;
  void clear_color_and_confidence();
  static const int kColorAndConfidenceFieldNumber = 5;
  private:
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence& _internal_color_and_confidence() const;
  public:
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence& color_and_confidence() const;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* release_color_and_confidence();
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* mutable_color_and_confidence();
  void set_allocated_color_and_confidence(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* color_and_confidence);
  void unsafe_arena_set_allocated_color_and_confidence(
      ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* color_and_confidence);
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* unsafe_arena_release_color_and_confidence();

  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence shape_and_confidence = 6;
  bool has_shape_and_confidence() const;
  void clear_shape_and_confidence();
  static const int kShapeAndConfidenceFieldNumber = 6;
  private:
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence& _internal_shape_and_confidence() const;
  public:
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence& shape_and_confidence() const;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* release_shape_and_confidence();
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* mutable_shape_and_confidence();
  void set_allocated_shape_and_confidence(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* shape_and_confidence);
  void unsafe_arena_set_allocated_shape_and_confidence(
      ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* shape_and_confidence);
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* unsafe_arena_release_shape_and_confidence();

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::base::EventEnvelope* envelope_;
  ::sensoris::protobuf::types::base::Confidence* existence_confidence_;
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* position_and_accuracy_;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* status_and_confidence_;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* color_and_confidence_;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* shape_and_confidence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafficSignal_OrientationAndConfidence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence) */ {
 public:
  TrafficSignal_OrientationAndConfidence();
  virtual ~TrafficSignal_OrientationAndConfidence();

  TrafficSignal_OrientationAndConfidence(const TrafficSignal_OrientationAndConfidence& from);

  inline TrafficSignal_OrientationAndConfidence& operator=(const TrafficSignal_OrientationAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficSignal_OrientationAndConfidence(TrafficSignal_OrientationAndConfidence&& from) noexcept
    : TrafficSignal_OrientationAndConfidence() {
    *this = ::std::move(from);
  }

  inline TrafficSignal_OrientationAndConfidence& operator=(TrafficSignal_OrientationAndConfidence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSignal_OrientationAndConfidence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignal_OrientationAndConfidence* internal_default_instance() {
    return reinterpret_cast<const TrafficSignal_OrientationAndConfidence*>(
               &_TrafficSignal_OrientationAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(TrafficSignal_OrientationAndConfidence* other);
  void Swap(TrafficSignal_OrientationAndConfidence* other);
  friend void swap(TrafficSignal_OrientationAndConfidence& a, TrafficSignal_OrientationAndConfidence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignal_OrientationAndConfidence* New() const final {
    return CreateMaybeMessage<TrafficSignal_OrientationAndConfidence>(NULL);
  }

  TrafficSignal_OrientationAndConfidence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignal_OrientationAndConfidence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficSignal_OrientationAndConfidence& from);
  void MergeFrom(const TrafficSignal_OrientationAndConfidence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignal_OrientationAndConfidence* other);
  protected:
  explicit TrafficSignal_OrientationAndConfidence(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrafficSignal_OrientationAndConfidence_Type Type;
  static const Type UNKNOWN_TYPE =
    TrafficSignal_OrientationAndConfidence_Type_UNKNOWN_TYPE;
  static const Type OTHER =
    TrafficSignal_OrientationAndConfidence_Type_OTHER;
  static const Type HORIZONTAL =
    TrafficSignal_OrientationAndConfidence_Type_HORIZONTAL;
  static const Type VERTICAL =
    TrafficSignal_OrientationAndConfidence_Type_VERTICAL;
  static const Type MIXED =
    TrafficSignal_OrientationAndConfidence_Type_MIXED;
  static inline bool Type_IsValid(int value) {
    return TrafficSignal_OrientationAndConfidence_Type_IsValid(value);
  }
  static const Type Type_MIN =
    TrafficSignal_OrientationAndConfidence_Type_Type_MIN;
  static const Type Type_MAX =
    TrafficSignal_OrientationAndConfidence_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    TrafficSignal_OrientationAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return TrafficSignal_OrientationAndConfidence_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return TrafficSignal_OrientationAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return TrafficSignal_OrientationAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  public:
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  ::sensoris::protobuf::types::base::Confidence* release_confidence();
  ::sensoris::protobuf::types::base::Confidence* mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence);
  void unsafe_arena_set_allocated_confidence(
      ::sensoris::protobuf::types::base::Confidence* confidence);
  ::sensoris::protobuf::types::base::Confidence* unsafe_arena_release_confidence();

  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence_Type value);

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::base::Confidence* confidence_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafficSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.intersectionattribution.TrafficSignal) */ {
 public:
  TrafficSignal();
  virtual ~TrafficSignal();

  TrafficSignal(const TrafficSignal& from);

  inline TrafficSignal& operator=(const TrafficSignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficSignal(TrafficSignal&& from) noexcept
    : TrafficSignal() {
    *this = ::std::move(from);
  }

  inline TrafficSignal& operator=(TrafficSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficSignal* internal_default_instance() {
    return reinterpret_cast<const TrafficSignal*>(
               &_TrafficSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(TrafficSignal* other);
  void Swap(TrafficSignal* other);
  friend void swap(TrafficSignal& a, TrafficSignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficSignal* New() const final {
    return CreateMaybeMessage<TrafficSignal>(NULL);
  }

  TrafficSignal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficSignal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficSignal& from);
  void MergeFrom(const TrafficSignal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSignal* other);
  protected:
  explicit TrafficSignal(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrafficSignal_OrientationAndConfidence OrientationAndConfidence;

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope();
  static const int kEnvelopeFieldNumber = 1;
  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  public:
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* envelope);
  void unsafe_arena_set_allocated_envelope(
      ::sensoris::protobuf::types::base::EventEnvelope* envelope);
  ::sensoris::protobuf::types::base::EventEnvelope* unsafe_arena_release_envelope();

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
  bool has_existence_confidence() const;
  void clear_existence_confidence();
  static const int kExistenceConfidenceFieldNumber = 2;
  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_existence_confidence() const;
  public:
  const ::sensoris::protobuf::types::base::Confidence& existence_confidence() const;
  ::sensoris::protobuf::types::base::Confidence* release_existence_confidence();
  ::sensoris::protobuf::types::base::Confidence* mutable_existence_confidence();
  void set_allocated_existence_confidence(::sensoris::protobuf::types::base::Confidence* existence_confidence);
  void unsafe_arena_set_allocated_existence_confidence(
      ::sensoris::protobuf::types::base::Confidence* existence_confidence);
  ::sensoris::protobuf::types::base::Confidence* unsafe_arena_release_existence_confidence();

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
  bool has_detection_status() const;
  void clear_detection_status();
  static const int kDetectionStatusFieldNumber = 3;
  private:
  const ::sensoris::protobuf::types::base::EventDetectionStatus& _internal_detection_status() const;
  public:
  const ::sensoris::protobuf::types::base::EventDetectionStatus& detection_status() const;
  ::sensoris::protobuf::types::base::EventDetectionStatus* release_detection_status();
  ::sensoris::protobuf::types::base::EventDetectionStatus* mutable_detection_status();
  void set_allocated_detection_status(::sensoris::protobuf::types::base::EventDetectionStatus* detection_status);
  void unsafe_arena_set_allocated_detection_status(
      ::sensoris::protobuf::types::base::EventDetectionStatus* detection_status);
  ::sensoris::protobuf::types::base::EventDetectionStatus* unsafe_arena_release_detection_status();

  // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;
  bool has_rectangular_box_and_accuracy() const;
  void clear_rectangular_box_and_accuracy();
  static const int kRectangularBoxAndAccuracyFieldNumber = 4;
  private:
  const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy& _internal_rectangular_box_and_accuracy() const;
  public:
  const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy& rectangular_box_and_accuracy() const;
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* release_rectangular_box_and_accuracy();
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* mutable_rectangular_box_and_accuracy();
  void set_allocated_rectangular_box_and_accuracy(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* rectangular_box_and_accuracy);
  void unsafe_arena_set_allocated_rectangular_box_and_accuracy(
      ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* rectangular_box_and_accuracy);
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* unsafe_arena_release_rectangular_box_and_accuracy();

  // .sensoris.protobuf.types.base.CountAndConfidence bulb_count_and_confidence = 5;
  bool has_bulb_count_and_confidence() const;
  void clear_bulb_count_and_confidence();
  static const int kBulbCountAndConfidenceFieldNumber = 5;
  private:
  const ::sensoris::protobuf::types::base::CountAndConfidence& _internal_bulb_count_and_confidence() const;
  public:
  const ::sensoris::protobuf::types::base::CountAndConfidence& bulb_count_and_confidence() const;
  ::sensoris::protobuf::types::base::CountAndConfidence* release_bulb_count_and_confidence();
  ::sensoris::protobuf::types::base::CountAndConfidence* mutable_bulb_count_and_confidence();
  void set_allocated_bulb_count_and_confidence(::sensoris::protobuf::types::base::CountAndConfidence* bulb_count_and_confidence);
  void unsafe_arena_set_allocated_bulb_count_and_confidence(
      ::sensoris::protobuf::types::base::CountAndConfidence* bulb_count_and_confidence);
  ::sensoris::protobuf::types::base::CountAndConfidence* unsafe_arena_release_bulb_count_and_confidence();

  // .sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence orientation_and_confidence = 6;
  bool has_orientation_and_confidence() const;
  void clear_orientation_and_confidence();
  static const int kOrientationAndConfidenceFieldNumber = 6;
  private:
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence& _internal_orientation_and_confidence() const;
  public:
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence& orientation_and_confidence() const;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* release_orientation_and_confidence();
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* mutable_orientation_and_confidence();
  void set_allocated_orientation_and_confidence(::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* orientation_and_confidence);
  void unsafe_arena_set_allocated_orientation_and_confidence(
      ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* orientation_and_confidence);
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* unsafe_arena_release_orientation_and_confidence();

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.intersectionattribution.TrafficSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::base::EventEnvelope* envelope_;
  ::sensoris::protobuf::types::base::Confidence* existence_confidence_;
  ::sensoris::protobuf::types::base::EventDetectionStatus* detection_status_;
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* rectangular_box_and_accuracy_;
  ::sensoris::protobuf::types::base::CountAndConfidence* bulb_count_and_confidence_;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* orientation_and_confidence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IntersectionAttributionCategory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory) */ {
 public:
  IntersectionAttributionCategory();
  virtual ~IntersectionAttributionCategory();

  IntersectionAttributionCategory(const IntersectionAttributionCategory& from);

  inline IntersectionAttributionCategory& operator=(const IntersectionAttributionCategory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IntersectionAttributionCategory(IntersectionAttributionCategory&& from) noexcept
    : IntersectionAttributionCategory() {
    *this = ::std::move(from);
  }

  inline IntersectionAttributionCategory& operator=(IntersectionAttributionCategory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const IntersectionAttributionCategory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntersectionAttributionCategory* internal_default_instance() {
    return reinterpret_cast<const IntersectionAttributionCategory*>(
               &_IntersectionAttributionCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(IntersectionAttributionCategory* other);
  void Swap(IntersectionAttributionCategory* other);
  friend void swap(IntersectionAttributionCategory& a, IntersectionAttributionCategory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntersectionAttributionCategory* New() const final {
    return CreateMaybeMessage<IntersectionAttributionCategory>(NULL);
  }

  IntersectionAttributionCategory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IntersectionAttributionCategory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IntersectionAttributionCategory& from);
  void MergeFrom(const IntersectionAttributionCategory& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntersectionAttributionCategory* other);
  protected:
  explicit IntersectionAttributionCategory(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb traffic_signal_bulb = 2;
  int traffic_signal_bulb_size() const;
  void clear_traffic_signal_bulb();
  static const int kTrafficSignalBulbFieldNumber = 2;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb* mutable_traffic_signal_bulb(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb >*
      mutable_traffic_signal_bulb();
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb& traffic_signal_bulb(int index) const;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb* add_traffic_signal_bulb();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb >&
      traffic_signal_bulb() const;

  // repeated .sensoris.protobuf.categories.intersectionattribution.TrafficSignal traffic_signal = 3;
  int traffic_signal_size() const;
  void clear_traffic_signal();
  static const int kTrafficSignalFieldNumber = 3;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal* mutable_traffic_signal(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal >*
      mutable_traffic_signal();
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal& traffic_signal(int index) const;
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal* add_traffic_signal();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal >&
      traffic_signal() const;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope();
  static const int kEnvelopeFieldNumber = 1;
  private:
  const ::sensoris::protobuf::types::base::CategoryEnvelope& _internal_envelope() const;
  public:
  const ::sensoris::protobuf::types::base::CategoryEnvelope& envelope() const;
  ::sensoris::protobuf::types::base::CategoryEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::CategoryEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* envelope);
  void unsafe_arena_set_allocated_envelope(
      ::sensoris::protobuf::types::base::CategoryEnvelope* envelope);
  ::sensoris::protobuf::types::base::CategoryEnvelope* unsafe_arena_release_envelope();

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb > traffic_signal_bulb_;
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal > traffic_signal_;
  ::sensoris::protobuf::types::base::CategoryEnvelope* envelope_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrafficSignalBulb_StatusAndConfidence

// .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence.Type type = 1;
inline void TrafficSignalBulb_StatusAndConfidence::clear_type() {
  type_ = 0;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence_Type TrafficSignalBulb_StatusAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence.type)
  return static_cast< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence_Type >(type_);
}
inline void TrafficSignalBulb_StatusAndConfidence::set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence.type)
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool TrafficSignalBulb_StatusAndConfidence::has_confidence() const {
  return this != internal_default_instance() && confidence_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignalBulb_StatusAndConfidence::_internal_confidence() const {
  return *confidence_;
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignalBulb_StatusAndConfidence::confidence() const {
  const ::sensoris::protobuf::types::base::Confidence* p = confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence.confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence*>(
      &::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline ::sensoris::protobuf::types::base::Confidence* TrafficSignalBulb_StatusAndConfidence::release_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* TrafficSignalBulb_StatusAndConfidence::unsafe_arena_release_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* TrafficSignalBulb_StatusAndConfidence::mutable_confidence() {
  
  if (confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(GetArenaNoVirtual());
    confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence.confidence)
  return confidence_;
}
inline void TrafficSignalBulb_StatusAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(confidence_);
  }
  if (confidence) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(confidence)->GetArena();
    if (message_arena != submessage_arena) {
      confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, confidence, submessage_arena);
    }
    
  } else {
    
  }
  confidence_ = confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence.confidence)
}

// -------------------------------------------------------------------

// TrafficSignalBulb_ColorAndConfidence

// .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence.Type type = 1;
inline void TrafficSignalBulb_ColorAndConfidence::clear_type() {
  type_ = 0;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence_Type TrafficSignalBulb_ColorAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence.type)
  return static_cast< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence_Type >(type_);
}
inline void TrafficSignalBulb_ColorAndConfidence::set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence.type)
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool TrafficSignalBulb_ColorAndConfidence::has_confidence() const {
  return this != internal_default_instance() && confidence_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignalBulb_ColorAndConfidence::_internal_confidence() const {
  return *confidence_;
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignalBulb_ColorAndConfidence::confidence() const {
  const ::sensoris::protobuf::types::base::Confidence* p = confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence.confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence*>(
      &::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline ::sensoris::protobuf::types::base::Confidence* TrafficSignalBulb_ColorAndConfidence::release_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* TrafficSignalBulb_ColorAndConfidence::unsafe_arena_release_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* TrafficSignalBulb_ColorAndConfidence::mutable_confidence() {
  
  if (confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(GetArenaNoVirtual());
    confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence.confidence)
  return confidence_;
}
inline void TrafficSignalBulb_ColorAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(confidence_);
  }
  if (confidence) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(confidence)->GetArena();
    if (message_arena != submessage_arena) {
      confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, confidence, submessage_arena);
    }
    
  } else {
    
  }
  confidence_ = confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence.confidence)
}

// -------------------------------------------------------------------

// TrafficSignalBulb_ShapeAndConfidence

// .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence.Type type = 1;
inline void TrafficSignalBulb_ShapeAndConfidence::clear_type() {
  type_ = 0;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence_Type TrafficSignalBulb_ShapeAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence.type)
  return static_cast< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence_Type >(type_);
}
inline void TrafficSignalBulb_ShapeAndConfidence::set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence.type)
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool TrafficSignalBulb_ShapeAndConfidence::has_confidence() const {
  return this != internal_default_instance() && confidence_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignalBulb_ShapeAndConfidence::_internal_confidence() const {
  return *confidence_;
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignalBulb_ShapeAndConfidence::confidence() const {
  const ::sensoris::protobuf::types::base::Confidence* p = confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence.confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence*>(
      &::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline ::sensoris::protobuf::types::base::Confidence* TrafficSignalBulb_ShapeAndConfidence::release_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* TrafficSignalBulb_ShapeAndConfidence::unsafe_arena_release_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* TrafficSignalBulb_ShapeAndConfidence::mutable_confidence() {
  
  if (confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(GetArenaNoVirtual());
    confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence.confidence)
  return confidence_;
}
inline void TrafficSignalBulb_ShapeAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(confidence_);
  }
  if (confidence) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(confidence)->GetArena();
    if (message_arena != submessage_arena) {
      confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, confidence, submessage_arena);
    }
    
  } else {
    
  }
  confidence_ = confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence.confidence)
}

// -------------------------------------------------------------------

// TrafficSignalBulb

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool TrafficSignalBulb::has_envelope() const {
  return this != internal_default_instance() && envelope_ != NULL;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& TrafficSignalBulb::_internal_envelope() const {
  return *envelope_;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& TrafficSignalBulb::envelope() const {
  const ::sensoris::protobuf::types::base::EventEnvelope* p = envelope_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.envelope)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope*>(
      &::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline ::sensoris::protobuf::types::base::EventEnvelope* TrafficSignalBulb::release_envelope() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.envelope)
  
  ::sensoris::protobuf::types::base::EventEnvelope* temp = envelope_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* TrafficSignalBulb::unsafe_arena_release_envelope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.envelope)
  
  ::sensoris::protobuf::types::base::EventEnvelope* temp = envelope_;
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* TrafficSignalBulb::mutable_envelope() {
  
  if (envelope_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(GetArenaNoVirtual());
    envelope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.envelope)
  return envelope_;
}
inline void TrafficSignalBulb::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(envelope_);
  }
  if (envelope) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(envelope)->GetArena();
    if (message_arena != submessage_arena) {
      envelope = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.envelope)
}

// .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
inline bool TrafficSignalBulb::has_existence_confidence() const {
  return this != internal_default_instance() && existence_confidence_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignalBulb::_internal_existence_confidence() const {
  return *existence_confidence_;
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignalBulb::existence_confidence() const {
  const ::sensoris::protobuf::types::base::Confidence* p = existence_confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.existence_confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence*>(
      &::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline ::sensoris::protobuf::types::base::Confidence* TrafficSignalBulb::release_existence_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.existence_confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = existence_confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  existence_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* TrafficSignalBulb::unsafe_arena_release_existence_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.existence_confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = existence_confidence_;
  existence_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* TrafficSignalBulb::mutable_existence_confidence() {
  
  if (existence_confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(GetArenaNoVirtual());
    existence_confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.existence_confidence)
  return existence_confidence_;
}
inline void TrafficSignalBulb::set_allocated_existence_confidence(::sensoris::protobuf::types::base::Confidence* existence_confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(existence_confidence_);
  }
  if (existence_confidence) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(existence_confidence)->GetArena();
    if (message_arena != submessage_arena) {
      existence_confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, existence_confidence, submessage_arena);
    }
    
  } else {
    
  }
  existence_confidence_ = existence_confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.existence_confidence)
}

// .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 3;
inline bool TrafficSignalBulb::has_position_and_accuracy() const {
  return this != internal_default_instance() && position_and_accuracy_ != NULL;
}
inline const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& TrafficSignalBulb::_internal_position_and_accuracy() const {
  return *position_and_accuracy_;
}
inline const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& TrafficSignalBulb::position_and_accuracy() const {
  const ::sensoris::protobuf::types::spatial::PositionAndAccuracy* p = position_and_accuracy_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.position_and_accuracy)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::spatial::PositionAndAccuracy*>(
      &::sensoris::protobuf::types::spatial::_PositionAndAccuracy_default_instance_);
}
inline ::sensoris::protobuf::types::spatial::PositionAndAccuracy* TrafficSignalBulb::release_position_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.position_and_accuracy)
  
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* temp = position_and_accuracy_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  position_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::PositionAndAccuracy* TrafficSignalBulb::unsafe_arena_release_position_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.position_and_accuracy)
  
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* temp = position_and_accuracy_;
  position_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::PositionAndAccuracy* TrafficSignalBulb::mutable_position_and_accuracy() {
  
  if (position_and_accuracy_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::spatial::PositionAndAccuracy>(GetArenaNoVirtual());
    position_and_accuracy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.position_and_accuracy)
  return position_and_accuracy_;
}
inline void TrafficSignalBulb::set_allocated_position_and_accuracy(::sensoris::protobuf::types::spatial::PositionAndAccuracy* position_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_and_accuracy_);
  }
  if (position_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(position_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      position_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position_and_accuracy, submessage_arena);
    }
    
  } else {
    
  }
  position_and_accuracy_ = position_and_accuracy;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.position_and_accuracy)
}

// .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.StatusAndConfidence status_and_confidence = 4;
inline bool TrafficSignalBulb::has_status_and_confidence() const {
  return this != internal_default_instance() && status_and_confidence_ != NULL;
}
inline void TrafficSignalBulb::clear_status_and_confidence() {
  if (GetArenaNoVirtual() == NULL && status_and_confidence_ != NULL) {
    delete status_and_confidence_;
  }
  status_and_confidence_ = NULL;
}
inline const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence& TrafficSignalBulb::_internal_status_and_confidence() const {
  return *status_and_confidence_;
}
inline const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence& TrafficSignalBulb::status_and_confidence() const {
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* p = status_and_confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.status_and_confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence*>(
      &::sensoris::protobuf::categories::intersectionattribution::_TrafficSignalBulb_StatusAndConfidence_default_instance_);
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* TrafficSignalBulb::release_status_and_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.status_and_confidence)
  
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* temp = status_and_confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  status_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* TrafficSignalBulb::unsafe_arena_release_status_and_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.status_and_confidence)
  
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* temp = status_and_confidence_;
  status_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* TrafficSignalBulb::mutable_status_and_confidence() {
  
  if (status_and_confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence>(GetArenaNoVirtual());
    status_and_confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.status_and_confidence)
  return status_and_confidence_;
}
inline void TrafficSignalBulb::set_allocated_status_and_confidence(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence* status_and_confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_and_confidence_;
  }
  if (status_and_confidence) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(status_and_confidence);
    if (message_arena != submessage_arena) {
      status_and_confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status_and_confidence, submessage_arena);
    }
    
  } else {
    
  }
  status_and_confidence_ = status_and_confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.status_and_confidence)
}

// .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ColorAndConfidence color_and_confidence = 5;
inline bool TrafficSignalBulb::has_color_and_confidence() const {
  return this != internal_default_instance() && color_and_confidence_ != NULL;
}
inline void TrafficSignalBulb::clear_color_and_confidence() {
  if (GetArenaNoVirtual() == NULL && color_and_confidence_ != NULL) {
    delete color_and_confidence_;
  }
  color_and_confidence_ = NULL;
}
inline const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence& TrafficSignalBulb::_internal_color_and_confidence() const {
  return *color_and_confidence_;
}
inline const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence& TrafficSignalBulb::color_and_confidence() const {
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* p = color_and_confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.color_and_confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence*>(
      &::sensoris::protobuf::categories::intersectionattribution::_TrafficSignalBulb_ColorAndConfidence_default_instance_);
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* TrafficSignalBulb::release_color_and_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.color_and_confidence)
  
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* temp = color_and_confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  color_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* TrafficSignalBulb::unsafe_arena_release_color_and_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.color_and_confidence)
  
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* temp = color_and_confidence_;
  color_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* TrafficSignalBulb::mutable_color_and_confidence() {
  
  if (color_and_confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence>(GetArenaNoVirtual());
    color_and_confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.color_and_confidence)
  return color_and_confidence_;
}
inline void TrafficSignalBulb::set_allocated_color_and_confidence(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence* color_and_confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete color_and_confidence_;
  }
  if (color_and_confidence) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(color_and_confidence);
    if (message_arena != submessage_arena) {
      color_and_confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, color_and_confidence, submessage_arena);
    }
    
  } else {
    
  }
  color_and_confidence_ = color_and_confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.color_and_confidence)
}

// .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.ShapeAndConfidence shape_and_confidence = 6;
inline bool TrafficSignalBulb::has_shape_and_confidence() const {
  return this != internal_default_instance() && shape_and_confidence_ != NULL;
}
inline void TrafficSignalBulb::clear_shape_and_confidence() {
  if (GetArenaNoVirtual() == NULL && shape_and_confidence_ != NULL) {
    delete shape_and_confidence_;
  }
  shape_and_confidence_ = NULL;
}
inline const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence& TrafficSignalBulb::_internal_shape_and_confidence() const {
  return *shape_and_confidence_;
}
inline const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence& TrafficSignalBulb::shape_and_confidence() const {
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* p = shape_and_confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.shape_and_confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence*>(
      &::sensoris::protobuf::categories::intersectionattribution::_TrafficSignalBulb_ShapeAndConfidence_default_instance_);
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* TrafficSignalBulb::release_shape_and_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.shape_and_confidence)
  
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* temp = shape_and_confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  shape_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* TrafficSignalBulb::unsafe_arena_release_shape_and_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.shape_and_confidence)
  
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* temp = shape_and_confidence_;
  shape_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* TrafficSignalBulb::mutable_shape_and_confidence() {
  
  if (shape_and_confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence>(GetArenaNoVirtual());
    shape_and_confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.shape_and_confidence)
  return shape_and_confidence_;
}
inline void TrafficSignalBulb::set_allocated_shape_and_confidence(::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence* shape_and_confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_and_confidence_;
  }
  if (shape_and_confidence) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(shape_and_confidence);
    if (message_arena != submessage_arena) {
      shape_and_confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shape_and_confidence, submessage_arena);
    }
    
  } else {
    
  }
  shape_and_confidence_ = shape_and_confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb.shape_and_confidence)
}

// -------------------------------------------------------------------

// TrafficSignal_OrientationAndConfidence

// .sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence.Type type = 1;
inline void TrafficSignal_OrientationAndConfidence::clear_type() {
  type_ = 0;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence_Type TrafficSignal_OrientationAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence.type)
  return static_cast< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence_Type >(type_);
}
inline void TrafficSignal_OrientationAndConfidence::set_type(::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence.type)
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool TrafficSignal_OrientationAndConfidence::has_confidence() const {
  return this != internal_default_instance() && confidence_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignal_OrientationAndConfidence::_internal_confidence() const {
  return *confidence_;
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignal_OrientationAndConfidence::confidence() const {
  const ::sensoris::protobuf::types::base::Confidence* p = confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence.confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence*>(
      &::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline ::sensoris::protobuf::types::base::Confidence* TrafficSignal_OrientationAndConfidence::release_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* TrafficSignal_OrientationAndConfidence::unsafe_arena_release_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* TrafficSignal_OrientationAndConfidence::mutable_confidence() {
  
  if (confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(GetArenaNoVirtual());
    confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence.confidence)
  return confidence_;
}
inline void TrafficSignal_OrientationAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(confidence_);
  }
  if (confidence) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(confidence)->GetArena();
    if (message_arena != submessage_arena) {
      confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, confidence, submessage_arena);
    }
    
  } else {
    
  }
  confidence_ = confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence.confidence)
}

// -------------------------------------------------------------------

// TrafficSignal

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool TrafficSignal::has_envelope() const {
  return this != internal_default_instance() && envelope_ != NULL;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& TrafficSignal::_internal_envelope() const {
  return *envelope_;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& TrafficSignal::envelope() const {
  const ::sensoris::protobuf::types::base::EventEnvelope* p = envelope_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.envelope)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope*>(
      &::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline ::sensoris::protobuf::types::base::EventEnvelope* TrafficSignal::release_envelope() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.envelope)
  
  ::sensoris::protobuf::types::base::EventEnvelope* temp = envelope_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* TrafficSignal::unsafe_arena_release_envelope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.envelope)
  
  ::sensoris::protobuf::types::base::EventEnvelope* temp = envelope_;
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* TrafficSignal::mutable_envelope() {
  
  if (envelope_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(GetArenaNoVirtual());
    envelope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.envelope)
  return envelope_;
}
inline void TrafficSignal::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(envelope_);
  }
  if (envelope) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(envelope)->GetArena();
    if (message_arena != submessage_arena) {
      envelope = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.envelope)
}

// .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
inline bool TrafficSignal::has_existence_confidence() const {
  return this != internal_default_instance() && existence_confidence_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignal::_internal_existence_confidence() const {
  return *existence_confidence_;
}
inline const ::sensoris::protobuf::types::base::Confidence& TrafficSignal::existence_confidence() const {
  const ::sensoris::protobuf::types::base::Confidence* p = existence_confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.existence_confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence*>(
      &::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline ::sensoris::protobuf::types::base::Confidence* TrafficSignal::release_existence_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.existence_confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = existence_confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  existence_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* TrafficSignal::unsafe_arena_release_existence_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.existence_confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = existence_confidence_;
  existence_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* TrafficSignal::mutable_existence_confidence() {
  
  if (existence_confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(GetArenaNoVirtual());
    existence_confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.existence_confidence)
  return existence_confidence_;
}
inline void TrafficSignal::set_allocated_existence_confidence(::sensoris::protobuf::types::base::Confidence* existence_confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(existence_confidence_);
  }
  if (existence_confidence) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(existence_confidence)->GetArena();
    if (message_arena != submessage_arena) {
      existence_confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, existence_confidence, submessage_arena);
    }
    
  } else {
    
  }
  existence_confidence_ = existence_confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.existence_confidence)
}

// .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
inline bool TrafficSignal::has_detection_status() const {
  return this != internal_default_instance() && detection_status_ != NULL;
}
inline const ::sensoris::protobuf::types::base::EventDetectionStatus& TrafficSignal::_internal_detection_status() const {
  return *detection_status_;
}
inline const ::sensoris::protobuf::types::base::EventDetectionStatus& TrafficSignal::detection_status() const {
  const ::sensoris::protobuf::types::base::EventDetectionStatus* p = detection_status_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.detection_status)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::EventDetectionStatus*>(
      &::sensoris::protobuf::types::base::_EventDetectionStatus_default_instance_);
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* TrafficSignal::release_detection_status() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.detection_status)
  
  ::sensoris::protobuf::types::base::EventDetectionStatus* temp = detection_status_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  detection_status_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* TrafficSignal::unsafe_arena_release_detection_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.detection_status)
  
  ::sensoris::protobuf::types::base::EventDetectionStatus* temp = detection_status_;
  detection_status_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* TrafficSignal::mutable_detection_status() {
  
  if (detection_status_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventDetectionStatus>(GetArenaNoVirtual());
    detection_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.detection_status)
  return detection_status_;
}
inline void TrafficSignal::set_allocated_detection_status(::sensoris::protobuf::types::base::EventDetectionStatus* detection_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(detection_status_);
  }
  if (detection_status) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(detection_status)->GetArena();
    if (message_arena != submessage_arena) {
      detection_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, detection_status, submessage_arena);
    }
    
  } else {
    
  }
  detection_status_ = detection_status;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.detection_status)
}

// .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;
inline bool TrafficSignal::has_rectangular_box_and_accuracy() const {
  return this != internal_default_instance() && rectangular_box_and_accuracy_ != NULL;
}
inline const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy& TrafficSignal::_internal_rectangular_box_and_accuracy() const {
  return *rectangular_box_and_accuracy_;
}
inline const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy& TrafficSignal::rectangular_box_and_accuracy() const {
  const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* p = rectangular_box_and_accuracy_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.rectangular_box_and_accuracy)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy*>(
      &::sensoris::protobuf::types::spatial::_RectangularBoxAndAccuracy_default_instance_);
}
inline ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* TrafficSignal::release_rectangular_box_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.rectangular_box_and_accuracy)
  
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* temp = rectangular_box_and_accuracy_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  rectangular_box_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* TrafficSignal::unsafe_arena_release_rectangular_box_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.rectangular_box_and_accuracy)
  
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* temp = rectangular_box_and_accuracy_;
  rectangular_box_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* TrafficSignal::mutable_rectangular_box_and_accuracy() {
  
  if (rectangular_box_and_accuracy_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy>(GetArenaNoVirtual());
    rectangular_box_and_accuracy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.rectangular_box_and_accuracy)
  return rectangular_box_and_accuracy_;
}
inline void TrafficSignal::set_allocated_rectangular_box_and_accuracy(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* rectangular_box_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rectangular_box_and_accuracy_);
  }
  if (rectangular_box_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(rectangular_box_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      rectangular_box_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rectangular_box_and_accuracy, submessage_arena);
    }
    
  } else {
    
  }
  rectangular_box_and_accuracy_ = rectangular_box_and_accuracy;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.rectangular_box_and_accuracy)
}

// .sensoris.protobuf.types.base.CountAndConfidence bulb_count_and_confidence = 5;
inline bool TrafficSignal::has_bulb_count_and_confidence() const {
  return this != internal_default_instance() && bulb_count_and_confidence_ != NULL;
}
inline const ::sensoris::protobuf::types::base::CountAndConfidence& TrafficSignal::_internal_bulb_count_and_confidence() const {
  return *bulb_count_and_confidence_;
}
inline const ::sensoris::protobuf::types::base::CountAndConfidence& TrafficSignal::bulb_count_and_confidence() const {
  const ::sensoris::protobuf::types::base::CountAndConfidence* p = bulb_count_and_confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.bulb_count_and_confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::CountAndConfidence*>(
      &::sensoris::protobuf::types::base::_CountAndConfidence_default_instance_);
}
inline ::sensoris::protobuf::types::base::CountAndConfidence* TrafficSignal::release_bulb_count_and_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.bulb_count_and_confidence)
  
  ::sensoris::protobuf::types::base::CountAndConfidence* temp = bulb_count_and_confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  bulb_count_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::CountAndConfidence* TrafficSignal::unsafe_arena_release_bulb_count_and_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.bulb_count_and_confidence)
  
  ::sensoris::protobuf::types::base::CountAndConfidence* temp = bulb_count_and_confidence_;
  bulb_count_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::CountAndConfidence* TrafficSignal::mutable_bulb_count_and_confidence() {
  
  if (bulb_count_and_confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::CountAndConfidence>(GetArenaNoVirtual());
    bulb_count_and_confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.bulb_count_and_confidence)
  return bulb_count_and_confidence_;
}
inline void TrafficSignal::set_allocated_bulb_count_and_confidence(::sensoris::protobuf::types::base::CountAndConfidence* bulb_count_and_confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(bulb_count_and_confidence_);
  }
  if (bulb_count_and_confidence) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(bulb_count_and_confidence)->GetArena();
    if (message_arena != submessage_arena) {
      bulb_count_and_confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bulb_count_and_confidence, submessage_arena);
    }
    
  } else {
    
  }
  bulb_count_and_confidence_ = bulb_count_and_confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.bulb_count_and_confidence)
}

// .sensoris.protobuf.categories.intersectionattribution.TrafficSignal.OrientationAndConfidence orientation_and_confidence = 6;
inline bool TrafficSignal::has_orientation_and_confidence() const {
  return this != internal_default_instance() && orientation_and_confidence_ != NULL;
}
inline void TrafficSignal::clear_orientation_and_confidence() {
  if (GetArenaNoVirtual() == NULL && orientation_and_confidence_ != NULL) {
    delete orientation_and_confidence_;
  }
  orientation_and_confidence_ = NULL;
}
inline const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence& TrafficSignal::_internal_orientation_and_confidence() const {
  return *orientation_and_confidence_;
}
inline const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence& TrafficSignal::orientation_and_confidence() const {
  const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* p = orientation_and_confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.orientation_and_confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence*>(
      &::sensoris::protobuf::categories::intersectionattribution::_TrafficSignal_OrientationAndConfidence_default_instance_);
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* TrafficSignal::release_orientation_and_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.orientation_and_confidence)
  
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* temp = orientation_and_confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  orientation_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* TrafficSignal::unsafe_arena_release_orientation_and_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.orientation_and_confidence)
  
  ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* temp = orientation_and_confidence_;
  orientation_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* TrafficSignal::mutable_orientation_and_confidence() {
  
  if (orientation_and_confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence>(GetArenaNoVirtual());
    orientation_and_confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.orientation_and_confidence)
  return orientation_and_confidence_;
}
inline void TrafficSignal::set_allocated_orientation_and_confidence(::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence* orientation_and_confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete orientation_and_confidence_;
  }
  if (orientation_and_confidence) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(orientation_and_confidence);
    if (message_arena != submessage_arena) {
      orientation_and_confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orientation_and_confidence, submessage_arena);
    }
    
  } else {
    
  }
  orientation_and_confidence_ = orientation_and_confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.TrafficSignal.orientation_and_confidence)
}

// -------------------------------------------------------------------

// IntersectionAttributionCategory

// .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
inline bool IntersectionAttributionCategory::has_envelope() const {
  return this != internal_default_instance() && envelope_ != NULL;
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& IntersectionAttributionCategory::_internal_envelope() const {
  return *envelope_;
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& IntersectionAttributionCategory::envelope() const {
  const ::sensoris::protobuf::types::base::CategoryEnvelope* p = envelope_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.envelope)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::CategoryEnvelope*>(
      &::sensoris::protobuf::types::base::_CategoryEnvelope_default_instance_);
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* IntersectionAttributionCategory::release_envelope() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.envelope)
  
  ::sensoris::protobuf::types::base::CategoryEnvelope* temp = envelope_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* IntersectionAttributionCategory::unsafe_arena_release_envelope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.envelope)
  
  ::sensoris::protobuf::types::base::CategoryEnvelope* temp = envelope_;
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* IntersectionAttributionCategory::mutable_envelope() {
  
  if (envelope_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::CategoryEnvelope>(GetArenaNoVirtual());
    envelope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.envelope)
  return envelope_;
}
inline void IntersectionAttributionCategory::set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* envelope) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(envelope_);
  }
  if (envelope) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(envelope)->GetArena();
    if (message_arena != submessage_arena) {
      envelope = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.envelope)
}

// repeated .sensoris.protobuf.categories.intersectionattribution.TrafficSignalBulb traffic_signal_bulb = 2;
inline int IntersectionAttributionCategory::traffic_signal_bulb_size() const {
  return traffic_signal_bulb_.size();
}
inline void IntersectionAttributionCategory::clear_traffic_signal_bulb() {
  traffic_signal_bulb_.Clear();
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb* IntersectionAttributionCategory::mutable_traffic_signal_bulb(int index) {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.traffic_signal_bulb)
  return traffic_signal_bulb_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb >*
IntersectionAttributionCategory::mutable_traffic_signal_bulb() {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.traffic_signal_bulb)
  return &traffic_signal_bulb_;
}
inline const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb& IntersectionAttributionCategory::traffic_signal_bulb(int index) const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.traffic_signal_bulb)
  return traffic_signal_bulb_.Get(index);
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb* IntersectionAttributionCategory::add_traffic_signal_bulb() {
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.traffic_signal_bulb)
  return traffic_signal_bulb_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb >&
IntersectionAttributionCategory::traffic_signal_bulb() const {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.traffic_signal_bulb)
  return traffic_signal_bulb_;
}

// repeated .sensoris.protobuf.categories.intersectionattribution.TrafficSignal traffic_signal = 3;
inline int IntersectionAttributionCategory::traffic_signal_size() const {
  return traffic_signal_.size();
}
inline void IntersectionAttributionCategory::clear_traffic_signal() {
  traffic_signal_.Clear();
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal* IntersectionAttributionCategory::mutable_traffic_signal(int index) {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.traffic_signal)
  return traffic_signal_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal >*
IntersectionAttributionCategory::mutable_traffic_signal() {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.traffic_signal)
  return &traffic_signal_;
}
inline const ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal& IntersectionAttributionCategory::traffic_signal(int index) const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.traffic_signal)
  return traffic_signal_.Get(index);
}
inline ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal* IntersectionAttributionCategory::add_traffic_signal() {
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.traffic_signal)
  return traffic_signal_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal >&
IntersectionAttributionCategory::traffic_signal() const {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.intersectionattribution.IntersectionAttributionCategory.traffic_signal)
  return traffic_signal_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace intersectionattribution
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_StatusAndConfidence_Type_descriptor();
}
template <> struct is_proto_enum< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ColorAndConfidence_Type_descriptor();
}
template <> struct is_proto_enum< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::intersectionattribution::TrafficSignalBulb_ShapeAndConfidence_Type_descriptor();
}
template <> struct is_proto_enum< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::intersectionattribution::TrafficSignal_OrientationAndConfidence_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fintersection_5fattribution_2eproto
