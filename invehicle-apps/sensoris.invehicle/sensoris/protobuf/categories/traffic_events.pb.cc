// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/traffic_events.proto

#include "sensoris/protobuf/categories/traffic_events.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fwrappers_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Int64Value;
}  // namespace protobuf_google_2fprotobuf_2fwrappers_2eproto
namespace protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Hazard_TypeAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RoadWeatherCondition_TypeAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RoadWorks_TypeAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TrafficCondition_TypeAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_DangerousSlowDown;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Hazard;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_TrafficCondition;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_RoadWeatherCondition;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_RoadWorks;
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto
namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Confidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CategoryEnvelope;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EventDetectionStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CountAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_EventEnvelope;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Int64ValueAndAccuracy;
}  // namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto
namespace protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_XyzVectorAndAccuracy;
}  // namespace protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace trafficevents {
class Hazard_TypeAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Hazard_TypeAndConfidence>
      _instance;
} _Hazard_TypeAndConfidence_default_instance_;
class HazardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Hazard>
      _instance;
} _Hazard_default_instance_;
class DangerousSlowDownDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DangerousSlowDown>
      _instance;
} _DangerousSlowDown_default_instance_;
class TrafficCondition_TypeAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficCondition_TypeAndConfidence>
      _instance;
} _TrafficCondition_TypeAndConfidence_default_instance_;
class TrafficConditionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficCondition>
      _instance;
} _TrafficCondition_default_instance_;
class RoadWorks_TypeAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadWorks_TypeAndConfidence>
      _instance;
} _RoadWorks_TypeAndConfidence_default_instance_;
class RoadWorksDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadWorks>
      _instance;
} _RoadWorks_default_instance_;
class RoadWeatherCondition_TypeAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadWeatherCondition_TypeAndConfidence>
      _instance;
} _RoadWeatherCondition_TypeAndConfidence_default_instance_;
class RoadWeatherConditionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadWeatherCondition>
      _instance;
} _RoadWeatherCondition_default_instance_;
class TrafficEventsCategoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficEventsCategory>
      _instance;
} _TrafficEventsCategory_default_instance_;
}  // namespace trafficevents
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto {
static void InitDefaultsHazard_TypeAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficevents::_Hazard_TypeAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Hazard_TypeAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHazard_TypeAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsHazard() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficevents::_Hazard_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficevents::Hazard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficevents::Hazard::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Hazard =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsHazard}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventDetectionStatus.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_Hazard_TypeAndConfidence.base,}};

static void InitDefaultsDangerousSlowDown() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficevents::_DangerousSlowDown_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficevents::DangerousSlowDown();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficevents::DangerousSlowDown::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_DangerousSlowDown =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsDangerousSlowDown}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_XyzVectorAndAccuracy.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int64Value.base,}};

static void InitDefaultsTrafficCondition_TypeAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficevents::_TrafficCondition_TypeAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TrafficCondition_TypeAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrafficCondition_TypeAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsTrafficCondition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficevents::_TrafficCondition_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficevents::TrafficCondition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficevents::TrafficCondition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TrafficCondition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTrafficCondition}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventDetectionStatus.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_TrafficCondition_TypeAndConfidence.base,}};

static void InitDefaultsRoadWorks_TypeAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficevents::_RoadWorks_TypeAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RoadWorks_TypeAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRoadWorks_TypeAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsRoadWorks() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficevents::_RoadWorks_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficevents::RoadWorks();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficevents::RoadWorks::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_RoadWorks =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsRoadWorks}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventDetectionStatus.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_RoadWorks_TypeAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_CountAndConfidence.base,}};

static void InitDefaultsRoadWeatherCondition_TypeAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficevents::_RoadWeatherCondition_TypeAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RoadWeatherCondition_TypeAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRoadWeatherCondition_TypeAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsRoadWeatherCondition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficevents::_RoadWeatherCondition_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_RoadWeatherCondition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsRoadWeatherCondition}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventDetectionStatus.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_RoadWeatherCondition_TypeAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64ValueAndAccuracy.base,}};

static void InitDefaultsTrafficEventsCategory() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficevents::_TrafficEventsCategory_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_TrafficEventsCategory =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsTrafficEventsCategory}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_CategoryEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_Hazard.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_DangerousSlowDown.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_TrafficCondition.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_RoadWorks.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_RoadWeatherCondition.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Hazard_TypeAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Hazard.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DangerousSlowDown.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficCondition_TypeAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficCondition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoadWorks_TypeAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoadWorks.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoadWeatherCondition_TypeAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoadWeatherCondition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficEventsCategory.base);
}

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard, detection_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard, type_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::Hazard, direction_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::DangerousSlowDown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::DangerousSlowDown, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::DangerousSlowDown, speed_reduction_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::DangerousSlowDown, time_period_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficCondition, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficCondition, detection_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficCondition, type_and_confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks, detection_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks, type_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWorks, lanes_closed_and_confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition, detection_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition, type_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition, depth_and_accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, hazard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, dangerous_slow_down_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, traffic_condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, roadworks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory, road_weather_condition_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence)},
  { 7, -1, sizeof(::sensoris::protobuf::categories::trafficevents::Hazard)},
  { 16, -1, sizeof(::sensoris::protobuf::categories::trafficevents::DangerousSlowDown)},
  { 24, -1, sizeof(::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence)},
  { 31, -1, sizeof(::sensoris::protobuf::categories::trafficevents::TrafficCondition)},
  { 39, -1, sizeof(::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence)},
  { 46, -1, sizeof(::sensoris::protobuf::categories::trafficevents::RoadWorks)},
  { 55, -1, sizeof(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence)},
  { 62, -1, sizeof(::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition)},
  { 71, -1, sizeof(::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficevents::_Hazard_TypeAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficevents::_Hazard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficevents::_DangerousSlowDown_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficevents::_TrafficCondition_TypeAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficevents::_TrafficCondition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficevents::_RoadWorks_TypeAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficevents::_RoadWorks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficevents::_RoadWeatherCondition_TypeAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficevents::_RoadWeatherCondition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficevents::_TrafficEventsCategory_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "sensoris/protobuf/categories/traffic_events.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n1sensoris/protobuf/categories/traffic_e"
      "vents.proto\022*sensoris.protobuf.categorie"
      "s.trafficevents\032\036google/protobuf/wrapper"
      "s.proto\032\"sensoris/protobuf/types/base.pr"
      "oto\032%sensoris/protobuf/types/spatial.pro"
      "to\"\332\005\n\006Hazard\022=\n\010envelope\030\001 \001(\0132+.sensor"
      "is.protobuf.types.base.EventEnvelope\022L\n\020"
      "detection_status\030\002 \001(\01322.sensoris.protob"
      "uf.types.base.EventDetectionStatus\022a\n\023ty"
      "pe_and_confidence\030\003 \001(\0132D.sensoris.proto"
      "buf.categories.trafficevents.Hazard.Type"
      "AndConfidence\022O\n\tdirection\030\004 \001(\0162<.senso"
      "ris.protobuf.categories.trafficevents.Ha"
      "zard.Direction\032\265\002\n\021TypeAndConfidence\022W\n\004"
      "type\030\001 \001(\0162I.sensoris.protobuf.categorie"
      "s.trafficevents.Hazard.TypeAndConfidence"
      ".Type\022<\n\nconfidence\030\002 \001(\0132(.sensoris.pro"
      "tobuf.types.base.Confidence\"\210\001\n\004Type\022\020\n\014"
      "UNKNOWN_TYPE\020\000\022\017\n\013OBSTRUCTION\020\001\022\014\n\010ACCID"
      "ENT\020\002\022\027\n\023BROKEN_DOWN_VEHICLE\020\003\022\020\n\014SLOW_V"
      "EHICLE\020\004\022\025\n\021WRONG_WAY_VEHICLE\020\005\022\r\n\tROADW"
      "ORKS\020\006\"W\n\tDirection\022\025\n\021UNKNOWN_DIRECTION"
      "\020\000\022\021\n\rEGO_DIRECTION\020\001\022\026\n\022OPPOSITE_DIRECT"
      "ION\020\002\022\010\n\004BOTH\020\003\"\355\001\n\021DangerousSlowDown\022=\n"
      "\010envelope\030\001 \001(\0132+.sensoris.protobuf.type"
      "s.base.EventEnvelope\022a\n\034speed_reduction_"
      "and_accuracy\030\002 \001(\01325.sensoris.protobuf.t"
      "ypes.spatial.XyzVectorAndAccuracyB\004\210\265\030\001\022"
      "6\n\013time_period\030\003 \001(\0132\033.google.protobuf.I"
      "nt64ValueB\004\210\265\030\000\"\236\004\n\020TrafficCondition\022=\n\010"
      "envelope\030\001 \001(\0132+.sensoris.protobuf.types"
      ".base.EventEnvelope\022L\n\020detection_status\030"
      "\002 \001(\01322.sensoris.protobuf.types.base.Eve"
      "ntDetectionStatus\022k\n\023type_and_confidence"
      "\030\003 \001(\0132N.sensoris.protobuf.categories.tr"
      "afficevents.TrafficCondition.TypeAndConf"
      "idence\032\217\002\n\021TypeAndConfidence\022a\n\004type\030\001 \001"
      "(\0162S.sensoris.protobuf.categories.traffi"
      "cevents.TrafficCondition.TypeAndConfiden"
      "ce.Type\022<\n\nconfidence\030\002 \001(\0132(.sensoris.p"
      "rotobuf.types.base.Confidence\"Y\n\004Type\022\020\n"
      "\014UNKNOWN_TYPE\020\000\022\r\n\tFREE_FLOW\020\001\022\t\n\005HEAVY\020"
      "\002\022\010\n\004SLOW\020\003\022\013\n\007QUEUING\020\004\022\016\n\nSTATIONARY\020\005"
      "\"\263\004\n\tRoadWorks\022=\n\010envelope\030\001 \001(\0132+.senso"
      "ris.protobuf.types.base.EventEnvelope\022L\n"
      "\020detection_status\030\002 \001(\01322.sensoris.proto"
      "buf.types.base.EventDetectionStatus\022d\n\023t"
      "ype_and_confidence\030\003 \001(\0132G.sensoris.prot"
      "obuf.categories.trafficevents.RoadWorks."
      "TypeAndConfidence\022U\n\033lanes_closed_and_co"
      "nfidence\030\005 \001(\01320.sensoris.protobuf.types"
      ".base.CountAndConfidence\032\333\001\n\021TypeAndConf"
      "idence\022Z\n\004type\030\001 \001(\0162L.sensoris.protobuf"
      ".categories.trafficevents.RoadWorks.Type"
      "AndConfidence.Type\022<\n\nconfidence\030\002 \001(\0132("
      ".sensoris.protobuf.types.base.Confidence"
      "\",\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\t\n\005START\020\001\022\007\n"
      "\003END\020\002\"\221\005\n\024RoadWeatherCondition\022=\n\010envel"
      "ope\030\001 \001(\0132+.sensoris.protobuf.types.base"
      ".EventEnvelope\022L\n\020detection_status\030\002 \001(\013"
      "22.sensoris.protobuf.types.base.EventDet"
      "ectionStatus\022o\n\023type_and_confidence\030\003 \001("
      "\0132R.sensoris.protobuf.categories.traffic"
      "events.RoadWeatherCondition.TypeAndConfi"
      "dence\022U\n\022depth_and_accuracy\030\004 \001(\01323.sens"
      "oris.protobuf.types.base.Int64ValueAndAc"
      "curacyB\004\210\265\030\000\032\243\002\n\021TypeAndConfidence\022e\n\004ty"
      "pe\030\001 \001(\0162W.sensoris.protobuf.categories."
      "trafficevents.RoadWeatherCondition.TypeA"
      "ndConfidence.Type\022<\n\nconfidence\030\002 \001(\0132(."
      "sensoris.protobuf.types.base.Confidence\""
      "i\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\010\n\004SNOW\020\001\022\007\n\003I"
      "CE\020\002\022\021\n\rFREEZING_RAIN\020\003\022\t\n\005FROST\020\004\022\020\n\014HY"
      "DROPLANING\020\005\022\014\n\010FLOODING\020\006\"\376\003\n\025TrafficEv"
      "entsCategory\022@\n\010envelope\030\001 \001(\0132..sensori"
      "s.protobuf.types.base.CategoryEnvelope\022B"
      "\n\006hazard\030\002 \003(\01322.sensoris.protobuf.categ"
      "ories.trafficevents.Hazard\022Z\n\023dangerous_"
      "slow_down\030\003 \003(\0132=.sensoris.protobuf.cate"
      "gories.trafficevents.DangerousSlowDown\022W"
      "\n\021traffic_condition\030\004 \003(\0132<.sensoris.pro"
      "tobuf.categories.trafficevents.TrafficCo"
      "ndition\022H\n\troadworks\030\005 \003(\01325.sensoris.pr"
      "otobuf.categories.trafficevents.RoadWork"
      "s\022`\n\026road_weather_condition\030\006 \003(\0132@.sens"
      "oris.protobuf.categories.trafficevents.R"
      "oadWeatherConditionBK\n%org.sensoris.cate"
      "gories.trafficeventsB\035SensorisTrafficEve"
      "ntsCategoryP\001\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3544);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensoris/protobuf/categories/traffic_events.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::AddDescriptors();
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace trafficevents {
const ::google::protobuf::EnumDescriptor* Hazard_TypeAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_enum_descriptors[0];
}
bool Hazard_TypeAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::UNKNOWN_TYPE;
const Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::OBSTRUCTION;
const Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::ACCIDENT;
const Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::BROKEN_DOWN_VEHICLE;
const Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::SLOW_VEHICLE;
const Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::WRONG_WAY_VEHICLE;
const Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::ROADWORKS;
const Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::Type_MIN;
const Hazard_TypeAndConfidence_Type Hazard_TypeAndConfidence::Type_MAX;
const int Hazard_TypeAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Hazard_Direction_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_enum_descriptors[1];
}
bool Hazard_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Hazard_Direction Hazard::UNKNOWN_DIRECTION;
const Hazard_Direction Hazard::EGO_DIRECTION;
const Hazard_Direction Hazard::OPPOSITE_DIRECTION;
const Hazard_Direction Hazard::BOTH;
const Hazard_Direction Hazard::Direction_MIN;
const Hazard_Direction Hazard::Direction_MAX;
const int Hazard::Direction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficCondition_TypeAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_enum_descriptors[2];
}
bool TrafficCondition_TypeAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficCondition_TypeAndConfidence_Type TrafficCondition_TypeAndConfidence::UNKNOWN_TYPE;
const TrafficCondition_TypeAndConfidence_Type TrafficCondition_TypeAndConfidence::FREE_FLOW;
const TrafficCondition_TypeAndConfidence_Type TrafficCondition_TypeAndConfidence::HEAVY;
const TrafficCondition_TypeAndConfidence_Type TrafficCondition_TypeAndConfidence::SLOW;
const TrafficCondition_TypeAndConfidence_Type TrafficCondition_TypeAndConfidence::QUEUING;
const TrafficCondition_TypeAndConfidence_Type TrafficCondition_TypeAndConfidence::STATIONARY;
const TrafficCondition_TypeAndConfidence_Type TrafficCondition_TypeAndConfidence::Type_MIN;
const TrafficCondition_TypeAndConfidence_Type TrafficCondition_TypeAndConfidence::Type_MAX;
const int TrafficCondition_TypeAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RoadWorks_TypeAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_enum_descriptors[3];
}
bool RoadWorks_TypeAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RoadWorks_TypeAndConfidence_Type RoadWorks_TypeAndConfidence::UNKNOWN_TYPE;
const RoadWorks_TypeAndConfidence_Type RoadWorks_TypeAndConfidence::START;
const RoadWorks_TypeAndConfidence_Type RoadWorks_TypeAndConfidence::END;
const RoadWorks_TypeAndConfidence_Type RoadWorks_TypeAndConfidence::Type_MIN;
const RoadWorks_TypeAndConfidence_Type RoadWorks_TypeAndConfidence::Type_MAX;
const int RoadWorks_TypeAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RoadWeatherCondition_TypeAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_enum_descriptors[4];
}
bool RoadWeatherCondition_TypeAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RoadWeatherCondition_TypeAndConfidence_Type RoadWeatherCondition_TypeAndConfidence::UNKNOWN_TYPE;
const RoadWeatherCondition_TypeAndConfidence_Type RoadWeatherCondition_TypeAndConfidence::SNOW;
const RoadWeatherCondition_TypeAndConfidence_Type RoadWeatherCondition_TypeAndConfidence::ICE;
const RoadWeatherCondition_TypeAndConfidence_Type RoadWeatherCondition_TypeAndConfidence::FREEZING_RAIN;
const RoadWeatherCondition_TypeAndConfidence_Type RoadWeatherCondition_TypeAndConfidence::FROST;
const RoadWeatherCondition_TypeAndConfidence_Type RoadWeatherCondition_TypeAndConfidence::HYDROPLANING;
const RoadWeatherCondition_TypeAndConfidence_Type RoadWeatherCondition_TypeAndConfidence::FLOODING;
const RoadWeatherCondition_TypeAndConfidence_Type RoadWeatherCondition_TypeAndConfidence::Type_MIN;
const RoadWeatherCondition_TypeAndConfidence_Type RoadWeatherCondition_TypeAndConfidence::Type_MAX;
const int RoadWeatherCondition_TypeAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Hazard_TypeAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficevents::_Hazard_TypeAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void Hazard_TypeAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence.confidence)
}
void Hazard_TypeAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Hazard_TypeAndConfidence::kTypeFieldNumber;
const int Hazard_TypeAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Hazard_TypeAndConfidence::Hazard_TypeAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_Hazard_TypeAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
}
Hazard_TypeAndConfidence::Hazard_TypeAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_Hazard_TypeAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
}
Hazard_TypeAndConfidence::Hazard_TypeAndConfidence(const Hazard_TypeAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
}

void Hazard_TypeAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

Hazard_TypeAndConfidence::~Hazard_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  SharedDtor();
}

void Hazard_TypeAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void Hazard_TypeAndConfidence::ArenaDtor(void* object) {
  Hazard_TypeAndConfidence* _this = reinterpret_cast< Hazard_TypeAndConfidence* >(object);
  (void)_this;
}
void Hazard_TypeAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Hazard_TypeAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Hazard_TypeAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Hazard_TypeAndConfidence& Hazard_TypeAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_Hazard_TypeAndConfidence.base);
  return *internal_default_instance();
}


void Hazard_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Hazard_TypeAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  return false;
#undef DO_
}

void Hazard_TypeAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
}

::google::protobuf::uint8* Hazard_TypeAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  return target;
}

size_t Hazard_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hazard_TypeAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const Hazard_TypeAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Hazard_TypeAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
    MergeFrom(*source);
  }
}

void Hazard_TypeAndConfidence::MergeFrom(const Hazard_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Hazard_TypeAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hazard_TypeAndConfidence::CopyFrom(const Hazard_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hazard_TypeAndConfidence::IsInitialized() const {
  return true;
}

void Hazard_TypeAndConfidence::Swap(Hazard_TypeAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Hazard_TypeAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Hazard_TypeAndConfidence::UnsafeArenaSwap(Hazard_TypeAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Hazard_TypeAndConfidence::InternalSwap(Hazard_TypeAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Hazard_TypeAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Hazard::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficevents::_Hazard_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::trafficevents::_Hazard_default_instance_._instance.get_mutable()->detection_status_ = const_cast< ::sensoris::protobuf::types::base::EventDetectionStatus*>(
      ::sensoris::protobuf::types::base::EventDetectionStatus::internal_default_instance());
  ::sensoris::protobuf::categories::trafficevents::_Hazard_default_instance_._instance.get_mutable()->type_and_confidence_ = const_cast< ::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence*>(
      ::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence::internal_default_instance());
}
void Hazard::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficevents.Hazard.envelope)
}
void Hazard::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void Hazard::unsafe_arena_set_allocated_detection_status(
    ::sensoris::protobuf::types::base::EventDetectionStatus* detection_status) {
  if (GetArenaNoVirtual() == NULL) {
    delete detection_status_;
  }
  detection_status_ = detection_status;
  if (detection_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficevents.Hazard.detection_status)
}
void Hazard::clear_detection_status() {
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
}
void Hazard::unsafe_arena_set_allocated_type_and_confidence(
    ::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence* type_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = type_and_confidence;
  if (type_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficevents.Hazard.type_and_confidence)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Hazard::kEnvelopeFieldNumber;
const int Hazard::kDetectionStatusFieldNumber;
const int Hazard::kTypeAndConfidenceFieldNumber;
const int Hazard::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Hazard::Hazard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_Hazard.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficevents.Hazard)
}
Hazard::Hazard(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_Hazard.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.Hazard)
}
Hazard::Hazard(const Hazard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_detection_status()) {
    detection_status_ = new ::sensoris::protobuf::types::base::EventDetectionStatus(*from.detection_status_);
  } else {
    detection_status_ = NULL;
  }
  if (from.has_type_and_confidence()) {
    type_and_confidence_ = new ::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence(*from.type_and_confidence_);
  } else {
    type_and_confidence_ = NULL;
  }
  direction_ = from.direction_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.Hazard)
}

void Hazard::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(direction_));
}

Hazard::~Hazard() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.Hazard)
  SharedDtor();
}

void Hazard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete detection_status_;
  if (this != internal_default_instance()) delete type_and_confidence_;
}

void Hazard::ArenaDtor(void* object) {
  Hazard* _this = reinterpret_cast< Hazard* >(object);
  (void)_this;
}
void Hazard::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Hazard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Hazard::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Hazard& Hazard::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_Hazard.base);
  return *internal_default_instance();
}


void Hazard::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.Hazard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && type_and_confidence_ != NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = NULL;
  direction_ = 0;
  _internal_metadata_.Clear();
}

bool Hazard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficevents.Hazard)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detection_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence type_and_confidence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.trafficevents.Hazard.Direction direction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::sensoris::protobuf::categories::trafficevents::Hazard_Direction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficevents.Hazard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficevents.Hazard)
  return false;
#undef DO_
}

void Hazard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficevents.Hazard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (this->has_detection_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_detection_status(), output);
  }

  // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence type_and_confidence = 3;
  if (this->has_type_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_type_and_confidence(), output);
  }

  // .sensoris.protobuf.categories.trafficevents.Hazard.Direction direction = 4;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->direction(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficevents.Hazard)
}

::google::protobuf::uint8* Hazard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.Hazard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (this->has_detection_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_detection_status(), deterministic, target);
  }

  // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence type_and_confidence = 3;
  if (this->has_type_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_type_and_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.categories.trafficevents.Hazard.Direction direction = 4;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->direction(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.Hazard)
  return target;
}

size_t Hazard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.Hazard)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (this->has_detection_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *detection_status_);
  }

  // .sensoris.protobuf.categories.trafficevents.Hazard.TypeAndConfidence type_and_confidence = 3;
  if (this->has_type_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *type_and_confidence_);
  }

  // .sensoris.protobuf.categories.trafficevents.Hazard.Direction direction = 4;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hazard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficevents.Hazard)
  GOOGLE_DCHECK_NE(&from, this);
  const Hazard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Hazard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficevents.Hazard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficevents.Hazard)
    MergeFrom(*source);
  }
}

void Hazard::MergeFrom(const Hazard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.Hazard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_detection_status()) {
    mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(from.detection_status());
  }
  if (from.has_type_and_confidence()) {
    mutable_type_and_confidence()->::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence::MergeFrom(from.type_and_confidence());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
}

void Hazard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficevents.Hazard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hazard::CopyFrom(const Hazard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.Hazard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hazard::IsInitialized() const {
  return true;
}

void Hazard::Swap(Hazard* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Hazard* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Hazard::UnsafeArenaSwap(Hazard* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Hazard::InternalSwap(Hazard* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(detection_status_, other->detection_status_);
  swap(type_and_confidence_, other->type_and_confidence_);
  swap(direction_, other->direction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Hazard::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DangerousSlowDown::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficevents::_DangerousSlowDown_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::trafficevents::_DangerousSlowDown_default_instance_._instance.get_mutable()->speed_reduction_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::trafficevents::_DangerousSlowDown_default_instance_._instance.get_mutable()->time_period_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
}
void DangerousSlowDown::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficevents.DangerousSlowDown.envelope)
}
void DangerousSlowDown::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void DangerousSlowDown::unsafe_arena_set_allocated_speed_reduction_and_accuracy(
    ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* speed_reduction_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete speed_reduction_and_accuracy_;
  }
  speed_reduction_and_accuracy_ = speed_reduction_and_accuracy;
  if (speed_reduction_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficevents.DangerousSlowDown.speed_reduction_and_accuracy)
}
void DangerousSlowDown::clear_speed_reduction_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && speed_reduction_and_accuracy_ != NULL) {
    delete speed_reduction_and_accuracy_;
  }
  speed_reduction_and_accuracy_ = NULL;
}
void DangerousSlowDown::unsafe_arena_set_allocated_time_period(
    ::google::protobuf::Int64Value* time_period) {
  if (GetArenaNoVirtual() == NULL) {
    delete time_period_;
  }
  time_period_ = time_period;
  if (time_period) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficevents.DangerousSlowDown.time_period)
}
void DangerousSlowDown::clear_time_period() {
  if (GetArenaNoVirtual() == NULL && time_period_ != NULL) {
    delete time_period_;
  }
  time_period_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DangerousSlowDown::kEnvelopeFieldNumber;
const int DangerousSlowDown::kSpeedReductionAndAccuracyFieldNumber;
const int DangerousSlowDown::kTimePeriodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DangerousSlowDown::DangerousSlowDown()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_DangerousSlowDown.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
}
DangerousSlowDown::DangerousSlowDown(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_DangerousSlowDown.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
}
DangerousSlowDown::DangerousSlowDown(const DangerousSlowDown& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_speed_reduction_and_accuracy()) {
    speed_reduction_and_accuracy_ = new ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy(*from.speed_reduction_and_accuracy_);
  } else {
    speed_reduction_and_accuracy_ = NULL;
  }
  if (from.has_time_period()) {
    time_period_ = new ::google::protobuf::Int64Value(*from.time_period_);
  } else {
    time_period_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
}

void DangerousSlowDown::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_period_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(time_period_));
}

DangerousSlowDown::~DangerousSlowDown() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  SharedDtor();
}

void DangerousSlowDown::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete speed_reduction_and_accuracy_;
  if (this != internal_default_instance()) delete time_period_;
}

void DangerousSlowDown::ArenaDtor(void* object) {
  DangerousSlowDown* _this = reinterpret_cast< DangerousSlowDown* >(object);
  (void)_this;
}
void DangerousSlowDown::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DangerousSlowDown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DangerousSlowDown::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DangerousSlowDown& DangerousSlowDown::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_DangerousSlowDown.base);
  return *internal_default_instance();
}


void DangerousSlowDown::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && speed_reduction_and_accuracy_ != NULL) {
    delete speed_reduction_and_accuracy_;
  }
  speed_reduction_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && time_period_ != NULL) {
    delete time_period_;
  }
  time_period_ = NULL;
  _internal_metadata_.Clear();
}

bool DangerousSlowDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy speed_reduction_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_speed_reduction_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value time_period = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_period()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  return false;
#undef DO_
}

void DangerousSlowDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy speed_reduction_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_speed_reduction_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_speed_reduction_and_accuracy(), output);
  }

  // .google.protobuf.Int64Value time_period = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_time_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_time_period(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
}

::google::protobuf::uint8* DangerousSlowDown::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy speed_reduction_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_speed_reduction_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_speed_reduction_and_accuracy(), deterministic, target);
  }

  // .google.protobuf.Int64Value time_period = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_time_period()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_time_period(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  return target;
}

size_t DangerousSlowDown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy speed_reduction_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_speed_reduction_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *speed_reduction_and_accuracy_);
  }

  // .google.protobuf.Int64Value time_period = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_time_period()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_period_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DangerousSlowDown::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  GOOGLE_DCHECK_NE(&from, this);
  const DangerousSlowDown* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DangerousSlowDown>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
    MergeFrom(*source);
  }
}

void DangerousSlowDown::MergeFrom(const DangerousSlowDown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_speed_reduction_and_accuracy()) {
    mutable_speed_reduction_and_accuracy()->::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy::MergeFrom(from.speed_reduction_and_accuracy());
  }
  if (from.has_time_period()) {
    mutable_time_period()->::google::protobuf::Int64Value::MergeFrom(from.time_period());
  }
}

void DangerousSlowDown::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DangerousSlowDown::CopyFrom(const DangerousSlowDown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.DangerousSlowDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DangerousSlowDown::IsInitialized() const {
  return true;
}

void DangerousSlowDown::Swap(DangerousSlowDown* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DangerousSlowDown* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DangerousSlowDown::UnsafeArenaSwap(DangerousSlowDown* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DangerousSlowDown::InternalSwap(DangerousSlowDown* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(speed_reduction_and_accuracy_, other->speed_reduction_and_accuracy_);
  swap(time_period_, other->time_period_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DangerousSlowDown::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficCondition_TypeAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficevents::_TrafficCondition_TypeAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void TrafficCondition_TypeAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence.confidence)
}
void TrafficCondition_TypeAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficCondition_TypeAndConfidence::kTypeFieldNumber;
const int TrafficCondition_TypeAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficCondition_TypeAndConfidence::TrafficCondition_TypeAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_TrafficCondition_TypeAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
}
TrafficCondition_TypeAndConfidence::TrafficCondition_TypeAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_TrafficCondition_TypeAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
}
TrafficCondition_TypeAndConfidence::TrafficCondition_TypeAndConfidence(const TrafficCondition_TypeAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
}

void TrafficCondition_TypeAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

TrafficCondition_TypeAndConfidence::~TrafficCondition_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  SharedDtor();
}

void TrafficCondition_TypeAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void TrafficCondition_TypeAndConfidence::ArenaDtor(void* object) {
  TrafficCondition_TypeAndConfidence* _this = reinterpret_cast< TrafficCondition_TypeAndConfidence* >(object);
  (void)_this;
}
void TrafficCondition_TypeAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TrafficCondition_TypeAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficCondition_TypeAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficCondition_TypeAndConfidence& TrafficCondition_TypeAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_TrafficCondition_TypeAndConfidence.base);
  return *internal_default_instance();
}


void TrafficCondition_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool TrafficCondition_TypeAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  return false;
#undef DO_
}

void TrafficCondition_TypeAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
}

::google::protobuf::uint8* TrafficCondition_TypeAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  return target;
}

size_t TrafficCondition_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficCondition_TypeAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficCondition_TypeAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficCondition_TypeAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
    MergeFrom(*source);
  }
}

void TrafficCondition_TypeAndConfidence::MergeFrom(const TrafficCondition_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TrafficCondition_TypeAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficCondition_TypeAndConfidence::CopyFrom(const TrafficCondition_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficCondition_TypeAndConfidence::IsInitialized() const {
  return true;
}

void TrafficCondition_TypeAndConfidence::Swap(TrafficCondition_TypeAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TrafficCondition_TypeAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TrafficCondition_TypeAndConfidence::UnsafeArenaSwap(TrafficCondition_TypeAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TrafficCondition_TypeAndConfidence::InternalSwap(TrafficCondition_TypeAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficCondition_TypeAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficCondition::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficevents::_TrafficCondition_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::trafficevents::_TrafficCondition_default_instance_._instance.get_mutable()->detection_status_ = const_cast< ::sensoris::protobuf::types::base::EventDetectionStatus*>(
      ::sensoris::protobuf::types::base::EventDetectionStatus::internal_default_instance());
  ::sensoris::protobuf::categories::trafficevents::_TrafficCondition_default_instance_._instance.get_mutable()->type_and_confidence_ = const_cast< ::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence*>(
      ::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence::internal_default_instance());
}
void TrafficCondition::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficevents.TrafficCondition.envelope)
}
void TrafficCondition::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void TrafficCondition::unsafe_arena_set_allocated_detection_status(
    ::sensoris::protobuf::types::base::EventDetectionStatus* detection_status) {
  if (GetArenaNoVirtual() == NULL) {
    delete detection_status_;
  }
  detection_status_ = detection_status;
  if (detection_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficevents.TrafficCondition.detection_status)
}
void TrafficCondition::clear_detection_status() {
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
}
void TrafficCondition::unsafe_arena_set_allocated_type_and_confidence(
    ::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence* type_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = type_and_confidence;
  if (type_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficevents.TrafficCondition.type_and_confidence)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficCondition::kEnvelopeFieldNumber;
const int TrafficCondition::kDetectionStatusFieldNumber;
const int TrafficCondition::kTypeAndConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficCondition::TrafficCondition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_TrafficCondition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficevents.TrafficCondition)
}
TrafficCondition::TrafficCondition(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_TrafficCondition.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.TrafficCondition)
}
TrafficCondition::TrafficCondition(const TrafficCondition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_detection_status()) {
    detection_status_ = new ::sensoris::protobuf::types::base::EventDetectionStatus(*from.detection_status_);
  } else {
    detection_status_ = NULL;
  }
  if (from.has_type_and_confidence()) {
    type_and_confidence_ = new ::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence(*from.type_and_confidence_);
  } else {
    type_and_confidence_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.TrafficCondition)
}

void TrafficCondition::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_and_confidence_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(type_and_confidence_));
}

TrafficCondition::~TrafficCondition() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  SharedDtor();
}

void TrafficCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete detection_status_;
  if (this != internal_default_instance()) delete type_and_confidence_;
}

void TrafficCondition::ArenaDtor(void* object) {
  TrafficCondition* _this = reinterpret_cast< TrafficCondition* >(object);
  (void)_this;
}
void TrafficCondition::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TrafficCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficCondition::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficCondition& TrafficCondition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_TrafficCondition.base);
  return *internal_default_instance();
}


void TrafficCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && type_and_confidence_ != NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = NULL;
  _internal_metadata_.Clear();
}

bool TrafficCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detection_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence type_and_confidence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  return false;
#undef DO_
}

void TrafficCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (this->has_detection_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_detection_status(), output);
  }

  // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence type_and_confidence = 3;
  if (this->has_type_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_type_and_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficevents.TrafficCondition)
}

::google::protobuf::uint8* TrafficCondition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (this->has_detection_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_detection_status(), deterministic, target);
  }

  // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence type_and_confidence = 3;
  if (this->has_type_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_type_and_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  return target;
}

size_t TrafficCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (this->has_detection_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *detection_status_);
  }

  // .sensoris.protobuf.categories.trafficevents.TrafficCondition.TypeAndConfidence type_and_confidence = 3;
  if (this->has_type_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *type_and_confidence_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficCondition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficCondition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficCondition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficevents.TrafficCondition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficevents.TrafficCondition)
    MergeFrom(*source);
  }
}

void TrafficCondition::MergeFrom(const TrafficCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_detection_status()) {
    mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(from.detection_status());
  }
  if (from.has_type_and_confidence()) {
    mutable_type_and_confidence()->::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence::MergeFrom(from.type_and_confidence());
  }
}

void TrafficCondition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficCondition::CopyFrom(const TrafficCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.TrafficCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficCondition::IsInitialized() const {
  return true;
}

void TrafficCondition::Swap(TrafficCondition* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TrafficCondition* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TrafficCondition::UnsafeArenaSwap(TrafficCondition* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TrafficCondition::InternalSwap(TrafficCondition* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(detection_status_, other->detection_status_);
  swap(type_and_confidence_, other->type_and_confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficCondition::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoadWorks_TypeAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficevents::_RoadWorks_TypeAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void RoadWorks_TypeAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence.confidence)
}
void RoadWorks_TypeAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadWorks_TypeAndConfidence::kTypeFieldNumber;
const int RoadWorks_TypeAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadWorks_TypeAndConfidence::RoadWorks_TypeAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_RoadWorks_TypeAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
}
RoadWorks_TypeAndConfidence::RoadWorks_TypeAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_RoadWorks_TypeAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
}
RoadWorks_TypeAndConfidence::RoadWorks_TypeAndConfidence(const RoadWorks_TypeAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
}

void RoadWorks_TypeAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

RoadWorks_TypeAndConfidence::~RoadWorks_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  SharedDtor();
}

void RoadWorks_TypeAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void RoadWorks_TypeAndConfidence::ArenaDtor(void* object) {
  RoadWorks_TypeAndConfidence* _this = reinterpret_cast< RoadWorks_TypeAndConfidence* >(object);
  (void)_this;
}
void RoadWorks_TypeAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RoadWorks_TypeAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoadWorks_TypeAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadWorks_TypeAndConfidence& RoadWorks_TypeAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_RoadWorks_TypeAndConfidence.base);
  return *internal_default_instance();
}


void RoadWorks_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool RoadWorks_TypeAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  return false;
#undef DO_
}

void RoadWorks_TypeAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
}

::google::protobuf::uint8* RoadWorks_TypeAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  return target;
}

size_t RoadWorks_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadWorks_TypeAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadWorks_TypeAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadWorks_TypeAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
    MergeFrom(*source);
  }
}

void RoadWorks_TypeAndConfidence::MergeFrom(const RoadWorks_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void RoadWorks_TypeAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadWorks_TypeAndConfidence::CopyFrom(const RoadWorks_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadWorks_TypeAndConfidence::IsInitialized() const {
  return true;
}

void RoadWorks_TypeAndConfidence::Swap(RoadWorks_TypeAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RoadWorks_TypeAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RoadWorks_TypeAndConfidence::UnsafeArenaSwap(RoadWorks_TypeAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RoadWorks_TypeAndConfidence::InternalSwap(RoadWorks_TypeAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoadWorks_TypeAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoadWorks::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficevents::_RoadWorks_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::trafficevents::_RoadWorks_default_instance_._instance.get_mutable()->detection_status_ = const_cast< ::sensoris::protobuf::types::base::EventDetectionStatus*>(
      ::sensoris::protobuf::types::base::EventDetectionStatus::internal_default_instance());
  ::sensoris::protobuf::categories::trafficevents::_RoadWorks_default_instance_._instance.get_mutable()->type_and_confidence_ = const_cast< ::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence*>(
      ::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence::internal_default_instance());
  ::sensoris::protobuf::categories::trafficevents::_RoadWorks_default_instance_._instance.get_mutable()->lanes_closed_and_confidence_ = const_cast< ::sensoris::protobuf::types::base::CountAndConfidence*>(
      ::sensoris::protobuf::types::base::CountAndConfidence::internal_default_instance());
}
void RoadWorks::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficevents.RoadWorks.envelope)
}
void RoadWorks::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void RoadWorks::unsafe_arena_set_allocated_detection_status(
    ::sensoris::protobuf::types::base::EventDetectionStatus* detection_status) {
  if (GetArenaNoVirtual() == NULL) {
    delete detection_status_;
  }
  detection_status_ = detection_status;
  if (detection_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficevents.RoadWorks.detection_status)
}
void RoadWorks::clear_detection_status() {
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
}
void RoadWorks::unsafe_arena_set_allocated_type_and_confidence(
    ::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence* type_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = type_and_confidence;
  if (type_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficevents.RoadWorks.type_and_confidence)
}
void RoadWorks::unsafe_arena_set_allocated_lanes_closed_and_confidence(
    ::sensoris::protobuf::types::base::CountAndConfidence* lanes_closed_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete lanes_closed_and_confidence_;
  }
  lanes_closed_and_confidence_ = lanes_closed_and_confidence;
  if (lanes_closed_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficevents.RoadWorks.lanes_closed_and_confidence)
}
void RoadWorks::clear_lanes_closed_and_confidence() {
  if (GetArenaNoVirtual() == NULL && lanes_closed_and_confidence_ != NULL) {
    delete lanes_closed_and_confidence_;
  }
  lanes_closed_and_confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadWorks::kEnvelopeFieldNumber;
const int RoadWorks::kDetectionStatusFieldNumber;
const int RoadWorks::kTypeAndConfidenceFieldNumber;
const int RoadWorks::kLanesClosedAndConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadWorks::RoadWorks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_RoadWorks.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficevents.RoadWorks)
}
RoadWorks::RoadWorks(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_RoadWorks.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.RoadWorks)
}
RoadWorks::RoadWorks(const RoadWorks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_detection_status()) {
    detection_status_ = new ::sensoris::protobuf::types::base::EventDetectionStatus(*from.detection_status_);
  } else {
    detection_status_ = NULL;
  }
  if (from.has_type_and_confidence()) {
    type_and_confidence_ = new ::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence(*from.type_and_confidence_);
  } else {
    type_and_confidence_ = NULL;
  }
  if (from.has_lanes_closed_and_confidence()) {
    lanes_closed_and_confidence_ = new ::sensoris::protobuf::types::base::CountAndConfidence(*from.lanes_closed_and_confidence_);
  } else {
    lanes_closed_and_confidence_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.RoadWorks)
}

void RoadWorks::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lanes_closed_and_confidence_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(lanes_closed_and_confidence_));
}

RoadWorks::~RoadWorks() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.RoadWorks)
  SharedDtor();
}

void RoadWorks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete detection_status_;
  if (this != internal_default_instance()) delete type_and_confidence_;
  if (this != internal_default_instance()) delete lanes_closed_and_confidence_;
}

void RoadWorks::ArenaDtor(void* object) {
  RoadWorks* _this = reinterpret_cast< RoadWorks* >(object);
  (void)_this;
}
void RoadWorks::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RoadWorks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoadWorks::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadWorks& RoadWorks::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_RoadWorks.base);
  return *internal_default_instance();
}


void RoadWorks::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.RoadWorks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && type_and_confidence_ != NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && lanes_closed_and_confidence_ != NULL) {
    delete lanes_closed_and_confidence_;
  }
  lanes_closed_and_confidence_ = NULL;
  _internal_metadata_.Clear();
}

bool RoadWorks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficevents.RoadWorks)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detection_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence type_and_confidence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.CountAndConfidence lanes_closed_and_confidence = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lanes_closed_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficevents.RoadWorks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficevents.RoadWorks)
  return false;
#undef DO_
}

void RoadWorks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficevents.RoadWorks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (this->has_detection_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_detection_status(), output);
  }

  // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence type_and_confidence = 3;
  if (this->has_type_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_type_and_confidence(), output);
  }

  // .sensoris.protobuf.types.base.CountAndConfidence lanes_closed_and_confidence = 5;
  if (this->has_lanes_closed_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_lanes_closed_and_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficevents.RoadWorks)
}

::google::protobuf::uint8* RoadWorks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.RoadWorks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (this->has_detection_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_detection_status(), deterministic, target);
  }

  // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence type_and_confidence = 3;
  if (this->has_type_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_type_and_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.CountAndConfidence lanes_closed_and_confidence = 5;
  if (this->has_lanes_closed_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_lanes_closed_and_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.RoadWorks)
  return target;
}

size_t RoadWorks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.RoadWorks)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (this->has_detection_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *detection_status_);
  }

  // .sensoris.protobuf.categories.trafficevents.RoadWorks.TypeAndConfidence type_and_confidence = 3;
  if (this->has_type_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *type_and_confidence_);
  }

  // .sensoris.protobuf.types.base.CountAndConfidence lanes_closed_and_confidence = 5;
  if (this->has_lanes_closed_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lanes_closed_and_confidence_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadWorks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadWorks)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadWorks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadWorks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficevents.RoadWorks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficevents.RoadWorks)
    MergeFrom(*source);
  }
}

void RoadWorks::MergeFrom(const RoadWorks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadWorks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_detection_status()) {
    mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(from.detection_status());
  }
  if (from.has_type_and_confidence()) {
    mutable_type_and_confidence()->::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence::MergeFrom(from.type_and_confidence());
  }
  if (from.has_lanes_closed_and_confidence()) {
    mutable_lanes_closed_and_confidence()->::sensoris::protobuf::types::base::CountAndConfidence::MergeFrom(from.lanes_closed_and_confidence());
  }
}

void RoadWorks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadWorks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadWorks::CopyFrom(const RoadWorks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadWorks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadWorks::IsInitialized() const {
  return true;
}

void RoadWorks::Swap(RoadWorks* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RoadWorks* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RoadWorks::UnsafeArenaSwap(RoadWorks* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RoadWorks::InternalSwap(RoadWorks* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(detection_status_, other->detection_status_);
  swap(type_and_confidence_, other->type_and_confidence_);
  swap(lanes_closed_and_confidence_, other->lanes_closed_and_confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoadWorks::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoadWeatherCondition_TypeAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficevents::_RoadWeatherCondition_TypeAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void RoadWeatherCondition_TypeAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence.confidence)
}
void RoadWeatherCondition_TypeAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadWeatherCondition_TypeAndConfidence::kTypeFieldNumber;
const int RoadWeatherCondition_TypeAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadWeatherCondition_TypeAndConfidence::RoadWeatherCondition_TypeAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_RoadWeatherCondition_TypeAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
}
RoadWeatherCondition_TypeAndConfidence::RoadWeatherCondition_TypeAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_RoadWeatherCondition_TypeAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
}
RoadWeatherCondition_TypeAndConfidence::RoadWeatherCondition_TypeAndConfidence(const RoadWeatherCondition_TypeAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
}

void RoadWeatherCondition_TypeAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

RoadWeatherCondition_TypeAndConfidence::~RoadWeatherCondition_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  SharedDtor();
}

void RoadWeatherCondition_TypeAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void RoadWeatherCondition_TypeAndConfidence::ArenaDtor(void* object) {
  RoadWeatherCondition_TypeAndConfidence* _this = reinterpret_cast< RoadWeatherCondition_TypeAndConfidence* >(object);
  (void)_this;
}
void RoadWeatherCondition_TypeAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RoadWeatherCondition_TypeAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoadWeatherCondition_TypeAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadWeatherCondition_TypeAndConfidence& RoadWeatherCondition_TypeAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_RoadWeatherCondition_TypeAndConfidence.base);
  return *internal_default_instance();
}


void RoadWeatherCondition_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool RoadWeatherCondition_TypeAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  return false;
#undef DO_
}

void RoadWeatherCondition_TypeAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
}

::google::protobuf::uint8* RoadWeatherCondition_TypeAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  return target;
}

size_t RoadWeatherCondition_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadWeatherCondition_TypeAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadWeatherCondition_TypeAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadWeatherCondition_TypeAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
    MergeFrom(*source);
  }
}

void RoadWeatherCondition_TypeAndConfidence::MergeFrom(const RoadWeatherCondition_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void RoadWeatherCondition_TypeAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadWeatherCondition_TypeAndConfidence::CopyFrom(const RoadWeatherCondition_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadWeatherCondition_TypeAndConfidence::IsInitialized() const {
  return true;
}

void RoadWeatherCondition_TypeAndConfidence::Swap(RoadWeatherCondition_TypeAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RoadWeatherCondition_TypeAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RoadWeatherCondition_TypeAndConfidence::UnsafeArenaSwap(RoadWeatherCondition_TypeAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RoadWeatherCondition_TypeAndConfidence::InternalSwap(RoadWeatherCondition_TypeAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoadWeatherCondition_TypeAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoadWeatherCondition::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficevents::_RoadWeatherCondition_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::trafficevents::_RoadWeatherCondition_default_instance_._instance.get_mutable()->detection_status_ = const_cast< ::sensoris::protobuf::types::base::EventDetectionStatus*>(
      ::sensoris::protobuf::types::base::EventDetectionStatus::internal_default_instance());
  ::sensoris::protobuf::categories::trafficevents::_RoadWeatherCondition_default_instance_._instance.get_mutable()->type_and_confidence_ = const_cast< ::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence*>(
      ::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence::internal_default_instance());
  ::sensoris::protobuf::categories::trafficevents::_RoadWeatherCondition_default_instance_._instance.get_mutable()->depth_and_accuracy_ = const_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy::internal_default_instance());
}
void RoadWeatherCondition::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.envelope)
}
void RoadWeatherCondition::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void RoadWeatherCondition::unsafe_arena_set_allocated_detection_status(
    ::sensoris::protobuf::types::base::EventDetectionStatus* detection_status) {
  if (GetArenaNoVirtual() == NULL) {
    delete detection_status_;
  }
  detection_status_ = detection_status;
  if (detection_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.detection_status)
}
void RoadWeatherCondition::clear_detection_status() {
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
}
void RoadWeatherCondition::unsafe_arena_set_allocated_type_and_confidence(
    ::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence* type_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = type_and_confidence;
  if (type_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.type_and_confidence)
}
void RoadWeatherCondition::unsafe_arena_set_allocated_depth_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* depth_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete depth_and_accuracy_;
  }
  depth_and_accuracy_ = depth_and_accuracy;
  if (depth_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.depth_and_accuracy)
}
void RoadWeatherCondition::clear_depth_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && depth_and_accuracy_ != NULL) {
    delete depth_and_accuracy_;
  }
  depth_and_accuracy_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadWeatherCondition::kEnvelopeFieldNumber;
const int RoadWeatherCondition::kDetectionStatusFieldNumber;
const int RoadWeatherCondition::kTypeAndConfidenceFieldNumber;
const int RoadWeatherCondition::kDepthAndAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadWeatherCondition::RoadWeatherCondition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_RoadWeatherCondition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
}
RoadWeatherCondition::RoadWeatherCondition(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_RoadWeatherCondition.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
}
RoadWeatherCondition::RoadWeatherCondition(const RoadWeatherCondition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_detection_status()) {
    detection_status_ = new ::sensoris::protobuf::types::base::EventDetectionStatus(*from.detection_status_);
  } else {
    detection_status_ = NULL;
  }
  if (from.has_type_and_confidence()) {
    type_and_confidence_ = new ::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence(*from.type_and_confidence_);
  } else {
    type_and_confidence_ = NULL;
  }
  if (from.has_depth_and_accuracy()) {
    depth_and_accuracy_ = new ::sensoris::protobuf::types::base::Int64ValueAndAccuracy(*from.depth_and_accuracy_);
  } else {
    depth_and_accuracy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
}

void RoadWeatherCondition::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&depth_and_accuracy_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(depth_and_accuracy_));
}

RoadWeatherCondition::~RoadWeatherCondition() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  SharedDtor();
}

void RoadWeatherCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete detection_status_;
  if (this != internal_default_instance()) delete type_and_confidence_;
  if (this != internal_default_instance()) delete depth_and_accuracy_;
}

void RoadWeatherCondition::ArenaDtor(void* object) {
  RoadWeatherCondition* _this = reinterpret_cast< RoadWeatherCondition* >(object);
  (void)_this;
}
void RoadWeatherCondition::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RoadWeatherCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoadWeatherCondition::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadWeatherCondition& RoadWeatherCondition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_RoadWeatherCondition.base);
  return *internal_default_instance();
}


void RoadWeatherCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && type_and_confidence_ != NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && depth_and_accuracy_ != NULL) {
    delete depth_and_accuracy_;
  }
  depth_and_accuracy_ = NULL;
  _internal_metadata_.Clear();
}

bool RoadWeatherCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detection_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence type_and_confidence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64ValueAndAccuracy depth_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_depth_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  return false;
#undef DO_
}

void RoadWeatherCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (this->has_detection_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_detection_status(), output);
  }

  // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence type_and_confidence = 3;
  if (this->has_type_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_type_and_confidence(), output);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy depth_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_depth_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_depth_and_accuracy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
}

::google::protobuf::uint8* RoadWeatherCondition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (this->has_detection_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_detection_status(), deterministic, target);
  }

  // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence type_and_confidence = 3;
  if (this->has_type_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_type_and_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy depth_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_depth_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_depth_and_accuracy(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  return target;
}

size_t RoadWeatherCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (this->has_detection_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *detection_status_);
  }

  // .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition.TypeAndConfidence type_and_confidence = 3;
  if (this->has_type_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *type_and_confidence_);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy depth_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_depth_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *depth_and_accuracy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadWeatherCondition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadWeatherCondition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadWeatherCondition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
    MergeFrom(*source);
  }
}

void RoadWeatherCondition::MergeFrom(const RoadWeatherCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_detection_status()) {
    mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(from.detection_status());
  }
  if (from.has_type_and_confidence()) {
    mutable_type_and_confidence()->::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence::MergeFrom(from.type_and_confidence());
  }
  if (from.has_depth_and_accuracy()) {
    mutable_depth_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.depth_and_accuracy());
  }
}

void RoadWeatherCondition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadWeatherCondition::CopyFrom(const RoadWeatherCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.RoadWeatherCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadWeatherCondition::IsInitialized() const {
  return true;
}

void RoadWeatherCondition::Swap(RoadWeatherCondition* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RoadWeatherCondition* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RoadWeatherCondition::UnsafeArenaSwap(RoadWeatherCondition* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RoadWeatherCondition::InternalSwap(RoadWeatherCondition* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(detection_status_, other->detection_status_);
  swap(type_and_confidence_, other->type_and_confidence_);
  swap(depth_and_accuracy_, other->depth_and_accuracy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoadWeatherCondition::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficEventsCategory::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficevents::_TrafficEventsCategory_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::CategoryEnvelope*>(
      ::sensoris::protobuf::types::base::CategoryEnvelope::internal_default_instance());
}
void TrafficEventsCategory::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::CategoryEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory.envelope)
}
void TrafficEventsCategory::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficEventsCategory::kEnvelopeFieldNumber;
const int TrafficEventsCategory::kHazardFieldNumber;
const int TrafficEventsCategory::kDangerousSlowDownFieldNumber;
const int TrafficEventsCategory::kTrafficConditionFieldNumber;
const int TrafficEventsCategory::kRoadworksFieldNumber;
const int TrafficEventsCategory::kRoadWeatherConditionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficEventsCategory::TrafficEventsCategory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_TrafficEventsCategory.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
}
TrafficEventsCategory::TrafficEventsCategory(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  hazard_(arena),
  dangerous_slow_down_(arena),
  traffic_condition_(arena),
  roadworks_(arena),
  road_weather_condition_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_TrafficEventsCategory.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
}
TrafficEventsCategory::TrafficEventsCategory(const TrafficEventsCategory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hazard_(from.hazard_),
      dangerous_slow_down_(from.dangerous_slow_down_),
      traffic_condition_(from.traffic_condition_),
      roadworks_(from.roadworks_),
      road_weather_condition_(from.road_weather_condition_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::CategoryEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
}

void TrafficEventsCategory::SharedCtor() {
  envelope_ = NULL;
}

TrafficEventsCategory::~TrafficEventsCategory() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  SharedDtor();
}

void TrafficEventsCategory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
}

void TrafficEventsCategory::ArenaDtor(void* object) {
  TrafficEventsCategory* _this = reinterpret_cast< TrafficEventsCategory* >(object);
  (void)_this;
}
void TrafficEventsCategory::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TrafficEventsCategory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficEventsCategory::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficEventsCategory& TrafficEventsCategory::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::scc_info_TrafficEventsCategory.base);
  return *internal_default_instance();
}


void TrafficEventsCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hazard_.Clear();
  dangerous_slow_down_.Clear();
  traffic_condition_.Clear();
  roadworks_.Clear();
  road_weather_condition_.Clear();
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  _internal_metadata_.Clear();
}

bool TrafficEventsCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.trafficevents.Hazard hazard = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_hazard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.trafficevents.DangerousSlowDown dangerous_slow_down = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_dangerous_slow_down()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.trafficevents.TrafficCondition traffic_condition = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_traffic_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.trafficevents.RoadWorks roadworks = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_roadworks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition road_weather_condition = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_road_weather_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  return false;
#undef DO_
}

void TrafficEventsCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.Hazard hazard = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hazard_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->hazard(static_cast<int>(i)),
      output);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.DangerousSlowDown dangerous_slow_down = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dangerous_slow_down_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->dangerous_slow_down(static_cast<int>(i)),
      output);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.TrafficCondition traffic_condition = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_condition_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->traffic_condition(static_cast<int>(i)),
      output);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.RoadWorks roadworks = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roadworks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->roadworks(static_cast<int>(i)),
      output);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition road_weather_condition = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_weather_condition_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->road_weather_condition(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
}

::google::protobuf::uint8* TrafficEventsCategory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.Hazard hazard = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hazard_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->hazard(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.DangerousSlowDown dangerous_slow_down = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dangerous_slow_down_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->dangerous_slow_down(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.TrafficCondition traffic_condition = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_condition_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->traffic_condition(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.RoadWorks roadworks = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roadworks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->roadworks(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition road_weather_condition = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_weather_condition_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->road_weather_condition(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  return target;
}

size_t TrafficEventsCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sensoris.protobuf.categories.trafficevents.Hazard hazard = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->hazard_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->hazard(static_cast<int>(i)));
    }
  }

  // repeated .sensoris.protobuf.categories.trafficevents.DangerousSlowDown dangerous_slow_down = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->dangerous_slow_down_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dangerous_slow_down(static_cast<int>(i)));
    }
  }

  // repeated .sensoris.protobuf.categories.trafficevents.TrafficCondition traffic_condition = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_condition_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->traffic_condition(static_cast<int>(i)));
    }
  }

  // repeated .sensoris.protobuf.categories.trafficevents.RoadWorks roadworks = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->roadworks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->roadworks(static_cast<int>(i)));
    }
  }

  // repeated .sensoris.protobuf.categories.trafficevents.RoadWeatherCondition road_weather_condition = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->road_weather_condition_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->road_weather_condition(static_cast<int>(i)));
    }
  }

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficEventsCategory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficEventsCategory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficEventsCategory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
    MergeFrom(*source);
  }
}

void TrafficEventsCategory::MergeFrom(const TrafficEventsCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hazard_.MergeFrom(from.hazard_);
  dangerous_slow_down_.MergeFrom(from.dangerous_slow_down_);
  traffic_condition_.MergeFrom(from.traffic_condition_);
  roadworks_.MergeFrom(from.roadworks_);
  road_weather_condition_.MergeFrom(from.road_weather_condition_);
  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::CategoryEnvelope::MergeFrom(from.envelope());
  }
}

void TrafficEventsCategory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficEventsCategory::CopyFrom(const TrafficEventsCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficevents.TrafficEventsCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficEventsCategory::IsInitialized() const {
  return true;
}

void TrafficEventsCategory::Swap(TrafficEventsCategory* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TrafficEventsCategory* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TrafficEventsCategory::UnsafeArenaSwap(TrafficEventsCategory* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TrafficEventsCategory::InternalSwap(TrafficEventsCategory* other) {
  using std::swap;
  CastToBase(&hazard_)->InternalSwap(CastToBase(&other->hazard_));
  CastToBase(&dangerous_slow_down_)->InternalSwap(CastToBase(&other->dangerous_slow_down_));
  CastToBase(&traffic_condition_)->InternalSwap(CastToBase(&other->traffic_condition_));
  CastToBase(&roadworks_)->InternalSwap(CastToBase(&other->roadworks_));
  CastToBase(&road_weather_condition_)->InternalSwap(CastToBase(&other->road_weather_condition_));
  swap(envelope_, other->envelope_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficEventsCategory::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fevents_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace trafficevents
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficevents::Hazard_TypeAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficevents::Hazard* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficevents::Hazard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficevents::Hazard >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficevents::DangerousSlowDown* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficevents::DangerousSlowDown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficevents::DangerousSlowDown >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficevents::TrafficCondition_TypeAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficevents::TrafficCondition* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficevents::TrafficCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficevents::TrafficCondition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficevents::RoadWorks_TypeAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficevents::RoadWorks* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficevents::RoadWorks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficevents::RoadWorks >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition_TypeAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficevents::RoadWeatherCondition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficevents::TrafficEventsCategory >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
