// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/map.proto

#ifndef PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fmap_2eproto
#define PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fmap_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "sensoris/protobuf/types/base.pb.h"
#include "sensoris/protobuf/types/spatial.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2fmap_2eproto 

namespace protobuf_sensoris_2fprotobuf_2fcategories_2fmap_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2fmap_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace map {
class MapCategory;
class MapCategoryDefaultTypeInternal;
extern MapCategoryDefaultTypeInternal _MapCategory_default_instance_;
class MapReference;
class MapReferenceDefaultTypeInternal;
extern MapReferenceDefaultTypeInternal _MapReference_default_instance_;
}  // namespace map
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
template<> ::sensoris::protobuf::categories::map::MapCategory* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::map::MapCategory>(Arena*);
template<> ::sensoris::protobuf::categories::map::MapReference* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::map::MapReference>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sensoris {
namespace protobuf {
namespace categories {
namespace map {

// ===================================================================

class MapReference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.map.MapReference) */ {
 public:
  MapReference();
  virtual ~MapReference();

  MapReference(const MapReference& from);

  inline MapReference& operator=(const MapReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapReference(MapReference&& from) noexcept
    : MapReference() {
    *this = ::std::move(from);
  }

  inline MapReference& operator=(MapReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapReference* internal_default_instance() {
    return reinterpret_cast<const MapReference*>(
               &_MapReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(MapReference* other);
  void Swap(MapReference* other);
  friend void swap(MapReference& a, MapReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapReference* New() const final {
    return CreateMaybeMessage<MapReference>(NULL);
  }

  MapReference* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MapReference>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MapReference& from);
  void MergeFrom(const MapReference& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapReference* other);
  protected:
  explicit MapReference(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope();
  static const int kEnvelopeFieldNumber = 1;
  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  public:
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* envelope);
  void unsafe_arena_set_allocated_envelope(
      ::sensoris::protobuf::types::base::EventEnvelope* envelope);
  ::sensoris::protobuf::types::base::EventEnvelope* unsafe_arena_release_envelope();

  // .sensoris.protobuf.types.spatial.MapLocationReference location_reference = 2;
  bool has_location_reference() const;
  void clear_location_reference();
  static const int kLocationReferenceFieldNumber = 2;
  private:
  const ::sensoris::protobuf::types::spatial::MapLocationReference& _internal_location_reference() const;
  public:
  const ::sensoris::protobuf::types::spatial::MapLocationReference& location_reference() const;
  ::sensoris::protobuf::types::spatial::MapLocationReference* release_location_reference();
  ::sensoris::protobuf::types::spatial::MapLocationReference* mutable_location_reference();
  void set_allocated_location_reference(::sensoris::protobuf::types::spatial::MapLocationReference* location_reference);
  void unsafe_arena_set_allocated_location_reference(
      ::sensoris::protobuf::types::spatial::MapLocationReference* location_reference);
  ::sensoris::protobuf::types::spatial::MapLocationReference* unsafe_arena_release_location_reference();

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.map.MapReference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::base::EventEnvelope* envelope_;
  ::sensoris::protobuf::types::spatial::MapLocationReference* location_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fmap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MapCategory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.map.MapCategory) */ {
 public:
  MapCategory();
  virtual ~MapCategory();

  MapCategory(const MapCategory& from);

  inline MapCategory& operator=(const MapCategory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapCategory(MapCategory&& from) noexcept
    : MapCategory() {
    *this = ::std::move(from);
  }

  inline MapCategory& operator=(MapCategory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapCategory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapCategory* internal_default_instance() {
    return reinterpret_cast<const MapCategory*>(
               &_MapCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(MapCategory* other);
  void Swap(MapCategory* other);
  friend void swap(MapCategory& a, MapCategory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapCategory* New() const final {
    return CreateMaybeMessage<MapCategory>(NULL);
  }

  MapCategory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MapCategory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MapCategory& from);
  void MergeFrom(const MapCategory& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapCategory* other);
  protected:
  explicit MapCategory(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sensoris.protobuf.categories.map.MapReference map_reference = 2;
  int map_reference_size() const;
  void clear_map_reference();
  static const int kMapReferenceFieldNumber = 2;
  ::sensoris::protobuf::categories::map::MapReference* mutable_map_reference(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::map::MapReference >*
      mutable_map_reference();
  const ::sensoris::protobuf::categories::map::MapReference& map_reference(int index) const;
  ::sensoris::protobuf::categories::map::MapReference* add_map_reference();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::map::MapReference >&
      map_reference() const;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope();
  static const int kEnvelopeFieldNumber = 1;
  private:
  const ::sensoris::protobuf::types::base::CategoryEnvelope& _internal_envelope() const;
  public:
  const ::sensoris::protobuf::types::base::CategoryEnvelope& envelope() const;
  ::sensoris::protobuf::types::base::CategoryEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::CategoryEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* envelope);
  void unsafe_arena_set_allocated_envelope(
      ::sensoris::protobuf::types::base::CategoryEnvelope* envelope);
  ::sensoris::protobuf::types::base::CategoryEnvelope* unsafe_arena_release_envelope();

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.map.MapCategory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::map::MapReference > map_reference_;
  ::sensoris::protobuf::types::base::CategoryEnvelope* envelope_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fmap_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapReference

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool MapReference::has_envelope() const {
  return this != internal_default_instance() && envelope_ != NULL;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& MapReference::_internal_envelope() const {
  return *envelope_;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& MapReference::envelope() const {
  const ::sensoris::protobuf::types::base::EventEnvelope* p = envelope_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.map.MapReference.envelope)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope*>(
      &::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline ::sensoris::protobuf::types::base::EventEnvelope* MapReference::release_envelope() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.map.MapReference.envelope)
  
  ::sensoris::protobuf::types::base::EventEnvelope* temp = envelope_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* MapReference::unsafe_arena_release_envelope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.map.MapReference.envelope)
  
  ::sensoris::protobuf::types::base::EventEnvelope* temp = envelope_;
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* MapReference::mutable_envelope() {
  
  if (envelope_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(GetArenaNoVirtual());
    envelope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.map.MapReference.envelope)
  return envelope_;
}
inline void MapReference::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(envelope_);
  }
  if (envelope) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(envelope)->GetArena();
    if (message_arena != submessage_arena) {
      envelope = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.map.MapReference.envelope)
}

// .sensoris.protobuf.types.spatial.MapLocationReference location_reference = 2;
inline bool MapReference::has_location_reference() const {
  return this != internal_default_instance() && location_reference_ != NULL;
}
inline const ::sensoris::protobuf::types::spatial::MapLocationReference& MapReference::_internal_location_reference() const {
  return *location_reference_;
}
inline const ::sensoris::protobuf::types::spatial::MapLocationReference& MapReference::location_reference() const {
  const ::sensoris::protobuf::types::spatial::MapLocationReference* p = location_reference_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.map.MapReference.location_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::spatial::MapLocationReference*>(
      &::sensoris::protobuf::types::spatial::_MapLocationReference_default_instance_);
}
inline ::sensoris::protobuf::types::spatial::MapLocationReference* MapReference::release_location_reference() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.map.MapReference.location_reference)
  
  ::sensoris::protobuf::types::spatial::MapLocationReference* temp = location_reference_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  location_reference_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::MapLocationReference* MapReference::unsafe_arena_release_location_reference() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.map.MapReference.location_reference)
  
  ::sensoris::protobuf::types::spatial::MapLocationReference* temp = location_reference_;
  location_reference_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::MapLocationReference* MapReference::mutable_location_reference() {
  
  if (location_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::spatial::MapLocationReference>(GetArenaNoVirtual());
    location_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.map.MapReference.location_reference)
  return location_reference_;
}
inline void MapReference::set_allocated_location_reference(::sensoris::protobuf::types::spatial::MapLocationReference* location_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_reference_);
  }
  if (location_reference) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(location_reference)->GetArena();
    if (message_arena != submessage_arena) {
      location_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location_reference, submessage_arena);
    }
    
  } else {
    
  }
  location_reference_ = location_reference;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.map.MapReference.location_reference)
}

// -------------------------------------------------------------------

// MapCategory

// .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
inline bool MapCategory::has_envelope() const {
  return this != internal_default_instance() && envelope_ != NULL;
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& MapCategory::_internal_envelope() const {
  return *envelope_;
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& MapCategory::envelope() const {
  const ::sensoris::protobuf::types::base::CategoryEnvelope* p = envelope_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.map.MapCategory.envelope)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::CategoryEnvelope*>(
      &::sensoris::protobuf::types::base::_CategoryEnvelope_default_instance_);
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* MapCategory::release_envelope() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.map.MapCategory.envelope)
  
  ::sensoris::protobuf::types::base::CategoryEnvelope* temp = envelope_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* MapCategory::unsafe_arena_release_envelope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.map.MapCategory.envelope)
  
  ::sensoris::protobuf::types::base::CategoryEnvelope* temp = envelope_;
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* MapCategory::mutable_envelope() {
  
  if (envelope_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::CategoryEnvelope>(GetArenaNoVirtual());
    envelope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.map.MapCategory.envelope)
  return envelope_;
}
inline void MapCategory::set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* envelope) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(envelope_);
  }
  if (envelope) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(envelope)->GetArena();
    if (message_arena != submessage_arena) {
      envelope = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.map.MapCategory.envelope)
}

// repeated .sensoris.protobuf.categories.map.MapReference map_reference = 2;
inline int MapCategory::map_reference_size() const {
  return map_reference_.size();
}
inline void MapCategory::clear_map_reference() {
  map_reference_.Clear();
}
inline ::sensoris::protobuf::categories::map::MapReference* MapCategory::mutable_map_reference(int index) {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.map.MapCategory.map_reference)
  return map_reference_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::map::MapReference >*
MapCategory::mutable_map_reference() {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.map.MapCategory.map_reference)
  return &map_reference_;
}
inline const ::sensoris::protobuf::categories::map::MapReference& MapCategory::map_reference(int index) const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.map.MapCategory.map_reference)
  return map_reference_.Get(index);
}
inline ::sensoris::protobuf::categories::map::MapReference* MapCategory::add_map_reference() {
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.map.MapCategory.map_reference)
  return map_reference_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::map::MapReference >&
MapCategory::map_reference() const {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.map.MapCategory.map_reference)
  return map_reference_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace map
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fmap_2eproto
