// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/powertrain.proto

#include "sensoris/protobuf/categories/powertrain.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EngineStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CruiseControlStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TransmissionStatus;
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto
namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CategoryEnvelope;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_EventEnvelope;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Int64Value;
}  // namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace powertrain {
class EngineStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EngineStatus>
      _instance;
} _EngineStatus_default_instance_;
class TransmissionStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransmissionStatus>
      _instance;
} _TransmissionStatus_default_instance_;
class CruiseControlStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CruiseControlStatus>
      _instance;
} _CruiseControlStatus_default_instance_;
class PowertrainCategoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PowertrainCategory>
      _instance;
} _PowertrainCategory_default_instance_;
}  // namespace powertrain
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto {
static void InitDefaultsEngineStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::powertrain::_EngineStatus_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::powertrain::EngineStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::powertrain::EngineStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EngineStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEngineStatus}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,}};

static void InitDefaultsTransmissionStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::powertrain::_TransmissionStatus_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::powertrain::TransmissionStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::powertrain::TransmissionStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TransmissionStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTransmissionStatus}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64Value.base,}};

static void InitDefaultsCruiseControlStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::powertrain::_CruiseControlStatus_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::powertrain::CruiseControlStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::powertrain::CruiseControlStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CruiseControlStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCruiseControlStatus}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64Value.base,}};

static void InitDefaultsPowertrainCategory() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::powertrain::_PowertrainCategory_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::powertrain::PowertrainCategory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::powertrain::PowertrainCategory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_PowertrainCategory =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsPowertrainCategory}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_CategoryEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::scc_info_EngineStatus.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::scc_info_TransmissionStatus.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::scc_info_CruiseControlStatus.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_EngineStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TransmissionStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CruiseControlStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PowertrainCategory.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::EngineStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::EngineStatus, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::EngineStatus, ignition_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::EngineStatus, powertrain_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::TransmissionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::TransmissionStatus, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::TransmissionStatus, gear_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::TransmissionStatus, drive_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::TransmissionStatus, current_gear_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::CruiseControlStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::CruiseControlStatus, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::CruiseControlStatus, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::CruiseControlStatus, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::CruiseControlStatus, selected_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::CruiseControlStatus, selected_time_to_lead_vehicle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::PowertrainCategory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::PowertrainCategory, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::PowertrainCategory, engine_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::PowertrainCategory, transmission_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::powertrain::PowertrainCategory, cruise_control_status_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sensoris::protobuf::categories::powertrain::EngineStatus)},
  { 8, -1, sizeof(::sensoris::protobuf::categories::powertrain::TransmissionStatus)},
  { 17, -1, sizeof(::sensoris::protobuf::categories::powertrain::CruiseControlStatus)},
  { 27, -1, sizeof(::sensoris::protobuf::categories::powertrain::PowertrainCategory)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::powertrain::_EngineStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::powertrain::_TransmissionStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::powertrain::_CruiseControlStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::powertrain::_PowertrainCategory_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "sensoris/protobuf/categories/powertrain.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n-sensoris/protobuf/categories/powertrai"
      "n.proto\022\'sensoris.protobuf.categories.po"
      "wertrain\032\"sensoris/protobuf/types/base.p"
      "roto\"\231\004\n\014EngineStatus\022=\n\010envelope\030\001 \001(\0132"
      "+.sensoris.protobuf.types.base.EventEnve"
      "lope\022]\n\017ignition_status\030\002 \001(\0162D.sensoris"
      ".protobuf.categories.powertrain.EngineSt"
      "atus.IgnitionStatus\022a\n\021powertrain_status"
      "\030\003 \001(\0162F.sensoris.protobuf.categories.po"
      "wertrain.EngineStatus.PowertrainStatus\"\221"
      "\001\n\016IgnitionStatus\022\033\n\027UNKNOWN_IGNITION_ST"
      "ATUS\020\000\022\021\n\rIGNITION_LOCK\020\001\022\020\n\014IGNITION_OF"
      "F\020\002\022\030\n\024IGNITION_ACCESSORIES\020\003\022\017\n\013IGNITIO"
      "N_ON\020\004\022\022\n\016IGNITION_START\020\005\"t\n\020Powertrain"
      "Status\022\035\n\031UNKNOWN_POWERTRAIN_STATUS\020\000\022\022\n"
      "\016POWERTRAIN_OFF\020\001\022\027\n\023POWERTRAIN_ECO_MODE"
      "\020\002\022\024\n\020POWERTRAIN_READY\020\003\"\374\003\n\022Transmissio"
      "nStatus\022=\n\010envelope\030\001 \001(\0132+.sensoris.pro"
      "tobuf.types.base.EventEnvelope\022W\n\tgear_m"
      "ode\030\002 \001(\0162D.sensoris.protobuf.categories"
      ".powertrain.TransmissionStatus.GearMode\022"
      "Y\n\ndrive_mode\030\003 \001(\0162E.sensoris.protobuf."
      "categories.powertrain.TransmissionStatus"
      ".DriveMode\022>\n\014current_gear\030\004 \001(\0132(.senso"
      "ris.protobuf.types.base.Int64Value\"\\\n\010Ge"
      "arMode\022\025\n\021UNKNOWN_GEAR_MODE\020\000\022\t\n\005DRIVE\020\001"
      "\022\n\n\006MANUAL\020\002\022\013\n\007REVERSE\020\003\022\010\n\004PARK\020\004\022\013\n\007N"
      "EUTRAL\020\005\"U\n\tDriveMode\022\026\n\022UNKNOWN_DRIVE_M"
      "ODE\020\000\022\007\n\003ECO\020\001\022\013\n\007COMFORT\020\002\022\t\n\005SPORT\020\003\022\017"
      "\n\013SUPER_SPORT\020\004\"\275\003\n\023CruiseControlStatus\022"
      "=\n\010envelope\030\001 \001(\0132+.sensoris.protobuf.ty"
      "pes.base.EventEnvelope\022O\n\004type\030\002 \001(\0162A.s"
      "ensoris.protobuf.categories.powertrain.C"
      "ruiseControlStatus.Type\022:\n\006status\030\003 \001(\0162"
      "*.sensoris.protobuf.types.base.SystemSta"
      "tus\022F\n\016selected_speed\030\004 \001(\0132(.sensoris.p"
      "rotobuf.types.base.Int64ValueB\004\210\265\030\001\022U\n\035s"
      "elected_time_to_lead_vehicle\030\005 \001(\0132(.sen"
      "soris.protobuf.types.base.Int64ValueB\004\210\265"
      "\030\001\";\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\t\n\005SPEED\020\001\022"
      "\026\n\022SPEED_AND_DISTANCE\020\002\"\333\002\n\022PowertrainCa"
      "tegory\022@\n\010envelope\030\001 \001(\0132..sensoris.prot"
      "obuf.types.base.CategoryEnvelope\022L\n\rengi"
      "ne_status\030\002 \003(\01325.sensoris.protobuf.cate"
      "gories.powertrain.EngineStatus\022X\n\023transm"
      "ission_status\030\003 \003(\0132;.sensoris.protobuf."
      "categories.powertrain.TransmissionStatus"
      "\022[\n\025cruise_control_status\030\004 \003(\0132<.sensor"
      "is.protobuf.categories.powertrain.Cruise"
      "ControlStatusBE\n\"org.sensoris.categories"
      ".powertrainB\032SensorisPowertrainCategoryP"
      "\001\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2052);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensoris/protobuf/categories/powertrain.proto", &protobuf_RegisterTypes);
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace powertrain {
const ::google::protobuf::EnumDescriptor* EngineStatus_IgnitionStatus_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::file_level_enum_descriptors[0];
}
bool EngineStatus_IgnitionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EngineStatus_IgnitionStatus EngineStatus::UNKNOWN_IGNITION_STATUS;
const EngineStatus_IgnitionStatus EngineStatus::IGNITION_LOCK;
const EngineStatus_IgnitionStatus EngineStatus::IGNITION_OFF;
const EngineStatus_IgnitionStatus EngineStatus::IGNITION_ACCESSORIES;
const EngineStatus_IgnitionStatus EngineStatus::IGNITION_ON;
const EngineStatus_IgnitionStatus EngineStatus::IGNITION_START;
const EngineStatus_IgnitionStatus EngineStatus::IgnitionStatus_MIN;
const EngineStatus_IgnitionStatus EngineStatus::IgnitionStatus_MAX;
const int EngineStatus::IgnitionStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EngineStatus_PowertrainStatus_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::file_level_enum_descriptors[1];
}
bool EngineStatus_PowertrainStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EngineStatus_PowertrainStatus EngineStatus::UNKNOWN_POWERTRAIN_STATUS;
const EngineStatus_PowertrainStatus EngineStatus::POWERTRAIN_OFF;
const EngineStatus_PowertrainStatus EngineStatus::POWERTRAIN_ECO_MODE;
const EngineStatus_PowertrainStatus EngineStatus::POWERTRAIN_READY;
const EngineStatus_PowertrainStatus EngineStatus::PowertrainStatus_MIN;
const EngineStatus_PowertrainStatus EngineStatus::PowertrainStatus_MAX;
const int EngineStatus::PowertrainStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TransmissionStatus_GearMode_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::file_level_enum_descriptors[2];
}
bool TransmissionStatus_GearMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TransmissionStatus_GearMode TransmissionStatus::UNKNOWN_GEAR_MODE;
const TransmissionStatus_GearMode TransmissionStatus::DRIVE;
const TransmissionStatus_GearMode TransmissionStatus::MANUAL;
const TransmissionStatus_GearMode TransmissionStatus::REVERSE;
const TransmissionStatus_GearMode TransmissionStatus::PARK;
const TransmissionStatus_GearMode TransmissionStatus::NEUTRAL;
const TransmissionStatus_GearMode TransmissionStatus::GearMode_MIN;
const TransmissionStatus_GearMode TransmissionStatus::GearMode_MAX;
const int TransmissionStatus::GearMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TransmissionStatus_DriveMode_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::file_level_enum_descriptors[3];
}
bool TransmissionStatus_DriveMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TransmissionStatus_DriveMode TransmissionStatus::UNKNOWN_DRIVE_MODE;
const TransmissionStatus_DriveMode TransmissionStatus::ECO;
const TransmissionStatus_DriveMode TransmissionStatus::COMFORT;
const TransmissionStatus_DriveMode TransmissionStatus::SPORT;
const TransmissionStatus_DriveMode TransmissionStatus::SUPER_SPORT;
const TransmissionStatus_DriveMode TransmissionStatus::DriveMode_MIN;
const TransmissionStatus_DriveMode TransmissionStatus::DriveMode_MAX;
const int TransmissionStatus::DriveMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CruiseControlStatus_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::file_level_enum_descriptors[4];
}
bool CruiseControlStatus_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CruiseControlStatus_Type CruiseControlStatus::UNKNOWN_TYPE;
const CruiseControlStatus_Type CruiseControlStatus::SPEED;
const CruiseControlStatus_Type CruiseControlStatus::SPEED_AND_DISTANCE;
const CruiseControlStatus_Type CruiseControlStatus::Type_MIN;
const CruiseControlStatus_Type CruiseControlStatus::Type_MAX;
const int CruiseControlStatus::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void EngineStatus::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::powertrain::_EngineStatus_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
}
void EngineStatus::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.powertrain.EngineStatus.envelope)
}
void EngineStatus::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EngineStatus::kEnvelopeFieldNumber;
const int EngineStatus::kIgnitionStatusFieldNumber;
const int EngineStatus::kPowertrainStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EngineStatus::EngineStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::scc_info_EngineStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.powertrain.EngineStatus)
}
EngineStatus::EngineStatus(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::scc_info_EngineStatus.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.powertrain.EngineStatus)
}
EngineStatus::EngineStatus(const EngineStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  ::memcpy(&ignition_status_, &from.ignition_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&powertrain_status_) -
    reinterpret_cast<char*>(&ignition_status_)) + sizeof(powertrain_status_));
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.powertrain.EngineStatus)
}

void EngineStatus::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&powertrain_status_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(powertrain_status_));
}

EngineStatus::~EngineStatus() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.powertrain.EngineStatus)
  SharedDtor();
}

void EngineStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
}

void EngineStatus::ArenaDtor(void* object) {
  EngineStatus* _this = reinterpret_cast< EngineStatus* >(object);
  (void)_this;
}
void EngineStatus::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void EngineStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EngineStatus::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EngineStatus& EngineStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::scc_info_EngineStatus.base);
  return *internal_default_instance();
}


void EngineStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.powertrain.EngineStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  ::memset(&ignition_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&powertrain_status_) -
      reinterpret_cast<char*>(&ignition_status_)) + sizeof(powertrain_status_));
  _internal_metadata_.Clear();
}

bool EngineStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.powertrain.EngineStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.powertrain.EngineStatus.IgnitionStatus ignition_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ignition_status(static_cast< ::sensoris::protobuf::categories::powertrain::EngineStatus_IgnitionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.powertrain.EngineStatus.PowertrainStatus powertrain_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_powertrain_status(static_cast< ::sensoris::protobuf::categories::powertrain::EngineStatus_PowertrainStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.powertrain.EngineStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.powertrain.EngineStatus)
  return false;
#undef DO_
}

void EngineStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.powertrain.EngineStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.categories.powertrain.EngineStatus.IgnitionStatus ignition_status = 2;
  if (this->ignition_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ignition_status(), output);
  }

  // .sensoris.protobuf.categories.powertrain.EngineStatus.PowertrainStatus powertrain_status = 3;
  if (this->powertrain_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->powertrain_status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.powertrain.EngineStatus)
}

::google::protobuf::uint8* EngineStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.powertrain.EngineStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.categories.powertrain.EngineStatus.IgnitionStatus ignition_status = 2;
  if (this->ignition_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ignition_status(), target);
  }

  // .sensoris.protobuf.categories.powertrain.EngineStatus.PowertrainStatus powertrain_status = 3;
  if (this->powertrain_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->powertrain_status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.powertrain.EngineStatus)
  return target;
}

size_t EngineStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.powertrain.EngineStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.categories.powertrain.EngineStatus.IgnitionStatus ignition_status = 2;
  if (this->ignition_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ignition_status());
  }

  // .sensoris.protobuf.categories.powertrain.EngineStatus.PowertrainStatus powertrain_status = 3;
  if (this->powertrain_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->powertrain_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EngineStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.powertrain.EngineStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const EngineStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EngineStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.powertrain.EngineStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.powertrain.EngineStatus)
    MergeFrom(*source);
  }
}

void EngineStatus::MergeFrom(const EngineStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.powertrain.EngineStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.ignition_status() != 0) {
    set_ignition_status(from.ignition_status());
  }
  if (from.powertrain_status() != 0) {
    set_powertrain_status(from.powertrain_status());
  }
}

void EngineStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.powertrain.EngineStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EngineStatus::CopyFrom(const EngineStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.powertrain.EngineStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineStatus::IsInitialized() const {
  return true;
}

void EngineStatus::Swap(EngineStatus* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    EngineStatus* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void EngineStatus::UnsafeArenaSwap(EngineStatus* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void EngineStatus::InternalSwap(EngineStatus* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(ignition_status_, other->ignition_status_);
  swap(powertrain_status_, other->powertrain_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EngineStatus::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TransmissionStatus::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::powertrain::_TransmissionStatus_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::powertrain::_TransmissionStatus_default_instance_._instance.get_mutable()->current_gear_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
}
void TransmissionStatus::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.powertrain.TransmissionStatus.envelope)
}
void TransmissionStatus::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void TransmissionStatus::unsafe_arena_set_allocated_current_gear(
    ::sensoris::protobuf::types::base::Int64Value* current_gear) {
  if (GetArenaNoVirtual() == NULL) {
    delete current_gear_;
  }
  current_gear_ = current_gear;
  if (current_gear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.powertrain.TransmissionStatus.current_gear)
}
void TransmissionStatus::clear_current_gear() {
  if (GetArenaNoVirtual() == NULL && current_gear_ != NULL) {
    delete current_gear_;
  }
  current_gear_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransmissionStatus::kEnvelopeFieldNumber;
const int TransmissionStatus::kGearModeFieldNumber;
const int TransmissionStatus::kDriveModeFieldNumber;
const int TransmissionStatus::kCurrentGearFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransmissionStatus::TransmissionStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::scc_info_TransmissionStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.powertrain.TransmissionStatus)
}
TransmissionStatus::TransmissionStatus(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::scc_info_TransmissionStatus.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.powertrain.TransmissionStatus)
}
TransmissionStatus::TransmissionStatus(const TransmissionStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_current_gear()) {
    current_gear_ = new ::sensoris::protobuf::types::base::Int64Value(*from.current_gear_);
  } else {
    current_gear_ = NULL;
  }
  ::memcpy(&gear_mode_, &from.gear_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&drive_mode_) -
    reinterpret_cast<char*>(&gear_mode_)) + sizeof(drive_mode_));
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.powertrain.TransmissionStatus)
}

void TransmissionStatus::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drive_mode_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(drive_mode_));
}

TransmissionStatus::~TransmissionStatus() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.powertrain.TransmissionStatus)
  SharedDtor();
}

void TransmissionStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete current_gear_;
}

void TransmissionStatus::ArenaDtor(void* object) {
  TransmissionStatus* _this = reinterpret_cast< TransmissionStatus* >(object);
  (void)_this;
}
void TransmissionStatus::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TransmissionStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TransmissionStatus::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransmissionStatus& TransmissionStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::scc_info_TransmissionStatus.base);
  return *internal_default_instance();
}


void TransmissionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.powertrain.TransmissionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && current_gear_ != NULL) {
    delete current_gear_;
  }
  current_gear_ = NULL;
  ::memset(&gear_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drive_mode_) -
      reinterpret_cast<char*>(&gear_mode_)) + sizeof(drive_mode_));
  _internal_metadata_.Clear();
}

bool TransmissionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.powertrain.TransmissionStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.powertrain.TransmissionStatus.GearMode gear_mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gear_mode(static_cast< ::sensoris::protobuf::categories::powertrain::TransmissionStatus_GearMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.powertrain.TransmissionStatus.DriveMode drive_mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_drive_mode(static_cast< ::sensoris::protobuf::categories::powertrain::TransmissionStatus_DriveMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Value current_gear = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_current_gear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.powertrain.TransmissionStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.powertrain.TransmissionStatus)
  return false;
#undef DO_
}

void TransmissionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.powertrain.TransmissionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.categories.powertrain.TransmissionStatus.GearMode gear_mode = 2;
  if (this->gear_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gear_mode(), output);
  }

  // .sensoris.protobuf.categories.powertrain.TransmissionStatus.DriveMode drive_mode = 3;
  if (this->drive_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->drive_mode(), output);
  }

  // .sensoris.protobuf.types.base.Int64Value current_gear = 4;
  if (this->has_current_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_current_gear(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.powertrain.TransmissionStatus)
}

::google::protobuf::uint8* TransmissionStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.powertrain.TransmissionStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.categories.powertrain.TransmissionStatus.GearMode gear_mode = 2;
  if (this->gear_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->gear_mode(), target);
  }

  // .sensoris.protobuf.categories.powertrain.TransmissionStatus.DriveMode drive_mode = 3;
  if (this->drive_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->drive_mode(), target);
  }

  // .sensoris.protobuf.types.base.Int64Value current_gear = 4;
  if (this->has_current_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_current_gear(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.powertrain.TransmissionStatus)
  return target;
}

size_t TransmissionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.powertrain.TransmissionStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.types.base.Int64Value current_gear = 4;
  if (this->has_current_gear()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *current_gear_);
  }

  // .sensoris.protobuf.categories.powertrain.TransmissionStatus.GearMode gear_mode = 2;
  if (this->gear_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_mode());
  }

  // .sensoris.protobuf.categories.powertrain.TransmissionStatus.DriveMode drive_mode = 3;
  if (this->drive_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->drive_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransmissionStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.powertrain.TransmissionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const TransmissionStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransmissionStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.powertrain.TransmissionStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.powertrain.TransmissionStatus)
    MergeFrom(*source);
  }
}

void TransmissionStatus::MergeFrom(const TransmissionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.powertrain.TransmissionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_current_gear()) {
    mutable_current_gear()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.current_gear());
  }
  if (from.gear_mode() != 0) {
    set_gear_mode(from.gear_mode());
  }
  if (from.drive_mode() != 0) {
    set_drive_mode(from.drive_mode());
  }
}

void TransmissionStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.powertrain.TransmissionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransmissionStatus::CopyFrom(const TransmissionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.powertrain.TransmissionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransmissionStatus::IsInitialized() const {
  return true;
}

void TransmissionStatus::Swap(TransmissionStatus* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TransmissionStatus* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TransmissionStatus::UnsafeArenaSwap(TransmissionStatus* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TransmissionStatus::InternalSwap(TransmissionStatus* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(current_gear_, other->current_gear_);
  swap(gear_mode_, other->gear_mode_);
  swap(drive_mode_, other->drive_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TransmissionStatus::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CruiseControlStatus::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::powertrain::_CruiseControlStatus_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::powertrain::_CruiseControlStatus_default_instance_._instance.get_mutable()->selected_speed_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
  ::sensoris::protobuf::categories::powertrain::_CruiseControlStatus_default_instance_._instance.get_mutable()->selected_time_to_lead_vehicle_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
}
void CruiseControlStatus::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.powertrain.CruiseControlStatus.envelope)
}
void CruiseControlStatus::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void CruiseControlStatus::unsafe_arena_set_allocated_selected_speed(
    ::sensoris::protobuf::types::base::Int64Value* selected_speed) {
  if (GetArenaNoVirtual() == NULL) {
    delete selected_speed_;
  }
  selected_speed_ = selected_speed;
  if (selected_speed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.powertrain.CruiseControlStatus.selected_speed)
}
void CruiseControlStatus::clear_selected_speed() {
  if (GetArenaNoVirtual() == NULL && selected_speed_ != NULL) {
    delete selected_speed_;
  }
  selected_speed_ = NULL;
}
void CruiseControlStatus::unsafe_arena_set_allocated_selected_time_to_lead_vehicle(
    ::sensoris::protobuf::types::base::Int64Value* selected_time_to_lead_vehicle) {
  if (GetArenaNoVirtual() == NULL) {
    delete selected_time_to_lead_vehicle_;
  }
  selected_time_to_lead_vehicle_ = selected_time_to_lead_vehicle;
  if (selected_time_to_lead_vehicle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.powertrain.CruiseControlStatus.selected_time_to_lead_vehicle)
}
void CruiseControlStatus::clear_selected_time_to_lead_vehicle() {
  if (GetArenaNoVirtual() == NULL && selected_time_to_lead_vehicle_ != NULL) {
    delete selected_time_to_lead_vehicle_;
  }
  selected_time_to_lead_vehicle_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CruiseControlStatus::kEnvelopeFieldNumber;
const int CruiseControlStatus::kTypeFieldNumber;
const int CruiseControlStatus::kStatusFieldNumber;
const int CruiseControlStatus::kSelectedSpeedFieldNumber;
const int CruiseControlStatus::kSelectedTimeToLeadVehicleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CruiseControlStatus::CruiseControlStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::scc_info_CruiseControlStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
}
CruiseControlStatus::CruiseControlStatus(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::scc_info_CruiseControlStatus.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
}
CruiseControlStatus::CruiseControlStatus(const CruiseControlStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_selected_speed()) {
    selected_speed_ = new ::sensoris::protobuf::types::base::Int64Value(*from.selected_speed_);
  } else {
    selected_speed_ = NULL;
  }
  if (from.has_selected_time_to_lead_vehicle()) {
    selected_time_to_lead_vehicle_ = new ::sensoris::protobuf::types::base::Int64Value(*from.selected_time_to_lead_vehicle_);
  } else {
    selected_time_to_lead_vehicle_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&type_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
}

void CruiseControlStatus::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(status_));
}

CruiseControlStatus::~CruiseControlStatus() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
  SharedDtor();
}

void CruiseControlStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete selected_speed_;
  if (this != internal_default_instance()) delete selected_time_to_lead_vehicle_;
}

void CruiseControlStatus::ArenaDtor(void* object) {
  CruiseControlStatus* _this = reinterpret_cast< CruiseControlStatus* >(object);
  (void)_this;
}
void CruiseControlStatus::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CruiseControlStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CruiseControlStatus::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CruiseControlStatus& CruiseControlStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::scc_info_CruiseControlStatus.base);
  return *internal_default_instance();
}


void CruiseControlStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && selected_speed_ != NULL) {
    delete selected_speed_;
  }
  selected_speed_ = NULL;
  if (GetArenaNoVirtual() == NULL && selected_time_to_lead_vehicle_ != NULL) {
    delete selected_time_to_lead_vehicle_;
  }
  selected_time_to_lead_vehicle_ = NULL;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&type_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

bool CruiseControlStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.powertrain.CruiseControlStatus.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::powertrain::CruiseControlStatus_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.SystemStatus status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::sensoris::protobuf::types::base::SystemStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Value selected_speed = 4 [(.sensoris.protobuf.types.base.exponent) = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selected_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Value selected_time_to_lead_vehicle = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selected_time_to_lead_vehicle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
  return false;
#undef DO_
}

void CruiseControlStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.categories.powertrain.CruiseControlStatus.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .sensoris.protobuf.types.base.SystemStatus status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // .sensoris.protobuf.types.base.Int64Value selected_speed = 4 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_selected_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_selected_speed(), output);
  }

  // .sensoris.protobuf.types.base.Int64Value selected_time_to_lead_vehicle = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_selected_time_to_lead_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_selected_time_to_lead_vehicle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
}

::google::protobuf::uint8* CruiseControlStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.categories.powertrain.CruiseControlStatus.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // .sensoris.protobuf.types.base.SystemStatus status = 3;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // .sensoris.protobuf.types.base.Int64Value selected_speed = 4 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_selected_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_selected_speed(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Value selected_time_to_lead_vehicle = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_selected_time_to_lead_vehicle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_selected_time_to_lead_vehicle(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
  return target;
}

size_t CruiseControlStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.types.base.Int64Value selected_speed = 4 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_selected_speed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selected_speed_);
  }

  // .sensoris.protobuf.types.base.Int64Value selected_time_to_lead_vehicle = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_selected_time_to_lead_vehicle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selected_time_to_lead_vehicle_);
  }

  // .sensoris.protobuf.categories.powertrain.CruiseControlStatus.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .sensoris.protobuf.types.base.SystemStatus status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CruiseControlStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CruiseControlStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CruiseControlStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
    MergeFrom(*source);
  }
}

void CruiseControlStatus::MergeFrom(const CruiseControlStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_selected_speed()) {
    mutable_selected_speed()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.selected_speed());
  }
  if (from.has_selected_time_to_lead_vehicle()) {
    mutable_selected_time_to_lead_vehicle()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.selected_time_to_lead_vehicle());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void CruiseControlStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CruiseControlStatus::CopyFrom(const CruiseControlStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.powertrain.CruiseControlStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CruiseControlStatus::IsInitialized() const {
  return true;
}

void CruiseControlStatus::Swap(CruiseControlStatus* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CruiseControlStatus* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CruiseControlStatus::UnsafeArenaSwap(CruiseControlStatus* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CruiseControlStatus::InternalSwap(CruiseControlStatus* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(selected_speed_, other->selected_speed_);
  swap(selected_time_to_lead_vehicle_, other->selected_time_to_lead_vehicle_);
  swap(type_, other->type_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CruiseControlStatus::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PowertrainCategory::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::powertrain::_PowertrainCategory_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::CategoryEnvelope*>(
      ::sensoris::protobuf::types::base::CategoryEnvelope::internal_default_instance());
}
void PowertrainCategory::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::CategoryEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.powertrain.PowertrainCategory.envelope)
}
void PowertrainCategory::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PowertrainCategory::kEnvelopeFieldNumber;
const int PowertrainCategory::kEngineStatusFieldNumber;
const int PowertrainCategory::kTransmissionStatusFieldNumber;
const int PowertrainCategory::kCruiseControlStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PowertrainCategory::PowertrainCategory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::scc_info_PowertrainCategory.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.powertrain.PowertrainCategory)
}
PowertrainCategory::PowertrainCategory(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  engine_status_(arena),
  transmission_status_(arena),
  cruise_control_status_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::scc_info_PowertrainCategory.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.powertrain.PowertrainCategory)
}
PowertrainCategory::PowertrainCategory(const PowertrainCategory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      engine_status_(from.engine_status_),
      transmission_status_(from.transmission_status_),
      cruise_control_status_(from.cruise_control_status_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::CategoryEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.powertrain.PowertrainCategory)
}

void PowertrainCategory::SharedCtor() {
  envelope_ = NULL;
}

PowertrainCategory::~PowertrainCategory() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.powertrain.PowertrainCategory)
  SharedDtor();
}

void PowertrainCategory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
}

void PowertrainCategory::ArenaDtor(void* object) {
  PowertrainCategory* _this = reinterpret_cast< PowertrainCategory* >(object);
  (void)_this;
}
void PowertrainCategory::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PowertrainCategory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PowertrainCategory::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PowertrainCategory& PowertrainCategory::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::scc_info_PowertrainCategory.base);
  return *internal_default_instance();
}


void PowertrainCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.powertrain.PowertrainCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  engine_status_.Clear();
  transmission_status_.Clear();
  cruise_control_status_.Clear();
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  _internal_metadata_.Clear();
}

bool PowertrainCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.powertrain.PowertrainCategory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.powertrain.EngineStatus engine_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_engine_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.powertrain.TransmissionStatus transmission_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_transmission_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.powertrain.CruiseControlStatus cruise_control_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cruise_control_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.powertrain.PowertrainCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.powertrain.PowertrainCategory)
  return false;
#undef DO_
}

void PowertrainCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.powertrain.PowertrainCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // repeated .sensoris.protobuf.categories.powertrain.EngineStatus engine_status = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->engine_status_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->engine_status(static_cast<int>(i)),
      output);
  }

  // repeated .sensoris.protobuf.categories.powertrain.TransmissionStatus transmission_status = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transmission_status_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->transmission_status(static_cast<int>(i)),
      output);
  }

  // repeated .sensoris.protobuf.categories.powertrain.CruiseControlStatus cruise_control_status = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cruise_control_status_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->cruise_control_status(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.powertrain.PowertrainCategory)
}

::google::protobuf::uint8* PowertrainCategory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.powertrain.PowertrainCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.powertrain.EngineStatus engine_status = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->engine_status_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->engine_status(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.powertrain.TransmissionStatus transmission_status = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transmission_status_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->transmission_status(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.powertrain.CruiseControlStatus cruise_control_status = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cruise_control_status_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->cruise_control_status(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.powertrain.PowertrainCategory)
  return target;
}

size_t PowertrainCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.powertrain.PowertrainCategory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sensoris.protobuf.categories.powertrain.EngineStatus engine_status = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->engine_status_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->engine_status(static_cast<int>(i)));
    }
  }

  // repeated .sensoris.protobuf.categories.powertrain.TransmissionStatus transmission_status = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->transmission_status_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->transmission_status(static_cast<int>(i)));
    }
  }

  // repeated .sensoris.protobuf.categories.powertrain.CruiseControlStatus cruise_control_status = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->cruise_control_status_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cruise_control_status(static_cast<int>(i)));
    }
  }

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowertrainCategory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.powertrain.PowertrainCategory)
  GOOGLE_DCHECK_NE(&from, this);
  const PowertrainCategory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PowertrainCategory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.powertrain.PowertrainCategory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.powertrain.PowertrainCategory)
    MergeFrom(*source);
  }
}

void PowertrainCategory::MergeFrom(const PowertrainCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.powertrain.PowertrainCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  engine_status_.MergeFrom(from.engine_status_);
  transmission_status_.MergeFrom(from.transmission_status_);
  cruise_control_status_.MergeFrom(from.cruise_control_status_);
  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::CategoryEnvelope::MergeFrom(from.envelope());
  }
}

void PowertrainCategory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.powertrain.PowertrainCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowertrainCategory::CopyFrom(const PowertrainCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.powertrain.PowertrainCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowertrainCategory::IsInitialized() const {
  return true;
}

void PowertrainCategory::Swap(PowertrainCategory* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PowertrainCategory* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PowertrainCategory::UnsafeArenaSwap(PowertrainCategory* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PowertrainCategory::InternalSwap(PowertrainCategory* other) {
  using std::swap;
  CastToBase(&engine_status_)->InternalSwap(CastToBase(&other->engine_status_));
  CastToBase(&transmission_status_)->InternalSwap(CastToBase(&other->transmission_status_));
  CastToBase(&cruise_control_status_)->InternalSwap(CastToBase(&other->cruise_control_status_));
  swap(envelope_, other->envelope_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PowertrainCategory::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fpowertrain_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace powertrain
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::powertrain::EngineStatus* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::powertrain::EngineStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::powertrain::EngineStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::powertrain::TransmissionStatus* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::powertrain::TransmissionStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::powertrain::TransmissionStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::powertrain::CruiseControlStatus* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::powertrain::CruiseControlStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::powertrain::CruiseControlStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::powertrain::PowertrainCategory* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::powertrain::PowertrainCategory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::powertrain::PowertrainCategory >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
