// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/brake.proto

#include "sensoris/protobuf/categories/brake.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BrakeSystemsStatus;
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto
namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CategoryEnvelope;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_EventEnvelope;
}  // namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace brake {
class BrakeSystemsStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BrakeSystemsStatus>
      _instance;
} _BrakeSystemsStatus_default_instance_;
class BrakeCategoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BrakeCategory>
      _instance;
} _BrakeCategory_default_instance_;
}  // namespace brake
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto {
static void InitDefaultsBrakeSystemsStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::brake::_BrakeSystemsStatus_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::brake::BrakeSystemsStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::brake::BrakeSystemsStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BrakeSystemsStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBrakeSystemsStatus}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,}};

static void InitDefaultsBrakeCategory() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::brake::_BrakeCategory_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::brake::BrakeCategory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::brake::BrakeCategory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BrakeCategory =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBrakeCategory}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_CategoryEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto::scc_info_BrakeSystemsStatus.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_BrakeSystemsStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BrakeCategory.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::brake::BrakeSystemsStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::brake::BrakeSystemsStatus, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::brake::BrakeSystemsStatus, abs_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::brake::BrakeSystemsStatus, esc_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::brake::BrakeSystemsStatus, tcs_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::brake::BrakeSystemsStatus, ebd_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::brake::BrakeSystemsStatus, eba_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::brake::BrakeCategory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::brake::BrakeCategory, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::brake::BrakeCategory, brake_systems_status_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sensoris::protobuf::categories::brake::BrakeSystemsStatus)},
  { 11, -1, sizeof(::sensoris::protobuf::categories::brake::BrakeCategory)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::brake::_BrakeSystemsStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::brake::_BrakeCategory_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "sensoris/protobuf/categories/brake.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n(sensoris/protobuf/categories/brake.pro"
      "to\022\"sensoris.protobuf.categories.brake\032\""
      "sensoris/protobuf/types/base.proto\"\223\003\n\022B"
      "rakeSystemsStatus\022=\n\010envelope\030\001 \001(\0132+.se"
      "nsoris.protobuf.types.base.EventEnvelope"
      "\022>\n\nabs_status\030\002 \001(\0162*.sensoris.protobuf"
      ".types.base.SystemStatus\022>\n\nesc_status\030\003"
      " \001(\0162*.sensoris.protobuf.types.base.Syst"
      "emStatus\022>\n\ntcs_status\030\004 \001(\0162*.sensoris."
      "protobuf.types.base.SystemStatus\022>\n\nebd_"
      "status\030\005 \001(\0162*.sensoris.protobuf.types.b"
      "ase.SystemStatus\022>\n\neba_status\030\006 \001(\0162*.s"
      "ensoris.protobuf.types.base.SystemStatus"
      "\"\247\001\n\rBrakeCategory\022@\n\010envelope\030\001 \001(\0132..s"
      "ensoris.protobuf.types.base.CategoryEnve"
      "lope\022T\n\024brake_systems_status\030\002 \003(\01326.sen"
      "soris.protobuf.categories.brake.BrakeSys"
      "temsStatusB;\n\035org.sensoris.categories.br"
      "akeB\025SensorisBrakeCategoryP\001\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 759);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensoris/protobuf/categories/brake.proto", &protobuf_RegisterTypes);
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace brake {

// ===================================================================

void BrakeSystemsStatus::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::brake::_BrakeSystemsStatus_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
}
void BrakeSystemsStatus::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.brake.BrakeSystemsStatus.envelope)
}
void BrakeSystemsStatus::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrakeSystemsStatus::kEnvelopeFieldNumber;
const int BrakeSystemsStatus::kAbsStatusFieldNumber;
const int BrakeSystemsStatus::kEscStatusFieldNumber;
const int BrakeSystemsStatus::kTcsStatusFieldNumber;
const int BrakeSystemsStatus::kEbdStatusFieldNumber;
const int BrakeSystemsStatus::kEbaStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrakeSystemsStatus::BrakeSystemsStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto::scc_info_BrakeSystemsStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
}
BrakeSystemsStatus::BrakeSystemsStatus(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto::scc_info_BrakeSystemsStatus.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
}
BrakeSystemsStatus::BrakeSystemsStatus(const BrakeSystemsStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  ::memcpy(&abs_status_, &from.abs_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&eba_status_) -
    reinterpret_cast<char*>(&abs_status_)) + sizeof(eba_status_));
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
}

void BrakeSystemsStatus::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eba_status_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(eba_status_));
}

BrakeSystemsStatus::~BrakeSystemsStatus() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
  SharedDtor();
}

void BrakeSystemsStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
}

void BrakeSystemsStatus::ArenaDtor(void* object) {
  BrakeSystemsStatus* _this = reinterpret_cast< BrakeSystemsStatus* >(object);
  (void)_this;
}
void BrakeSystemsStatus::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BrakeSystemsStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BrakeSystemsStatus::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BrakeSystemsStatus& BrakeSystemsStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto::scc_info_BrakeSystemsStatus.base);
  return *internal_default_instance();
}


void BrakeSystemsStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  ::memset(&abs_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eba_status_) -
      reinterpret_cast<char*>(&abs_status_)) + sizeof(eba_status_));
  _internal_metadata_.Clear();
}

bool BrakeSystemsStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.SystemStatus abs_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_abs_status(static_cast< ::sensoris::protobuf::types::base::SystemStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.SystemStatus esc_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_esc_status(static_cast< ::sensoris::protobuf::types::base::SystemStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.SystemStatus tcs_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tcs_status(static_cast< ::sensoris::protobuf::types::base::SystemStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.SystemStatus ebd_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ebd_status(static_cast< ::sensoris::protobuf::types::base::SystemStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.SystemStatus eba_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_eba_status(static_cast< ::sensoris::protobuf::types::base::SystemStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
  return false;
#undef DO_
}

void BrakeSystemsStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.types.base.SystemStatus abs_status = 2;
  if (this->abs_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->abs_status(), output);
  }

  // .sensoris.protobuf.types.base.SystemStatus esc_status = 3;
  if (this->esc_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->esc_status(), output);
  }

  // .sensoris.protobuf.types.base.SystemStatus tcs_status = 4;
  if (this->tcs_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->tcs_status(), output);
  }

  // .sensoris.protobuf.types.base.SystemStatus ebd_status = 5;
  if (this->ebd_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ebd_status(), output);
  }

  // .sensoris.protobuf.types.base.SystemStatus eba_status = 6;
  if (this->eba_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->eba_status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
}

::google::protobuf::uint8* BrakeSystemsStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.SystemStatus abs_status = 2;
  if (this->abs_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->abs_status(), target);
  }

  // .sensoris.protobuf.types.base.SystemStatus esc_status = 3;
  if (this->esc_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->esc_status(), target);
  }

  // .sensoris.protobuf.types.base.SystemStatus tcs_status = 4;
  if (this->tcs_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->tcs_status(), target);
  }

  // .sensoris.protobuf.types.base.SystemStatus ebd_status = 5;
  if (this->ebd_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->ebd_status(), target);
  }

  // .sensoris.protobuf.types.base.SystemStatus eba_status = 6;
  if (this->eba_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->eba_status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
  return target;
}

size_t BrakeSystemsStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.types.base.SystemStatus abs_status = 2;
  if (this->abs_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->abs_status());
  }

  // .sensoris.protobuf.types.base.SystemStatus esc_status = 3;
  if (this->esc_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->esc_status());
  }

  // .sensoris.protobuf.types.base.SystemStatus tcs_status = 4;
  if (this->tcs_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tcs_status());
  }

  // .sensoris.protobuf.types.base.SystemStatus ebd_status = 5;
  if (this->ebd_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ebd_status());
  }

  // .sensoris.protobuf.types.base.SystemStatus eba_status = 6;
  if (this->eba_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->eba_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BrakeSystemsStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const BrakeSystemsStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BrakeSystemsStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
    MergeFrom(*source);
  }
}

void BrakeSystemsStatus::MergeFrom(const BrakeSystemsStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.abs_status() != 0) {
    set_abs_status(from.abs_status());
  }
  if (from.esc_status() != 0) {
    set_esc_status(from.esc_status());
  }
  if (from.tcs_status() != 0) {
    set_tcs_status(from.tcs_status());
  }
  if (from.ebd_status() != 0) {
    set_ebd_status(from.ebd_status());
  }
  if (from.eba_status() != 0) {
    set_eba_status(from.eba_status());
  }
}

void BrakeSystemsStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrakeSystemsStatus::CopyFrom(const BrakeSystemsStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrakeSystemsStatus::IsInitialized() const {
  return true;
}

void BrakeSystemsStatus::Swap(BrakeSystemsStatus* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BrakeSystemsStatus* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void BrakeSystemsStatus::UnsafeArenaSwap(BrakeSystemsStatus* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BrakeSystemsStatus::InternalSwap(BrakeSystemsStatus* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(abs_status_, other->abs_status_);
  swap(esc_status_, other->esc_status_);
  swap(tcs_status_, other->tcs_status_);
  swap(ebd_status_, other->ebd_status_);
  swap(eba_status_, other->eba_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BrakeSystemsStatus::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BrakeCategory::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::brake::_BrakeCategory_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::CategoryEnvelope*>(
      ::sensoris::protobuf::types::base::CategoryEnvelope::internal_default_instance());
}
void BrakeCategory::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::CategoryEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.brake.BrakeCategory.envelope)
}
void BrakeCategory::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrakeCategory::kEnvelopeFieldNumber;
const int BrakeCategory::kBrakeSystemsStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrakeCategory::BrakeCategory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto::scc_info_BrakeCategory.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.brake.BrakeCategory)
}
BrakeCategory::BrakeCategory(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  brake_systems_status_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto::scc_info_BrakeCategory.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.brake.BrakeCategory)
}
BrakeCategory::BrakeCategory(const BrakeCategory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      brake_systems_status_(from.brake_systems_status_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::CategoryEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.brake.BrakeCategory)
}

void BrakeCategory::SharedCtor() {
  envelope_ = NULL;
}

BrakeCategory::~BrakeCategory() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.brake.BrakeCategory)
  SharedDtor();
}

void BrakeCategory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
}

void BrakeCategory::ArenaDtor(void* object) {
  BrakeCategory* _this = reinterpret_cast< BrakeCategory* >(object);
  (void)_this;
}
void BrakeCategory::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BrakeCategory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BrakeCategory::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BrakeCategory& BrakeCategory::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto::scc_info_BrakeCategory.base);
  return *internal_default_instance();
}


void BrakeCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.brake.BrakeCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  brake_systems_status_.Clear();
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  _internal_metadata_.Clear();
}

bool BrakeCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.brake.BrakeCategory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.brake.BrakeSystemsStatus brake_systems_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_brake_systems_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.brake.BrakeCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.brake.BrakeCategory)
  return false;
#undef DO_
}

void BrakeCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.brake.BrakeCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // repeated .sensoris.protobuf.categories.brake.BrakeSystemsStatus brake_systems_status = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->brake_systems_status_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->brake_systems_status(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.brake.BrakeCategory)
}

::google::protobuf::uint8* BrakeCategory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.brake.BrakeCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.brake.BrakeSystemsStatus brake_systems_status = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->brake_systems_status_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->brake_systems_status(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.brake.BrakeCategory)
  return target;
}

size_t BrakeCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.brake.BrakeCategory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sensoris.protobuf.categories.brake.BrakeSystemsStatus brake_systems_status = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->brake_systems_status_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->brake_systems_status(static_cast<int>(i)));
    }
  }

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BrakeCategory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.brake.BrakeCategory)
  GOOGLE_DCHECK_NE(&from, this);
  const BrakeCategory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BrakeCategory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.brake.BrakeCategory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.brake.BrakeCategory)
    MergeFrom(*source);
  }
}

void BrakeCategory::MergeFrom(const BrakeCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.brake.BrakeCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  brake_systems_status_.MergeFrom(from.brake_systems_status_);
  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::CategoryEnvelope::MergeFrom(from.envelope());
  }
}

void BrakeCategory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.brake.BrakeCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrakeCategory::CopyFrom(const BrakeCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.brake.BrakeCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrakeCategory::IsInitialized() const {
  return true;
}

void BrakeCategory::Swap(BrakeCategory* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BrakeCategory* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void BrakeCategory::UnsafeArenaSwap(BrakeCategory* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BrakeCategory::InternalSwap(BrakeCategory* other) {
  using std::swap;
  CastToBase(&brake_systems_status_)->InternalSwap(CastToBase(&other->brake_systems_status_));
  swap(envelope_, other->envelope_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BrakeCategory::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace brake
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::brake::BrakeSystemsStatus* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::brake::BrakeSystemsStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::brake::BrakeSystemsStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::brake::BrakeCategory* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::brake::BrakeCategory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::brake::BrakeCategory >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
