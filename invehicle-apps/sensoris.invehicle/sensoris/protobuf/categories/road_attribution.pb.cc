// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/road_attribution.proto

#include "sensoris/protobuf/categories/road_attribution.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fwrappers_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Int64Value;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StringValue;
}  // namespace protobuf_google_2fprotobuf_2fwrappers_2eproto
namespace protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto ::google::protobuf::internal::SCCInfo<11> scc_info_LaneBoundary;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_InclinationAndCurvature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LaneBoundaryMergeSplit_TypeAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LaneBoundary_DashStatistics;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LaneBoundary_MarkingOffsets;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LaneBoundary_MarkingOffsets_TypeAndOffset;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LaneBoundary_TypeAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MarkingColorAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MarkingMaterialAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RoadAttribution_ChangeTypeAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RoadAttribution_TypeAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SurfaceMarking_TypeAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SurfaceMaterialAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_LaneCountAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Road;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Lane;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_LaneBoundaryMergeSplit;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_RoadAttribution;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_SurfaceAttribution;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto ::google::protobuf::internal::SCCInfo<8> scc_info_SurfaceMarking;
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto
namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Confidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CategoryEnvelope;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EventDetectionStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CountAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_EventEnvelope;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Int64ValueAndAccuracy;
}  // namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto
namespace protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PolylineAndAccuracy;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_RectangularBoxAndAccuracy;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_PositionAndAccuracy;
}  // namespace protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace roadattribution {
class MarkingColorAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarkingColorAndConfidence>
      _instance;
} _MarkingColorAndConfidence_default_instance_;
class MarkingMaterialAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarkingMaterialAndConfidence>
      _instance;
} _MarkingMaterialAndConfidence_default_instance_;
class SurfaceMaterialAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SurfaceMaterialAndConfidence>
      _instance;
} _SurfaceMaterialAndConfidence_default_instance_;
class InclinationAndCurvatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InclinationAndCurvature>
      _instance;
} _InclinationAndCurvature_default_instance_;
class LaneBoundary_TypeAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneBoundary_TypeAndConfidence>
      _instance;
} _LaneBoundary_TypeAndConfidence_default_instance_;
class LaneBoundary_DashStatisticsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneBoundary_DashStatistics>
      _instance;
} _LaneBoundary_DashStatistics_default_instance_;
class LaneBoundary_MarkingOffsets_TypeAndOffsetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneBoundary_MarkingOffsets_TypeAndOffset>
      _instance;
} _LaneBoundary_MarkingOffsets_TypeAndOffset_default_instance_;
class LaneBoundary_MarkingOffsetsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneBoundary_MarkingOffsets>
      _instance;
} _LaneBoundary_MarkingOffsets_default_instance_;
class LaneBoundaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneBoundary>
      _instance;
  const ::sensoris::protobuf::types::spatial::PolylineAndAccuracy* polyline_and_accuracy_;
  const ::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics* dash_statistics_;
  const ::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets* marking_offsets_;
} _LaneBoundary_default_instance_;
class LaneBoundaryMergeSplit_TypeAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneBoundaryMergeSplit_TypeAndConfidence>
      _instance;
} _LaneBoundaryMergeSplit_TypeAndConfidence_default_instance_;
class LaneBoundaryMergeSplitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneBoundaryMergeSplit>
      _instance;
} _LaneBoundaryMergeSplit_default_instance_;
class LaneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lane>
      _instance;
} _Lane_default_instance_;
class RoadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Road>
      _instance;
} _Road_default_instance_;
class SurfaceMarking_TypeAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SurfaceMarking_TypeAndConfidence>
      _instance;
} _SurfaceMarking_TypeAndConfidence_default_instance_;
class SurfaceMarkingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SurfaceMarking>
      _instance;
} _SurfaceMarking_default_instance_;
class SurfaceAttributionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SurfaceAttribution>
      _instance;
} _SurfaceAttribution_default_instance_;
class RoadAttribution_TypeAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadAttribution_TypeAndConfidence>
      _instance;
} _RoadAttribution_TypeAndConfidence_default_instance_;
class RoadAttribution_ChangeTypeAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadAttribution_ChangeTypeAndConfidence>
      _instance;
} _RoadAttribution_ChangeTypeAndConfidence_default_instance_;
class RoadAttributionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadAttribution>
      _instance;
} _RoadAttribution_default_instance_;
class LaneCountAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneCountAndConfidence>
      _instance;
} _LaneCountAndConfidence_default_instance_;
class RoadAttributionCategoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadAttributionCategory>
      _instance;
} _RoadAttributionCategory_default_instance_;
}  // namespace roadattribution
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto {
static void InitDefaultsMarkingColorAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::roadattribution::_MarkingColorAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MarkingColorAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMarkingColorAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsMarkingMaterialAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::roadattribution::_MarkingMaterialAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MarkingMaterialAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMarkingMaterialAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsSurfaceMaterialAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::roadattribution::_SurfaceMaterialAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SurfaceMaterialAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSurfaceMaterialAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsInclinationAndCurvature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::roadattribution::_InclinationAndCurvature_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_InclinationAndCurvature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInclinationAndCurvature}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64ValueAndAccuracy.base,}};

static void InitDefaultsLaneBoundary_TypeAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::roadattribution::_LaneBoundary_TypeAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LaneBoundary_TypeAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLaneBoundary_TypeAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsLaneBoundary_DashStatistics() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::roadattribution::_LaneBoundary_DashStatistics_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LaneBoundary_DashStatistics =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLaneBoundary_DashStatistics}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64ValueAndAccuracy.base,}};

static void InitDefaultsLaneBoundary_MarkingOffsets_TypeAndOffset() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::roadattribution::_LaneBoundary_MarkingOffsets_TypeAndOffset_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LaneBoundary_MarkingOffsets_TypeAndOffset =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLaneBoundary_MarkingOffsets_TypeAndOffset}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64ValueAndAccuracy.base,}};

static void InitDefaultsLaneBoundary_MarkingOffsets() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::roadattribution::_LaneBoundary_MarkingOffsets_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LaneBoundary_MarkingOffsets =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLaneBoundary_MarkingOffsets}, {
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundary_MarkingOffsets_TypeAndOffset.base,}};

static void InitDefaultsLaneBoundary() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::roadattribution::_LaneBoundary_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::roadattribution::LaneBoundary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::roadattribution::LaneBoundary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<11> scc_info_LaneBoundary =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 11, InitDefaultsLaneBoundary}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int64Value.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventDetectionStatus.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundary_TypeAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_MarkingMaterialAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_MarkingColorAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PolylineAndAccuracy.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64ValueAndAccuracy.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundary_DashStatistics.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundary_MarkingOffsets.base,}};

static void InitDefaultsLaneBoundaryMergeSplit_TypeAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::roadattribution::_LaneBoundaryMergeSplit_TypeAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LaneBoundaryMergeSplit_TypeAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLaneBoundaryMergeSplit_TypeAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsLaneBoundaryMergeSplit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::roadattribution::_LaneBoundaryMergeSplit_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_LaneBoundaryMergeSplit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsLaneBoundaryMergeSplit}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventDetectionStatus.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundaryMergeSplit_TypeAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy.base,}};

static void InitDefaultsLane() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::roadattribution::_Lane_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::roadattribution::Lane();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::roadattribution::Lane::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Lane =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsLane}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int64Value.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64ValueAndAccuracy.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_InclinationAndCurvature.base,}};

static void InitDefaultsRoad() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::roadattribution::_Road_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::roadattribution::Road();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::roadattribution::Road::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Road =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsRoad}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64ValueAndAccuracy.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_InclinationAndCurvature.base,}};

static void InitDefaultsSurfaceMarking_TypeAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::roadattribution::_SurfaceMarking_TypeAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SurfaceMarking_TypeAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSurfaceMarking_TypeAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsSurfaceMarking() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::roadattribution::_SurfaceMarking_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::roadattribution::SurfaceMarking();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::roadattribution::SurfaceMarking::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<8> scc_info_SurfaceMarking =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsSurfaceMarking}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventDetectionStatus.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_SurfaceMarking_TypeAndConfidence.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_StringValue.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_MarkingColorAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_MarkingMaterialAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RectangularBoxAndAccuracy.base,}};

static void InitDefaultsSurfaceAttribution() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::roadattribution::_SurfaceAttribution_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::roadattribution::SurfaceAttribution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::roadattribution::SurfaceAttribution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_SurfaceAttribution =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsSurfaceAttribution}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_InclinationAndCurvature.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_SurfaceMaterialAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64ValueAndAccuracy.base,}};

static void InitDefaultsRoadAttribution_TypeAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::roadattribution::_RoadAttribution_TypeAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RoadAttribution_TypeAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRoadAttribution_TypeAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsRoadAttribution_ChangeTypeAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::roadattribution::_RoadAttribution_ChangeTypeAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RoadAttribution_ChangeTypeAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRoadAttribution_ChangeTypeAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsRoadAttribution() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::roadattribution::_RoadAttribution_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::roadattribution::RoadAttribution();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::roadattribution::RoadAttribution::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_RoadAttribution =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsRoadAttribution}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventDetectionStatus.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_RoadAttribution_TypeAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_RoadAttribution_ChangeTypeAndConfidence.base,}};

static void InitDefaultsLaneCountAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::roadattribution::_LaneCountAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_LaneCountAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLaneCountAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_CountAndConfidence.base,}};

static void InitDefaultsRoadAttributionCategory() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::roadattribution::_RoadAttributionCategory_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<9> scc_info_RoadAttributionCategory =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsRoadAttributionCategory}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_CategoryEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundary.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundaryMergeSplit.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_Lane.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_Road.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_SurfaceMarking.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_SurfaceAttribution.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_RoadAttribution.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneCountAndConfidence.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MarkingColorAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarkingMaterialAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SurfaceMaterialAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InclinationAndCurvature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneBoundary_TypeAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneBoundary_DashStatistics.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneBoundary_MarkingOffsets_TypeAndOffset.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneBoundary_MarkingOffsets.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneBoundary.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneBoundaryMergeSplit_TypeAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneBoundaryMergeSplit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Lane.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Road.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SurfaceMarking_TypeAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SurfaceMarking.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SurfaceAttribution.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoadAttribution_TypeAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoadAttribution_ChangeTypeAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoadAttribution.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneCountAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoadAttributionCategory.base);
}

::google::protobuf::Metadata file_level_metadata[21];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[11];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature, longitudinal_inclination_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature, lateral_inclination_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature, horizontal_curvature_and_accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics, length_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics, distance_and_accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset, offset_and_accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets, type_and_offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, lane_boundary_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, existence_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, detection_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, type_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, material_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, color_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, position_reference_),
  offsetof(::sensoris::protobuf::categories::roadattribution::LaneBoundaryDefaultTypeInternal, polyline_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, width_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, height_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, distance_between_double_and_accuracy_),
  offsetof(::sensoris::protobuf::categories::roadattribution::LaneBoundaryDefaultTypeInternal, dash_statistics_),
  offsetof(::sensoris::protobuf::categories::roadattribution::LaneBoundaryDefaultTypeInternal, marking_offsets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, geometry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundary, markings_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit, existence_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit, detection_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit, type_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit, position_and_accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Lane, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Lane, relative_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Lane, width_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Lane, inclination_and_curvature_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Road, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Road, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Road, width_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::Road, inclination_and_curvature_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, existence_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, detection_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, type_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, color_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, material_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceMarking, rectangular_box_and_accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceAttribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceAttribution, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceAttribution, position_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceAttribution, inclination_and_curvature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceAttribution, material_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::SurfaceAttribution, road_roughness_and_accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution, detection_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution, position_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution, type_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttribution, change_type_and_confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence, position_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence, count_and_confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, lane_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, lane_boundary_merge_split_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, road_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, surface_marking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, surface_attribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, road_attribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, detected_lane_count_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory, estimated_lane_count_and_confidence_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence)},
  { 7, -1, sizeof(::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence)},
  { 14, -1, sizeof(::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence)},
  { 21, -1, sizeof(::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature)},
  { 29, -1, sizeof(::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence)},
  { 36, -1, sizeof(::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics)},
  { 43, -1, sizeof(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset)},
  { 50, -1, sizeof(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets)},
  { 56, -1, sizeof(::sensoris::protobuf::categories::roadattribution::LaneBoundary)},
  { 77, -1, sizeof(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence)},
  { 84, -1, sizeof(::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit)},
  { 94, -1, sizeof(::sensoris::protobuf::categories::roadattribution::Lane)},
  { 103, -1, sizeof(::sensoris::protobuf::categories::roadattribution::Road)},
  { 111, -1, sizeof(::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence)},
  { 118, -1, sizeof(::sensoris::protobuf::categories::roadattribution::SurfaceMarking)},
  { 131, -1, sizeof(::sensoris::protobuf::categories::roadattribution::SurfaceAttribution)},
  { 141, -1, sizeof(::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence)},
  { 148, -1, sizeof(::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence)},
  { 155, -1, sizeof(::sensoris::protobuf::categories::roadattribution::RoadAttribution)},
  { 165, -1, sizeof(::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence)},
  { 174, -1, sizeof(::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::roadattribution::_MarkingColorAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::roadattribution::_MarkingMaterialAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::roadattribution::_SurfaceMaterialAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::roadattribution::_InclinationAndCurvature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::roadattribution::_LaneBoundary_TypeAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::roadattribution::_LaneBoundary_DashStatistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::roadattribution::_LaneBoundary_MarkingOffsets_TypeAndOffset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::roadattribution::_LaneBoundary_MarkingOffsets_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::roadattribution::_LaneBoundary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::roadattribution::_LaneBoundaryMergeSplit_TypeAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::roadattribution::_LaneBoundaryMergeSplit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::roadattribution::_Lane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::roadattribution::_Road_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::roadattribution::_SurfaceMarking_TypeAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::roadattribution::_SurfaceMarking_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::roadattribution::_SurfaceAttribution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::roadattribution::_RoadAttribution_TypeAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::roadattribution::_RoadAttribution_ChangeTypeAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::roadattribution::_RoadAttribution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::roadattribution::_LaneCountAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::roadattribution::_RoadAttributionCategory_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "sensoris/protobuf/categories/road_attribution.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 21);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n3sensoris/protobuf/categories/road_attr"
      "ibution.proto\022,sensoris.protobuf.categor"
      "ies.roadattribution\032\036google/protobuf/wra"
      "ppers.proto\032\"sensoris/protobuf/types/bas"
      "e.proto\032%sensoris/protobuf/types/spatial"
      ".proto\"\331\002\n\031MarkingColorAndConfidence\022Z\n\004"
      "type\030\001 \001(\0162L.sensoris.protobuf.categorie"
      "s.roadattribution.MarkingColorAndConfide"
      "nce.Type\022<\n\nconfidence\030\002 \001(\0132(.sensoris."
      "protobuf.types.base.Confidence\"\241\001\n\004Type\022"
      "\020\n\014UNKNOWN_TYPE\020\000\022\t\n\005WHITE\020\001\022\010\n\004GRAY\020\002\022\016"
      "\n\nGRAY_LIGHT\020\003\022\r\n\tGRAY_DARK\020\004\022\t\n\005BLACK\020\005"
      "\022\007\n\003RED\020\006\022\n\n\006YELLOW\020\007\022\t\n\005GREEN\020\010\022\010\n\004CYAN"
      "\020\t\022\010\n\004BLUE\020\n\022\n\n\006ORANGE\020\013\022\010\n\004PINK\020\014\"\357\002\n\034M"
      "arkingMaterialAndConfidence\022]\n\004type\030\001 \001("
      "\0162O.sensoris.protobuf.categories.roadatt"
      "ribution.MarkingMaterialAndConfidence.Ty"
      "pe\022<\n\nconfidence\030\002 \001(\0132(.sensoris.protob"
      "uf.types.base.Confidence\"\261\001\n\004Type\022\020\n\014UNK"
      "NOWN_TYPE\020\000\022\t\n\005METAL\020\001\022\014\n\010CONCRETE\020\002\022\t\n\005"
      "STONE\020\003\022\010\n\004WOOD\020\004\022\013\n\007PLASTIC\020\005\022\017\n\013TRANSP"
      "ARENT\020\006\022\026\n\022VIBRATION_MARKINGS\020\007\022\t\n\005PAINT"
      "\020\010\022\013\n\007ASPHALT\020\t\022\n\n\006GRAVEL\020\n\022\017\n\013COBBLESTO"
      "NE\020\013\"\264\002\n\034SurfaceMaterialAndConfidence\022]\n"
      "\004type\030\001 \001(\0162O.sensoris.protobuf.categori"
      "es.roadattribution.SurfaceMaterialAndCon"
      "fidence.Type\022<\n\nconfidence\030\002 \001(\0132(.senso"
      "ris.protobuf.types.base.Confidence\"w\n\004Ty"
      "pe\022\020\n\014UNKNOWN_TYPE\020\000\022\013\n\007ASPHALT\020\001\022\014\n\010CON"
      "CRETE\020\002\022\026\n\022COMPOSITE_PAVEMENT\020\003\022\r\n\tRECYC"
      "LING\020\004\022\n\n\006GRAVEL\020\005\022\017\n\013COBBLESTONE\020\006\"\316\002\n\027"
      "InclinationAndCurvature\022h\n%longitudinal_"
      "inclination_and_accuracy\030\001 \001(\01323.sensori"
      "s.protobuf.types.base.Int64ValueAndAccur"
      "acyB\004\210\265\030\002\022c\n lateral_inclination_and_acc"
      "uracy\030\002 \001(\01323.sensoris.protobuf.types.ba"
      "se.Int64ValueAndAccuracyB\004\210\265\030\002\022d\n!horizo"
      "ntal_curvature_and_accuracy\030\003 \001(\01323.sens"
      "oris.protobuf.types.base.Int64ValueAndAc"
      "curacyB\004\210\265\030\003\"\273\026\n\014LaneBoundary\022=\n\010envelop"
      "e\030\001 \001(\0132+.sensoris.protobuf.types.base.E"
      "ventEnvelope\0225\n\020lane_boundary_id\030\002 \001(\0132\033"
      ".google.protobuf.Int64Value\022F\n\024existence"
      "_confidence\030\003 \001(\0132(.sensoris.protobuf.ty"
      "pes.base.Confidence\022L\n\020detection_status\030"
      "\004 \001(\01322.sensoris.protobuf.types.base.Eve"
      "ntDetectionStatus\022i\n\023type_and_confidence"
      "\030\005 \001(\0132L.sensoris.protobuf.categories.ro"
      "adattribution.LaneBoundary.TypeAndConfid"
      "ence\022k\n\027material_and_confidence\030\006 \001(\0132J."
      "sensoris.protobuf.categories.roadattribu"
      "tion.MarkingMaterialAndConfidence\022e\n\024col"
      "or_and_confidence\030\007 \001(\0132G.sensoris.proto"
      "buf.categories.roadattribution.MarkingCo"
      "lorAndConfidence\022h\n\022position_reference\030\010"
      " \001(\0162L.sensoris.protobuf.categories.road"
      "attribution.LaneBoundary.PositionReferen"
      "ce\022U\n\025polyline_and_accuracy\030\t \001(\01324.sens"
      "oris.protobuf.types.spatial.PolylineAndA"
      "ccuracyH\000\022U\n\022width_and_accuracy\030\n \001(\01323."
      "sensoris.protobuf.types.base.Int64ValueA"
      "ndAccuracyB\004\210\265\030\000\022V\n\023height_and_accuracy\030"
      "\013 \001(\01323.sensoris.protobuf.types.base.Int"
      "64ValueAndAccuracyB\004\210\265\030\000\022g\n$distance_bet"
      "ween_double_and_accuracy\030\014 \001(\01323.sensori"
      "s.protobuf.types.base.Int64ValueAndAccur"
      "acyB\004\210\265\030\000\022d\n\017dash_statistics\030\r \001(\0132I.sen"
      "soris.protobuf.categories.roadattributio"
      "n.LaneBoundary.DashStatisticsH\001\022d\n\017marki"
      "ng_offsets\030\016 \001(\0132I.sensoris.protobuf.cat"
      "egories.roadattribution.LaneBoundary.Mar"
      "kingOffsetsH\001\032\241\006\n\021TypeAndConfidence\022_\n\004t"
      "ype\030\001 \001(\0162Q.sensoris.protobuf.categories"
      ".roadattribution.LaneBoundary.TypeAndCon"
      "fidence.Type\022<\n\nconfidence\030\002 \001(\0132(.senso"
      "ris.protobuf.types.base.Confidence\"\354\004\n\004T"
      "ype\022\020\n\014UNKNOWN_TYPE\020\000\022\010\n\004LINE\020\001\022\017\n\013LINE_"
      "SINGLE\020\002\022\025\n\021LINE_SINGLE_SOLID\020\003\022\026\n\022LINE_"
      "SINGLE_DASHED\020\004\022\034\n\030LINE_SINGLE_DASHED_SH"
      "ORT\020\005\022\033\n\027LINE_SINGLE_DASHED_LONG\020\006\022\017\n\013LI"
      "NE_DOUBLE\020\007\022\025\n\021LINE_DOUBLE_SOLID\020\010\022\026\n\022LI"
      "NE_DOUBLE_DASHED\020\t\022\034\n\030LINE_DOUBLE_SOLID_"
      "DASHED\020\n\022\034\n\030LINE_DOUBLE_DASHED_SOLID\020\013\022\027"
      "\n\023SHADED_AREA_MARKING\020\014\022\021\n\rBLOCKS_DASHED"
      "\020\r\022\022\n\016CROSSING_ALERT\020\016\022\010\n\004CURB\020\017\022\024\n\020CURB"
      "_TRAVERSABLE\020\020\022\030\n\024CURB_NON_TRAVERSABLE\020\021"
      "\022\024\n\020PHYSICAL_DIVIDER\020\022\022\010\n\004WALL\020\023\022\r\n\tWALL"
      "_FLAT\020\024\022\017\n\013WALL_CURVED\020\025\022\013\n\007BARRIER\020\026\022\022\n"
      "\016BARRIER_JERSEY\020\027\022\021\n\rBARRIER_SOUND\020\030\022\021\n\r"
      "BARRIER_CABLE\020\031\022\r\n\tGUARDRAIL\020\032\022\t\n\005FENCE\020"
      "\033\022\r\n\tROAD_EDGE\020\034\022\t\n\005CLIFF\020\035\022\t\n\005DITCH\020\036\022\021"
      "\n\rASPHALT_JOINT\020\037\032\302\001\n\016DashStatistics\022V\n\023"
      "length_and_accuracy\030\002 \001(\01323.sensoris.pro"
      "tobuf.types.base.Int64ValueAndAccuracyB\004"
      "\210\265\030\000\022X\n\025distance_and_accuracy\030\003 \001(\01323.se"
      "nsoris.protobuf.types.base.Int64ValueAnd"
      "AccuracyB\004\210\265\030\000\032\274\003\n\016MarkingOffsets\022p\n\017typ"
      "e_and_offset\030\002 \003(\0132W.sensoris.protobuf.c"
      "ategories.roadattribution.LaneBoundary.M"
      "arkingOffsets.TypeAndOffset\032\267\002\n\rTypeAndO"
      "ffset\022j\n\004type\030\001 \001(\0162\\.sensoris.protobuf."
      "categories.roadattribution.LaneBoundary."
      "MarkingOffsets.TypeAndOffset.Type\022V\n\023off"
      "set_and_accuracy\030\002 \001(\01323.sensoris.protob"
      "uf.types.base.Int64ValueAndAccuracyB\004\210\265\030"
      "\000\"b\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\024\n\020START_OF_"
      "MARKING\020\001\022\022\n\016END_OF_MARKING\020\002\022\016\n\nON_MARK"
      "ING\020\003\022\016\n\nNO_MARKING\020\004\"{\n\021PositionReferen"
      "ce\022\036\n\032UNKNOWN_POSITION_REFERENCE\020\000\022\031\n\025LE"
      "FT_MARKING_BOUNDARY\020\001\022\017\n\013CENTER_LINE\020\002\022\032"
      "\n\026RIGHT_MARKING_BOUNDARY\020\003B\n\n\010geometryB\n"
      "\n\010markings\"\246\005\n\026LaneBoundaryMergeSplit\022=\n"
      "\010envelope\030\001 \001(\0132+.sensoris.protobuf.type"
      "s.base.EventEnvelope\022F\n\024existence_confid"
      "ence\030\002 \001(\0132(.sensoris.protobuf.types.bas"
      "e.Confidence\022L\n\020detection_status\030\003 \001(\01322"
      ".sensoris.protobuf.types.base.EventDetec"
      "tionStatus\022s\n\023type_and_confidence\030\004 \001(\0132"
      "V.sensoris.protobuf.categories.roadattri"
      "bution.LaneBoundaryMergeSplit.TypeAndCon"
      "fidence\022S\n\025position_and_accuracy\030\005 \001(\01324"
      ".sensoris.protobuf.types.spatial.Positio"
      "nAndAccuracy\032\354\001\n\021TypeAndConfidence\022i\n\004ty"
      "pe\030\001 \001(\0162[.sensoris.protobuf.categories."
      "roadattribution.LaneBoundaryMergeSplit.T"
      "ypeAndConfidence.Type\022<\n\nconfidence\030\002 \001("
      "\0132(.sensoris.protobuf.types.base.Confide"
      "nce\".\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\t\n\005MERGE\020\001"
      "\022\t\n\005SPLIT\020\002\"\275\002\n\004Lane\022=\n\010envelope\030\001 \001(\0132+"
      ".sensoris.protobuf.types.base.EventEnvel"
      "ope\0225\n\020relative_lane_id\030\002 \001(\0132\033.google.p"
      "rotobuf.Int64Value\022U\n\022width_and_accuracy"
      "\030\003 \001(\01323.sensoris.protobuf.types.base.In"
      "t64ValueAndAccuracyB\004\210\265\030\000\022h\n\031inclination"
      "_and_curvature\030\004 \001(\0132E.sensoris.protobuf"
      ".categories.roadattribution.InclinationA"
      "ndCurvature\"\200\002\n\004Road\022=\n\010envelope\030\001 \001(\0132+"
      ".sensoris.protobuf.types.base.EventEnvel"
      "ope\022O\n\022width_and_accuracy\030\002 \001(\01323.sensor"
      "is.protobuf.types.base.Int64ValueAndAccu"
      "racy\022h\n\031inclination_and_curvature\030\003 \001(\0132"
      "E.sensoris.protobuf.categories.roadattri"
      "bution.InclinationAndCurvature\"\350\007\n\016Surfa"
      "ceMarking\022=\n\010envelope\030\001 \001(\0132+.sensoris.p"
      "rotobuf.types.base.EventEnvelope\022F\n\024exis"
      "tence_confidence\030\002 \001(\0132(.sensoris.protob"
      "uf.types.base.Confidence\022L\n\020detection_st"
      "atus\030\003 \001(\01322.sensoris.protobuf.types.bas"
      "e.EventDetectionStatus\022k\n\023type_and_confi"
      "dence\030\004 \001(\0132N.sensoris.protobuf.categori"
      "es.roadattribution.SurfaceMarking.TypeAn"
      "dConfidence\022*\n\004text\030\005 \001(\0132\034.google.proto"
      "buf.StringValue\022e\n\024color_and_confidence\030"
      "\006 \003(\0132G.sensoris.protobuf.categories.roa"
      "dattribution.MarkingColorAndConfidence\022k"
      "\n\027material_and_confidence\030\007 \003(\0132J.sensor"
      "is.protobuf.categories.roadattribution.M"
      "arkingMaterialAndConfidence\022`\n\034rectangul"
      "ar_box_and_accuracy\030\010 \001(\0132:.sensoris.pro"
      "tobuf.types.spatial.RectangularBoxAndAcc"
      "uracy\032\261\002\n\021TypeAndConfidence\022a\n\004type\030\001 \001("
      "\0162S.sensoris.protobuf.categories.roadatt"
      "ribution.SurfaceMarking.TypeAndConfidenc"
      "e.Type\022<\n\nconfidence\030\002 \001(\0132(.sensoris.pr"
      "otobuf.types.base.Confidence\"{\n\004Type\022\020\n\014"
      "UNKNOWN_TYPE\020\000\022\010\n\004SIGN\020\001\022\010\n\004TEXT\020\002\022\010\n\004IC"
      "ON\020\003\022\013\n\007PATTERN\020\004\022\025\n\021PATTERN_CROSSWALK\020\005"
      "\022\020\n\014LINE_ELEMENT\020\006\022\r\n\tSTOP_LINE\020\007\"\337\003\n\022Su"
      "rfaceAttribution\022=\n\010envelope\030\001 \001(\0132+.sen"
      "soris.protobuf.types.base.EventEnvelope\022"
      "S\n\025position_and_accuracy\030\002 \001(\01324.sensori"
      "s.protobuf.types.spatial.PositionAndAccu"
      "racy\022h\n\031inclination_and_curvature\030\003 \001(\0132"
      "E.sensoris.protobuf.categories.roadattri"
      "bution.InclinationAndCurvature\022k\n\027materi"
      "al_and_confidence\030\004 \003(\0132J.sensoris.proto"
      "buf.categories.roadattribution.SurfaceMa"
      "terialAndConfidence\022^\n\033road_roughness_an"
      "d_accuracy\030\005 \001(\01323.sensoris.protobuf.typ"
      "es.base.Int64ValueAndAccuracyB\004\210\265\030\000\"\270\t\n\017"
      "RoadAttribution\022=\n\010envelope\030\001 \001(\0132+.sens"
      "oris.protobuf.types.base.EventEnvelope\022L"
      "\n\020detection_status\030\002 \001(\01322.sensoris.prot"
      "obuf.types.base.EventDetectionStatus\022S\n\025"
      "position_and_accuracy\030\003 \001(\01324.sensoris.p"
      "rotobuf.types.spatial.PositionAndAccurac"
      "y\022l\n\023type_and_confidence\030\004 \001(\0132O.sensori"
      "s.protobuf.categories.roadattribution.Ro"
      "adAttribution.TypeAndConfidence\022y\n\032chang"
      "e_type_and_confidence\030\005 \001(\0132U.sensoris.p"
      "rotobuf.categories.roadattribution.RoadA"
      "ttribution.ChangeTypeAndConfidence\032\331\003\n\021T"
      "ypeAndConfidence\022b\n\004type\030\001 \001(\0162T.sensori"
      "s.protobuf.categories.roadattribution.Ro"
      "adAttribution.TypeAndConfidence.Type\022<\n\n"
      "confidence\030\002 \001(\0132(.sensoris.protobuf.typ"
      "es.base.Confidence\"\241\002\n\004Type\022\020\n\014UNKNOWN_T"
      "YPE\020\000\022\014\n\010MOTORWAY\020\001\022\023\n\017ONE_WAY_TRAFFIC\020\002"
      "\022\023\n\017TWO_WAY_TRAFFIC\020\003\022\013\n\007OFFROAD\020\004\022\n\n\006TU"
      "NNEL\020\005\022\n\n\006BRIDGE\020\006\022\033\n\027ARTIFICIAL_ILLUMIN"
      "ATION\020\007\022\033\n\027ROAD_WORKS_NARROW_LANES\020\010\022\016\n\n"
      "LANE_RIGHT\020\t\022\r\n\tLANE_LEFT\020\n\022\025\n\021LANE_SPLI"
      "T_MIDDLE\020\013\022\025\n\021LANE_MERGE_MIDDLE\020\014\022\r\n\tCRO"
      "SSWALK\020\r\022\024\n\020CENTER_TURN_LANE\020\016\032\375\001\n\027Chang"
      "eTypeAndConfidence\022h\n\004type\030\001 \001(\0162Z.senso"
      "ris.protobuf.categories.roadattribution."
      "RoadAttribution.ChangeTypeAndConfidence."
      "Type\022<\n\nconfidence\030\002 \001(\0132(.sensoris.prot"
      "obuf.types.base.Confidence\":\n\004Type\022\020\n\014UN"
      "KNOWN_TYPE\020\000\022\014\n\010DETECTED\020\001\022\t\n\005START\020\002\022\007\n"
      "\003END\020\003\"\242\003\n\026LaneCountAndConfidence\022=\n\010env"
      "elope\030\001 \001(\0132+.sensoris.protobuf.types.ba"
      "se.EventEnvelope\022S\n\025position_and_accurac"
      "y\030\002 \001(\01324.sensoris.protobuf.types.spatia"
      "l.PositionAndAccuracy\022W\n\004type\030\003 \001(\0162I.se"
      "nsoris.protobuf.categories.roadattributi"
      "on.LaneCountAndConfidence.Type\022N\n\024count_"
      "and_confidence\030\004 \001(\01320.sensoris.protobuf"
      ".types.base.CountAndConfidence\"K\n\004Type\022\020"
      "\n\014UNKNOWN_TYPE\020\000\022\t\n\005TOTAL\020\001\022\033\n\027LEFT_INCL"
      "UDING_EGO_LANE\020\002\022\t\n\005RIGHT\020\003\"\217\007\n\027RoadAttr"
      "ibutionCategory\022@\n\010envelope\030\001 \001(\0132..sens"
      "oris.protobuf.types.base.CategoryEnvelop"
      "e\022Q\n\rlane_boundary\030\002 \003(\0132:.sensoris.prot"
      "obuf.categories.roadattribution.LaneBoun"
      "dary\022g\n\031lane_boundary_merge_split\030\003 \003(\0132"
      "D.sensoris.protobuf.categories.roadattri"
      "bution.LaneBoundaryMergeSplit\022@\n\004lane\030\004 "
      "\003(\01322.sensoris.protobuf.categories.roada"
      "ttribution.Lane\022@\n\004road\030\005 \003(\01322.sensoris"
      ".protobuf.categories.roadattribution.Roa"
      "d\022U\n\017surface_marking\030\006 \003(\0132<.sensoris.pr"
      "otobuf.categories.roadattribution.Surfac"
      "eMarking\022]\n\023surface_attribution\030\007 \003(\0132@."
      "sensoris.protobuf.categories.roadattribu"
      "tion.SurfaceAttribution\022W\n\020road_attribut"
      "ion\030\010 \003(\0132=.sensoris.protobuf.categories"
      ".roadattribution.RoadAttribution\022p\n\"dete"
      "cted_lane_count_and_confidence\030\t \003(\0132D.s"
      "ensoris.protobuf.categories.roadattribut"
      "ion.LaneCountAndConfidence\022q\n#estimated_"
      "lane_count_and_confidence\030\n \003(\0132D.sensor"
      "is.protobuf.categories.roadattribution.L"
      "aneCountAndConfidenceBO\n\'org.sensoris.ca"
      "tegories.roadattributionB\037SensorisRoadAt"
      "tributionCategoryP\001\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 9830);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensoris/protobuf/categories/road_attribution.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::AddDescriptors();
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace roadattribution {
const ::google::protobuf::EnumDescriptor* MarkingColorAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_enum_descriptors[0];
}
bool MarkingColorAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MarkingColorAndConfidence_Type MarkingColorAndConfidence::UNKNOWN_TYPE;
const MarkingColorAndConfidence_Type MarkingColorAndConfidence::WHITE;
const MarkingColorAndConfidence_Type MarkingColorAndConfidence::GRAY;
const MarkingColorAndConfidence_Type MarkingColorAndConfidence::GRAY_LIGHT;
const MarkingColorAndConfidence_Type MarkingColorAndConfidence::GRAY_DARK;
const MarkingColorAndConfidence_Type MarkingColorAndConfidence::BLACK;
const MarkingColorAndConfidence_Type MarkingColorAndConfidence::RED;
const MarkingColorAndConfidence_Type MarkingColorAndConfidence::YELLOW;
const MarkingColorAndConfidence_Type MarkingColorAndConfidence::GREEN;
const MarkingColorAndConfidence_Type MarkingColorAndConfidence::CYAN;
const MarkingColorAndConfidence_Type MarkingColorAndConfidence::BLUE;
const MarkingColorAndConfidence_Type MarkingColorAndConfidence::ORANGE;
const MarkingColorAndConfidence_Type MarkingColorAndConfidence::PINK;
const MarkingColorAndConfidence_Type MarkingColorAndConfidence::Type_MIN;
const MarkingColorAndConfidence_Type MarkingColorAndConfidence::Type_MAX;
const int MarkingColorAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MarkingMaterialAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_enum_descriptors[1];
}
bool MarkingMaterialAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::UNKNOWN_TYPE;
const MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::METAL;
const MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::CONCRETE;
const MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::STONE;
const MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::WOOD;
const MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::PLASTIC;
const MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::TRANSPARENT;
const MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::VIBRATION_MARKINGS;
const MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::PAINT;
const MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::ASPHALT;
const MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::GRAVEL;
const MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::COBBLESTONE;
const MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::Type_MIN;
const MarkingMaterialAndConfidence_Type MarkingMaterialAndConfidence::Type_MAX;
const int MarkingMaterialAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SurfaceMaterialAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_enum_descriptors[2];
}
bool SurfaceMaterialAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SurfaceMaterialAndConfidence_Type SurfaceMaterialAndConfidence::UNKNOWN_TYPE;
const SurfaceMaterialAndConfidence_Type SurfaceMaterialAndConfidence::ASPHALT;
const SurfaceMaterialAndConfidence_Type SurfaceMaterialAndConfidence::CONCRETE;
const SurfaceMaterialAndConfidence_Type SurfaceMaterialAndConfidence::COMPOSITE_PAVEMENT;
const SurfaceMaterialAndConfidence_Type SurfaceMaterialAndConfidence::RECYCLING;
const SurfaceMaterialAndConfidence_Type SurfaceMaterialAndConfidence::GRAVEL;
const SurfaceMaterialAndConfidence_Type SurfaceMaterialAndConfidence::COBBLESTONE;
const SurfaceMaterialAndConfidence_Type SurfaceMaterialAndConfidence::Type_MIN;
const SurfaceMaterialAndConfidence_Type SurfaceMaterialAndConfidence::Type_MAX;
const int SurfaceMaterialAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LaneBoundary_TypeAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_enum_descriptors[3];
}
bool LaneBoundary_TypeAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::UNKNOWN_TYPE;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::LINE;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::LINE_SINGLE;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::LINE_SINGLE_SOLID;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::LINE_SINGLE_DASHED;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::LINE_SINGLE_DASHED_SHORT;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::LINE_SINGLE_DASHED_LONG;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::LINE_DOUBLE;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::LINE_DOUBLE_SOLID;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::LINE_DOUBLE_DASHED;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::LINE_DOUBLE_SOLID_DASHED;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::LINE_DOUBLE_DASHED_SOLID;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::SHADED_AREA_MARKING;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::BLOCKS_DASHED;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::CROSSING_ALERT;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::CURB;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::CURB_TRAVERSABLE;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::CURB_NON_TRAVERSABLE;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::PHYSICAL_DIVIDER;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::WALL;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::WALL_FLAT;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::WALL_CURVED;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::BARRIER;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::BARRIER_JERSEY;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::BARRIER_SOUND;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::BARRIER_CABLE;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::GUARDRAIL;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::FENCE;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::ROAD_EDGE;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::CLIFF;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::DITCH;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::ASPHALT_JOINT;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::Type_MIN;
const LaneBoundary_TypeAndConfidence_Type LaneBoundary_TypeAndConfidence::Type_MAX;
const int LaneBoundary_TypeAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LaneBoundary_MarkingOffsets_TypeAndOffset_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_enum_descriptors[4];
}
bool LaneBoundary_MarkingOffsets_TypeAndOffset_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LaneBoundary_MarkingOffsets_TypeAndOffset_Type LaneBoundary_MarkingOffsets_TypeAndOffset::UNKNOWN_TYPE;
const LaneBoundary_MarkingOffsets_TypeAndOffset_Type LaneBoundary_MarkingOffsets_TypeAndOffset::START_OF_MARKING;
const LaneBoundary_MarkingOffsets_TypeAndOffset_Type LaneBoundary_MarkingOffsets_TypeAndOffset::END_OF_MARKING;
const LaneBoundary_MarkingOffsets_TypeAndOffset_Type LaneBoundary_MarkingOffsets_TypeAndOffset::ON_MARKING;
const LaneBoundary_MarkingOffsets_TypeAndOffset_Type LaneBoundary_MarkingOffsets_TypeAndOffset::NO_MARKING;
const LaneBoundary_MarkingOffsets_TypeAndOffset_Type LaneBoundary_MarkingOffsets_TypeAndOffset::Type_MIN;
const LaneBoundary_MarkingOffsets_TypeAndOffset_Type LaneBoundary_MarkingOffsets_TypeAndOffset::Type_MAX;
const int LaneBoundary_MarkingOffsets_TypeAndOffset::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LaneBoundary_PositionReference_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_enum_descriptors[5];
}
bool LaneBoundary_PositionReference_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LaneBoundary_PositionReference LaneBoundary::UNKNOWN_POSITION_REFERENCE;
const LaneBoundary_PositionReference LaneBoundary::LEFT_MARKING_BOUNDARY;
const LaneBoundary_PositionReference LaneBoundary::CENTER_LINE;
const LaneBoundary_PositionReference LaneBoundary::RIGHT_MARKING_BOUNDARY;
const LaneBoundary_PositionReference LaneBoundary::PositionReference_MIN;
const LaneBoundary_PositionReference LaneBoundary::PositionReference_MAX;
const int LaneBoundary::PositionReference_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LaneBoundaryMergeSplit_TypeAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_enum_descriptors[6];
}
bool LaneBoundaryMergeSplit_TypeAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LaneBoundaryMergeSplit_TypeAndConfidence_Type LaneBoundaryMergeSplit_TypeAndConfidence::UNKNOWN_TYPE;
const LaneBoundaryMergeSplit_TypeAndConfidence_Type LaneBoundaryMergeSplit_TypeAndConfidence::MERGE;
const LaneBoundaryMergeSplit_TypeAndConfidence_Type LaneBoundaryMergeSplit_TypeAndConfidence::SPLIT;
const LaneBoundaryMergeSplit_TypeAndConfidence_Type LaneBoundaryMergeSplit_TypeAndConfidence::Type_MIN;
const LaneBoundaryMergeSplit_TypeAndConfidence_Type LaneBoundaryMergeSplit_TypeAndConfidence::Type_MAX;
const int LaneBoundaryMergeSplit_TypeAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SurfaceMarking_TypeAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_enum_descriptors[7];
}
bool SurfaceMarking_TypeAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SurfaceMarking_TypeAndConfidence_Type SurfaceMarking_TypeAndConfidence::UNKNOWN_TYPE;
const SurfaceMarking_TypeAndConfidence_Type SurfaceMarking_TypeAndConfidence::SIGN;
const SurfaceMarking_TypeAndConfidence_Type SurfaceMarking_TypeAndConfidence::TEXT;
const SurfaceMarking_TypeAndConfidence_Type SurfaceMarking_TypeAndConfidence::ICON;
const SurfaceMarking_TypeAndConfidence_Type SurfaceMarking_TypeAndConfidence::PATTERN;
const SurfaceMarking_TypeAndConfidence_Type SurfaceMarking_TypeAndConfidence::PATTERN_CROSSWALK;
const SurfaceMarking_TypeAndConfidence_Type SurfaceMarking_TypeAndConfidence::LINE_ELEMENT;
const SurfaceMarking_TypeAndConfidence_Type SurfaceMarking_TypeAndConfidence::STOP_LINE;
const SurfaceMarking_TypeAndConfidence_Type SurfaceMarking_TypeAndConfidence::Type_MIN;
const SurfaceMarking_TypeAndConfidence_Type SurfaceMarking_TypeAndConfidence::Type_MAX;
const int SurfaceMarking_TypeAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RoadAttribution_TypeAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_enum_descriptors[8];
}
bool RoadAttribution_TypeAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::UNKNOWN_TYPE;
const RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::MOTORWAY;
const RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::ONE_WAY_TRAFFIC;
const RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::TWO_WAY_TRAFFIC;
const RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::OFFROAD;
const RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::TUNNEL;
const RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::BRIDGE;
const RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::ARTIFICIAL_ILLUMINATION;
const RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::ROAD_WORKS_NARROW_LANES;
const RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::LANE_RIGHT;
const RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::LANE_LEFT;
const RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::LANE_SPLIT_MIDDLE;
const RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::LANE_MERGE_MIDDLE;
const RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::CROSSWALK;
const RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::CENTER_TURN_LANE;
const RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::Type_MIN;
const RoadAttribution_TypeAndConfidence_Type RoadAttribution_TypeAndConfidence::Type_MAX;
const int RoadAttribution_TypeAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RoadAttribution_ChangeTypeAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_enum_descriptors[9];
}
bool RoadAttribution_ChangeTypeAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RoadAttribution_ChangeTypeAndConfidence_Type RoadAttribution_ChangeTypeAndConfidence::UNKNOWN_TYPE;
const RoadAttribution_ChangeTypeAndConfidence_Type RoadAttribution_ChangeTypeAndConfidence::DETECTED;
const RoadAttribution_ChangeTypeAndConfidence_Type RoadAttribution_ChangeTypeAndConfidence::START;
const RoadAttribution_ChangeTypeAndConfidence_Type RoadAttribution_ChangeTypeAndConfidence::END;
const RoadAttribution_ChangeTypeAndConfidence_Type RoadAttribution_ChangeTypeAndConfidence::Type_MIN;
const RoadAttribution_ChangeTypeAndConfidence_Type RoadAttribution_ChangeTypeAndConfidence::Type_MAX;
const int RoadAttribution_ChangeTypeAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LaneCountAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_enum_descriptors[10];
}
bool LaneCountAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LaneCountAndConfidence_Type LaneCountAndConfidence::UNKNOWN_TYPE;
const LaneCountAndConfidence_Type LaneCountAndConfidence::TOTAL;
const LaneCountAndConfidence_Type LaneCountAndConfidence::LEFT_INCLUDING_EGO_LANE;
const LaneCountAndConfidence_Type LaneCountAndConfidence::RIGHT;
const LaneCountAndConfidence_Type LaneCountAndConfidence::Type_MIN;
const LaneCountAndConfidence_Type LaneCountAndConfidence::Type_MAX;
const int LaneCountAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void MarkingColorAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::roadattribution::_MarkingColorAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void MarkingColorAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence.confidence)
}
void MarkingColorAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarkingColorAndConfidence::kTypeFieldNumber;
const int MarkingColorAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkingColorAndConfidence::MarkingColorAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_MarkingColorAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
}
MarkingColorAndConfidence::MarkingColorAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_MarkingColorAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
}
MarkingColorAndConfidence::MarkingColorAndConfidence(const MarkingColorAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
}

void MarkingColorAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

MarkingColorAndConfidence::~MarkingColorAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  SharedDtor();
}

void MarkingColorAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void MarkingColorAndConfidence::ArenaDtor(void* object) {
  MarkingColorAndConfidence* _this = reinterpret_cast< MarkingColorAndConfidence* >(object);
  (void)_this;
}
void MarkingColorAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MarkingColorAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarkingColorAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarkingColorAndConfidence& MarkingColorAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_MarkingColorAndConfidence.base);
  return *internal_default_instance();
}


void MarkingColorAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool MarkingColorAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  return false;
#undef DO_
}

void MarkingColorAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
}

::google::protobuf::uint8* MarkingColorAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  return target;
}

size_t MarkingColorAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarkingColorAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const MarkingColorAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarkingColorAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
    MergeFrom(*source);
  }
}

void MarkingColorAndConfidence::MergeFrom(const MarkingColorAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void MarkingColorAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkingColorAndConfidence::CopyFrom(const MarkingColorAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkingColorAndConfidence::IsInitialized() const {
  return true;
}

void MarkingColorAndConfidence::Swap(MarkingColorAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MarkingColorAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MarkingColorAndConfidence::UnsafeArenaSwap(MarkingColorAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MarkingColorAndConfidence::InternalSwap(MarkingColorAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarkingColorAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarkingMaterialAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::roadattribution::_MarkingMaterialAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void MarkingMaterialAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence.confidence)
}
void MarkingMaterialAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarkingMaterialAndConfidence::kTypeFieldNumber;
const int MarkingMaterialAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarkingMaterialAndConfidence::MarkingMaterialAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_MarkingMaterialAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
}
MarkingMaterialAndConfidence::MarkingMaterialAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_MarkingMaterialAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
}
MarkingMaterialAndConfidence::MarkingMaterialAndConfidence(const MarkingMaterialAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
}

void MarkingMaterialAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

MarkingMaterialAndConfidence::~MarkingMaterialAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  SharedDtor();
}

void MarkingMaterialAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void MarkingMaterialAndConfidence::ArenaDtor(void* object) {
  MarkingMaterialAndConfidence* _this = reinterpret_cast< MarkingMaterialAndConfidence* >(object);
  (void)_this;
}
void MarkingMaterialAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MarkingMaterialAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarkingMaterialAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarkingMaterialAndConfidence& MarkingMaterialAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_MarkingMaterialAndConfidence.base);
  return *internal_default_instance();
}


void MarkingMaterialAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool MarkingMaterialAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  return false;
#undef DO_
}

void MarkingMaterialAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
}

::google::protobuf::uint8* MarkingMaterialAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  return target;
}

size_t MarkingMaterialAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarkingMaterialAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const MarkingMaterialAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarkingMaterialAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
    MergeFrom(*source);
  }
}

void MarkingMaterialAndConfidence::MergeFrom(const MarkingMaterialAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void MarkingMaterialAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkingMaterialAndConfidence::CopyFrom(const MarkingMaterialAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkingMaterialAndConfidence::IsInitialized() const {
  return true;
}

void MarkingMaterialAndConfidence::Swap(MarkingMaterialAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MarkingMaterialAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MarkingMaterialAndConfidence::UnsafeArenaSwap(MarkingMaterialAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MarkingMaterialAndConfidence::InternalSwap(MarkingMaterialAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarkingMaterialAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SurfaceMaterialAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::roadattribution::_SurfaceMaterialAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void SurfaceMaterialAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence.confidence)
}
void SurfaceMaterialAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SurfaceMaterialAndConfidence::kTypeFieldNumber;
const int SurfaceMaterialAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SurfaceMaterialAndConfidence::SurfaceMaterialAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_SurfaceMaterialAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
}
SurfaceMaterialAndConfidence::SurfaceMaterialAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_SurfaceMaterialAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
}
SurfaceMaterialAndConfidence::SurfaceMaterialAndConfidence(const SurfaceMaterialAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
}

void SurfaceMaterialAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

SurfaceMaterialAndConfidence::~SurfaceMaterialAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  SharedDtor();
}

void SurfaceMaterialAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void SurfaceMaterialAndConfidence::ArenaDtor(void* object) {
  SurfaceMaterialAndConfidence* _this = reinterpret_cast< SurfaceMaterialAndConfidence* >(object);
  (void)_this;
}
void SurfaceMaterialAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SurfaceMaterialAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SurfaceMaterialAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SurfaceMaterialAndConfidence& SurfaceMaterialAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_SurfaceMaterialAndConfidence.base);
  return *internal_default_instance();
}


void SurfaceMaterialAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool SurfaceMaterialAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  return false;
#undef DO_
}

void SurfaceMaterialAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
}

::google::protobuf::uint8* SurfaceMaterialAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  return target;
}

size_t SurfaceMaterialAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurfaceMaterialAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const SurfaceMaterialAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SurfaceMaterialAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
    MergeFrom(*source);
  }
}

void SurfaceMaterialAndConfidence::MergeFrom(const SurfaceMaterialAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SurfaceMaterialAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SurfaceMaterialAndConfidence::CopyFrom(const SurfaceMaterialAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceMaterialAndConfidence::IsInitialized() const {
  return true;
}

void SurfaceMaterialAndConfidence::Swap(SurfaceMaterialAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SurfaceMaterialAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SurfaceMaterialAndConfidence::UnsafeArenaSwap(SurfaceMaterialAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SurfaceMaterialAndConfidence::InternalSwap(SurfaceMaterialAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SurfaceMaterialAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InclinationAndCurvature::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::roadattribution::_InclinationAndCurvature_default_instance_._instance.get_mutable()->longitudinal_inclination_and_accuracy_ = const_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_InclinationAndCurvature_default_instance_._instance.get_mutable()->lateral_inclination_and_accuracy_ = const_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_InclinationAndCurvature_default_instance_._instance.get_mutable()->horizontal_curvature_and_accuracy_ = const_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy::internal_default_instance());
}
void InclinationAndCurvature::unsafe_arena_set_allocated_longitudinal_inclination_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* longitudinal_inclination_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete longitudinal_inclination_and_accuracy_;
  }
  longitudinal_inclination_and_accuracy_ = longitudinal_inclination_and_accuracy;
  if (longitudinal_inclination_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature.longitudinal_inclination_and_accuracy)
}
void InclinationAndCurvature::clear_longitudinal_inclination_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && longitudinal_inclination_and_accuracy_ != NULL) {
    delete longitudinal_inclination_and_accuracy_;
  }
  longitudinal_inclination_and_accuracy_ = NULL;
}
void InclinationAndCurvature::unsafe_arena_set_allocated_lateral_inclination_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* lateral_inclination_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete lateral_inclination_and_accuracy_;
  }
  lateral_inclination_and_accuracy_ = lateral_inclination_and_accuracy;
  if (lateral_inclination_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature.lateral_inclination_and_accuracy)
}
void InclinationAndCurvature::clear_lateral_inclination_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && lateral_inclination_and_accuracy_ != NULL) {
    delete lateral_inclination_and_accuracy_;
  }
  lateral_inclination_and_accuracy_ = NULL;
}
void InclinationAndCurvature::unsafe_arena_set_allocated_horizontal_curvature_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* horizontal_curvature_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete horizontal_curvature_and_accuracy_;
  }
  horizontal_curvature_and_accuracy_ = horizontal_curvature_and_accuracy;
  if (horizontal_curvature_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature.horizontal_curvature_and_accuracy)
}
void InclinationAndCurvature::clear_horizontal_curvature_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && horizontal_curvature_and_accuracy_ != NULL) {
    delete horizontal_curvature_and_accuracy_;
  }
  horizontal_curvature_and_accuracy_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InclinationAndCurvature::kLongitudinalInclinationAndAccuracyFieldNumber;
const int InclinationAndCurvature::kLateralInclinationAndAccuracyFieldNumber;
const int InclinationAndCurvature::kHorizontalCurvatureAndAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InclinationAndCurvature::InclinationAndCurvature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_InclinationAndCurvature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
}
InclinationAndCurvature::InclinationAndCurvature(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_InclinationAndCurvature.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
}
InclinationAndCurvature::InclinationAndCurvature(const InclinationAndCurvature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_longitudinal_inclination_and_accuracy()) {
    longitudinal_inclination_and_accuracy_ = new ::sensoris::protobuf::types::base::Int64ValueAndAccuracy(*from.longitudinal_inclination_and_accuracy_);
  } else {
    longitudinal_inclination_and_accuracy_ = NULL;
  }
  if (from.has_lateral_inclination_and_accuracy()) {
    lateral_inclination_and_accuracy_ = new ::sensoris::protobuf::types::base::Int64ValueAndAccuracy(*from.lateral_inclination_and_accuracy_);
  } else {
    lateral_inclination_and_accuracy_ = NULL;
  }
  if (from.has_horizontal_curvature_and_accuracy()) {
    horizontal_curvature_and_accuracy_ = new ::sensoris::protobuf::types::base::Int64ValueAndAccuracy(*from.horizontal_curvature_and_accuracy_);
  } else {
    horizontal_curvature_and_accuracy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
}

void InclinationAndCurvature::SharedCtor() {
  ::memset(&longitudinal_inclination_and_accuracy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&horizontal_curvature_and_accuracy_) -
      reinterpret_cast<char*>(&longitudinal_inclination_and_accuracy_)) + sizeof(horizontal_curvature_and_accuracy_));
}

InclinationAndCurvature::~InclinationAndCurvature() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  SharedDtor();
}

void InclinationAndCurvature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete longitudinal_inclination_and_accuracy_;
  if (this != internal_default_instance()) delete lateral_inclination_and_accuracy_;
  if (this != internal_default_instance()) delete horizontal_curvature_and_accuracy_;
}

void InclinationAndCurvature::ArenaDtor(void* object) {
  InclinationAndCurvature* _this = reinterpret_cast< InclinationAndCurvature* >(object);
  (void)_this;
}
void InclinationAndCurvature::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void InclinationAndCurvature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InclinationAndCurvature::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InclinationAndCurvature& InclinationAndCurvature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_InclinationAndCurvature.base);
  return *internal_default_instance();
}


void InclinationAndCurvature::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && longitudinal_inclination_and_accuracy_ != NULL) {
    delete longitudinal_inclination_and_accuracy_;
  }
  longitudinal_inclination_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && lateral_inclination_and_accuracy_ != NULL) {
    delete lateral_inclination_and_accuracy_;
  }
  lateral_inclination_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && horizontal_curvature_and_accuracy_ != NULL) {
    delete horizontal_curvature_and_accuracy_;
  }
  horizontal_curvature_and_accuracy_ = NULL;
  _internal_metadata_.Clear();
}

bool InclinationAndCurvature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_longitudinal_inclination_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lateral_inclination_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_horizontal_curvature_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  return false;
#undef DO_
}

void InclinationAndCurvature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_longitudinal_inclination_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_longitudinal_inclination_and_accuracy(), output);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_lateral_inclination_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_lateral_inclination_and_accuracy(), output);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
  if (this->has_horizontal_curvature_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_horizontal_curvature_and_accuracy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
}

::google::protobuf::uint8* InclinationAndCurvature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_longitudinal_inclination_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_longitudinal_inclination_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_lateral_inclination_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_lateral_inclination_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
  if (this->has_horizontal_curvature_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_horizontal_curvature_and_accuracy(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  return target;
}

size_t InclinationAndCurvature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy longitudinal_inclination_and_accuracy = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_longitudinal_inclination_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *longitudinal_inclination_and_accuracy_);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy lateral_inclination_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_lateral_inclination_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lateral_inclination_and_accuracy_);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy horizontal_curvature_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
  if (this->has_horizontal_curvature_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *horizontal_curvature_and_accuracy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InclinationAndCurvature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  GOOGLE_DCHECK_NE(&from, this);
  const InclinationAndCurvature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InclinationAndCurvature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
    MergeFrom(*source);
  }
}

void InclinationAndCurvature::MergeFrom(const InclinationAndCurvature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_longitudinal_inclination_and_accuracy()) {
    mutable_longitudinal_inclination_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.longitudinal_inclination_and_accuracy());
  }
  if (from.has_lateral_inclination_and_accuracy()) {
    mutable_lateral_inclination_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.lateral_inclination_and_accuracy());
  }
  if (from.has_horizontal_curvature_and_accuracy()) {
    mutable_horizontal_curvature_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.horizontal_curvature_and_accuracy());
  }
}

void InclinationAndCurvature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InclinationAndCurvature::CopyFrom(const InclinationAndCurvature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.InclinationAndCurvature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InclinationAndCurvature::IsInitialized() const {
  return true;
}

void InclinationAndCurvature::Swap(InclinationAndCurvature* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    InclinationAndCurvature* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void InclinationAndCurvature::UnsafeArenaSwap(InclinationAndCurvature* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void InclinationAndCurvature::InternalSwap(InclinationAndCurvature* other) {
  using std::swap;
  swap(longitudinal_inclination_and_accuracy_, other->longitudinal_inclination_and_accuracy_);
  swap(lateral_inclination_and_accuracy_, other->lateral_inclination_and_accuracy_);
  swap(horizontal_curvature_and_accuracy_, other->horizontal_curvature_and_accuracy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InclinationAndCurvature::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneBoundary_TypeAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::roadattribution::_LaneBoundary_TypeAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void LaneBoundary_TypeAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.confidence)
}
void LaneBoundary_TypeAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneBoundary_TypeAndConfidence::kTypeFieldNumber;
const int LaneBoundary_TypeAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneBoundary_TypeAndConfidence::LaneBoundary_TypeAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundary_TypeAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
}
LaneBoundary_TypeAndConfidence::LaneBoundary_TypeAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundary_TypeAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
}
LaneBoundary_TypeAndConfidence::LaneBoundary_TypeAndConfidence(const LaneBoundary_TypeAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
}

void LaneBoundary_TypeAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

LaneBoundary_TypeAndConfidence::~LaneBoundary_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  SharedDtor();
}

void LaneBoundary_TypeAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void LaneBoundary_TypeAndConfidence::ArenaDtor(void* object) {
  LaneBoundary_TypeAndConfidence* _this = reinterpret_cast< LaneBoundary_TypeAndConfidence* >(object);
  (void)_this;
}
void LaneBoundary_TypeAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LaneBoundary_TypeAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneBoundary_TypeAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneBoundary_TypeAndConfidence& LaneBoundary_TypeAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundary_TypeAndConfidence.base);
  return *internal_default_instance();
}


void LaneBoundary_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool LaneBoundary_TypeAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  return false;
#undef DO_
}

void LaneBoundary_TypeAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
}

::google::protobuf::uint8* LaneBoundary_TypeAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  return target;
}

size_t LaneBoundary_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneBoundary_TypeAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneBoundary_TypeAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneBoundary_TypeAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
    MergeFrom(*source);
  }
}

void LaneBoundary_TypeAndConfidence::MergeFrom(const LaneBoundary_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void LaneBoundary_TypeAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneBoundary_TypeAndConfidence::CopyFrom(const LaneBoundary_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundary_TypeAndConfidence::IsInitialized() const {
  return true;
}

void LaneBoundary_TypeAndConfidence::Swap(LaneBoundary_TypeAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LaneBoundary_TypeAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LaneBoundary_TypeAndConfidence::UnsafeArenaSwap(LaneBoundary_TypeAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LaneBoundary_TypeAndConfidence::InternalSwap(LaneBoundary_TypeAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneBoundary_TypeAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneBoundary_DashStatistics::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::roadattribution::_LaneBoundary_DashStatistics_default_instance_._instance.get_mutable()->length_and_accuracy_ = const_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_LaneBoundary_DashStatistics_default_instance_._instance.get_mutable()->distance_and_accuracy_ = const_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy::internal_default_instance());
}
void LaneBoundary_DashStatistics::unsafe_arena_set_allocated_length_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* length_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete length_and_accuracy_;
  }
  length_and_accuracy_ = length_and_accuracy;
  if (length_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics.length_and_accuracy)
}
void LaneBoundary_DashStatistics::clear_length_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && length_and_accuracy_ != NULL) {
    delete length_and_accuracy_;
  }
  length_and_accuracy_ = NULL;
}
void LaneBoundary_DashStatistics::unsafe_arena_set_allocated_distance_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* distance_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete distance_and_accuracy_;
  }
  distance_and_accuracy_ = distance_and_accuracy;
  if (distance_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics.distance_and_accuracy)
}
void LaneBoundary_DashStatistics::clear_distance_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && distance_and_accuracy_ != NULL) {
    delete distance_and_accuracy_;
  }
  distance_and_accuracy_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneBoundary_DashStatistics::kLengthAndAccuracyFieldNumber;
const int LaneBoundary_DashStatistics::kDistanceAndAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneBoundary_DashStatistics::LaneBoundary_DashStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundary_DashStatistics.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
}
LaneBoundary_DashStatistics::LaneBoundary_DashStatistics(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundary_DashStatistics.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
}
LaneBoundary_DashStatistics::LaneBoundary_DashStatistics(const LaneBoundary_DashStatistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_length_and_accuracy()) {
    length_and_accuracy_ = new ::sensoris::protobuf::types::base::Int64ValueAndAccuracy(*from.length_and_accuracy_);
  } else {
    length_and_accuracy_ = NULL;
  }
  if (from.has_distance_and_accuracy()) {
    distance_and_accuracy_ = new ::sensoris::protobuf::types::base::Int64ValueAndAccuracy(*from.distance_and_accuracy_);
  } else {
    distance_and_accuracy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
}

void LaneBoundary_DashStatistics::SharedCtor() {
  ::memset(&length_and_accuracy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_and_accuracy_) -
      reinterpret_cast<char*>(&length_and_accuracy_)) + sizeof(distance_and_accuracy_));
}

LaneBoundary_DashStatistics::~LaneBoundary_DashStatistics() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  SharedDtor();
}

void LaneBoundary_DashStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete length_and_accuracy_;
  if (this != internal_default_instance()) delete distance_and_accuracy_;
}

void LaneBoundary_DashStatistics::ArenaDtor(void* object) {
  LaneBoundary_DashStatistics* _this = reinterpret_cast< LaneBoundary_DashStatistics* >(object);
  (void)_this;
}
void LaneBoundary_DashStatistics::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LaneBoundary_DashStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneBoundary_DashStatistics::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneBoundary_DashStatistics& LaneBoundary_DashStatistics::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundary_DashStatistics.base);
  return *internal_default_instance();
}


void LaneBoundary_DashStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && length_and_accuracy_ != NULL) {
    delete length_and_accuracy_;
  }
  length_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && distance_and_accuracy_ != NULL) {
    delete distance_and_accuracy_;
  }
  distance_and_accuracy_ = NULL;
  _internal_metadata_.Clear();
}

bool LaneBoundary_DashStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_length_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_distance_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  return false;
#undef DO_
}

void LaneBoundary_DashStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_length_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_length_and_accuracy(), output);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_distance_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_distance_and_accuracy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
}

::google::protobuf::uint8* LaneBoundary_DashStatistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_length_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_length_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_distance_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_distance_and_accuracy(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  return target;
}

size_t LaneBoundary_DashStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy length_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_length_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *length_and_accuracy_);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_distance_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *distance_and_accuracy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneBoundary_DashStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneBoundary_DashStatistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneBoundary_DashStatistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
    MergeFrom(*source);
  }
}

void LaneBoundary_DashStatistics::MergeFrom(const LaneBoundary_DashStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_length_and_accuracy()) {
    mutable_length_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.length_and_accuracy());
  }
  if (from.has_distance_and_accuracy()) {
    mutable_distance_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.distance_and_accuracy());
  }
}

void LaneBoundary_DashStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneBoundary_DashStatistics::CopyFrom(const LaneBoundary_DashStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundary_DashStatistics::IsInitialized() const {
  return true;
}

void LaneBoundary_DashStatistics::Swap(LaneBoundary_DashStatistics* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LaneBoundary_DashStatistics* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LaneBoundary_DashStatistics::UnsafeArenaSwap(LaneBoundary_DashStatistics* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LaneBoundary_DashStatistics::InternalSwap(LaneBoundary_DashStatistics* other) {
  using std::swap;
  swap(length_and_accuracy_, other->length_and_accuracy_);
  swap(distance_and_accuracy_, other->distance_and_accuracy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneBoundary_DashStatistics::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneBoundary_MarkingOffsets_TypeAndOffset::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::roadattribution::_LaneBoundary_MarkingOffsets_TypeAndOffset_default_instance_._instance.get_mutable()->offset_and_accuracy_ = const_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy::internal_default_instance());
}
void LaneBoundary_MarkingOffsets_TypeAndOffset::unsafe_arena_set_allocated_offset_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* offset_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete offset_and_accuracy_;
  }
  offset_and_accuracy_ = offset_and_accuracy;
  if (offset_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.offset_and_accuracy)
}
void LaneBoundary_MarkingOffsets_TypeAndOffset::clear_offset_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && offset_and_accuracy_ != NULL) {
    delete offset_and_accuracy_;
  }
  offset_and_accuracy_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneBoundary_MarkingOffsets_TypeAndOffset::kTypeFieldNumber;
const int LaneBoundary_MarkingOffsets_TypeAndOffset::kOffsetAndAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneBoundary_MarkingOffsets_TypeAndOffset::LaneBoundary_MarkingOffsets_TypeAndOffset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundary_MarkingOffsets_TypeAndOffset.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
}
LaneBoundary_MarkingOffsets_TypeAndOffset::LaneBoundary_MarkingOffsets_TypeAndOffset(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundary_MarkingOffsets_TypeAndOffset.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
}
LaneBoundary_MarkingOffsets_TypeAndOffset::LaneBoundary_MarkingOffsets_TypeAndOffset(const LaneBoundary_MarkingOffsets_TypeAndOffset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_offset_and_accuracy()) {
    offset_and_accuracy_ = new ::sensoris::protobuf::types::base::Int64ValueAndAccuracy(*from.offset_and_accuracy_);
  } else {
    offset_and_accuracy_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
}

void LaneBoundary_MarkingOffsets_TypeAndOffset::SharedCtor() {
  ::memset(&offset_and_accuracy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&offset_and_accuracy_)) + sizeof(type_));
}

LaneBoundary_MarkingOffsets_TypeAndOffset::~LaneBoundary_MarkingOffsets_TypeAndOffset() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  SharedDtor();
}

void LaneBoundary_MarkingOffsets_TypeAndOffset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete offset_and_accuracy_;
}

void LaneBoundary_MarkingOffsets_TypeAndOffset::ArenaDtor(void* object) {
  LaneBoundary_MarkingOffsets_TypeAndOffset* _this = reinterpret_cast< LaneBoundary_MarkingOffsets_TypeAndOffset* >(object);
  (void)_this;
}
void LaneBoundary_MarkingOffsets_TypeAndOffset::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LaneBoundary_MarkingOffsets_TypeAndOffset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneBoundary_MarkingOffsets_TypeAndOffset::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneBoundary_MarkingOffsets_TypeAndOffset& LaneBoundary_MarkingOffsets_TypeAndOffset::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundary_MarkingOffsets_TypeAndOffset.base);
  return *internal_default_instance();
}


void LaneBoundary_MarkingOffsets_TypeAndOffset::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && offset_and_accuracy_ != NULL) {
    delete offset_and_accuracy_;
  }
  offset_and_accuracy_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool LaneBoundary_MarkingOffsets_TypeAndOffset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_offset_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  return false;
#undef DO_
}

void LaneBoundary_MarkingOffsets_TypeAndOffset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_offset_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_offset_and_accuracy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
}

::google::protobuf::uint8* LaneBoundary_MarkingOffsets_TypeAndOffset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_offset_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_offset_and_accuracy(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  return target;
}

size_t LaneBoundary_MarkingOffsets_TypeAndOffset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy offset_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_offset_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *offset_and_accuracy_);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneBoundary_MarkingOffsets_TypeAndOffset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneBoundary_MarkingOffsets_TypeAndOffset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneBoundary_MarkingOffsets_TypeAndOffset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
    MergeFrom(*source);
  }
}

void LaneBoundary_MarkingOffsets_TypeAndOffset::MergeFrom(const LaneBoundary_MarkingOffsets_TypeAndOffset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_offset_and_accuracy()) {
    mutable_offset_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.offset_and_accuracy());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void LaneBoundary_MarkingOffsets_TypeAndOffset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneBoundary_MarkingOffsets_TypeAndOffset::CopyFrom(const LaneBoundary_MarkingOffsets_TypeAndOffset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundary_MarkingOffsets_TypeAndOffset::IsInitialized() const {
  return true;
}

void LaneBoundary_MarkingOffsets_TypeAndOffset::Swap(LaneBoundary_MarkingOffsets_TypeAndOffset* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LaneBoundary_MarkingOffsets_TypeAndOffset* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LaneBoundary_MarkingOffsets_TypeAndOffset::UnsafeArenaSwap(LaneBoundary_MarkingOffsets_TypeAndOffset* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LaneBoundary_MarkingOffsets_TypeAndOffset::InternalSwap(LaneBoundary_MarkingOffsets_TypeAndOffset* other) {
  using std::swap;
  swap(offset_and_accuracy_, other->offset_and_accuracy_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneBoundary_MarkingOffsets_TypeAndOffset::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneBoundary_MarkingOffsets::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneBoundary_MarkingOffsets::kTypeAndOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneBoundary_MarkingOffsets::LaneBoundary_MarkingOffsets()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundary_MarkingOffsets.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
}
LaneBoundary_MarkingOffsets::LaneBoundary_MarkingOffsets(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  type_and_offset_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundary_MarkingOffsets.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
}
LaneBoundary_MarkingOffsets::LaneBoundary_MarkingOffsets(const LaneBoundary_MarkingOffsets& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      type_and_offset_(from.type_and_offset_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
}

void LaneBoundary_MarkingOffsets::SharedCtor() {
}

LaneBoundary_MarkingOffsets::~LaneBoundary_MarkingOffsets() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  SharedDtor();
}

void LaneBoundary_MarkingOffsets::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void LaneBoundary_MarkingOffsets::ArenaDtor(void* object) {
  LaneBoundary_MarkingOffsets* _this = reinterpret_cast< LaneBoundary_MarkingOffsets* >(object);
  (void)_this;
}
void LaneBoundary_MarkingOffsets::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LaneBoundary_MarkingOffsets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneBoundary_MarkingOffsets::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneBoundary_MarkingOffsets& LaneBoundary_MarkingOffsets::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundary_MarkingOffsets.base);
  return *internal_default_instance();
}


void LaneBoundary_MarkingOffsets::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_and_offset_.Clear();
  _internal_metadata_.Clear();
}

bool LaneBoundary_MarkingOffsets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_type_and_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  return false;
#undef DO_
}

void LaneBoundary_MarkingOffsets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->type_and_offset_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->type_and_offset(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
}

::google::protobuf::uint8* LaneBoundary_MarkingOffsets::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->type_and_offset_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->type_and_offset(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  return target;
}

size_t LaneBoundary_MarkingOffsets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets.TypeAndOffset type_and_offset = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->type_and_offset_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->type_and_offset(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneBoundary_MarkingOffsets::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneBoundary_MarkingOffsets* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneBoundary_MarkingOffsets>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
    MergeFrom(*source);
  }
}

void LaneBoundary_MarkingOffsets::MergeFrom(const LaneBoundary_MarkingOffsets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  type_and_offset_.MergeFrom(from.type_and_offset_);
}

void LaneBoundary_MarkingOffsets::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneBoundary_MarkingOffsets::CopyFrom(const LaneBoundary_MarkingOffsets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundary_MarkingOffsets::IsInitialized() const {
  return true;
}

void LaneBoundary_MarkingOffsets::Swap(LaneBoundary_MarkingOffsets* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LaneBoundary_MarkingOffsets* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LaneBoundary_MarkingOffsets::UnsafeArenaSwap(LaneBoundary_MarkingOffsets* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LaneBoundary_MarkingOffsets::InternalSwap(LaneBoundary_MarkingOffsets* other) {
  using std::swap;
  CastToBase(&type_and_offset_)->InternalSwap(CastToBase(&other->type_and_offset_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneBoundary_MarkingOffsets::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneBoundary::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::roadattribution::_LaneBoundary_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_LaneBoundary_default_instance_._instance.get_mutable()->lane_boundary_id_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_LaneBoundary_default_instance_._instance.get_mutable()->existence_confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_LaneBoundary_default_instance_._instance.get_mutable()->detection_status_ = const_cast< ::sensoris::protobuf::types::base::EventDetectionStatus*>(
      ::sensoris::protobuf::types::base::EventDetectionStatus::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_LaneBoundary_default_instance_._instance.get_mutable()->type_and_confidence_ = const_cast< ::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence*>(
      ::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_LaneBoundary_default_instance_._instance.get_mutable()->material_and_confidence_ = const_cast< ::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence*>(
      ::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_LaneBoundary_default_instance_._instance.get_mutable()->color_and_confidence_ = const_cast< ::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence*>(
      ::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_LaneBoundary_default_instance_.polyline_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::PolylineAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::PolylineAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_LaneBoundary_default_instance_._instance.get_mutable()->width_and_accuracy_ = const_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_LaneBoundary_default_instance_._instance.get_mutable()->height_and_accuracy_ = const_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_LaneBoundary_default_instance_._instance.get_mutable()->distance_between_double_and_accuracy_ = const_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_LaneBoundary_default_instance_.dash_statistics_ = const_cast< ::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics*>(
      ::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_LaneBoundary_default_instance_.marking_offsets_ = const_cast< ::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets*>(
      ::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets::internal_default_instance());
}
void LaneBoundary::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundary.envelope)
}
void LaneBoundary::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void LaneBoundary::unsafe_arena_set_allocated_lane_boundary_id(
    ::google::protobuf::Int64Value* lane_boundary_id) {
  if (GetArenaNoVirtual() == NULL) {
    delete lane_boundary_id_;
  }
  lane_boundary_id_ = lane_boundary_id;
  if (lane_boundary_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundary.lane_boundary_id)
}
void LaneBoundary::clear_lane_boundary_id() {
  if (GetArenaNoVirtual() == NULL && lane_boundary_id_ != NULL) {
    delete lane_boundary_id_;
  }
  lane_boundary_id_ = NULL;
}
void LaneBoundary::unsafe_arena_set_allocated_existence_confidence(
    ::sensoris::protobuf::types::base::Confidence* existence_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete existence_confidence_;
  }
  existence_confidence_ = existence_confidence;
  if (existence_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundary.existence_confidence)
}
void LaneBoundary::clear_existence_confidence() {
  if (GetArenaNoVirtual() == NULL && existence_confidence_ != NULL) {
    delete existence_confidence_;
  }
  existence_confidence_ = NULL;
}
void LaneBoundary::unsafe_arena_set_allocated_detection_status(
    ::sensoris::protobuf::types::base::EventDetectionStatus* detection_status) {
  if (GetArenaNoVirtual() == NULL) {
    delete detection_status_;
  }
  detection_status_ = detection_status;
  if (detection_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundary.detection_status)
}
void LaneBoundary::clear_detection_status() {
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
}
void LaneBoundary::unsafe_arena_set_allocated_type_and_confidence(
    ::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence* type_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = type_and_confidence;
  if (type_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundary.type_and_confidence)
}
void LaneBoundary::unsafe_arena_set_allocated_material_and_confidence(
    ::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence* material_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete material_and_confidence_;
  }
  material_and_confidence_ = material_and_confidence;
  if (material_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundary.material_and_confidence)
}
void LaneBoundary::unsafe_arena_set_allocated_color_and_confidence(
    ::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence* color_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete color_and_confidence_;
  }
  color_and_confidence_ = color_and_confidence;
  if (color_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundary.color_and_confidence)
}
void LaneBoundary::set_allocated_polyline_and_accuracy(::sensoris::protobuf::types::spatial::PolylineAndAccuracy* polyline_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_geometry();
  if (polyline_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(polyline_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      polyline_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, polyline_and_accuracy, submessage_arena);
    }
    set_has_polyline_and_accuracy();
    geometry_.polyline_and_accuracy_ = polyline_and_accuracy;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundary.polyline_and_accuracy)
}
void LaneBoundary::clear_polyline_and_accuracy() {
  if (has_polyline_and_accuracy()) {
    if (GetArenaNoVirtual() == NULL) {
      delete geometry_.polyline_and_accuracy_;
    }
    clear_has_geometry();
  }
}
void LaneBoundary::unsafe_arena_set_allocated_width_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* width_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete width_and_accuracy_;
  }
  width_and_accuracy_ = width_and_accuracy;
  if (width_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundary.width_and_accuracy)
}
void LaneBoundary::clear_width_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && width_and_accuracy_ != NULL) {
    delete width_and_accuracy_;
  }
  width_and_accuracy_ = NULL;
}
void LaneBoundary::unsafe_arena_set_allocated_height_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* height_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete height_and_accuracy_;
  }
  height_and_accuracy_ = height_and_accuracy;
  if (height_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundary.height_and_accuracy)
}
void LaneBoundary::clear_height_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && height_and_accuracy_ != NULL) {
    delete height_and_accuracy_;
  }
  height_and_accuracy_ = NULL;
}
void LaneBoundary::unsafe_arena_set_allocated_distance_between_double_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* distance_between_double_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete distance_between_double_and_accuracy_;
  }
  distance_between_double_and_accuracy_ = distance_between_double_and_accuracy;
  if (distance_between_double_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundary.distance_between_double_and_accuracy)
}
void LaneBoundary::clear_distance_between_double_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && distance_between_double_and_accuracy_ != NULL) {
    delete distance_between_double_and_accuracy_;
  }
  distance_between_double_and_accuracy_ = NULL;
}
void LaneBoundary::set_allocated_dash_statistics(::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics* dash_statistics) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_markings();
  if (dash_statistics) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(dash_statistics);
    if (message_arena != submessage_arena) {
      dash_statistics = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dash_statistics, submessage_arena);
    }
    set_has_dash_statistics();
    markings_.dash_statistics_ = dash_statistics;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundary.dash_statistics)
}
void LaneBoundary::set_allocated_marking_offsets(::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets* marking_offsets) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_markings();
  if (marking_offsets) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(marking_offsets);
    if (message_arena != submessage_arena) {
      marking_offsets = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, marking_offsets, submessage_arena);
    }
    set_has_marking_offsets();
    markings_.marking_offsets_ = marking_offsets;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundary.marking_offsets)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneBoundary::kEnvelopeFieldNumber;
const int LaneBoundary::kLaneBoundaryIdFieldNumber;
const int LaneBoundary::kExistenceConfidenceFieldNumber;
const int LaneBoundary::kDetectionStatusFieldNumber;
const int LaneBoundary::kTypeAndConfidenceFieldNumber;
const int LaneBoundary::kMaterialAndConfidenceFieldNumber;
const int LaneBoundary::kColorAndConfidenceFieldNumber;
const int LaneBoundary::kPositionReferenceFieldNumber;
const int LaneBoundary::kPolylineAndAccuracyFieldNumber;
const int LaneBoundary::kWidthAndAccuracyFieldNumber;
const int LaneBoundary::kHeightAndAccuracyFieldNumber;
const int LaneBoundary::kDistanceBetweenDoubleAndAccuracyFieldNumber;
const int LaneBoundary::kDashStatisticsFieldNumber;
const int LaneBoundary::kMarkingOffsetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneBoundary::LaneBoundary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundary.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary)
}
LaneBoundary::LaneBoundary(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundary.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary)
}
LaneBoundary::LaneBoundary(const LaneBoundary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_lane_boundary_id()) {
    lane_boundary_id_ = new ::google::protobuf::Int64Value(*from.lane_boundary_id_);
  } else {
    lane_boundary_id_ = NULL;
  }
  if (from.has_existence_confidence()) {
    existence_confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.existence_confidence_);
  } else {
    existence_confidence_ = NULL;
  }
  if (from.has_detection_status()) {
    detection_status_ = new ::sensoris::protobuf::types::base::EventDetectionStatus(*from.detection_status_);
  } else {
    detection_status_ = NULL;
  }
  if (from.has_type_and_confidence()) {
    type_and_confidence_ = new ::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence(*from.type_and_confidence_);
  } else {
    type_and_confidence_ = NULL;
  }
  if (from.has_material_and_confidence()) {
    material_and_confidence_ = new ::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence(*from.material_and_confidence_);
  } else {
    material_and_confidence_ = NULL;
  }
  if (from.has_color_and_confidence()) {
    color_and_confidence_ = new ::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence(*from.color_and_confidence_);
  } else {
    color_and_confidence_ = NULL;
  }
  if (from.has_width_and_accuracy()) {
    width_and_accuracy_ = new ::sensoris::protobuf::types::base::Int64ValueAndAccuracy(*from.width_and_accuracy_);
  } else {
    width_and_accuracy_ = NULL;
  }
  if (from.has_height_and_accuracy()) {
    height_and_accuracy_ = new ::sensoris::protobuf::types::base::Int64ValueAndAccuracy(*from.height_and_accuracy_);
  } else {
    height_and_accuracy_ = NULL;
  }
  if (from.has_distance_between_double_and_accuracy()) {
    distance_between_double_and_accuracy_ = new ::sensoris::protobuf::types::base::Int64ValueAndAccuracy(*from.distance_between_double_and_accuracy_);
  } else {
    distance_between_double_and_accuracy_ = NULL;
  }
  position_reference_ = from.position_reference_;
  clear_has_geometry();
  switch (from.geometry_case()) {
    case kPolylineAndAccuracy: {
      mutable_polyline_and_accuracy()->::sensoris::protobuf::types::spatial::PolylineAndAccuracy::MergeFrom(from.polyline_and_accuracy());
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  clear_has_markings();
  switch (from.markings_case()) {
    case kDashStatistics: {
      mutable_dash_statistics()->::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics::MergeFrom(from.dash_statistics());
      break;
    }
    case kMarkingOffsets: {
      mutable_marking_offsets()->::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets::MergeFrom(from.marking_offsets());
      break;
    }
    case MARKINGS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundary)
}

void LaneBoundary::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_reference_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(position_reference_));
  clear_has_geometry();
  clear_has_markings();
}

LaneBoundary::~LaneBoundary() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  SharedDtor();
}

void LaneBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete lane_boundary_id_;
  if (this != internal_default_instance()) delete existence_confidence_;
  if (this != internal_default_instance()) delete detection_status_;
  if (this != internal_default_instance()) delete type_and_confidence_;
  if (this != internal_default_instance()) delete material_and_confidence_;
  if (this != internal_default_instance()) delete color_and_confidence_;
  if (this != internal_default_instance()) delete width_and_accuracy_;
  if (this != internal_default_instance()) delete height_and_accuracy_;
  if (this != internal_default_instance()) delete distance_between_double_and_accuracy_;
  if (has_geometry()) {
    clear_geometry();
  }
  if (has_markings()) {
    clear_markings();
  }
}

void LaneBoundary::ArenaDtor(void* object) {
  LaneBoundary* _this = reinterpret_cast< LaneBoundary* >(object);
  (void)_this;
}
void LaneBoundary::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LaneBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneBoundary::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneBoundary& LaneBoundary::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundary.base);
  return *internal_default_instance();
}


void LaneBoundary::clear_geometry() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  switch (geometry_case()) {
    case kPolylineAndAccuracy: {
      if (GetArenaNoVirtual() == NULL) {
        delete geometry_.polyline_and_accuracy_;
      }
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GEOMETRY_NOT_SET;
}

void LaneBoundary::clear_markings() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  switch (markings_case()) {
    case kDashStatistics: {
      if (GetArenaNoVirtual() == NULL) {
        delete markings_.dash_statistics_;
      }
      break;
    }
    case kMarkingOffsets: {
      if (GetArenaNoVirtual() == NULL) {
        delete markings_.marking_offsets_;
      }
      break;
    }
    case MARKINGS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = MARKINGS_NOT_SET;
}


void LaneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && lane_boundary_id_ != NULL) {
    delete lane_boundary_id_;
  }
  lane_boundary_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && existence_confidence_ != NULL) {
    delete existence_confidence_;
  }
  existence_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && type_and_confidence_ != NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && material_and_confidence_ != NULL) {
    delete material_and_confidence_;
  }
  material_and_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && color_and_confidence_ != NULL) {
    delete color_and_confidence_;
  }
  color_and_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && width_and_accuracy_ != NULL) {
    delete width_and_accuracy_;
  }
  width_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && height_and_accuracy_ != NULL) {
    delete height_and_accuracy_;
  }
  height_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && distance_between_double_and_accuracy_ != NULL) {
    delete distance_between_double_and_accuracy_;
  }
  distance_between_double_and_accuracy_ = NULL;
  position_reference_ = 0;
  clear_geometry();
  clear_markings();
  _internal_metadata_.Clear();
}

bool LaneBoundary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value lane_boundary_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_boundary_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_existence_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detection_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_material_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.roadattribution.LaneBoundary.PositionReference position_reference = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_position_reference(static_cast< ::sensoris::protobuf::categories::roadattribution::LaneBoundary_PositionReference >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.PolylineAndAccuracy polyline_and_accuracy = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_polyline_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_width_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_height_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_distance_between_double_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics dash_statistics = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dash_statistics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets marking_offsets = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_marking_offsets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  return false;
#undef DO_
}

void LaneBoundary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .google.protobuf.Int64Value lane_boundary_id = 2;
  if (this->has_lane_boundary_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_lane_boundary_id(), output);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
  if (this->has_existence_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_existence_confidence(), output);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
  if (this->has_detection_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_detection_status(), output);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;
  if (this->has_type_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_type_and_confidence(), output);
  }

  // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;
  if (this->has_material_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_material_and_confidence(), output);
  }

  // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;
  if (this->has_color_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_color_and_confidence(), output);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.PositionReference position_reference = 8;
  if (this->position_reference() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->position_reference(), output);
  }

  // .sensoris.protobuf.types.spatial.PolylineAndAccuracy polyline_and_accuracy = 9;
  if (has_polyline_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_polyline_and_accuracy(), output);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_width_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_width_and_accuracy(), output);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_height_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_height_and_accuracy(), output);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_distance_between_double_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_distance_between_double_and_accuracy(), output);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics dash_statistics = 13;
  if (has_dash_statistics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_dash_statistics(), output);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets marking_offsets = 14;
  if (has_marking_offsets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_marking_offsets(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.roadattribution.LaneBoundary)
}

::google::protobuf::uint8* LaneBoundary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .google.protobuf.Int64Value lane_boundary_id = 2;
  if (this->has_lane_boundary_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_lane_boundary_id(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
  if (this->has_existence_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_existence_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
  if (this->has_detection_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_detection_status(), deterministic, target);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;
  if (this->has_type_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_type_and_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;
  if (this->has_material_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_material_and_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;
  if (this->has_color_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_color_and_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.PositionReference position_reference = 8;
  if (this->position_reference() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->position_reference(), target);
  }

  // .sensoris.protobuf.types.spatial.PolylineAndAccuracy polyline_and_accuracy = 9;
  if (has_polyline_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_polyline_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_width_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_width_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_height_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_height_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_distance_between_double_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_distance_between_double_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics dash_statistics = 13;
  if (has_dash_statistics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_dash_statistics(), deterministic, target);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets marking_offsets = 14;
  if (has_marking_offsets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_marking_offsets(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  return target;
}

size_t LaneBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .google.protobuf.Int64Value lane_boundary_id = 2;
  if (this->has_lane_boundary_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lane_boundary_id_);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
  if (this->has_existence_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *existence_confidence_);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
  if (this->has_detection_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *detection_status_);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.TypeAndConfidence type_and_confidence = 5;
  if (this->has_type_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *type_and_confidence_);
  }

  // .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 6;
  if (this->has_material_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *material_and_confidence_);
  }

  // .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 7;
  if (this->has_color_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *color_and_confidence_);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 10 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_width_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *width_and_accuracy_);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy height_and_accuracy = 11 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_height_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *height_and_accuracy_);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy distance_between_double_and_accuracy = 12 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_distance_between_double_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *distance_between_double_and_accuracy_);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundary.PositionReference position_reference = 8;
  if (this->position_reference() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position_reference());
  }

  switch (geometry_case()) {
    // .sensoris.protobuf.types.spatial.PolylineAndAccuracy polyline_and_accuracy = 9;
    case kPolylineAndAccuracy: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *geometry_.polyline_and_accuracy_);
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  switch (markings_case()) {
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.DashStatistics dash_statistics = 13;
    case kDashStatistics: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *markings_.dash_statistics_);
      break;
    }
    // .sensoris.protobuf.categories.roadattribution.LaneBoundary.MarkingOffsets marking_offsets = 14;
    case kMarkingOffsets: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *markings_.marking_offsets_);
      break;
    }
    case MARKINGS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneBoundary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneBoundary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneBoundary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.roadattribution.LaneBoundary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.roadattribution.LaneBoundary)
    MergeFrom(*source);
  }
}

void LaneBoundary::MergeFrom(const LaneBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_lane_boundary_id()) {
    mutable_lane_boundary_id()->::google::protobuf::Int64Value::MergeFrom(from.lane_boundary_id());
  }
  if (from.has_existence_confidence()) {
    mutable_existence_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.existence_confidence());
  }
  if (from.has_detection_status()) {
    mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(from.detection_status());
  }
  if (from.has_type_and_confidence()) {
    mutable_type_and_confidence()->::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence::MergeFrom(from.type_and_confidence());
  }
  if (from.has_material_and_confidence()) {
    mutable_material_and_confidence()->::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence::MergeFrom(from.material_and_confidence());
  }
  if (from.has_color_and_confidence()) {
    mutable_color_and_confidence()->::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence::MergeFrom(from.color_and_confidence());
  }
  if (from.has_width_and_accuracy()) {
    mutable_width_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.width_and_accuracy());
  }
  if (from.has_height_and_accuracy()) {
    mutable_height_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.height_and_accuracy());
  }
  if (from.has_distance_between_double_and_accuracy()) {
    mutable_distance_between_double_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.distance_between_double_and_accuracy());
  }
  if (from.position_reference() != 0) {
    set_position_reference(from.position_reference());
  }
  switch (from.geometry_case()) {
    case kPolylineAndAccuracy: {
      mutable_polyline_and_accuracy()->::sensoris::protobuf::types::spatial::PolylineAndAccuracy::MergeFrom(from.polyline_and_accuracy());
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  switch (from.markings_case()) {
    case kDashStatistics: {
      mutable_dash_statistics()->::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics::MergeFrom(from.dash_statistics());
      break;
    }
    case kMarkingOffsets: {
      mutable_marking_offsets()->::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets::MergeFrom(from.marking_offsets());
      break;
    }
    case MARKINGS_NOT_SET: {
      break;
    }
  }
}

void LaneBoundary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneBoundary::CopyFrom(const LaneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundary::IsInitialized() const {
  return true;
}

void LaneBoundary::Swap(LaneBoundary* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LaneBoundary* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LaneBoundary::UnsafeArenaSwap(LaneBoundary* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LaneBoundary::InternalSwap(LaneBoundary* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(lane_boundary_id_, other->lane_boundary_id_);
  swap(existence_confidence_, other->existence_confidence_);
  swap(detection_status_, other->detection_status_);
  swap(type_and_confidence_, other->type_and_confidence_);
  swap(material_and_confidence_, other->material_and_confidence_);
  swap(color_and_confidence_, other->color_and_confidence_);
  swap(width_and_accuracy_, other->width_and_accuracy_);
  swap(height_and_accuracy_, other->height_and_accuracy_);
  swap(distance_between_double_and_accuracy_, other->distance_between_double_and_accuracy_);
  swap(position_reference_, other->position_reference_);
  swap(geometry_, other->geometry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(markings_, other->markings_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneBoundary::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneBoundaryMergeSplit_TypeAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::roadattribution::_LaneBoundaryMergeSplit_TypeAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void LaneBoundaryMergeSplit_TypeAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence.confidence)
}
void LaneBoundaryMergeSplit_TypeAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneBoundaryMergeSplit_TypeAndConfidence::kTypeFieldNumber;
const int LaneBoundaryMergeSplit_TypeAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneBoundaryMergeSplit_TypeAndConfidence::LaneBoundaryMergeSplit_TypeAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundaryMergeSplit_TypeAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
}
LaneBoundaryMergeSplit_TypeAndConfidence::LaneBoundaryMergeSplit_TypeAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundaryMergeSplit_TypeAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
}
LaneBoundaryMergeSplit_TypeAndConfidence::LaneBoundaryMergeSplit_TypeAndConfidence(const LaneBoundaryMergeSplit_TypeAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
}

void LaneBoundaryMergeSplit_TypeAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

LaneBoundaryMergeSplit_TypeAndConfidence::~LaneBoundaryMergeSplit_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  SharedDtor();
}

void LaneBoundaryMergeSplit_TypeAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void LaneBoundaryMergeSplit_TypeAndConfidence::ArenaDtor(void* object) {
  LaneBoundaryMergeSplit_TypeAndConfidence* _this = reinterpret_cast< LaneBoundaryMergeSplit_TypeAndConfidence* >(object);
  (void)_this;
}
void LaneBoundaryMergeSplit_TypeAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LaneBoundaryMergeSplit_TypeAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneBoundaryMergeSplit_TypeAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneBoundaryMergeSplit_TypeAndConfidence& LaneBoundaryMergeSplit_TypeAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundaryMergeSplit_TypeAndConfidence.base);
  return *internal_default_instance();
}


void LaneBoundaryMergeSplit_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool LaneBoundaryMergeSplit_TypeAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  return false;
#undef DO_
}

void LaneBoundaryMergeSplit_TypeAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
}

::google::protobuf::uint8* LaneBoundaryMergeSplit_TypeAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  return target;
}

size_t LaneBoundaryMergeSplit_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneBoundaryMergeSplit_TypeAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneBoundaryMergeSplit_TypeAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneBoundaryMergeSplit_TypeAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
    MergeFrom(*source);
  }
}

void LaneBoundaryMergeSplit_TypeAndConfidence::MergeFrom(const LaneBoundaryMergeSplit_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void LaneBoundaryMergeSplit_TypeAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneBoundaryMergeSplit_TypeAndConfidence::CopyFrom(const LaneBoundaryMergeSplit_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundaryMergeSplit_TypeAndConfidence::IsInitialized() const {
  return true;
}

void LaneBoundaryMergeSplit_TypeAndConfidence::Swap(LaneBoundaryMergeSplit_TypeAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LaneBoundaryMergeSplit_TypeAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LaneBoundaryMergeSplit_TypeAndConfidence::UnsafeArenaSwap(LaneBoundaryMergeSplit_TypeAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LaneBoundaryMergeSplit_TypeAndConfidence::InternalSwap(LaneBoundaryMergeSplit_TypeAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneBoundaryMergeSplit_TypeAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneBoundaryMergeSplit::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::roadattribution::_LaneBoundaryMergeSplit_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_LaneBoundaryMergeSplit_default_instance_._instance.get_mutable()->existence_confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_LaneBoundaryMergeSplit_default_instance_._instance.get_mutable()->detection_status_ = const_cast< ::sensoris::protobuf::types::base::EventDetectionStatus*>(
      ::sensoris::protobuf::types::base::EventDetectionStatus::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_LaneBoundaryMergeSplit_default_instance_._instance.get_mutable()->type_and_confidence_ = const_cast< ::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence*>(
      ::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_LaneBoundaryMergeSplit_default_instance_._instance.get_mutable()->position_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::PositionAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::PositionAndAccuracy::internal_default_instance());
}
void LaneBoundaryMergeSplit::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.envelope)
}
void LaneBoundaryMergeSplit::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void LaneBoundaryMergeSplit::unsafe_arena_set_allocated_existence_confidence(
    ::sensoris::protobuf::types::base::Confidence* existence_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete existence_confidence_;
  }
  existence_confidence_ = existence_confidence;
  if (existence_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.existence_confidence)
}
void LaneBoundaryMergeSplit::clear_existence_confidence() {
  if (GetArenaNoVirtual() == NULL && existence_confidence_ != NULL) {
    delete existence_confidence_;
  }
  existence_confidence_ = NULL;
}
void LaneBoundaryMergeSplit::unsafe_arena_set_allocated_detection_status(
    ::sensoris::protobuf::types::base::EventDetectionStatus* detection_status) {
  if (GetArenaNoVirtual() == NULL) {
    delete detection_status_;
  }
  detection_status_ = detection_status;
  if (detection_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.detection_status)
}
void LaneBoundaryMergeSplit::clear_detection_status() {
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
}
void LaneBoundaryMergeSplit::unsafe_arena_set_allocated_type_and_confidence(
    ::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence* type_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = type_and_confidence;
  if (type_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.type_and_confidence)
}
void LaneBoundaryMergeSplit::unsafe_arena_set_allocated_position_and_accuracy(
    ::sensoris::protobuf::types::spatial::PositionAndAccuracy* position_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete position_and_accuracy_;
  }
  position_and_accuracy_ = position_and_accuracy;
  if (position_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.position_and_accuracy)
}
void LaneBoundaryMergeSplit::clear_position_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && position_and_accuracy_ != NULL) {
    delete position_and_accuracy_;
  }
  position_and_accuracy_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneBoundaryMergeSplit::kEnvelopeFieldNumber;
const int LaneBoundaryMergeSplit::kExistenceConfidenceFieldNumber;
const int LaneBoundaryMergeSplit::kDetectionStatusFieldNumber;
const int LaneBoundaryMergeSplit::kTypeAndConfidenceFieldNumber;
const int LaneBoundaryMergeSplit::kPositionAndAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneBoundaryMergeSplit::LaneBoundaryMergeSplit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundaryMergeSplit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
}
LaneBoundaryMergeSplit::LaneBoundaryMergeSplit(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundaryMergeSplit.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
}
LaneBoundaryMergeSplit::LaneBoundaryMergeSplit(const LaneBoundaryMergeSplit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_existence_confidence()) {
    existence_confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.existence_confidence_);
  } else {
    existence_confidence_ = NULL;
  }
  if (from.has_detection_status()) {
    detection_status_ = new ::sensoris::protobuf::types::base::EventDetectionStatus(*from.detection_status_);
  } else {
    detection_status_ = NULL;
  }
  if (from.has_type_and_confidence()) {
    type_and_confidence_ = new ::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence(*from.type_and_confidence_);
  } else {
    type_and_confidence_ = NULL;
  }
  if (from.has_position_and_accuracy()) {
    position_and_accuracy_ = new ::sensoris::protobuf::types::spatial::PositionAndAccuracy(*from.position_and_accuracy_);
  } else {
    position_and_accuracy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
}

void LaneBoundaryMergeSplit::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_and_accuracy_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(position_and_accuracy_));
}

LaneBoundaryMergeSplit::~LaneBoundaryMergeSplit() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  SharedDtor();
}

void LaneBoundaryMergeSplit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete existence_confidence_;
  if (this != internal_default_instance()) delete detection_status_;
  if (this != internal_default_instance()) delete type_and_confidence_;
  if (this != internal_default_instance()) delete position_and_accuracy_;
}

void LaneBoundaryMergeSplit::ArenaDtor(void* object) {
  LaneBoundaryMergeSplit* _this = reinterpret_cast< LaneBoundaryMergeSplit* >(object);
  (void)_this;
}
void LaneBoundaryMergeSplit::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LaneBoundaryMergeSplit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneBoundaryMergeSplit::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneBoundaryMergeSplit& LaneBoundaryMergeSplit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneBoundaryMergeSplit.base);
  return *internal_default_instance();
}


void LaneBoundaryMergeSplit::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && existence_confidence_ != NULL) {
    delete existence_confidence_;
  }
  existence_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && type_and_confidence_ != NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && position_and_accuracy_ != NULL) {
    delete position_and_accuracy_;
  }
  position_and_accuracy_ = NULL;
  _internal_metadata_.Clear();
}

bool LaneBoundaryMergeSplit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_existence_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detection_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence type_and_confidence = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  return false;
#undef DO_
}

void LaneBoundaryMergeSplit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
  if (this->has_existence_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_existence_confidence(), output);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
  if (this->has_detection_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_detection_status(), output);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence type_and_confidence = 4;
  if (this->has_type_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_type_and_confidence(), output);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 5;
  if (this->has_position_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_position_and_accuracy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
}

::google::protobuf::uint8* LaneBoundaryMergeSplit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
  if (this->has_existence_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_existence_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
  if (this->has_detection_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_detection_status(), deterministic, target);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence type_and_confidence = 4;
  if (this->has_type_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_type_and_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 5;
  if (this->has_position_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_position_and_accuracy(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  return target;
}

size_t LaneBoundaryMergeSplit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
  if (this->has_existence_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *existence_confidence_);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
  if (this->has_detection_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *detection_status_);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit.TypeAndConfidence type_and_confidence = 4;
  if (this->has_type_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *type_and_confidence_);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 5;
  if (this->has_position_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_and_accuracy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneBoundaryMergeSplit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneBoundaryMergeSplit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneBoundaryMergeSplit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
    MergeFrom(*source);
  }
}

void LaneBoundaryMergeSplit::MergeFrom(const LaneBoundaryMergeSplit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_existence_confidence()) {
    mutable_existence_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.existence_confidence());
  }
  if (from.has_detection_status()) {
    mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(from.detection_status());
  }
  if (from.has_type_and_confidence()) {
    mutable_type_and_confidence()->::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence::MergeFrom(from.type_and_confidence());
  }
  if (from.has_position_and_accuracy()) {
    mutable_position_and_accuracy()->::sensoris::protobuf::types::spatial::PositionAndAccuracy::MergeFrom(from.position_and_accuracy());
  }
}

void LaneBoundaryMergeSplit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneBoundaryMergeSplit::CopyFrom(const LaneBoundaryMergeSplit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundaryMergeSplit::IsInitialized() const {
  return true;
}

void LaneBoundaryMergeSplit::Swap(LaneBoundaryMergeSplit* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LaneBoundaryMergeSplit* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LaneBoundaryMergeSplit::UnsafeArenaSwap(LaneBoundaryMergeSplit* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LaneBoundaryMergeSplit::InternalSwap(LaneBoundaryMergeSplit* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(existence_confidence_, other->existence_confidence_);
  swap(detection_status_, other->detection_status_);
  swap(type_and_confidence_, other->type_and_confidence_);
  swap(position_and_accuracy_, other->position_and_accuracy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneBoundaryMergeSplit::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Lane::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::roadattribution::_Lane_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_Lane_default_instance_._instance.get_mutable()->relative_lane_id_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_Lane_default_instance_._instance.get_mutable()->width_and_accuracy_ = const_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_Lane_default_instance_._instance.get_mutable()->inclination_and_curvature_ = const_cast< ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature*>(
      ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature::internal_default_instance());
}
void Lane::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.Lane.envelope)
}
void Lane::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void Lane::unsafe_arena_set_allocated_relative_lane_id(
    ::google::protobuf::Int64Value* relative_lane_id) {
  if (GetArenaNoVirtual() == NULL) {
    delete relative_lane_id_;
  }
  relative_lane_id_ = relative_lane_id;
  if (relative_lane_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.Lane.relative_lane_id)
}
void Lane::clear_relative_lane_id() {
  if (GetArenaNoVirtual() == NULL && relative_lane_id_ != NULL) {
    delete relative_lane_id_;
  }
  relative_lane_id_ = NULL;
}
void Lane::unsafe_arena_set_allocated_width_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* width_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete width_and_accuracy_;
  }
  width_and_accuracy_ = width_and_accuracy;
  if (width_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.Lane.width_and_accuracy)
}
void Lane::clear_width_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && width_and_accuracy_ != NULL) {
    delete width_and_accuracy_;
  }
  width_and_accuracy_ = NULL;
}
void Lane::unsafe_arena_set_allocated_inclination_and_curvature(
    ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature* inclination_and_curvature) {
  if (GetArenaNoVirtual() == NULL) {
    delete inclination_and_curvature_;
  }
  inclination_and_curvature_ = inclination_and_curvature;
  if (inclination_and_curvature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.Lane.inclination_and_curvature)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lane::kEnvelopeFieldNumber;
const int Lane::kRelativeLaneIdFieldNumber;
const int Lane::kWidthAndAccuracyFieldNumber;
const int Lane::kInclinationAndCurvatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lane::Lane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_Lane.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.roadattribution.Lane)
}
Lane::Lane(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_Lane.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.Lane)
}
Lane::Lane(const Lane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_relative_lane_id()) {
    relative_lane_id_ = new ::google::protobuf::Int64Value(*from.relative_lane_id_);
  } else {
    relative_lane_id_ = NULL;
  }
  if (from.has_width_and_accuracy()) {
    width_and_accuracy_ = new ::sensoris::protobuf::types::base::Int64ValueAndAccuracy(*from.width_and_accuracy_);
  } else {
    width_and_accuracy_ = NULL;
  }
  if (from.has_inclination_and_curvature()) {
    inclination_and_curvature_ = new ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature(*from.inclination_and_curvature_);
  } else {
    inclination_and_curvature_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.Lane)
}

void Lane::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inclination_and_curvature_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(inclination_and_curvature_));
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.Lane)
  SharedDtor();
}

void Lane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete relative_lane_id_;
  if (this != internal_default_instance()) delete width_and_accuracy_;
  if (this != internal_default_instance()) delete inclination_and_curvature_;
}

void Lane::ArenaDtor(void* object) {
  Lane* _this = reinterpret_cast< Lane* >(object);
  (void)_this;
}
void Lane::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Lane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Lane::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lane& Lane::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_Lane.base);
  return *internal_default_instance();
}


void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && relative_lane_id_ != NULL) {
    delete relative_lane_id_;
  }
  relative_lane_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && width_and_accuracy_ != NULL) {
    delete width_and_accuracy_;
  }
  width_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && inclination_and_curvature_ != NULL) {
    delete inclination_and_curvature_;
  }
  inclination_and_curvature_ = NULL;
  _internal_metadata_.Clear();
}

bool Lane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.roadattribution.Lane)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value relative_lane_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_width_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inclination_and_curvature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.roadattribution.Lane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.roadattribution.Lane)
  return false;
#undef DO_
}

void Lane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.roadattribution.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .google.protobuf.Int64Value relative_lane_id = 2;
  if (this->has_relative_lane_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_relative_lane_id(), output);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_width_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_width_and_accuracy(), output);
  }

  // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 4;
  if (this->has_inclination_and_curvature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_inclination_and_curvature(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.roadattribution.Lane)
}

::google::protobuf::uint8* Lane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .google.protobuf.Int64Value relative_lane_id = 2;
  if (this->has_relative_lane_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_relative_lane_id(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_width_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_width_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 4;
  if (this->has_inclination_and_curvature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_inclination_and_curvature(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.Lane)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .google.protobuf.Int64Value relative_lane_id = 2;
  if (this->has_relative_lane_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *relative_lane_id_);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_width_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *width_and_accuracy_);
  }

  // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 4;
  if (this->has_inclination_and_curvature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *inclination_and_curvature_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.roadattribution.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.roadattribution.Lane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.roadattribution.Lane)
    MergeFrom(*source);
  }
}

void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_relative_lane_id()) {
    mutable_relative_lane_id()->::google::protobuf::Int64Value::MergeFrom(from.relative_lane_id());
  }
  if (from.has_width_and_accuracy()) {
    mutable_width_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.width_and_accuracy());
  }
  if (from.has_inclination_and_curvature()) {
    mutable_inclination_and_curvature()->::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature::MergeFrom(from.inclination_and_curvature());
  }
}

void Lane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.roadattribution.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::Swap(Lane* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Lane* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Lane::UnsafeArenaSwap(Lane* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Lane::InternalSwap(Lane* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(relative_lane_id_, other->relative_lane_id_);
  swap(width_and_accuracy_, other->width_and_accuracy_);
  swap(inclination_and_curvature_, other->inclination_and_curvature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Lane::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Road::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::roadattribution::_Road_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_Road_default_instance_._instance.get_mutable()->width_and_accuracy_ = const_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_Road_default_instance_._instance.get_mutable()->inclination_and_curvature_ = const_cast< ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature*>(
      ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature::internal_default_instance());
}
void Road::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.Road.envelope)
}
void Road::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void Road::unsafe_arena_set_allocated_width_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* width_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete width_and_accuracy_;
  }
  width_and_accuracy_ = width_and_accuracy;
  if (width_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.Road.width_and_accuracy)
}
void Road::clear_width_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && width_and_accuracy_ != NULL) {
    delete width_and_accuracy_;
  }
  width_and_accuracy_ = NULL;
}
void Road::unsafe_arena_set_allocated_inclination_and_curvature(
    ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature* inclination_and_curvature) {
  if (GetArenaNoVirtual() == NULL) {
    delete inclination_and_curvature_;
  }
  inclination_and_curvature_ = inclination_and_curvature;
  if (inclination_and_curvature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.Road.inclination_and_curvature)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Road::kEnvelopeFieldNumber;
const int Road::kWidthAndAccuracyFieldNumber;
const int Road::kInclinationAndCurvatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Road::Road()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_Road.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.roadattribution.Road)
}
Road::Road(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_Road.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.Road)
}
Road::Road(const Road& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_width_and_accuracy()) {
    width_and_accuracy_ = new ::sensoris::protobuf::types::base::Int64ValueAndAccuracy(*from.width_and_accuracy_);
  } else {
    width_and_accuracy_ = NULL;
  }
  if (from.has_inclination_and_curvature()) {
    inclination_and_curvature_ = new ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature(*from.inclination_and_curvature_);
  } else {
    inclination_and_curvature_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.Road)
}

void Road::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inclination_and_curvature_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(inclination_and_curvature_));
}

Road::~Road() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.Road)
  SharedDtor();
}

void Road::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete width_and_accuracy_;
  if (this != internal_default_instance()) delete inclination_and_curvature_;
}

void Road::ArenaDtor(void* object) {
  Road* _this = reinterpret_cast< Road* >(object);
  (void)_this;
}
void Road::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Road::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Road::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Road& Road::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_Road.base);
  return *internal_default_instance();
}


void Road::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.Road)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && width_and_accuracy_ != NULL) {
    delete width_and_accuracy_;
  }
  width_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && inclination_and_curvature_ != NULL) {
    delete inclination_and_curvature_;
  }
  inclination_and_curvature_ = NULL;
  _internal_metadata_.Clear();
}

bool Road::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.roadattribution.Road)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_width_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inclination_and_curvature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.roadattribution.Road)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.roadattribution.Road)
  return false;
#undef DO_
}

void Road::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.roadattribution.Road)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 2;
  if (this->has_width_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_width_and_accuracy(), output);
  }

  // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
  if (this->has_inclination_and_curvature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_inclination_and_curvature(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.roadattribution.Road)
}

::google::protobuf::uint8* Road::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.Road)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 2;
  if (this->has_width_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_width_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
  if (this->has_inclination_and_curvature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_inclination_and_curvature(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.Road)
  return target;
}

size_t Road::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.Road)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy width_and_accuracy = 2;
  if (this->has_width_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *width_and_accuracy_);
  }

  // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
  if (this->has_inclination_and_curvature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *inclination_and_curvature_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Road::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.roadattribution.Road)
  GOOGLE_DCHECK_NE(&from, this);
  const Road* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Road>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.roadattribution.Road)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.roadattribution.Road)
    MergeFrom(*source);
  }
}

void Road::MergeFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.Road)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_width_and_accuracy()) {
    mutable_width_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.width_and_accuracy());
  }
  if (from.has_inclination_and_curvature()) {
    mutable_inclination_and_curvature()->::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature::MergeFrom(from.inclination_and_curvature());
  }
}

void Road::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.roadattribution.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Road::CopyFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Road::IsInitialized() const {
  return true;
}

void Road::Swap(Road* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Road* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Road::UnsafeArenaSwap(Road* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Road::InternalSwap(Road* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(width_and_accuracy_, other->width_and_accuracy_);
  swap(inclination_and_curvature_, other->inclination_and_curvature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Road::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SurfaceMarking_TypeAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::roadattribution::_SurfaceMarking_TypeAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void SurfaceMarking_TypeAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence.confidence)
}
void SurfaceMarking_TypeAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SurfaceMarking_TypeAndConfidence::kTypeFieldNumber;
const int SurfaceMarking_TypeAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SurfaceMarking_TypeAndConfidence::SurfaceMarking_TypeAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_SurfaceMarking_TypeAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
}
SurfaceMarking_TypeAndConfidence::SurfaceMarking_TypeAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_SurfaceMarking_TypeAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
}
SurfaceMarking_TypeAndConfidence::SurfaceMarking_TypeAndConfidence(const SurfaceMarking_TypeAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
}

void SurfaceMarking_TypeAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

SurfaceMarking_TypeAndConfidence::~SurfaceMarking_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  SharedDtor();
}

void SurfaceMarking_TypeAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void SurfaceMarking_TypeAndConfidence::ArenaDtor(void* object) {
  SurfaceMarking_TypeAndConfidence* _this = reinterpret_cast< SurfaceMarking_TypeAndConfidence* >(object);
  (void)_this;
}
void SurfaceMarking_TypeAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SurfaceMarking_TypeAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SurfaceMarking_TypeAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SurfaceMarking_TypeAndConfidence& SurfaceMarking_TypeAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_SurfaceMarking_TypeAndConfidence.base);
  return *internal_default_instance();
}


void SurfaceMarking_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool SurfaceMarking_TypeAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  return false;
#undef DO_
}

void SurfaceMarking_TypeAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
}

::google::protobuf::uint8* SurfaceMarking_TypeAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  return target;
}

size_t SurfaceMarking_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurfaceMarking_TypeAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const SurfaceMarking_TypeAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SurfaceMarking_TypeAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
    MergeFrom(*source);
  }
}

void SurfaceMarking_TypeAndConfidence::MergeFrom(const SurfaceMarking_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SurfaceMarking_TypeAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SurfaceMarking_TypeAndConfidence::CopyFrom(const SurfaceMarking_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceMarking_TypeAndConfidence::IsInitialized() const {
  return true;
}

void SurfaceMarking_TypeAndConfidence::Swap(SurfaceMarking_TypeAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SurfaceMarking_TypeAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SurfaceMarking_TypeAndConfidence::UnsafeArenaSwap(SurfaceMarking_TypeAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SurfaceMarking_TypeAndConfidence::InternalSwap(SurfaceMarking_TypeAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SurfaceMarking_TypeAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SurfaceMarking::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::roadattribution::_SurfaceMarking_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_SurfaceMarking_default_instance_._instance.get_mutable()->existence_confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_SurfaceMarking_default_instance_._instance.get_mutable()->detection_status_ = const_cast< ::sensoris::protobuf::types::base::EventDetectionStatus*>(
      ::sensoris::protobuf::types::base::EventDetectionStatus::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_SurfaceMarking_default_instance_._instance.get_mutable()->type_and_confidence_ = const_cast< ::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence*>(
      ::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_SurfaceMarking_default_instance_._instance.get_mutable()->text_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_SurfaceMarking_default_instance_._instance.get_mutable()->rectangular_box_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy::internal_default_instance());
}
void SurfaceMarking::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.SurfaceMarking.envelope)
}
void SurfaceMarking::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void SurfaceMarking::unsafe_arena_set_allocated_existence_confidence(
    ::sensoris::protobuf::types::base::Confidence* existence_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete existence_confidence_;
  }
  existence_confidence_ = existence_confidence;
  if (existence_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.SurfaceMarking.existence_confidence)
}
void SurfaceMarking::clear_existence_confidence() {
  if (GetArenaNoVirtual() == NULL && existence_confidence_ != NULL) {
    delete existence_confidence_;
  }
  existence_confidence_ = NULL;
}
void SurfaceMarking::unsafe_arena_set_allocated_detection_status(
    ::sensoris::protobuf::types::base::EventDetectionStatus* detection_status) {
  if (GetArenaNoVirtual() == NULL) {
    delete detection_status_;
  }
  detection_status_ = detection_status;
  if (detection_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.SurfaceMarking.detection_status)
}
void SurfaceMarking::clear_detection_status() {
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
}
void SurfaceMarking::unsafe_arena_set_allocated_type_and_confidence(
    ::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence* type_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = type_and_confidence;
  if (type_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.SurfaceMarking.type_and_confidence)
}
void SurfaceMarking::unsafe_arena_set_allocated_text(
    ::google::protobuf::StringValue* text) {
  if (GetArenaNoVirtual() == NULL) {
    delete text_;
  }
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.SurfaceMarking.text)
}
void SurfaceMarking::clear_text() {
  if (GetArenaNoVirtual() == NULL && text_ != NULL) {
    delete text_;
  }
  text_ = NULL;
}
void SurfaceMarking::unsafe_arena_set_allocated_rectangular_box_and_accuracy(
    ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* rectangular_box_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete rectangular_box_and_accuracy_;
  }
  rectangular_box_and_accuracy_ = rectangular_box_and_accuracy;
  if (rectangular_box_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.SurfaceMarking.rectangular_box_and_accuracy)
}
void SurfaceMarking::clear_rectangular_box_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && rectangular_box_and_accuracy_ != NULL) {
    delete rectangular_box_and_accuracy_;
  }
  rectangular_box_and_accuracy_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SurfaceMarking::kEnvelopeFieldNumber;
const int SurfaceMarking::kExistenceConfidenceFieldNumber;
const int SurfaceMarking::kDetectionStatusFieldNumber;
const int SurfaceMarking::kTypeAndConfidenceFieldNumber;
const int SurfaceMarking::kTextFieldNumber;
const int SurfaceMarking::kColorAndConfidenceFieldNumber;
const int SurfaceMarking::kMaterialAndConfidenceFieldNumber;
const int SurfaceMarking::kRectangularBoxAndAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SurfaceMarking::SurfaceMarking()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_SurfaceMarking.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
}
SurfaceMarking::SurfaceMarking(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  color_and_confidence_(arena),
  material_and_confidence_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_SurfaceMarking.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
}
SurfaceMarking::SurfaceMarking(const SurfaceMarking& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      color_and_confidence_(from.color_and_confidence_),
      material_and_confidence_(from.material_and_confidence_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_existence_confidence()) {
    existence_confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.existence_confidence_);
  } else {
    existence_confidence_ = NULL;
  }
  if (from.has_detection_status()) {
    detection_status_ = new ::sensoris::protobuf::types::base::EventDetectionStatus(*from.detection_status_);
  } else {
    detection_status_ = NULL;
  }
  if (from.has_type_and_confidence()) {
    type_and_confidence_ = new ::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence(*from.type_and_confidence_);
  } else {
    type_and_confidence_ = NULL;
  }
  if (from.has_text()) {
    text_ = new ::google::protobuf::StringValue(*from.text_);
  } else {
    text_ = NULL;
  }
  if (from.has_rectangular_box_and_accuracy()) {
    rectangular_box_and_accuracy_ = new ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy(*from.rectangular_box_and_accuracy_);
  } else {
    rectangular_box_and_accuracy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
}

void SurfaceMarking::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rectangular_box_and_accuracy_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(rectangular_box_and_accuracy_));
}

SurfaceMarking::~SurfaceMarking() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  SharedDtor();
}

void SurfaceMarking::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete existence_confidence_;
  if (this != internal_default_instance()) delete detection_status_;
  if (this != internal_default_instance()) delete type_and_confidence_;
  if (this != internal_default_instance()) delete text_;
  if (this != internal_default_instance()) delete rectangular_box_and_accuracy_;
}

void SurfaceMarking::ArenaDtor(void* object) {
  SurfaceMarking* _this = reinterpret_cast< SurfaceMarking* >(object);
  (void)_this;
}
void SurfaceMarking::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SurfaceMarking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SurfaceMarking::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SurfaceMarking& SurfaceMarking::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_SurfaceMarking.base);
  return *internal_default_instance();
}


void SurfaceMarking::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_and_confidence_.Clear();
  material_and_confidence_.Clear();
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && existence_confidence_ != NULL) {
    delete existence_confidence_;
  }
  existence_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && type_and_confidence_ != NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && text_ != NULL) {
    delete text_;
  }
  text_ = NULL;
  if (GetArenaNoVirtual() == NULL && rectangular_box_and_accuracy_ != NULL) {
    delete rectangular_box_and_accuracy_;
  }
  rectangular_box_and_accuracy_ = NULL;
  _internal_metadata_.Clear();
}

bool SurfaceMarking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_existence_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detection_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence type_and_confidence = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue text = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_color_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_material_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rectangular_box_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  return false;
#undef DO_
}

void SurfaceMarking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
  if (this->has_existence_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_existence_confidence(), output);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
  if (this->has_detection_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_detection_status(), output);
  }

  // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence type_and_confidence = 4;
  if (this->has_type_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_type_and_confidence(), output);
  }

  // .google.protobuf.StringValue text = 5;
  if (this->has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_text(), output);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->color_and_confidence_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->color_and_confidence(static_cast<int>(i)),
      output);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->material_and_confidence_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->material_and_confidence(static_cast<int>(i)),
      output);
  }

  // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 8;
  if (this->has_rectangular_box_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_rectangular_box_and_accuracy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
}

::google::protobuf::uint8* SurfaceMarking::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
  if (this->has_existence_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_existence_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
  if (this->has_detection_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_detection_status(), deterministic, target);
  }

  // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence type_and_confidence = 4;
  if (this->has_type_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_type_and_confidence(), deterministic, target);
  }

  // .google.protobuf.StringValue text = 5;
  if (this->has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_text(), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->color_and_confidence_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->color_and_confidence(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->material_and_confidence_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->material_and_confidence(static_cast<int>(i)), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 8;
  if (this->has_rectangular_box_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_rectangular_box_and_accuracy(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  return target;
}

size_t SurfaceMarking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sensoris.protobuf.categories.roadattribution.MarkingColorAndConfidence color_and_confidence = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->color_and_confidence_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->color_and_confidence(static_cast<int>(i)));
    }
  }

  // repeated .sensoris.protobuf.categories.roadattribution.MarkingMaterialAndConfidence material_and_confidence = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->material_and_confidence_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->material_and_confidence(static_cast<int>(i)));
    }
  }

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
  if (this->has_existence_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *existence_confidence_);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
  if (this->has_detection_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *detection_status_);
  }

  // .sensoris.protobuf.categories.roadattribution.SurfaceMarking.TypeAndConfidence type_and_confidence = 4;
  if (this->has_type_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *type_and_confidence_);
  }

  // .google.protobuf.StringValue text = 5;
  if (this->has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *text_);
  }

  // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 8;
  if (this->has_rectangular_box_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rectangular_box_and_accuracy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurfaceMarking::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  GOOGLE_DCHECK_NE(&from, this);
  const SurfaceMarking* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SurfaceMarking>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
    MergeFrom(*source);
  }
}

void SurfaceMarking::MergeFrom(const SurfaceMarking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  color_and_confidence_.MergeFrom(from.color_and_confidence_);
  material_and_confidence_.MergeFrom(from.material_and_confidence_);
  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_existence_confidence()) {
    mutable_existence_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.existence_confidence());
  }
  if (from.has_detection_status()) {
    mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(from.detection_status());
  }
  if (from.has_type_and_confidence()) {
    mutable_type_and_confidence()->::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence::MergeFrom(from.type_and_confidence());
  }
  if (from.has_text()) {
    mutable_text()->::google::protobuf::StringValue::MergeFrom(from.text());
  }
  if (from.has_rectangular_box_and_accuracy()) {
    mutable_rectangular_box_and_accuracy()->::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy::MergeFrom(from.rectangular_box_and_accuracy());
  }
}

void SurfaceMarking::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SurfaceMarking::CopyFrom(const SurfaceMarking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.SurfaceMarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceMarking::IsInitialized() const {
  return true;
}

void SurfaceMarking::Swap(SurfaceMarking* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SurfaceMarking* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SurfaceMarking::UnsafeArenaSwap(SurfaceMarking* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SurfaceMarking::InternalSwap(SurfaceMarking* other) {
  using std::swap;
  CastToBase(&color_and_confidence_)->InternalSwap(CastToBase(&other->color_and_confidence_));
  CastToBase(&material_and_confidence_)->InternalSwap(CastToBase(&other->material_and_confidence_));
  swap(envelope_, other->envelope_);
  swap(existence_confidence_, other->existence_confidence_);
  swap(detection_status_, other->detection_status_);
  swap(type_and_confidence_, other->type_and_confidence_);
  swap(text_, other->text_);
  swap(rectangular_box_and_accuracy_, other->rectangular_box_and_accuracy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SurfaceMarking::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SurfaceAttribution::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::roadattribution::_SurfaceAttribution_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_SurfaceAttribution_default_instance_._instance.get_mutable()->position_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::PositionAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::PositionAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_SurfaceAttribution_default_instance_._instance.get_mutable()->inclination_and_curvature_ = const_cast< ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature*>(
      ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_SurfaceAttribution_default_instance_._instance.get_mutable()->road_roughness_and_accuracy_ = const_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy::internal_default_instance());
}
void SurfaceAttribution::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.SurfaceAttribution.envelope)
}
void SurfaceAttribution::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void SurfaceAttribution::unsafe_arena_set_allocated_position_and_accuracy(
    ::sensoris::protobuf::types::spatial::PositionAndAccuracy* position_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete position_and_accuracy_;
  }
  position_and_accuracy_ = position_and_accuracy;
  if (position_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.SurfaceAttribution.position_and_accuracy)
}
void SurfaceAttribution::clear_position_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && position_and_accuracy_ != NULL) {
    delete position_and_accuracy_;
  }
  position_and_accuracy_ = NULL;
}
void SurfaceAttribution::unsafe_arena_set_allocated_inclination_and_curvature(
    ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature* inclination_and_curvature) {
  if (GetArenaNoVirtual() == NULL) {
    delete inclination_and_curvature_;
  }
  inclination_and_curvature_ = inclination_and_curvature;
  if (inclination_and_curvature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.SurfaceAttribution.inclination_and_curvature)
}
void SurfaceAttribution::unsafe_arena_set_allocated_road_roughness_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* road_roughness_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete road_roughness_and_accuracy_;
  }
  road_roughness_and_accuracy_ = road_roughness_and_accuracy;
  if (road_roughness_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.SurfaceAttribution.road_roughness_and_accuracy)
}
void SurfaceAttribution::clear_road_roughness_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && road_roughness_and_accuracy_ != NULL) {
    delete road_roughness_and_accuracy_;
  }
  road_roughness_and_accuracy_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SurfaceAttribution::kEnvelopeFieldNumber;
const int SurfaceAttribution::kPositionAndAccuracyFieldNumber;
const int SurfaceAttribution::kInclinationAndCurvatureFieldNumber;
const int SurfaceAttribution::kMaterialAndConfidenceFieldNumber;
const int SurfaceAttribution::kRoadRoughnessAndAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SurfaceAttribution::SurfaceAttribution()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_SurfaceAttribution.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
}
SurfaceAttribution::SurfaceAttribution(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  material_and_confidence_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_SurfaceAttribution.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
}
SurfaceAttribution::SurfaceAttribution(const SurfaceAttribution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      material_and_confidence_(from.material_and_confidence_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_position_and_accuracy()) {
    position_and_accuracy_ = new ::sensoris::protobuf::types::spatial::PositionAndAccuracy(*from.position_and_accuracy_);
  } else {
    position_and_accuracy_ = NULL;
  }
  if (from.has_inclination_and_curvature()) {
    inclination_and_curvature_ = new ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature(*from.inclination_and_curvature_);
  } else {
    inclination_and_curvature_ = NULL;
  }
  if (from.has_road_roughness_and_accuracy()) {
    road_roughness_and_accuracy_ = new ::sensoris::protobuf::types::base::Int64ValueAndAccuracy(*from.road_roughness_and_accuracy_);
  } else {
    road_roughness_and_accuracy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
}

void SurfaceAttribution::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&road_roughness_and_accuracy_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(road_roughness_and_accuracy_));
}

SurfaceAttribution::~SurfaceAttribution() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  SharedDtor();
}

void SurfaceAttribution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete position_and_accuracy_;
  if (this != internal_default_instance()) delete inclination_and_curvature_;
  if (this != internal_default_instance()) delete road_roughness_and_accuracy_;
}

void SurfaceAttribution::ArenaDtor(void* object) {
  SurfaceAttribution* _this = reinterpret_cast< SurfaceAttribution* >(object);
  (void)_this;
}
void SurfaceAttribution::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SurfaceAttribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SurfaceAttribution::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SurfaceAttribution& SurfaceAttribution::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_SurfaceAttribution.base);
  return *internal_default_instance();
}


void SurfaceAttribution::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  material_and_confidence_.Clear();
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && position_and_accuracy_ != NULL) {
    delete position_and_accuracy_;
  }
  position_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && inclination_and_curvature_ != NULL) {
    delete inclination_and_curvature_;
  }
  inclination_and_curvature_ = NULL;
  if (GetArenaNoVirtual() == NULL && road_roughness_and_accuracy_ != NULL) {
    delete road_roughness_and_accuracy_;
  }
  road_roughness_and_accuracy_ = NULL;
  _internal_metadata_.Clear();
}

bool SurfaceAttribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inclination_and_curvature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence material_and_confidence = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_material_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64ValueAndAccuracy road_roughness_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_road_roughness_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  return false;
#undef DO_
}

void SurfaceAttribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
  if (this->has_position_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_position_and_accuracy(), output);
  }

  // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
  if (this->has_inclination_and_curvature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_inclination_and_curvature(), output);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence material_and_confidence = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->material_and_confidence_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->material_and_confidence(static_cast<int>(i)),
      output);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy road_roughness_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_road_roughness_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_road_roughness_and_accuracy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
}

::google::protobuf::uint8* SurfaceAttribution::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
  if (this->has_position_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_position_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
  if (this->has_inclination_and_curvature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_inclination_and_curvature(), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence material_and_confidence = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->material_and_confidence_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->material_and_confidence(static_cast<int>(i)), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy road_roughness_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_road_roughness_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_road_roughness_and_accuracy(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  return target;
}

size_t SurfaceAttribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMaterialAndConfidence material_and_confidence = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->material_and_confidence_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->material_and_confidence(static_cast<int>(i)));
    }
  }

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
  if (this->has_position_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_and_accuracy_);
  }

  // .sensoris.protobuf.categories.roadattribution.InclinationAndCurvature inclination_and_curvature = 3;
  if (this->has_inclination_and_curvature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *inclination_and_curvature_);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy road_roughness_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_road_roughness_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *road_roughness_and_accuracy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurfaceAttribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  const SurfaceAttribution* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SurfaceAttribution>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
    MergeFrom(*source);
  }
}

void SurfaceAttribution::MergeFrom(const SurfaceAttribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  material_and_confidence_.MergeFrom(from.material_and_confidence_);
  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_position_and_accuracy()) {
    mutable_position_and_accuracy()->::sensoris::protobuf::types::spatial::PositionAndAccuracy::MergeFrom(from.position_and_accuracy());
  }
  if (from.has_inclination_and_curvature()) {
    mutable_inclination_and_curvature()->::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature::MergeFrom(from.inclination_and_curvature());
  }
  if (from.has_road_roughness_and_accuracy()) {
    mutable_road_roughness_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.road_roughness_and_accuracy());
  }
}

void SurfaceAttribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SurfaceAttribution::CopyFrom(const SurfaceAttribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.SurfaceAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceAttribution::IsInitialized() const {
  return true;
}

void SurfaceAttribution::Swap(SurfaceAttribution* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SurfaceAttribution* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SurfaceAttribution::UnsafeArenaSwap(SurfaceAttribution* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SurfaceAttribution::InternalSwap(SurfaceAttribution* other) {
  using std::swap;
  CastToBase(&material_and_confidence_)->InternalSwap(CastToBase(&other->material_and_confidence_));
  swap(envelope_, other->envelope_);
  swap(position_and_accuracy_, other->position_and_accuracy_);
  swap(inclination_and_curvature_, other->inclination_and_curvature_);
  swap(road_roughness_and_accuracy_, other->road_roughness_and_accuracy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SurfaceAttribution::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoadAttribution_TypeAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::roadattribution::_RoadAttribution_TypeAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void RoadAttribution_TypeAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence.confidence)
}
void RoadAttribution_TypeAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadAttribution_TypeAndConfidence::kTypeFieldNumber;
const int RoadAttribution_TypeAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadAttribution_TypeAndConfidence::RoadAttribution_TypeAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_RoadAttribution_TypeAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
}
RoadAttribution_TypeAndConfidence::RoadAttribution_TypeAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_RoadAttribution_TypeAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
}
RoadAttribution_TypeAndConfidence::RoadAttribution_TypeAndConfidence(const RoadAttribution_TypeAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
}

void RoadAttribution_TypeAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

RoadAttribution_TypeAndConfidence::~RoadAttribution_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  SharedDtor();
}

void RoadAttribution_TypeAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void RoadAttribution_TypeAndConfidence::ArenaDtor(void* object) {
  RoadAttribution_TypeAndConfidence* _this = reinterpret_cast< RoadAttribution_TypeAndConfidence* >(object);
  (void)_this;
}
void RoadAttribution_TypeAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RoadAttribution_TypeAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoadAttribution_TypeAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadAttribution_TypeAndConfidence& RoadAttribution_TypeAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_RoadAttribution_TypeAndConfidence.base);
  return *internal_default_instance();
}


void RoadAttribution_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool RoadAttribution_TypeAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  return false;
#undef DO_
}

void RoadAttribution_TypeAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
}

::google::protobuf::uint8* RoadAttribution_TypeAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  return target;
}

size_t RoadAttribution_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadAttribution_TypeAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadAttribution_TypeAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadAttribution_TypeAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
    MergeFrom(*source);
  }
}

void RoadAttribution_TypeAndConfidence::MergeFrom(const RoadAttribution_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void RoadAttribution_TypeAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadAttribution_TypeAndConfidence::CopyFrom(const RoadAttribution_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadAttribution_TypeAndConfidence::IsInitialized() const {
  return true;
}

void RoadAttribution_TypeAndConfidence::Swap(RoadAttribution_TypeAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RoadAttribution_TypeAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RoadAttribution_TypeAndConfidence::UnsafeArenaSwap(RoadAttribution_TypeAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RoadAttribution_TypeAndConfidence::InternalSwap(RoadAttribution_TypeAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoadAttribution_TypeAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoadAttribution_ChangeTypeAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::roadattribution::_RoadAttribution_ChangeTypeAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void RoadAttribution_ChangeTypeAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence.confidence)
}
void RoadAttribution_ChangeTypeAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadAttribution_ChangeTypeAndConfidence::kTypeFieldNumber;
const int RoadAttribution_ChangeTypeAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadAttribution_ChangeTypeAndConfidence::RoadAttribution_ChangeTypeAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_RoadAttribution_ChangeTypeAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
}
RoadAttribution_ChangeTypeAndConfidence::RoadAttribution_ChangeTypeAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_RoadAttribution_ChangeTypeAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
}
RoadAttribution_ChangeTypeAndConfidence::RoadAttribution_ChangeTypeAndConfidence(const RoadAttribution_ChangeTypeAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
}

void RoadAttribution_ChangeTypeAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

RoadAttribution_ChangeTypeAndConfidence::~RoadAttribution_ChangeTypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  SharedDtor();
}

void RoadAttribution_ChangeTypeAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void RoadAttribution_ChangeTypeAndConfidence::ArenaDtor(void* object) {
  RoadAttribution_ChangeTypeAndConfidence* _this = reinterpret_cast< RoadAttribution_ChangeTypeAndConfidence* >(object);
  (void)_this;
}
void RoadAttribution_ChangeTypeAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RoadAttribution_ChangeTypeAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoadAttribution_ChangeTypeAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadAttribution_ChangeTypeAndConfidence& RoadAttribution_ChangeTypeAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_RoadAttribution_ChangeTypeAndConfidence.base);
  return *internal_default_instance();
}


void RoadAttribution_ChangeTypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool RoadAttribution_ChangeTypeAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  return false;
#undef DO_
}

void RoadAttribution_ChangeTypeAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
}

::google::protobuf::uint8* RoadAttribution_ChangeTypeAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  return target;
}

size_t RoadAttribution_ChangeTypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadAttribution_ChangeTypeAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadAttribution_ChangeTypeAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadAttribution_ChangeTypeAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
    MergeFrom(*source);
  }
}

void RoadAttribution_ChangeTypeAndConfidence::MergeFrom(const RoadAttribution_ChangeTypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void RoadAttribution_ChangeTypeAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadAttribution_ChangeTypeAndConfidence::CopyFrom(const RoadAttribution_ChangeTypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadAttribution_ChangeTypeAndConfidence::IsInitialized() const {
  return true;
}

void RoadAttribution_ChangeTypeAndConfidence::Swap(RoadAttribution_ChangeTypeAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RoadAttribution_ChangeTypeAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RoadAttribution_ChangeTypeAndConfidence::UnsafeArenaSwap(RoadAttribution_ChangeTypeAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RoadAttribution_ChangeTypeAndConfidence::InternalSwap(RoadAttribution_ChangeTypeAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoadAttribution_ChangeTypeAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoadAttribution::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::roadattribution::_RoadAttribution_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_RoadAttribution_default_instance_._instance.get_mutable()->detection_status_ = const_cast< ::sensoris::protobuf::types::base::EventDetectionStatus*>(
      ::sensoris::protobuf::types::base::EventDetectionStatus::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_RoadAttribution_default_instance_._instance.get_mutable()->position_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::PositionAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::PositionAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_RoadAttribution_default_instance_._instance.get_mutable()->type_and_confidence_ = const_cast< ::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence*>(
      ::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_RoadAttribution_default_instance_._instance.get_mutable()->change_type_and_confidence_ = const_cast< ::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence*>(
      ::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence::internal_default_instance());
}
void RoadAttribution::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.RoadAttribution.envelope)
}
void RoadAttribution::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void RoadAttribution::unsafe_arena_set_allocated_detection_status(
    ::sensoris::protobuf::types::base::EventDetectionStatus* detection_status) {
  if (GetArenaNoVirtual() == NULL) {
    delete detection_status_;
  }
  detection_status_ = detection_status;
  if (detection_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.RoadAttribution.detection_status)
}
void RoadAttribution::clear_detection_status() {
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
}
void RoadAttribution::unsafe_arena_set_allocated_position_and_accuracy(
    ::sensoris::protobuf::types::spatial::PositionAndAccuracy* position_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete position_and_accuracy_;
  }
  position_and_accuracy_ = position_and_accuracy;
  if (position_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.RoadAttribution.position_and_accuracy)
}
void RoadAttribution::clear_position_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && position_and_accuracy_ != NULL) {
    delete position_and_accuracy_;
  }
  position_and_accuracy_ = NULL;
}
void RoadAttribution::unsafe_arena_set_allocated_type_and_confidence(
    ::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence* type_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = type_and_confidence;
  if (type_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.RoadAttribution.type_and_confidence)
}
void RoadAttribution::unsafe_arena_set_allocated_change_type_and_confidence(
    ::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence* change_type_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete change_type_and_confidence_;
  }
  change_type_and_confidence_ = change_type_and_confidence;
  if (change_type_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.RoadAttribution.change_type_and_confidence)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadAttribution::kEnvelopeFieldNumber;
const int RoadAttribution::kDetectionStatusFieldNumber;
const int RoadAttribution::kPositionAndAccuracyFieldNumber;
const int RoadAttribution::kTypeAndConfidenceFieldNumber;
const int RoadAttribution::kChangeTypeAndConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadAttribution::RoadAttribution()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_RoadAttribution.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.roadattribution.RoadAttribution)
}
RoadAttribution::RoadAttribution(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_RoadAttribution.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.RoadAttribution)
}
RoadAttribution::RoadAttribution(const RoadAttribution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_detection_status()) {
    detection_status_ = new ::sensoris::protobuf::types::base::EventDetectionStatus(*from.detection_status_);
  } else {
    detection_status_ = NULL;
  }
  if (from.has_position_and_accuracy()) {
    position_and_accuracy_ = new ::sensoris::protobuf::types::spatial::PositionAndAccuracy(*from.position_and_accuracy_);
  } else {
    position_and_accuracy_ = NULL;
  }
  if (from.has_type_and_confidence()) {
    type_and_confidence_ = new ::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence(*from.type_and_confidence_);
  } else {
    type_and_confidence_ = NULL;
  }
  if (from.has_change_type_and_confidence()) {
    change_type_and_confidence_ = new ::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence(*from.change_type_and_confidence_);
  } else {
    change_type_and_confidence_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.RoadAttribution)
}

void RoadAttribution::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_type_and_confidence_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(change_type_and_confidence_));
}

RoadAttribution::~RoadAttribution() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  SharedDtor();
}

void RoadAttribution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete detection_status_;
  if (this != internal_default_instance()) delete position_and_accuracy_;
  if (this != internal_default_instance()) delete type_and_confidence_;
  if (this != internal_default_instance()) delete change_type_and_confidence_;
}

void RoadAttribution::ArenaDtor(void* object) {
  RoadAttribution* _this = reinterpret_cast< RoadAttribution* >(object);
  (void)_this;
}
void RoadAttribution::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RoadAttribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoadAttribution::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadAttribution& RoadAttribution::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_RoadAttribution.base);
  return *internal_default_instance();
}


void RoadAttribution::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && position_and_accuracy_ != NULL) {
    delete position_and_accuracy_;
  }
  position_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && type_and_confidence_ != NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && change_type_and_confidence_ != NULL) {
    delete change_type_and_confidence_;
  }
  change_type_and_confidence_ = NULL;
  _internal_metadata_.Clear();
}

bool RoadAttribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detection_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence type_and_confidence = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence change_type_and_confidence = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_change_type_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  return false;
#undef DO_
}

void RoadAttribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (this->has_detection_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_detection_status(), output);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 3;
  if (this->has_position_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_position_and_accuracy(), output);
  }

  // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence type_and_confidence = 4;
  if (this->has_type_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_type_and_confidence(), output);
  }

  // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence change_type_and_confidence = 5;
  if (this->has_change_type_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_change_type_and_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.roadattribution.RoadAttribution)
}

::google::protobuf::uint8* RoadAttribution::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (this->has_detection_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_detection_status(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 3;
  if (this->has_position_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_position_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence type_and_confidence = 4;
  if (this->has_type_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_type_and_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence change_type_and_confidence = 5;
  if (this->has_change_type_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_change_type_and_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  return target;
}

size_t RoadAttribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (this->has_detection_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *detection_status_);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 3;
  if (this->has_position_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_and_accuracy_);
  }

  // .sensoris.protobuf.categories.roadattribution.RoadAttribution.TypeAndConfidence type_and_confidence = 4;
  if (this->has_type_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *type_and_confidence_);
  }

  // .sensoris.protobuf.categories.roadattribution.RoadAttribution.ChangeTypeAndConfidence change_type_and_confidence = 5;
  if (this->has_change_type_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *change_type_and_confidence_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadAttribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadAttribution* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadAttribution>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.roadattribution.RoadAttribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.roadattribution.RoadAttribution)
    MergeFrom(*source);
  }
}

void RoadAttribution::MergeFrom(const RoadAttribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_detection_status()) {
    mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(from.detection_status());
  }
  if (from.has_position_and_accuracy()) {
    mutable_position_and_accuracy()->::sensoris::protobuf::types::spatial::PositionAndAccuracy::MergeFrom(from.position_and_accuracy());
  }
  if (from.has_type_and_confidence()) {
    mutable_type_and_confidence()->::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence::MergeFrom(from.type_and_confidence());
  }
  if (from.has_change_type_and_confidence()) {
    mutable_change_type_and_confidence()->::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence::MergeFrom(from.change_type_and_confidence());
  }
}

void RoadAttribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadAttribution::CopyFrom(const RoadAttribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.RoadAttribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadAttribution::IsInitialized() const {
  return true;
}

void RoadAttribution::Swap(RoadAttribution* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RoadAttribution* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RoadAttribution::UnsafeArenaSwap(RoadAttribution* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RoadAttribution::InternalSwap(RoadAttribution* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(detection_status_, other->detection_status_);
  swap(position_and_accuracy_, other->position_and_accuracy_);
  swap(type_and_confidence_, other->type_and_confidence_);
  swap(change_type_and_confidence_, other->change_type_and_confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoadAttribution::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneCountAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::roadattribution::_LaneCountAndConfidence_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_LaneCountAndConfidence_default_instance_._instance.get_mutable()->position_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::PositionAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::PositionAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::roadattribution::_LaneCountAndConfidence_default_instance_._instance.get_mutable()->count_and_confidence_ = const_cast< ::sensoris::protobuf::types::base::CountAndConfidence*>(
      ::sensoris::protobuf::types::base::CountAndConfidence::internal_default_instance());
}
void LaneCountAndConfidence::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence.envelope)
}
void LaneCountAndConfidence::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void LaneCountAndConfidence::unsafe_arena_set_allocated_position_and_accuracy(
    ::sensoris::protobuf::types::spatial::PositionAndAccuracy* position_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete position_and_accuracy_;
  }
  position_and_accuracy_ = position_and_accuracy;
  if (position_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence.position_and_accuracy)
}
void LaneCountAndConfidence::clear_position_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && position_and_accuracy_ != NULL) {
    delete position_and_accuracy_;
  }
  position_and_accuracy_ = NULL;
}
void LaneCountAndConfidence::unsafe_arena_set_allocated_count_and_confidence(
    ::sensoris::protobuf::types::base::CountAndConfidence* count_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete count_and_confidence_;
  }
  count_and_confidence_ = count_and_confidence;
  if (count_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence.count_and_confidence)
}
void LaneCountAndConfidence::clear_count_and_confidence() {
  if (GetArenaNoVirtual() == NULL && count_and_confidence_ != NULL) {
    delete count_and_confidence_;
  }
  count_and_confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneCountAndConfidence::kEnvelopeFieldNumber;
const int LaneCountAndConfidence::kPositionAndAccuracyFieldNumber;
const int LaneCountAndConfidence::kTypeFieldNumber;
const int LaneCountAndConfidence::kCountAndConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneCountAndConfidence::LaneCountAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneCountAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
}
LaneCountAndConfidence::LaneCountAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneCountAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
}
LaneCountAndConfidence::LaneCountAndConfidence(const LaneCountAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_position_and_accuracy()) {
    position_and_accuracy_ = new ::sensoris::protobuf::types::spatial::PositionAndAccuracy(*from.position_and_accuracy_);
  } else {
    position_and_accuracy_ = NULL;
  }
  if (from.has_count_and_confidence()) {
    count_and_confidence_ = new ::sensoris::protobuf::types::base::CountAndConfidence(*from.count_and_confidence_);
  } else {
    count_and_confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
}

void LaneCountAndConfidence::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(type_));
}

LaneCountAndConfidence::~LaneCountAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  SharedDtor();
}

void LaneCountAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete position_and_accuracy_;
  if (this != internal_default_instance()) delete count_and_confidence_;
}

void LaneCountAndConfidence::ArenaDtor(void* object) {
  LaneCountAndConfidence* _this = reinterpret_cast< LaneCountAndConfidence* >(object);
  (void)_this;
}
void LaneCountAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LaneCountAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneCountAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneCountAndConfidence& LaneCountAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_LaneCountAndConfidence.base);
  return *internal_default_instance();
}


void LaneCountAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && position_and_accuracy_ != NULL) {
    delete position_and_accuracy_;
  }
  position_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && count_and_confidence_ != NULL) {
    delete count_and_confidence_;
  }
  count_and_confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool LaneCountAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence.Type type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.CountAndConfidence count_and_confidence = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_count_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  return false;
#undef DO_
}

void LaneCountAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
  if (this->has_position_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_position_and_accuracy(), output);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence.Type type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // .sensoris.protobuf.types.base.CountAndConfidence count_and_confidence = 4;
  if (this->has_count_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_count_and_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
}

::google::protobuf::uint8* LaneCountAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
  if (this->has_position_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_position_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence.Type type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // .sensoris.protobuf.types.base.CountAndConfidence count_and_confidence = 4;
  if (this->has_count_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_count_and_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  return target;
}

size_t LaneCountAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
  if (this->has_position_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_and_accuracy_);
  }

  // .sensoris.protobuf.types.base.CountAndConfidence count_and_confidence = 4;
  if (this->has_count_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *count_and_confidence_);
  }

  // .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence.Type type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneCountAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneCountAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneCountAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
    MergeFrom(*source);
  }
}

void LaneCountAndConfidence::MergeFrom(const LaneCountAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_position_and_accuracy()) {
    mutable_position_and_accuracy()->::sensoris::protobuf::types::spatial::PositionAndAccuracy::MergeFrom(from.position_and_accuracy());
  }
  if (from.has_count_and_confidence()) {
    mutable_count_and_confidence()->::sensoris::protobuf::types::base::CountAndConfidence::MergeFrom(from.count_and_confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void LaneCountAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneCountAndConfidence::CopyFrom(const LaneCountAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneCountAndConfidence::IsInitialized() const {
  return true;
}

void LaneCountAndConfidence::Swap(LaneCountAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LaneCountAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LaneCountAndConfidence::UnsafeArenaSwap(LaneCountAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LaneCountAndConfidence::InternalSwap(LaneCountAndConfidence* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(position_and_accuracy_, other->position_and_accuracy_);
  swap(count_and_confidence_, other->count_and_confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneCountAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoadAttributionCategory::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::roadattribution::_RoadAttributionCategory_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::CategoryEnvelope*>(
      ::sensoris::protobuf::types::base::CategoryEnvelope::internal_default_instance());
}
void RoadAttributionCategory::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::CategoryEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory.envelope)
}
void RoadAttributionCategory::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadAttributionCategory::kEnvelopeFieldNumber;
const int RoadAttributionCategory::kLaneBoundaryFieldNumber;
const int RoadAttributionCategory::kLaneBoundaryMergeSplitFieldNumber;
const int RoadAttributionCategory::kLaneFieldNumber;
const int RoadAttributionCategory::kRoadFieldNumber;
const int RoadAttributionCategory::kSurfaceMarkingFieldNumber;
const int RoadAttributionCategory::kSurfaceAttributionFieldNumber;
const int RoadAttributionCategory::kRoadAttributionFieldNumber;
const int RoadAttributionCategory::kDetectedLaneCountAndConfidenceFieldNumber;
const int RoadAttributionCategory::kEstimatedLaneCountAndConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadAttributionCategory::RoadAttributionCategory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_RoadAttributionCategory.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
}
RoadAttributionCategory::RoadAttributionCategory(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  lane_boundary_(arena),
  lane_boundary_merge_split_(arena),
  lane_(arena),
  road_(arena),
  surface_marking_(arena),
  surface_attribution_(arena),
  road_attribution_(arena),
  detected_lane_count_and_confidence_(arena),
  estimated_lane_count_and_confidence_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_RoadAttributionCategory.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
}
RoadAttributionCategory::RoadAttributionCategory(const RoadAttributionCategory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lane_boundary_(from.lane_boundary_),
      lane_boundary_merge_split_(from.lane_boundary_merge_split_),
      lane_(from.lane_),
      road_(from.road_),
      surface_marking_(from.surface_marking_),
      surface_attribution_(from.surface_attribution_),
      road_attribution_(from.road_attribution_),
      detected_lane_count_and_confidence_(from.detected_lane_count_and_confidence_),
      estimated_lane_count_and_confidence_(from.estimated_lane_count_and_confidence_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::CategoryEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
}

void RoadAttributionCategory::SharedCtor() {
  envelope_ = NULL;
}

RoadAttributionCategory::~RoadAttributionCategory() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  SharedDtor();
}

void RoadAttributionCategory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
}

void RoadAttributionCategory::ArenaDtor(void* object) {
  RoadAttributionCategory* _this = reinterpret_cast< RoadAttributionCategory* >(object);
  (void)_this;
}
void RoadAttributionCategory::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RoadAttributionCategory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoadAttributionCategory::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadAttributionCategory& RoadAttributionCategory::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::scc_info_RoadAttributionCategory.base);
  return *internal_default_instance();
}


void RoadAttributionCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_boundary_.Clear();
  lane_boundary_merge_split_.Clear();
  lane_.Clear();
  road_.Clear();
  surface_marking_.Clear();
  surface_attribution_.Clear();
  road_attribution_.Clear();
  detected_lane_count_and_confidence_.Clear();
  estimated_lane_count_and_confidence_.Clear();
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  _internal_metadata_.Clear();
}

bool RoadAttributionCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary lane_boundary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lane_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit lane_boundary_merge_split = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lane_boundary_merge_split()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.roadattribution.Lane lane = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.roadattribution.Road road = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_road()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMarking surface_marking = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_surface_marking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.roadattribution.SurfaceAttribution surface_attribution = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_surface_attribution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.roadattribution.RoadAttribution road_attribution = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_road_attribution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence detected_lane_count_and_confidence = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_detected_lane_count_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence estimated_lane_count_and_confidence = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_estimated_lane_count_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  return false;
#undef DO_
}

void RoadAttributionCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary lane_boundary = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_boundary_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->lane_boundary(static_cast<int>(i)),
      output);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit lane_boundary_merge_split = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_boundary_merge_split_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->lane_boundary_merge_split(static_cast<int>(i)),
      output);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.Lane lane = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->lane(static_cast<int>(i)),
      output);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.Road road = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->road(static_cast<int>(i)),
      output);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMarking surface_marking = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->surface_marking_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->surface_marking(static_cast<int>(i)),
      output);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.SurfaceAttribution surface_attribution = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->surface_attribution_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->surface_attribution(static_cast<int>(i)),
      output);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.RoadAttribution road_attribution = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_attribution_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->road_attribution(static_cast<int>(i)),
      output);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence detected_lane_count_and_confidence = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detected_lane_count_and_confidence_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->detected_lane_count_and_confidence(static_cast<int>(i)),
      output);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence estimated_lane_count_and_confidence = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->estimated_lane_count_and_confidence_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->estimated_lane_count_and_confidence(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
}

::google::protobuf::uint8* RoadAttributionCategory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary lane_boundary = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_boundary_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->lane_boundary(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit lane_boundary_merge_split = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_boundary_merge_split_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->lane_boundary_merge_split(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.Lane lane = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->lane(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.Road road = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->road(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMarking surface_marking = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->surface_marking_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->surface_marking(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.SurfaceAttribution surface_attribution = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->surface_attribution_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->surface_attribution(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.RoadAttribution road_attribution = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_attribution_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->road_attribution(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence detected_lane_count_and_confidence = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detected_lane_count_and_confidence_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->detected_lane_count_and_confidence(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence estimated_lane_count_and_confidence = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->estimated_lane_count_and_confidence_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->estimated_lane_count_and_confidence(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  return target;
}

size_t RoadAttributionCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundary lane_boundary = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_boundary_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_boundary(static_cast<int>(i)));
    }
  }

  // repeated .sensoris.protobuf.categories.roadattribution.LaneBoundaryMergeSplit lane_boundary_merge_split = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_boundary_merge_split_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_boundary_merge_split(static_cast<int>(i)));
    }
  }

  // repeated .sensoris.protobuf.categories.roadattribution.Lane lane = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane(static_cast<int>(i)));
    }
  }

  // repeated .sensoris.protobuf.categories.roadattribution.Road road = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->road_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->road(static_cast<int>(i)));
    }
  }

  // repeated .sensoris.protobuf.categories.roadattribution.SurfaceMarking surface_marking = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->surface_marking_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->surface_marking(static_cast<int>(i)));
    }
  }

  // repeated .sensoris.protobuf.categories.roadattribution.SurfaceAttribution surface_attribution = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->surface_attribution_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->surface_attribution(static_cast<int>(i)));
    }
  }

  // repeated .sensoris.protobuf.categories.roadattribution.RoadAttribution road_attribution = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->road_attribution_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->road_attribution(static_cast<int>(i)));
    }
  }

  // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence detected_lane_count_and_confidence = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->detected_lane_count_and_confidence_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->detected_lane_count_and_confidence(static_cast<int>(i)));
    }
  }

  // repeated .sensoris.protobuf.categories.roadattribution.LaneCountAndConfidence estimated_lane_count_and_confidence = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->estimated_lane_count_and_confidence_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->estimated_lane_count_and_confidence(static_cast<int>(i)));
    }
  }

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadAttributionCategory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadAttributionCategory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadAttributionCategory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
    MergeFrom(*source);
  }
}

void RoadAttributionCategory::MergeFrom(const RoadAttributionCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_boundary_.MergeFrom(from.lane_boundary_);
  lane_boundary_merge_split_.MergeFrom(from.lane_boundary_merge_split_);
  lane_.MergeFrom(from.lane_);
  road_.MergeFrom(from.road_);
  surface_marking_.MergeFrom(from.surface_marking_);
  surface_attribution_.MergeFrom(from.surface_attribution_);
  road_attribution_.MergeFrom(from.road_attribution_);
  detected_lane_count_and_confidence_.MergeFrom(from.detected_lane_count_and_confidence_);
  estimated_lane_count_and_confidence_.MergeFrom(from.estimated_lane_count_and_confidence_);
  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::CategoryEnvelope::MergeFrom(from.envelope());
  }
}

void RoadAttributionCategory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadAttributionCategory::CopyFrom(const RoadAttributionCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.roadattribution.RoadAttributionCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadAttributionCategory::IsInitialized() const {
  return true;
}

void RoadAttributionCategory::Swap(RoadAttributionCategory* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RoadAttributionCategory* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RoadAttributionCategory::UnsafeArenaSwap(RoadAttributionCategory* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RoadAttributionCategory::InternalSwap(RoadAttributionCategory* other) {
  using std::swap;
  CastToBase(&lane_boundary_)->InternalSwap(CastToBase(&other->lane_boundary_));
  CastToBase(&lane_boundary_merge_split_)->InternalSwap(CastToBase(&other->lane_boundary_merge_split_));
  CastToBase(&lane_)->InternalSwap(CastToBase(&other->lane_));
  CastToBase(&road_)->InternalSwap(CastToBase(&other->road_));
  CastToBase(&surface_marking_)->InternalSwap(CastToBase(&other->surface_marking_));
  CastToBase(&surface_attribution_)->InternalSwap(CastToBase(&other->surface_attribution_));
  CastToBase(&road_attribution_)->InternalSwap(CastToBase(&other->road_attribution_));
  CastToBase(&detected_lane_count_and_confidence_)->InternalSwap(CastToBase(&other->detected_lane_count_and_confidence_));
  CastToBase(&estimated_lane_count_and_confidence_)->InternalSwap(CastToBase(&other->estimated_lane_count_and_confidence_));
  swap(envelope_, other->envelope_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoadAttributionCategory::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2froad_5fattribution_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace roadattribution
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::roadattribution::MarkingColorAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::roadattribution::MarkingMaterialAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::roadattribution::SurfaceMaterialAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::roadattribution::InclinationAndCurvature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::roadattribution::LaneBoundary_TypeAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::roadattribution::LaneBoundary_DashStatistics >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets_TypeAndOffset >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::roadattribution::LaneBoundary_MarkingOffsets >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::roadattribution::LaneBoundary* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::roadattribution::LaneBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::roadattribution::LaneBoundary >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit_TypeAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::roadattribution::LaneBoundaryMergeSplit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::roadattribution::Lane* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::roadattribution::Lane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::roadattribution::Lane >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::roadattribution::Road* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::roadattribution::Road >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::roadattribution::Road >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::roadattribution::SurfaceMarking_TypeAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::roadattribution::SurfaceMarking* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::roadattribution::SurfaceMarking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::roadattribution::SurfaceMarking >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::roadattribution::SurfaceAttribution* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::roadattribution::SurfaceAttribution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::roadattribution::SurfaceAttribution >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::roadattribution::RoadAttribution_TypeAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::roadattribution::RoadAttribution_ChangeTypeAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::roadattribution::RoadAttribution* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::roadattribution::RoadAttribution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::roadattribution::RoadAttribution >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::roadattribution::LaneCountAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::roadattribution::RoadAttributionCategory >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
