// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/traffic_regulation.proto

#include "sensoris/protobuf/categories/traffic_regulation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fwrappers_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StringValue;
}  // namespace protobuf_google_2fprotobuf_2fwrappers_2eproto
namespace protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto ::google::protobuf::internal::SCCInfo<11> scc_info_TrafficSign;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TrafficSign_DominantBackgroundColorAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TrafficSign_PermanencyAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TrafficSign_ShapeAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TrafficSign_ValidationAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TrafficSign_TypeAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TrafficSign_ValueAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_TrafficSign_SupplementarySignAndConfidence;
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto
namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Confidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CategoryEnvelope;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EventDetectionStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_EventEnvelope;
}  // namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto
namespace protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_RectangularBoxAndAccuracy;
}  // namespace protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace trafficregulation {
class TrafficSign_ShapeAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSign_ShapeAndConfidence>
      _instance;
} _TrafficSign_ShapeAndConfidence_default_instance_;
class TrafficSign_TypeAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSign_TypeAndConfidence>
      _instance;
} _TrafficSign_TypeAndConfidence_default_instance_;
class TrafficSign_ValueAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSign_ValueAndConfidence>
      _instance;
} _TrafficSign_ValueAndConfidence_default_instance_;
class TrafficSign_PermanencyAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSign_PermanencyAndConfidence>
      _instance;
} _TrafficSign_PermanencyAndConfidence_default_instance_;
class TrafficSign_ValidationAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSign_ValidationAndConfidence>
      _instance;
} _TrafficSign_ValidationAndConfidence_default_instance_;
class TrafficSign_DominantBackgroundColorAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSign_DominantBackgroundColorAndConfidence>
      _instance;
} _TrafficSign_DominantBackgroundColorAndConfidence_default_instance_;
class TrafficSign_SupplementarySignAndConfidence_TypeAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence>
      _instance;
} _TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_default_instance_;
class TrafficSign_SupplementarySignAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSign_SupplementarySignAndConfidence>
      _instance;
} _TrafficSign_SupplementarySignAndConfidence_default_instance_;
class TrafficSignDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSign>
      _instance;
} _TrafficSign_default_instance_;
class TrafficRegulationCategoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficRegulationCategory>
      _instance;
} _TrafficRegulationCategory_default_instance_;
}  // namespace trafficregulation
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto {
static void InitDefaultsTrafficSign_ShapeAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficregulation::_TrafficSign_ShapeAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TrafficSign_ShapeAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrafficSign_ShapeAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsTrafficSign_TypeAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficregulation::_TrafficSign_TypeAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TrafficSign_TypeAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTrafficSign_TypeAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_StringValue.base,}};

static void InitDefaultsTrafficSign_ValueAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficregulation::_TrafficSign_ValueAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TrafficSign_ValueAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTrafficSign_ValueAndConfidence}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_StringValue.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsTrafficSign_PermanencyAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficregulation::_TrafficSign_PermanencyAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TrafficSign_PermanencyAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrafficSign_PermanencyAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsTrafficSign_ValidationAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficregulation::_TrafficSign_ValidationAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TrafficSign_ValidationAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrafficSign_ValidationAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsTrafficSign_DominantBackgroundColorAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficregulation::_TrafficSign_DominantBackgroundColorAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TrafficSign_DominantBackgroundColorAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrafficSign_DominantBackgroundColorAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsTrafficSign_SupplementarySignAndConfidence_TypeAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficregulation::_TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTrafficSign_SupplementarySignAndConfidence_TypeAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_StringValue.base,}};

static void InitDefaultsTrafficSign_SupplementarySignAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficregulation::_TrafficSign_SupplementarySignAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_TrafficSign_SupplementarySignAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsTrafficSign_SupplementarySignAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventDetectionStatus.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_ValueAndConfidence.base,}};

static void InitDefaultsTrafficSign() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficregulation::_TrafficSign_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficregulation::TrafficSign();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficregulation::TrafficSign::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<11> scc_info_TrafficSign =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 11, InitDefaultsTrafficSign}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventDetectionStatus.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RectangularBoxAndAccuracy.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_ShapeAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_TypeAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_ValueAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_PermanencyAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_ValidationAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_DominantBackgroundColorAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_SupplementarySignAndConfidence.base,}};

static void InitDefaultsTrafficRegulationCategory() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficregulation::_TrafficRegulationCategory_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficregulation::TrafficRegulationCategory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficregulation::TrafficRegulationCategory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TrafficRegulationCategory =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTrafficRegulationCategory}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_CategoryEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSign_ShapeAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSign_TypeAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSign_ValueAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSign_PermanencyAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSign_ValidationAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSign_DominantBackgroundColorAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSign_SupplementarySignAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficSign.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficRegulationCategory.base);
}

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence, other_text_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence, other_text_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence, existence_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence, detection_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence, type_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence, value_and_confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, existence_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, detection_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, rectangular_box_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, shape_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, type_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, value_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, permanency_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, validation_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, background_color_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficSign, supplementary_sign_and_confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficRegulationCategory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficRegulationCategory, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficregulation::TrafficRegulationCategory, traffic_sign_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence)},
  { 7, -1, sizeof(::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence)},
  { 15, -1, sizeof(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence)},
  { 22, -1, sizeof(::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence)},
  { 29, -1, sizeof(::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence)},
  { 36, -1, sizeof(::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence)},
  { 43, -1, sizeof(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence)},
  { 51, -1, sizeof(::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence)},
  { 60, -1, sizeof(::sensoris::protobuf::categories::trafficregulation::TrafficSign)},
  { 76, -1, sizeof(::sensoris::protobuf::categories::trafficregulation::TrafficRegulationCategory)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficregulation::_TrafficSign_ShapeAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficregulation::_TrafficSign_TypeAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficregulation::_TrafficSign_ValueAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficregulation::_TrafficSign_PermanencyAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficregulation::_TrafficSign_ValidationAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficregulation::_TrafficSign_DominantBackgroundColorAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficregulation::_TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficregulation::_TrafficSign_SupplementarySignAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficregulation::_TrafficSign_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficregulation::_TrafficRegulationCategory_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "sensoris/protobuf/categories/traffic_regulation.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n5sensoris/protobuf/categories/traffic_r"
      "egulation.proto\022.sensoris.protobuf.categ"
      "ories.trafficregulation\032\036google/protobuf"
      "/wrappers.proto\032\"sensoris/protobuf/types"
      "/base.proto\032%sensoris/protobuf/types/spa"
      "tial.proto\"\312a\n\013TrafficSign\022=\n\010envelope\030\001"
      " \001(\0132+.sensoris.protobuf.types.base.Even"
      "tEnvelope\022F\n\024existence_confidence\030\002 \001(\0132"
      "(.sensoris.protobuf.types.base.Confidenc"
      "e\022L\n\020detection_status\030\003 \001(\01322.sensoris.p"
      "rotobuf.types.base.EventDetectionStatus\022"
      "`\n\034rectangular_box_and_accuracy\030\004 \001(\0132:."
      "sensoris.protobuf.types.spatial.Rectangu"
      "larBoxAndAccuracy\022l\n\024shape_and_confidenc"
      "e\030\005 \001(\0132N.sensoris.protobuf.categories.t"
      "rafficregulation.TrafficSign.ShapeAndCon"
      "fidence\022j\n\023type_and_confidence\030\006 \001(\0132M.s"
      "ensoris.protobuf.categories.trafficregul"
      "ation.TrafficSign.TypeAndConfidence\022l\n\024v"
      "alue_and_confidence\030\007 \001(\0132N.sensoris.pro"
      "tobuf.categories.trafficregulation.Traff"
      "icSign.ValueAndConfidence\022v\n\031permanency_"
      "and_confidence\030\010 \001(\0132S.sensoris.protobuf"
      ".categories.trafficregulation.TrafficSig"
      "n.PermanencyAndConfidence\022v\n\031validation_"
      "and_confidence\030\t \001(\0132S.sensoris.protobuf"
      ".categories.trafficregulation.TrafficSig"
      "n.ValidationAndConfidence\022\211\001\n\037background"
      "_color_and_confidence\030\n \001(\0132`.sensoris.p"
      "rotobuf.categories.trafficregulation.Tra"
      "fficSign.DominantBackgroundColorAndConfi"
      "dence\022\205\001\n!supplementary_sign_and_confide"
      "nce\030\013 \003(\0132Z.sensoris.protobuf.categories"
      ".trafficregulation.TrafficSign.Supplemen"
      "tarySignAndConfidence\032\367\002\n\022ShapeAndConfid"
      "ence\022a\n\004type\030\001 \001(\0162S.sensoris.protobuf.c"
      "ategories.trafficregulation.TrafficSign."
      "ShapeAndConfidence.Type\022<\n\nconfidence\030\002 "
      "\001(\0132(.sensoris.protobuf.types.base.Confi"
      "dence\"\277\001\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\t\n\005OTHE"
      "R\020\001\022\r\n\tRECTANGLE\020\002\022\n\n\006SQUARE\020\003\022\017\n\013TRIANG"
      "LE_UP\020\004\022\021\n\rTRIANGLE_DOWN\020\005\022\013\n\007DIAMOND\020\006\022"
      "\013\n\007HEXAGON\020\007\022\t\n\005ROUND\020\010\022\016\n\nCROSS_BUCK\020\t\022"
      "\013\n\007OCTAGON\020\n\022\013\n\007ELLIPSE\020\013\022\014\n\010PENTAGON\020\014\032"
      "\356:\n\021TypeAndConfidence\022`\n\004type\030\001 \001(\0162R.se"
      "nsoris.protobuf.categories.trafficregula"
      "tion.TrafficSign.TypeAndConfidence.Type\022"
      "<\n\nconfidence\030\002 \001(\0132(.sensoris.protobuf."
      "types.base.Confidence\0220\n\nother_text\030\003 \001("
      "\0132\034.google.protobuf.StringValue\"\2069\n\004Type"
      "\022\020\n\014UNKNOWN_TYPE\020\000\022\021\n\rOTHER_AS_TEXT\020\001\022\017\n"
      "\013SPEED_LIMIT\020\002\022\023\n\017SPEED_LIMIT_END\020\003\022\037\n\033S"
      "PEED_LIMIT_CHANGE_UPCOMING\020\004\022\030\n\024ADVISORY"
      "_SPEED_LIMIT\020\005\022\034\n\030ADVISORY_SPEED_LIMIT_E"
      "ND\020\006\022\021\n\rNO_OVERTAKING\020\007\022\025\n\021NO_OVERTAKING"
      "_END\020\010\022\033\n\027PROTECTED_PASSING_START\020\t\022\031\n\025P"
      "ROTECTED_PASSING_END\020\n\022 \n\034PROTECTED_PASS"
      "ING_LEFT_START\020\013\022!\n\035PROTECTED_PASSING_RI"
      "GHT_START\020\014\022\036\n\032PROTECTED_PASSING_LEFT_EN"
      "D\020\r\022\037\n\033PROTECTED_PASSING_RIGHT_END\020\016\022\027\n\023"
      "NO_OVERTAKING_TRUCK\020\017\022\033\n\027NO_OVERTAKING_T"
      "RUCK_END\020\020\022\030\n\024ALL_RESTRICTIONS_END\020\021\022\016\n\n"
      "CITY_START\020\022\022\014\n\010CITY_END\020\023\022\013\n\007HIGHWAY\020\024\022"
      "\017\n\013HIGHWAY_END\020\025\022\014\n\010MOTORWAY\020\026\022\020\n\014MOTORW"
      "AY_END\020\027\022\020\n\014CONSTRUCTION\020\030\022\024\n\020CONSTRUCTI"
      "ON_END\020\031\022\016\n\nLANE_MERGE\020\032\022\027\n\023LANE_MERGE_O"
      "N_RIGHT\020\033\022\026\n\022LANE_MERGE_ON_LEFT\020\034\022\025\n\021LAN"
      "E_MERGE_CENTER\020\035\022\034\n\030RAILWAY_CROSSING_GEN"
      "ERAL\020\036\022\036\n\032RAILWAY_CROSSING_PROTECTED\020\037\022 "
      "\n\034RAILWAY_CROSSING_UNPROTECTED\020 \022\020\n\014ROAD"
      "_NARROWS\020!\022\025\n\021ROAD_NARROWS_LEFT\020\"\022\026\n\022ROA"
      "D_NARROWS_RIGHT\020#\022\027\n\023ROAD_NARROWS_CENTER"
      "\020$\022\017\n\013SHARP_CURVE\020%\022\024\n\020SHARP_CURVE_LEFT\020"
      "&\022\025\n\021SHARP_CURVE_RIGHT\020\'\022\020\n\014WINDING_ROAD"
      "\020(\022\036\n\032WINDING_ROAD_STARTING_LEFT\020)\022\037\n\033WI"
      "NDING_ROAD_STARTING_RIGHT\020*\022\016\n\nSTEEP_HIL"
      "L\020+\022\026\n\022STEEP_HILL_UPWARDS\020,\022\030\n\024STEEP_HIL"
      "L_DOWNWARDS\020-\022\r\n\tSTOP_SIGN\020.\022\020\n\014LATERAL_"
      "WIND\020/\022\033\n\027LATERAL_WIND_FROM_RIGHT\0200\022\032\n\026L"
      "ATERAL_WIND_FROM_LEFT\0201\022\023\n\017GENERAL_WARNI"
      "NG\0202\022\025\n\021RISK_OF_GROUNDING\0203\022\n\n\006ANIMAL\0204\022"
      "\022\n\016ICY_CONDITIONS\0205\022\021\n\rSLIPPERY_ROAD\0206\022\017"
      "\n\013UNEVEN_ROAD\0207\022\017\n\013SCHOOL_ZONE\0208\022\024\n\020TRAM"
      "WAY_CROSSING\0209\022\025\n\021CONGESTION_HAZARD\020:\022\023\n"
      "\017ACCIDENT_HAZARD\020;\022\024\n\020BICYCLE_CROSSING\020<"
      "\022\"\n\036PRIORITY_OVER_ONCOMING_TRAFFIC\020=\022\t\n\005"
      "YIELD\020>\022\021\n\rPRIORITY_ROAD\020\?\022\025\n\021PRIORITY_R"
      "OAD_END\020@\022\023\n\017TRAFFIC_CALMING\020A\022\027\n\023TRAFFI"
      "C_CALMING_END\020B\022\026\n\022ENVIRONMENTAL_AREA\020C\022"
      "\032\n\026ENVIRONMENTAL_AREA_END\020D\022\020\n\014INTERSECT"
      "ION\020E\022\016\n\nROUNDABOUT\020F\022\023\n\017PASSING_ON_LEFT"
      "\020G\022\024\n\020PASSING_ON_RIGHT\020H\022\034\n\030PASSING_ON_L"
      "EFT_OR_RIGHT\020I\022\035\n\031MANDATORY_TURN_RIGHT_O"
      "NLY\020J\022\034\n\030MANDATORY_TURN_LEFT_ONLY\020K\022\033\n\027M"
      "ANDATORY_STRAIGHT_ONLY\020L\022 \n\034MANDATORY_TU"
      "RN_LEFT_OR_RIGHT\020M\022\036\n\032MANDATORY_TURN_RES"
      "TRICTION\020N\022\036\n\032MANDATORY_STRAIGHT_OR_LEFT"
      "\020O\022\037\n\033MANDATORY_STRAIGHT_OR_RIGHT\020P\022\020\n\014N"
      "O_LEFT_TURN\020Q\022\021\n\rNO_RIGHT_TURN\020R\022\r\n\tNO_U"
      "_TURN\020S\022\025\n\021NO_U_OR_LEFT_TURN\020T\022\022\n\016U_TURN"
      "_ALLOWED\020U\022\030\n\024MANDATORY_LEFT_TRUCK\020V\022\031\n\025"
      "MANDATORY_RIGHT_TRUCK\020W\022\034\n\030MANDATORY_STR"
      "AIGHT_TRUCK\020X\022\014\n\010NO_ENTRY\020Y\022\014\n\010DEAD_END\020"
      "Z\022\037\n\033HIGH_OCCUPANCY_VEHICLE_LANE\020[\022\010\n\004TO"
      "LL\020\\\022\014\n\010TOLL_CAR\020]\022\r\n\tTOLL_LANE\020^\022\020\n\014EXP"
      "RESS_LANE\020_\022\035\n\031SHOULDER_OPEN_FOR_TRAFFIC"
      "\020`\022\037\n\033SHOULDER_CLOSED_FOR_TRAFFIC\020a\022\017\n\013L"
      "ANE_CLOSED\020b\022\037\n\033LANE_CLOSED_RIGHT_MOST_L"
      "ANE\020c\022\036\n\032LANE_CLOSED_LEFT_MOST_LANE\020d\022\026\n"
      "\022WARNING_PEDESTRIAN\020e\022\024\n\020WARNING_CHILDRE"
      "N\020f\022\023\n\017WARNING_BICYCLE\020g\022\017\n\013WARNING_BUS\020"
      "h\022\036\n\032PUBLIC_TRANSPORTATION_STOP\020i\022\027\n\023PED"
      "ESTRIAN_CROSSING\020j\022\026\n\022WEIGHT_RESTRICTION"
      "\020k\022\026\n\022HEIGHT_RESTRICTION\020l\022\026\n\022LENGTH_RES"
      "TRICTION\020m\022\025\n\021WIDTH_RESTRICTION\020n\022\032\n\026WAR"
      "NING_TRUCK_ROLLOVER\020o\022\020\n\014SIGNAL_AHEAD\020p\022"
      "\020\n\014SKI_CROSSING\020q\022\031\n\025NO_AGRICULTUR_VEHIC"
      "LE\020r\022\016\n\nNO_BICYCLE\020s\022\n\n\006NO_BUS\020t\022\026\n\022NO_H"
      "AUL_EXPLOSIVES\020u\022\034\n\030NO_HAUL_HARMFUL_TO_W"
      "ATER\020v\022\036\n\032NO_HAUL_HAZARDOUS_MATERIAL\020w\022\021"
      "\n\rNO_MOTORCYCLE\020x\022\016\n\nNO_TRAILER\020y\022\031\n\025NO_"
      "TRUCK_WITH_TRAILER\020z\022\021\n\rPARK_AND_RIDE\020{\022"
      "\021\n\rROAD_DISTANCE\020|\022\023\n\017EMERGENCY_PHONE\020}\022"
      "\033\n\027SPEED_LIMIT_ENFORCEMENT\020~\022\035\n\031TRAFFIC_"
      "LIGHT_ENFORCEMENT\020\177\022\024\n\017BOARD_DIRECTION\020\200"
      "\001\022\020\n\013STREET_NAME\020\201\001\022\026\n\021TRUCK_SPEED_LIMIT"
      "\020\202\001\022\032\n\025TRUCK_SPEED_LIMIT_END\020\203\001\022\026\n\021SPEED"
      "_LIMIT_NIGHT\020\204\001\022\032\n\025SPEED_LIMIT_NIGHT_END"
      "\020\205\001\022\022\n\rMINIMUM_SPEED\020\206\001\022\026\n\021MINIMUM_SPEED"
      "_END\020\207\001\022\024\n\017PEDESTRIAN_ZONE\020\210\001\022\030\n\023PEDESTR"
      "IAN_ZONE_END\020\211\001\022\024\n\017PEDESTRIAN_PATH\020\212\001\022\030\n"
      "\023PEDESTRIAN_PATH_END\020\213\001\022\034\n\027PEDESTRIAN_BI"
      "CYCLE_PATH\020\214\001\022 \n\033PEDESTRIAN_BICYCLE_PATH"
      "_END\020\215\001\022\021\n\014BICYCLE_PATH\020\216\001\022\025\n\020BICYCLE_PA"
      "TH_END\020\217\001\022\023\n\016BICYCLE_STREET\020\220\001\022\027\n\022BICYCL"
      "E_STREET_END\020\221\001\022\032\n\025CURVE_LEFT_THEN_RIGHT"
      "\020\222\001\022\032\n\025CURVE_RIGHT_THEN_LEFT\020\223\001\022\031\n\024CURVE"
      "_TRIPLE_HAIRPIN\020\224\001\022\017\n\nSTEEP_DROP\020\225\001\022\027\n\022S"
      "TEEP_DROP_ON_LEFT\020\226\001\022\030\n\023STEEP_DROP_ON_RI"
      "GHT\020\227\001\022\025\n\020NO_ANIMAL_CATTLE\020\230\001\022\020\n\013ANIMAL_"
      "DEER\020\231\001\022\021\n\014ANIMAL_MOOSE\020\232\001\022\024\n\017NO_HORSE_R"
      "IDING\020\233\001\022\022\n\rFALLING_ROCKS\020\234\001\022\027\n\022FALLING_"
      "ROCKS_LEFT\020\235\001\022\030\n\023FALLING_ROCKS_RIGHT\020\236\001\022"
      "\036\n\031YIELD_TO_ONCOMING_TRAFFIC\020\237\001\022\032\n\025UNPRO"
      "TECTED_LEFT_TURN\020\240\001\022\023\n\016ONEWAY_TRAFFIC\020\241\001"
      "\022\033\n\026ONEWAY_TRAFFIC_TO_LEFT\020\242\001\022\034\n\027ONEWAY_"
      "TRAFFIC_TO_RIGHT\020\243\001\022\037\n\032ONEWAY_TRAFFIC_TO"
      "_STRAIGHT\020\244\001\022\017\n\nNO_VEHICLE\020\245\001\022\025\n\020NO_MOTO"
      "R_VEHICLE\020\246\001\022\r\n\010NO_TRUCK\020\247\001\022\022\n\rNO_PEDEST"
      "RIAN\020\250\001\022!\n\034LANE_USED_IN_BOTH_DIRECTIONS\020"
      "\251\001\022\r\n\010FOG_AREA\020\252\001\022\032\n\025TIRE_CHAINS_MANDATO"
      "RY\020\253\001\022\026\n\021HIJACKING_HOTSPOT\020\254\001\022\023\n\016OVERPAS"
      "S_AHEAD\020\255\001\022\013\n\006TUNNEL\020\256\001\022\023\n\016FERRY_TERMINA"
      "L\020\257\001\022\022\n\rNARROW_BRIDGE\020\260\001\022\016\n\tNO_IDLING\020\261\001"
      "\022\024\n\017HUMPBACK_BRIDGE\020\262\001\022\017\n\nEMBANKMENT\020\263\001\022"
      "\033\n\026EMBANKMENT_ON_THE_LEFT\020\264\001\022\034\n\027EMBANKME"
      "NT_ON_THE_RIGHT\020\265\001\022+\n&CROSSING_WITH_PRIO"
      "RITY_OVER_MINOR_ROAD\020\266\001\022(\n#CROSSING_WITH"
      "_PRIORITY_TO_THE_RIGHT\020\267\001\022\027\n\022BRANCH_TO_T"
      "HE_LEFT\020\270\001\022\030\n\023BRANCH_TO_THE_RIGHT\020\271\001\022\024\n\017"
      "TWO_WAY_TRAFFIC\020\272\001\022\t\n\004BUMP\020\273\001\022\010\n\003DIP\020\274\001\022"
      "\021\n\014ROAD_FLOODED\020\275\001\022\024\n\017AUDIBLE_WARNING\020\276\001"
      "\022\022\n\rVILLAGE_AHEAD\020\277\001\022\023\n\016MOVABLE_BRIDGE\020\300"
      "\001\022\016\n\tSLOW_DOWN\020\301\001\022\023\n\016INTERSECTION_T\020\302\001\022\030"
      "\n\023INTERSECTION_T_LEFT\020\303\001\022\031\n\024INTERSECTION"
      "_T_RIGHT\020\304\001\022\036\n\031INTERSECTION_T_LEFT_RIGHT"
      "\020\305\001\022\023\n\016INTERSECTION_Y\020\306\001\022\021\n\014USE_LOW_GEAR"
      "\020\307\001\022\025\n\020USE_LOW_GEAR_END\020\310\001\022\033\n\026NO_COMPRES"
      "SION_BRAKING\020\311\001\022\037\n\032NO_COMPRESSION_BRAKIN"
      "G_END\020\312\001\022\021\n\014WAITING_LINE\020\313\001\022\023\n\016DONT_STOP"
      "_ZONE\020\314\001\022\027\n\022HONKING_PROHIBITED\020\315\001\022\025\n\020FAS"
      "TEN_SEAT_BELT\020\316\001\022\021\n\014HAMLET_ENTRY\020\317\001\022\020\n\013H"
      "AMLET_EXIT\020\320\001\022\034\n\027HIGHWAY_MARKER_1_STRIPE"
      "\020\321\001\022\035\n\030HIGHWAY_MARKER_2_STRIPES\020\322\001\022\035\n\030HI"
      "GHWAY_MARKER_3_STRIPES\020\323\001\022\023\n\016GUIDING_BEA"
      "CON\020\324\001\022\036\n\031COUNTDOWN_MARKER_1_STRIPE\020\325\001\022\037"
      "\n\032COUNTDOWN_MARKER_2_STRIPES\020\326\001\022\037\n\032COUNT"
      "DOWN_MARKER_3_STRIPES\020\327\001\022\024\n\017DIVERSION_RO"
      "UTE\020\330\001\022\030\n\023DIVERSION_ROUTE_END\020\331\001\022\034\n\027NO_S"
      "TOPPING_EXCEPT_TAXI\020\332\001\022\020\n\013NO_STOPPING\020\333\001"
      "\022\025\n\020NO_STOPPING_LEFT\020\334\001\022\026\n\021NO_STOPPING_R"
      "IGHT\020\335\001\022\037\n\032NO_STOPPING_LEFT_AND_RIGHT\020\336\001"
      "\022\017\n\nNO_PARKING\020\337\001\022\024\n\017NO_PARKING_LEFT\020\340\001\022"
      "\025\n\020NO_PARKING_RIGHT\020\341\001\022\036\n\031NO_PARKING_LEF"
      "T_AND_RIGHT\020\342\001\022\030\n\023RUNNAWAY_TRUCK_RAMP\020\343\001"
      "\022\022\n\rTURN_ON_GREEN\020\344\001\022\023\n\016NO_TURN_ON_RED\020\345"
      "\001\022\031\n\024MOTORWAY_ROAD_NUMBER\020\346\001\022\030\n\023HIGHWAY_"
      "ROAD_NUMBER\020\347\001\022\037\n\032HIGHWAY_INTERCHANGE_NU"
      "MBER\020\350\001\022\031\n\024EUROPEAN_ROAD_NUMBER\020\351\001\022\025\n\020SP"
      "EED_LIMIT_ZONE\020\352\001\022\031\n\024SPEED_LIMIT_ZONE_EN"
      "D\020\353\001\022\024\n\017NO_PARKING_ZONE\020\354\001\022\030\n\023NO_PARKING"
      "_ZONE_END\020\355\001\022\021\n\014PARKING_ZONE\020\356\001\022\025\n\020PARKI"
      "NG_ZONE_END\020\357\001\022\014\n\007PARKING\020\360\001\022\024\n\017PARKING_"
      "TO_LEFT\020\361\001\022\025\n\020PARKING_TO_RIGHT\020\362\001\022\023\n\016PAR"
      "KING_GARAGE\020\363\001\022\027\n\022PARKING_ON_SIDEWAY\020\364\001\022"
      "\024\n\017SAFETY_DISTANCE\020\365\001\022\034\n\027SAFETY_DISTANCE"
      "_VEHICLE\020\366\001\022\032\n\025SAFETY_DISTANCE_TRUCK\020\367\001\022"
      "\013\n\006DETOUR\020\370\001\022\017\n\nDETOUR_END\020\371\001\022\020\n\013DETOUR_"
      "LEFT\020\372\001\022\021\n\014DETOUR_RIGHT\020\373\001\022\020\n\013STATION_GA"
      "S\020\374\001\022\020\n\013STATION_LPG\020\375\001\022\020\n\013STATION_CNG\020\376\001"
      "\022\017\n\nSTATION_H2\020\377\001\022\024\n\017STATION_ELECTRO\020\200\002\022"
      "\023\n\016STATION_POLICE\020\201\002\022\021\n\014CAMPING_SPOT\020\202\002\022"
      "\016\n\tRESTROOMS\020\203\002\022\017\n\nINFO_POINT\020\204\002\022\030\n\023MOTO"
      "RWAY_EXIT_AHEAD\020\205\002\022\027\n\022HIGHWAY_EXIT_AHEAD"
      "\020\206\002\022\022\n\rMOTORWAY_EXIT\020\207\002\022\021\n\014HIGHWAY_EXIT\020"
      "\210\002\022\016\n\tFIRST_AID\020\211\002\022\017\n\nLOW_FLYING\020\212\002\022\017\n\nL"
      "ANE_SHIFT\020\213\002\022\027\n\022LANE_SHIFT_TO_LEFT\020\214\002\022\030\n"
      "\023LANE_SHIFT_TO_RIGHT\020\215\002\022\031\n\024PEDESTRIAN_UN"
      "DERPASS\020\216\002\022\030\n\023PEDESTRIAN_OVERPASS\020\217\002\022\022\n\r"
      "BREAKDOWN_BAY\020\220\002\022\r\n\010BUS_LANE\020\221\002\022\023\n\016DOUBL"
      "E_HAIRPIN\020\222\002\022!\n\034COUNTRY_SPECIFIC_INFORMA"
      "TION\020\223\002\022#\n\036PEDESTRIAN_BICYCLE_SHARED_PAT"
      "H\020\224\002\022!\n\034OVERHEAD_LANE_CONTROL_CLOSED\020\225\002\022"
      "\037\n\032OVERHEAD_LANE_CONTROL_OPEN\020\226\002\022\'\n\"OVER"
      "HEAD_LANE_CONTROL_CLOSING_LEFT\020\227\002\022(\n#OVE"
      "RHEAD_LANE_CONTROL_CLOSING_RIGHT\020\230\002\022+\n&O"
      "VERHEAD_LANE_CONTROL_FLASH_ARROW_LEFT\020\231\002"
      "\022,\n\'OVERHEAD_LANE_CONTROL_FLASH_ARROW_RI"
      "GHT\020\232\002\022\016\n\tTRINATURE\020\233\002\022\020\n\013ANIMAL_FROG\020\234\002"
      "\022\013\n\006GRAVEL\020\235\002\022 \n\033WARNING_PEDESTRIAN_CROS"
      "SING\020\236\002\022\r\n\010LOW_TREE\020\237\002\022\022\n\rWARNING_RIDER\020"
      "\240\002\022\017\n\nSTOP_AHEAD\020\241\002\022\020\n\013YIELD_AHEAD\020\242\002\022\032\n"
      "\025WATER_PROTECTION_AREA\020\243\002\022\020\n\013TOLL_DOUANE"
      "\020\244\002\022\023\n\016NO_CAR_OR_BIKE\020\245\002\022\036\n\031DRIVING_DIRE"
      "CTION_ONLY_UP\020\246\002\022\"\n\035DRIVING_DIRECTION_UP"
      "_AND_DOWN\020\247\002\022\022\n\rMILITARY_SIGN\020\250\002\022\t\n\004SMOG"
      "\020\251\002\022\025\n\020ROUNDABOUT_AHEAD\020\252\002\022(\n#MANDATORY_"
      "LEFT_OR_STRAIGHT_OR_RIGHT\020\253\002\022\023\n\016DEAD_END"
      "_RIGHT\020\254\002\022\022\n\rDEAD_END_LEFT\020\255\002\022\017\n\nTOLL_TR"
      "UCK\020\256\002\022\023\n\016TOLL_TRUCK_END\020\257\002\022\027\n\022STAGGERED"
      "_JUNCTION\020\260\002\022\034\n\027AXLE_WEIGHT_RESTRICTION\020"
      "\261\002\022\r\n\010TOLL_END\020\262\002\022\021\n\014TOLL_CAR_END\020\263\002\022\022\n\r"
      "TOLL_LANE_END\020\264\002\032\177\n\022ValueAndConfidence\022+"
      "\n\005value\030\001 \001(\0132\034.google.protobuf.StringVa"
      "lue\022<\n\nconfidence\030\002 \001(\0132(.sensoris.proto"
      "buf.types.base.Confidence\032\306\002\n\027Permanency"
      "AndConfidence\022f\n\004type\030\001 \001(\0162X.sensoris.p"
      "rotobuf.categories.trafficregulation.Tra"
      "fficSign.PermanencyAndConfidence.Type\022<\n"
      "\nconfidence\030\002 \001(\0132(.sensoris.protobuf.ty"
      "pes.base.Confidence\"\204\001\n\004Type\022\020\n\014UNKNOWN_"
      "TYPE\020\000\022\n\n\006STATIC\020\001\022\014\n\010VARIABLE\020\002\022\033\n\027VARI"
      "ABLE_ELECTRONICALLY\020\003\022\031\n\025VARIABLE_MECHAN"
      "ICALLY\020\004\022\030\n\024VARIABLE_DEACTIVATED\020\005\032\361\001\n\027V"
      "alidationAndConfidence\022f\n\004type\030\001 \001(\0162X.s"
      "ensoris.protobuf.categories.trafficregul"
      "ation.TrafficSign.ValidationAndConfidenc"
      "e.Type\022<\n\nconfidence\030\002 \001(\0132(.sensoris.pr"
      "otobuf.types.base.Confidence\"0\n\004Type\022\020\n\014"
      "UNKNOWN_TYPE\020\000\022\t\n\005VALID\020\001\022\013\n\007INVALID\020\002\032\311"
      "\002\n$DominantBackgroundColorAndConfidence\022"
      "s\n\004type\030\001 \001(\0162e.sensoris.protobuf.catego"
      "ries.trafficregulation.TrafficSign.Domin"
      "antBackgroundColorAndConfidence.Type\022<\n\n"
      "confidence\030\002 \001(\0132(.sensoris.protobuf.typ"
      "es.base.Confidence\"n\n\004Type\022\020\n\014UNKNOWN_TY"
      "PE\020\000\022\t\n\005OTHER\020\001\022\t\n\005WHITE\020\002\022\007\n\003RED\020\003\022\t\n\005G"
      "REEN\020\004\022\010\n\004BLUE\020\005\022\n\n\006YELLOW\020\006\022\t\n\005BLACK\020\007\022"
      "\t\n\005BROWN\020\010\032\302\022\n\036SupplementarySignAndConfi"
      "dence\022F\n\024existence_confidence\030\001 \001(\0132(.se"
      "nsoris.protobuf.types.base.Confidence\022L\n"
      "\020detection_status\030\002 \001(\01322.sensoris.proto"
      "buf.types.base.EventDetectionStatus\022\211\001\n\023"
      "type_and_confidence\030\003 \001(\0132l.sensoris.pro"
      "tobuf.categories.trafficregulation.Traff"
      "icSign.SupplementarySignAndConfidence.Ty"
      "peAndConfidence\022l\n\024value_and_confidence\030"
      "\004 \001(\0132N.sensoris.protobuf.categories.tra"
      "fficregulation.TrafficSign.ValueAndConfi"
      "dence\032\217\017\n\021TypeAndConfidence\022\177\n\004type\030\001 \001("
      "\0162q.sensoris.protobuf.categories.traffic"
      "regulation.TrafficSign.SupplementarySign"
      "AndConfidence.TypeAndConfidence.Type\022<\n\n"
      "confidence\030\002 \001(\0132(.sensoris.protobuf.typ"
      "es.base.Confidence\0220\n\nother_text\030\003 \001(\0132\034"
      ".google.protobuf.StringValue\"\210\r\n\004Type\022\020\n"
      "\014UNKNOWN_TYPE\020\000\022\025\n\021SUP_OTHER_AS_TEXT\020\001\022\013"
      "\n\007SUP_WET\020\002\022\014\n\010SUP_RAIN\020\003\022\014\n\010SUP_SNOW\020\004\022"
      "\024\n\020SUP_SNOW_OR_RAIN\020\005\022\013\n\007SUP_FOG\020\006\022\014\n\010SU"
      "P_TIME\020\007\022\024\n\020SUP_DAY_AND_TIME\020\010\022\r\n\tSUP_NI"
      "GHT\020\t\022\016\n\nSUP_SEASON\020\n\022\020\n\014SUP_WORKDAYS\020\013\022"
      "\031\n\025SUP_WORKDAYS_AND_TIME\020\014\022\016\n\nSUP_SCHOOL"
      "\020\r\022\014\n\010SUP_RAMP\020\016\022\r\n\tSUP_TRUCK\020\017\022\032\n\026SUP_T"
      "RUCK_WITH_TRAILER\020\020\022\025\n\021SUP_PASSENGER_CAR"
      "\020\021\022!\n\035SUP_PASSENGER_CAR_WITH_TAILER\020\022\022\026\n"
      "\022SUP_TRACTOR_EXCEPT\020\023\022\013\n\007SUP_BUS\020\024\022\026\n\022SU"
      "P_TRUCKS_AND_BUS\020\025\022\027\n\023SUP_CARS_TRUCKS_BU"
      "S\020\026\022\014\n\010SUP_TAXI\020\027\022\014\n\010SUP_TANK\020\030\022\020\n\014SUP_R"
      "OADSIDE\020\031\022\016\n\nSUP_WEIGHT\020\032\022\023\n\017SUP_STARTIN"
      "G_IN\020\033\022\021\n\rSUP_VALID_FOR\020\034\022\032\n\026SUP_IN_RIGH"
      "T_DIRECTION\020\035\022\031\n\025SUP_IN_LEFT_DIRECTION\020\036"
      "\022\014\n\010SUP_ZONE\020\037\022\022\n\016SUP_ZONE_START\020 \022\020\n\014SU"
      "P_ZONE_END\020!\022\031\n\025SUP_BEGIN_OF_VALIDITY\020\"\022"
      "\027\n\023SUP_END_OF_VALIDITY\020#\022\014\n\010SUP_FROG\020$\022\017"
      "\n\013SUP_ALL_WAY\020%\022\014\n\010SUP_BIKE\020&\022\023\n\017SUP_BIK"
      "E_EXCEPT\020\'\022\022\n\016SUP_BUS_EXCEPT\020(\022\016\n\nSUP_CA"
      "MPER\020)\022\017\n\013SUP_CARAVAN\020*\022\034\n\030SUP_CONSTRUCT"
      "ION_GATEWAY\020+\022\021\n\rSUP_CROSS_WAY\020,\022\027\n\023SUP_"
      "DELIVERY_EXCEPT\020-\022\026\n\022SUP_ELECTRONIC_CAR\020"
      ".\022\017\n\013SUP_GATEWAY\020/\022\025\n\021SUP_GIVE_WAY_LEFT\020"
      "0\022\026\n\022SUP_GIVE_WAY_RIGHT\0201\022\016\n\nSUP_GRAVEL\020"
      "2\022\016\n\nSUP_HAZMAT\0203\022\021\n\rSUP_HAZ_WATER\0204\022\014\n\010"
      "SUP_KIDS\0205\022\023\n\017SUP_LOCAL_EXCEP\0206\022\020\n\014SUP_L"
      "OW_TREE\0207\022\022\n\016SUP_MOTORCYCLE\0208\022\031\n\025SUP_MOT"
      "ORCYCLE_EXCEPT\0209\022\024\n\020SUP_NEW_ROAD_BED\020:\022\030"
      "\n\024SUP_NO_STOP_SHOULDER\020;\022\021\n\rSUP_OIL_TRAI"
      "L\020<\022\034\n\030SUP_PASSENGER_CAR_EXCEPT\020=\022(\n$SUP"
      "_PASSENGER_CAR_WITH_TAILER_EXCEPT\020>\022\022\n\016S"
      "UP_PEDESTRIAN\020\?\022\032\n\026SUP_PRIORITY_TURN_LEF"
      "T\020@\022\033\n\027SUP_PRIORITY_TURN_RIGHT\020A\022\023\n\017SUP_"
      "ROAD_DAMAGE\020B\022\014\n\010SUP_RUTS\020C\022\017\n\013SUP_TRACT"
      "OR\020D\022 \n\034SUP_TRACTOR_MAY_BE_OVERTAKEN\020E\022\023"
      "\n\017SUP_TRAFFIC_JAM\020F\022\r\n\tSUP_TRAIN\020G\022\014\n\010SU"
      "P_TRAM\020H\022\024\n\020SUP_TRUCK_EXCEPT\020I\022!\n\035SUP_TR"
      "UCK_WITH_TRAILER_EXCEPT\020J\022\032\n\026SUP_GET_IN_"
      "PROPER_LANE\020K\022\026\n\022SUP_ROADSIDE_TRUCK\020L\022\016\n"
      "\nSUP_RAPPEL\020M\022\026\n\022SUP_RADAR_ENFORCED\020N\022\030\n"
      "\024SUP_STOP_IN_DISTANCE\020O\"\260\001\n\031TrafficRegul"
      "ationCategory\022@\n\010envelope\030\001 \001(\0132..sensor"
      "is.protobuf.types.base.CategoryEnvelope\022"
      "Q\n\014traffic_sign\030\002 \003(\0132;.sensoris.protobu"
      "f.categories.trafficregulation.TrafficSi"
      "gnBS\n)org.sensoris.categories.trafficreg"
      "ulationB!SensorisTrafficRegulationCatego"
      "ryP\001\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 12975);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensoris/protobuf/categories/traffic_regulation.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::AddDescriptors();
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace trafficregulation {
const ::google::protobuf::EnumDescriptor* TrafficSign_ShapeAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_enum_descriptors[0];
}
bool TrafficSign_ShapeAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::UNKNOWN_TYPE;
const TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::OTHER;
const TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::RECTANGLE;
const TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::SQUARE;
const TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::TRIANGLE_UP;
const TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::TRIANGLE_DOWN;
const TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::DIAMOND;
const TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::HEXAGON;
const TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::ROUND;
const TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::CROSS_BUCK;
const TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::OCTAGON;
const TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::ELLIPSE;
const TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::PENTAGON;
const TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::Type_MIN;
const TrafficSign_ShapeAndConfidence_Type TrafficSign_ShapeAndConfidence::Type_MAX;
const int TrafficSign_ShapeAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSign_TypeAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_enum_descriptors[1];
}
bool TrafficSign_TypeAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
    case 299:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::UNKNOWN_TYPE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::OTHER_AS_TEXT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SPEED_LIMIT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SPEED_LIMIT_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SPEED_LIMIT_CHANGE_UPCOMING;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ADVISORY_SPEED_LIMIT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ADVISORY_SPEED_LIMIT_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_OVERTAKING;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_OVERTAKING_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PROTECTED_PASSING_START;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PROTECTED_PASSING_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PROTECTED_PASSING_LEFT_START;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PROTECTED_PASSING_RIGHT_START;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PROTECTED_PASSING_LEFT_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PROTECTED_PASSING_RIGHT_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_OVERTAKING_TRUCK;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_OVERTAKING_TRUCK_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ALL_RESTRICTIONS_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::CITY_START;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::CITY_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HIGHWAY;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HIGHWAY_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MOTORWAY;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MOTORWAY_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::CONSTRUCTION;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::CONSTRUCTION_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LANE_MERGE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LANE_MERGE_ON_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LANE_MERGE_ON_LEFT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LANE_MERGE_CENTER;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::RAILWAY_CROSSING_GENERAL;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::RAILWAY_CROSSING_PROTECTED;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::RAILWAY_CROSSING_UNPROTECTED;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ROAD_NARROWS;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ROAD_NARROWS_LEFT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ROAD_NARROWS_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ROAD_NARROWS_CENTER;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SHARP_CURVE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SHARP_CURVE_LEFT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SHARP_CURVE_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WINDING_ROAD;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WINDING_ROAD_STARTING_LEFT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WINDING_ROAD_STARTING_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STEEP_HILL;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STEEP_HILL_UPWARDS;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STEEP_HILL_DOWNWARDS;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STOP_SIGN;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LATERAL_WIND;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LATERAL_WIND_FROM_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LATERAL_WIND_FROM_LEFT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::GENERAL_WARNING;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::RISK_OF_GROUNDING;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ANIMAL;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ICY_CONDITIONS;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SLIPPERY_ROAD;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::UNEVEN_ROAD;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SCHOOL_ZONE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TRAMWAY_CROSSING;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::CONGESTION_HAZARD;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ACCIDENT_HAZARD;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::BICYCLE_CROSSING;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PRIORITY_OVER_ONCOMING_TRAFFIC;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::YIELD;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PRIORITY_ROAD;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PRIORITY_ROAD_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TRAFFIC_CALMING;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TRAFFIC_CALMING_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ENVIRONMENTAL_AREA;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ENVIRONMENTAL_AREA_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::INTERSECTION;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ROUNDABOUT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PASSING_ON_LEFT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PASSING_ON_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PASSING_ON_LEFT_OR_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MANDATORY_TURN_RIGHT_ONLY;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MANDATORY_TURN_LEFT_ONLY;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MANDATORY_STRAIGHT_ONLY;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MANDATORY_TURN_LEFT_OR_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MANDATORY_TURN_RESTRICTION;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MANDATORY_STRAIGHT_OR_LEFT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MANDATORY_STRAIGHT_OR_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_LEFT_TURN;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_RIGHT_TURN;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_U_TURN;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_U_OR_LEFT_TURN;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::U_TURN_ALLOWED;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MANDATORY_LEFT_TRUCK;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MANDATORY_RIGHT_TRUCK;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MANDATORY_STRAIGHT_TRUCK;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_ENTRY;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DEAD_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HIGH_OCCUPANCY_VEHICLE_LANE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TOLL;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TOLL_CAR;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TOLL_LANE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::EXPRESS_LANE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SHOULDER_OPEN_FOR_TRAFFIC;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SHOULDER_CLOSED_FOR_TRAFFIC;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LANE_CLOSED;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LANE_CLOSED_RIGHT_MOST_LANE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LANE_CLOSED_LEFT_MOST_LANE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WARNING_PEDESTRIAN;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WARNING_CHILDREN;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WARNING_BICYCLE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WARNING_BUS;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PUBLIC_TRANSPORTATION_STOP;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PEDESTRIAN_CROSSING;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WEIGHT_RESTRICTION;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HEIGHT_RESTRICTION;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LENGTH_RESTRICTION;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WIDTH_RESTRICTION;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WARNING_TRUCK_ROLLOVER;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SIGNAL_AHEAD;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SKI_CROSSING;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_AGRICULTUR_VEHICLE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_BICYCLE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_BUS;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_HAUL_EXPLOSIVES;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_HAUL_HARMFUL_TO_WATER;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_HAUL_HAZARDOUS_MATERIAL;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_MOTORCYCLE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_TRAILER;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_TRUCK_WITH_TRAILER;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PARK_AND_RIDE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ROAD_DISTANCE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::EMERGENCY_PHONE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SPEED_LIMIT_ENFORCEMENT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TRAFFIC_LIGHT_ENFORCEMENT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::BOARD_DIRECTION;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STREET_NAME;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TRUCK_SPEED_LIMIT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TRUCK_SPEED_LIMIT_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SPEED_LIMIT_NIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SPEED_LIMIT_NIGHT_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MINIMUM_SPEED;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MINIMUM_SPEED_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PEDESTRIAN_ZONE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PEDESTRIAN_ZONE_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PEDESTRIAN_PATH;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PEDESTRIAN_PATH_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PEDESTRIAN_BICYCLE_PATH;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PEDESTRIAN_BICYCLE_PATH_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::BICYCLE_PATH;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::BICYCLE_PATH_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::BICYCLE_STREET;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::BICYCLE_STREET_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::CURVE_LEFT_THEN_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::CURVE_RIGHT_THEN_LEFT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::CURVE_TRIPLE_HAIRPIN;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STEEP_DROP;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STEEP_DROP_ON_LEFT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STEEP_DROP_ON_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_ANIMAL_CATTLE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ANIMAL_DEER;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ANIMAL_MOOSE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_HORSE_RIDING;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::FALLING_ROCKS;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::FALLING_ROCKS_LEFT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::FALLING_ROCKS_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::YIELD_TO_ONCOMING_TRAFFIC;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::UNPROTECTED_LEFT_TURN;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ONEWAY_TRAFFIC;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ONEWAY_TRAFFIC_TO_LEFT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ONEWAY_TRAFFIC_TO_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ONEWAY_TRAFFIC_TO_STRAIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_VEHICLE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_MOTOR_VEHICLE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_TRUCK;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_PEDESTRIAN;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LANE_USED_IN_BOTH_DIRECTIONS;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::FOG_AREA;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TIRE_CHAINS_MANDATORY;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HIJACKING_HOTSPOT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::OVERPASS_AHEAD;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TUNNEL;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::FERRY_TERMINAL;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NARROW_BRIDGE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_IDLING;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HUMPBACK_BRIDGE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::EMBANKMENT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::EMBANKMENT_ON_THE_LEFT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::EMBANKMENT_ON_THE_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::CROSSING_WITH_PRIORITY_OVER_MINOR_ROAD;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::CROSSING_WITH_PRIORITY_TO_THE_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::BRANCH_TO_THE_LEFT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::BRANCH_TO_THE_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TWO_WAY_TRAFFIC;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::BUMP;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DIP;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ROAD_FLOODED;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::AUDIBLE_WARNING;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::VILLAGE_AHEAD;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MOVABLE_BRIDGE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SLOW_DOWN;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::INTERSECTION_T;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::INTERSECTION_T_LEFT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::INTERSECTION_T_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::INTERSECTION_T_LEFT_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::INTERSECTION_Y;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::USE_LOW_GEAR;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::USE_LOW_GEAR_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_COMPRESSION_BRAKING;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_COMPRESSION_BRAKING_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WAITING_LINE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DONT_STOP_ZONE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HONKING_PROHIBITED;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::FASTEN_SEAT_BELT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HAMLET_ENTRY;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HAMLET_EXIT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HIGHWAY_MARKER_1_STRIPE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HIGHWAY_MARKER_2_STRIPES;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HIGHWAY_MARKER_3_STRIPES;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::GUIDING_BEACON;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::COUNTDOWN_MARKER_1_STRIPE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::COUNTDOWN_MARKER_2_STRIPES;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::COUNTDOWN_MARKER_3_STRIPES;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DIVERSION_ROUTE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DIVERSION_ROUTE_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_STOPPING_EXCEPT_TAXI;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_STOPPING;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_STOPPING_LEFT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_STOPPING_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_STOPPING_LEFT_AND_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_PARKING;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_PARKING_LEFT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_PARKING_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_PARKING_LEFT_AND_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::RUNNAWAY_TRUCK_RAMP;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TURN_ON_GREEN;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_TURN_ON_RED;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MOTORWAY_ROAD_NUMBER;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HIGHWAY_ROAD_NUMBER;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HIGHWAY_INTERCHANGE_NUMBER;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::EUROPEAN_ROAD_NUMBER;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SPEED_LIMIT_ZONE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SPEED_LIMIT_ZONE_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_PARKING_ZONE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_PARKING_ZONE_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PARKING_ZONE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PARKING_ZONE_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PARKING;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PARKING_TO_LEFT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PARKING_TO_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PARKING_GARAGE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PARKING_ON_SIDEWAY;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SAFETY_DISTANCE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SAFETY_DISTANCE_VEHICLE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SAFETY_DISTANCE_TRUCK;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DETOUR;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DETOUR_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DETOUR_LEFT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DETOUR_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STATION_GAS;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STATION_LPG;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STATION_CNG;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STATION_H2;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STATION_ELECTRO;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STATION_POLICE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::CAMPING_SPOT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::RESTROOMS;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::INFO_POINT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MOTORWAY_EXIT_AHEAD;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HIGHWAY_EXIT_AHEAD;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MOTORWAY_EXIT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::HIGHWAY_EXIT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::FIRST_AID;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LOW_FLYING;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LANE_SHIFT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LANE_SHIFT_TO_LEFT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LANE_SHIFT_TO_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PEDESTRIAN_UNDERPASS;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PEDESTRIAN_OVERPASS;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::BREAKDOWN_BAY;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::BUS_LANE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DOUBLE_HAIRPIN;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::COUNTRY_SPECIFIC_INFORMATION;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::PEDESTRIAN_BICYCLE_SHARED_PATH;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::OVERHEAD_LANE_CONTROL_CLOSED;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::OVERHEAD_LANE_CONTROL_OPEN;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::OVERHEAD_LANE_CONTROL_CLOSING_LEFT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::OVERHEAD_LANE_CONTROL_CLOSING_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::OVERHEAD_LANE_CONTROL_FLASH_ARROW_LEFT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::OVERHEAD_LANE_CONTROL_FLASH_ARROW_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TRINATURE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ANIMAL_FROG;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::GRAVEL;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WARNING_PEDESTRIAN_CROSSING;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::LOW_TREE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WARNING_RIDER;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STOP_AHEAD;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::YIELD_AHEAD;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::WATER_PROTECTION_AREA;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TOLL_DOUANE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::NO_CAR_OR_BIKE;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DRIVING_DIRECTION_ONLY_UP;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DRIVING_DIRECTION_UP_AND_DOWN;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MILITARY_SIGN;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::SMOG;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::ROUNDABOUT_AHEAD;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::MANDATORY_LEFT_OR_STRAIGHT_OR_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DEAD_END_RIGHT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::DEAD_END_LEFT;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TOLL_TRUCK;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TOLL_TRUCK_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::STAGGERED_JUNCTION;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::AXLE_WEIGHT_RESTRICTION;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TOLL_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TOLL_CAR_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::TOLL_LANE_END;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::Type_MIN;
const TrafficSign_TypeAndConfidence_Type TrafficSign_TypeAndConfidence::Type_MAX;
const int TrafficSign_TypeAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSign_PermanencyAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_enum_descriptors[2];
}
bool TrafficSign_PermanencyAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSign_PermanencyAndConfidence_Type TrafficSign_PermanencyAndConfidence::UNKNOWN_TYPE;
const TrafficSign_PermanencyAndConfidence_Type TrafficSign_PermanencyAndConfidence::STATIC;
const TrafficSign_PermanencyAndConfidence_Type TrafficSign_PermanencyAndConfidence::VARIABLE;
const TrafficSign_PermanencyAndConfidence_Type TrafficSign_PermanencyAndConfidence::VARIABLE_ELECTRONICALLY;
const TrafficSign_PermanencyAndConfidence_Type TrafficSign_PermanencyAndConfidence::VARIABLE_MECHANICALLY;
const TrafficSign_PermanencyAndConfidence_Type TrafficSign_PermanencyAndConfidence::VARIABLE_DEACTIVATED;
const TrafficSign_PermanencyAndConfidence_Type TrafficSign_PermanencyAndConfidence::Type_MIN;
const TrafficSign_PermanencyAndConfidence_Type TrafficSign_PermanencyAndConfidence::Type_MAX;
const int TrafficSign_PermanencyAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSign_ValidationAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_enum_descriptors[3];
}
bool TrafficSign_ValidationAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSign_ValidationAndConfidence_Type TrafficSign_ValidationAndConfidence::UNKNOWN_TYPE;
const TrafficSign_ValidationAndConfidence_Type TrafficSign_ValidationAndConfidence::VALID;
const TrafficSign_ValidationAndConfidence_Type TrafficSign_ValidationAndConfidence::INVALID;
const TrafficSign_ValidationAndConfidence_Type TrafficSign_ValidationAndConfidence::Type_MIN;
const TrafficSign_ValidationAndConfidence_Type TrafficSign_ValidationAndConfidence::Type_MAX;
const int TrafficSign_ValidationAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSign_DominantBackgroundColorAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_enum_descriptors[4];
}
bool TrafficSign_DominantBackgroundColorAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSign_DominantBackgroundColorAndConfidence_Type TrafficSign_DominantBackgroundColorAndConfidence::UNKNOWN_TYPE;
const TrafficSign_DominantBackgroundColorAndConfidence_Type TrafficSign_DominantBackgroundColorAndConfidence::OTHER;
const TrafficSign_DominantBackgroundColorAndConfidence_Type TrafficSign_DominantBackgroundColorAndConfidence::WHITE;
const TrafficSign_DominantBackgroundColorAndConfidence_Type TrafficSign_DominantBackgroundColorAndConfidence::RED;
const TrafficSign_DominantBackgroundColorAndConfidence_Type TrafficSign_DominantBackgroundColorAndConfidence::GREEN;
const TrafficSign_DominantBackgroundColorAndConfidence_Type TrafficSign_DominantBackgroundColorAndConfidence::BLUE;
const TrafficSign_DominantBackgroundColorAndConfidence_Type TrafficSign_DominantBackgroundColorAndConfidence::YELLOW;
const TrafficSign_DominantBackgroundColorAndConfidence_Type TrafficSign_DominantBackgroundColorAndConfidence::BLACK;
const TrafficSign_DominantBackgroundColorAndConfidence_Type TrafficSign_DominantBackgroundColorAndConfidence::BROWN;
const TrafficSign_DominantBackgroundColorAndConfidence_Type TrafficSign_DominantBackgroundColorAndConfidence::Type_MIN;
const TrafficSign_DominantBackgroundColorAndConfidence_Type TrafficSign_DominantBackgroundColorAndConfidence::Type_MAX;
const int TrafficSign_DominantBackgroundColorAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_enum_descriptors[5];
}
bool TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::UNKNOWN_TYPE;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_OTHER_AS_TEXT;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_WET;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_RAIN;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_SNOW;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_SNOW_OR_RAIN;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_FOG;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TIME;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_DAY_AND_TIME;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_NIGHT;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_SEASON;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_WORKDAYS;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_WORKDAYS_AND_TIME;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_SCHOOL;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_RAMP;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TRUCK;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TRUCK_WITH_TRAILER;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_PASSENGER_CAR;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_PASSENGER_CAR_WITH_TAILER;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TRACTOR_EXCEPT;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_BUS;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TRUCKS_AND_BUS;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_CARS_TRUCKS_BUS;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TAXI;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TANK;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_ROADSIDE;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_WEIGHT;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_STARTING_IN;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_VALID_FOR;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_IN_RIGHT_DIRECTION;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_IN_LEFT_DIRECTION;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_ZONE;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_ZONE_START;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_ZONE_END;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_BEGIN_OF_VALIDITY;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_END_OF_VALIDITY;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_FROG;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_ALL_WAY;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_BIKE;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_BIKE_EXCEPT;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_BUS_EXCEPT;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_CAMPER;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_CARAVAN;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_CONSTRUCTION_GATEWAY;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_CROSS_WAY;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_DELIVERY_EXCEPT;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_ELECTRONIC_CAR;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_GATEWAY;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_GIVE_WAY_LEFT;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_GIVE_WAY_RIGHT;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_GRAVEL;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_HAZMAT;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_HAZ_WATER;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_KIDS;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_LOCAL_EXCEP;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_LOW_TREE;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_MOTORCYCLE;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_MOTORCYCLE_EXCEPT;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_NEW_ROAD_BED;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_NO_STOP_SHOULDER;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_OIL_TRAIL;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_PASSENGER_CAR_EXCEPT;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_PASSENGER_CAR_WITH_TAILER_EXCEPT;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_PEDESTRIAN;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_PRIORITY_TURN_LEFT;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_PRIORITY_TURN_RIGHT;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_ROAD_DAMAGE;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_RUTS;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TRACTOR;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TRACTOR_MAY_BE_OVERTAKEN;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TRAFFIC_JAM;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TRAIN;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TRAM;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TRUCK_EXCEPT;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_TRUCK_WITH_TRAILER_EXCEPT;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_GET_IN_PROPER_LANE;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_ROADSIDE_TRUCK;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_RAPPEL;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_RADAR_ENFORCED;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SUP_STOP_IN_DISTANCE;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::Type_MIN;
const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::Type_MAX;
const int TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void TrafficSign_ShapeAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_ShapeAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void TrafficSign_ShapeAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence.confidence)
}
void TrafficSign_ShapeAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSign_ShapeAndConfidence::kTypeFieldNumber;
const int TrafficSign_ShapeAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSign_ShapeAndConfidence::TrafficSign_ShapeAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_ShapeAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
}
TrafficSign_ShapeAndConfidence::TrafficSign_ShapeAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_ShapeAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
}
TrafficSign_ShapeAndConfidence::TrafficSign_ShapeAndConfidence(const TrafficSign_ShapeAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
}

void TrafficSign_ShapeAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

TrafficSign_ShapeAndConfidence::~TrafficSign_ShapeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
  SharedDtor();
}

void TrafficSign_ShapeAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void TrafficSign_ShapeAndConfidence::ArenaDtor(void* object) {
  TrafficSign_ShapeAndConfidence* _this = reinterpret_cast< TrafficSign_ShapeAndConfidence* >(object);
  (void)_this;
}
void TrafficSign_ShapeAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TrafficSign_ShapeAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSign_ShapeAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSign_ShapeAndConfidence& TrafficSign_ShapeAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_ShapeAndConfidence.base);
  return *internal_default_instance();
}


void TrafficSign_ShapeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool TrafficSign_ShapeAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
  return false;
#undef DO_
}

void TrafficSign_ShapeAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
}

::google::protobuf::uint8* TrafficSign_ShapeAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
  return target;
}

size_t TrafficSign_ShapeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSign_ShapeAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign_ShapeAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSign_ShapeAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
    MergeFrom(*source);
  }
}

void TrafficSign_ShapeAndConfidence::MergeFrom(const TrafficSign_ShapeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TrafficSign_ShapeAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign_ShapeAndConfidence::CopyFrom(const TrafficSign_ShapeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_ShapeAndConfidence::IsInitialized() const {
  return true;
}

void TrafficSign_ShapeAndConfidence::Swap(TrafficSign_ShapeAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TrafficSign_ShapeAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TrafficSign_ShapeAndConfidence::UnsafeArenaSwap(TrafficSign_ShapeAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TrafficSign_ShapeAndConfidence::InternalSwap(TrafficSign_ShapeAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSign_ShapeAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSign_TypeAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_TypeAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_TypeAndConfidence_default_instance_._instance.get_mutable()->other_text_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
}
void TrafficSign_TypeAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence.confidence)
}
void TrafficSign_TypeAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
void TrafficSign_TypeAndConfidence::unsafe_arena_set_allocated_other_text(
    ::google::protobuf::StringValue* other_text) {
  if (GetArenaNoVirtual() == NULL) {
    delete other_text_;
  }
  other_text_ = other_text;
  if (other_text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence.other_text)
}
void TrafficSign_TypeAndConfidence::clear_other_text() {
  if (GetArenaNoVirtual() == NULL && other_text_ != NULL) {
    delete other_text_;
  }
  other_text_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSign_TypeAndConfidence::kTypeFieldNumber;
const int TrafficSign_TypeAndConfidence::kConfidenceFieldNumber;
const int TrafficSign_TypeAndConfidence::kOtherTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSign_TypeAndConfidence::TrafficSign_TypeAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_TypeAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
}
TrafficSign_TypeAndConfidence::TrafficSign_TypeAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_TypeAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
}
TrafficSign_TypeAndConfidence::TrafficSign_TypeAndConfidence(const TrafficSign_TypeAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  if (from.has_other_text()) {
    other_text_ = new ::google::protobuf::StringValue(*from.other_text_);
  } else {
    other_text_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
}

void TrafficSign_TypeAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

TrafficSign_TypeAndConfidence::~TrafficSign_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
  SharedDtor();
}

void TrafficSign_TypeAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
  if (this != internal_default_instance()) delete other_text_;
}

void TrafficSign_TypeAndConfidence::ArenaDtor(void* object) {
  TrafficSign_TypeAndConfidence* _this = reinterpret_cast< TrafficSign_TypeAndConfidence* >(object);
  (void)_this;
}
void TrafficSign_TypeAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TrafficSign_TypeAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSign_TypeAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSign_TypeAndConfidence& TrafficSign_TypeAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_TypeAndConfidence.base);
  return *internal_default_instance();
}


void TrafficSign_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && other_text_ != NULL) {
    delete other_text_;
  }
  other_text_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool TrafficSign_TypeAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue other_text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_other_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
  return false;
#undef DO_
}

void TrafficSign_TypeAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  // .google.protobuf.StringValue other_text = 3;
  if (this->has_other_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_other_text(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
}

::google::protobuf::uint8* TrafficSign_TypeAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  // .google.protobuf.StringValue other_text = 3;
  if (this->has_other_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_other_text(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
  return target;
}

size_t TrafficSign_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .google.protobuf.StringValue other_text = 3;
  if (this->has_other_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *other_text_);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSign_TypeAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign_TypeAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSign_TypeAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
    MergeFrom(*source);
  }
}

void TrafficSign_TypeAndConfidence::MergeFrom(const TrafficSign_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.has_other_text()) {
    mutable_other_text()->::google::protobuf::StringValue::MergeFrom(from.other_text());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TrafficSign_TypeAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign_TypeAndConfidence::CopyFrom(const TrafficSign_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_TypeAndConfidence::IsInitialized() const {
  return true;
}

void TrafficSign_TypeAndConfidence::Swap(TrafficSign_TypeAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TrafficSign_TypeAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TrafficSign_TypeAndConfidence::UnsafeArenaSwap(TrafficSign_TypeAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TrafficSign_TypeAndConfidence::InternalSwap(TrafficSign_TypeAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(other_text_, other->other_text_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSign_TypeAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSign_ValueAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_ValueAndConfidence_default_instance_._instance.get_mutable()->value_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_ValueAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void TrafficSign_ValueAndConfidence::unsafe_arena_set_allocated_value(
    ::google::protobuf::StringValue* value) {
  if (GetArenaNoVirtual() == NULL) {
    delete value_;
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence.value)
}
void TrafficSign_ValueAndConfidence::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
void TrafficSign_ValueAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence.confidence)
}
void TrafficSign_ValueAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSign_ValueAndConfidence::kValueFieldNumber;
const int TrafficSign_ValueAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSign_ValueAndConfidence::TrafficSign_ValueAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_ValueAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
}
TrafficSign_ValueAndConfidence::TrafficSign_ValueAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_ValueAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
}
TrafficSign_ValueAndConfidence::TrafficSign_ValueAndConfidence(const TrafficSign_ValueAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_value()) {
    value_ = new ::google::protobuf::StringValue(*from.value_);
  } else {
    value_ = NULL;
  }
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
}

void TrafficSign_ValueAndConfidence::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&value_)) + sizeof(confidence_));
}

TrafficSign_ValueAndConfidence::~TrafficSign_ValueAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
  SharedDtor();
}

void TrafficSign_ValueAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete confidence_;
}

void TrafficSign_ValueAndConfidence::ArenaDtor(void* object) {
  TrafficSign_ValueAndConfidence* _this = reinterpret_cast< TrafficSign_ValueAndConfidence* >(object);
  (void)_this;
}
void TrafficSign_ValueAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TrafficSign_ValueAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSign_ValueAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSign_ValueAndConfidence& TrafficSign_ValueAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_ValueAndConfidence.base);
  return *internal_default_instance();
}


void TrafficSign_ValueAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  _internal_metadata_.Clear();
}

bool TrafficSign_ValueAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.StringValue value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
  return false;
#undef DO_
}

void TrafficSign_ValueAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue value = 1;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_value(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
}

::google::protobuf::uint8* TrafficSign_ValueAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.StringValue value = 1;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_value(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
  return target;
}

size_t TrafficSign_ValueAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.StringValue value = 1;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSign_ValueAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign_ValueAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSign_ValueAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
    MergeFrom(*source);
  }
}

void TrafficSign_ValueAndConfidence::MergeFrom(const TrafficSign_ValueAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    mutable_value()->::google::protobuf::StringValue::MergeFrom(from.value());
  }
  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
}

void TrafficSign_ValueAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign_ValueAndConfidence::CopyFrom(const TrafficSign_ValueAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_ValueAndConfidence::IsInitialized() const {
  return true;
}

void TrafficSign_ValueAndConfidence::Swap(TrafficSign_ValueAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TrafficSign_ValueAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TrafficSign_ValueAndConfidence::UnsafeArenaSwap(TrafficSign_ValueAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TrafficSign_ValueAndConfidence::InternalSwap(TrafficSign_ValueAndConfidence* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(confidence_, other->confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSign_ValueAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSign_PermanencyAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_PermanencyAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void TrafficSign_PermanencyAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.confidence)
}
void TrafficSign_PermanencyAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSign_PermanencyAndConfidence::kTypeFieldNumber;
const int TrafficSign_PermanencyAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSign_PermanencyAndConfidence::TrafficSign_PermanencyAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_PermanencyAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
}
TrafficSign_PermanencyAndConfidence::TrafficSign_PermanencyAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_PermanencyAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
}
TrafficSign_PermanencyAndConfidence::TrafficSign_PermanencyAndConfidence(const TrafficSign_PermanencyAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
}

void TrafficSign_PermanencyAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

TrafficSign_PermanencyAndConfidence::~TrafficSign_PermanencyAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
  SharedDtor();
}

void TrafficSign_PermanencyAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void TrafficSign_PermanencyAndConfidence::ArenaDtor(void* object) {
  TrafficSign_PermanencyAndConfidence* _this = reinterpret_cast< TrafficSign_PermanencyAndConfidence* >(object);
  (void)_this;
}
void TrafficSign_PermanencyAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TrafficSign_PermanencyAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSign_PermanencyAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSign_PermanencyAndConfidence& TrafficSign_PermanencyAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_PermanencyAndConfidence.base);
  return *internal_default_instance();
}


void TrafficSign_PermanencyAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool TrafficSign_PermanencyAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
  return false;
#undef DO_
}

void TrafficSign_PermanencyAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
}

::google::protobuf::uint8* TrafficSign_PermanencyAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
  return target;
}

size_t TrafficSign_PermanencyAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSign_PermanencyAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign_PermanencyAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSign_PermanencyAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
    MergeFrom(*source);
  }
}

void TrafficSign_PermanencyAndConfidence::MergeFrom(const TrafficSign_PermanencyAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TrafficSign_PermanencyAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign_PermanencyAndConfidence::CopyFrom(const TrafficSign_PermanencyAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_PermanencyAndConfidence::IsInitialized() const {
  return true;
}

void TrafficSign_PermanencyAndConfidence::Swap(TrafficSign_PermanencyAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TrafficSign_PermanencyAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TrafficSign_PermanencyAndConfidence::UnsafeArenaSwap(TrafficSign_PermanencyAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TrafficSign_PermanencyAndConfidence::InternalSwap(TrafficSign_PermanencyAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSign_PermanencyAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSign_ValidationAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_ValidationAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void TrafficSign_ValidationAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence.confidence)
}
void TrafficSign_ValidationAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSign_ValidationAndConfidence::kTypeFieldNumber;
const int TrafficSign_ValidationAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSign_ValidationAndConfidence::TrafficSign_ValidationAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_ValidationAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
}
TrafficSign_ValidationAndConfidence::TrafficSign_ValidationAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_ValidationAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
}
TrafficSign_ValidationAndConfidence::TrafficSign_ValidationAndConfidence(const TrafficSign_ValidationAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
}

void TrafficSign_ValidationAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

TrafficSign_ValidationAndConfidence::~TrafficSign_ValidationAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
  SharedDtor();
}

void TrafficSign_ValidationAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void TrafficSign_ValidationAndConfidence::ArenaDtor(void* object) {
  TrafficSign_ValidationAndConfidence* _this = reinterpret_cast< TrafficSign_ValidationAndConfidence* >(object);
  (void)_this;
}
void TrafficSign_ValidationAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TrafficSign_ValidationAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSign_ValidationAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSign_ValidationAndConfidence& TrafficSign_ValidationAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_ValidationAndConfidence.base);
  return *internal_default_instance();
}


void TrafficSign_ValidationAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool TrafficSign_ValidationAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
  return false;
#undef DO_
}

void TrafficSign_ValidationAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
}

::google::protobuf::uint8* TrafficSign_ValidationAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
  return target;
}

size_t TrafficSign_ValidationAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSign_ValidationAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign_ValidationAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSign_ValidationAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
    MergeFrom(*source);
  }
}

void TrafficSign_ValidationAndConfidence::MergeFrom(const TrafficSign_ValidationAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TrafficSign_ValidationAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign_ValidationAndConfidence::CopyFrom(const TrafficSign_ValidationAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_ValidationAndConfidence::IsInitialized() const {
  return true;
}

void TrafficSign_ValidationAndConfidence::Swap(TrafficSign_ValidationAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TrafficSign_ValidationAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TrafficSign_ValidationAndConfidence::UnsafeArenaSwap(TrafficSign_ValidationAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TrafficSign_ValidationAndConfidence::InternalSwap(TrafficSign_ValidationAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSign_ValidationAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSign_DominantBackgroundColorAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_DominantBackgroundColorAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void TrafficSign_DominantBackgroundColorAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.confidence)
}
void TrafficSign_DominantBackgroundColorAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSign_DominantBackgroundColorAndConfidence::kTypeFieldNumber;
const int TrafficSign_DominantBackgroundColorAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSign_DominantBackgroundColorAndConfidence::TrafficSign_DominantBackgroundColorAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_DominantBackgroundColorAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
}
TrafficSign_DominantBackgroundColorAndConfidence::TrafficSign_DominantBackgroundColorAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_DominantBackgroundColorAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
}
TrafficSign_DominantBackgroundColorAndConfidence::TrafficSign_DominantBackgroundColorAndConfidence(const TrafficSign_DominantBackgroundColorAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
}

void TrafficSign_DominantBackgroundColorAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

TrafficSign_DominantBackgroundColorAndConfidence::~TrafficSign_DominantBackgroundColorAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
  SharedDtor();
}

void TrafficSign_DominantBackgroundColorAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void TrafficSign_DominantBackgroundColorAndConfidence::ArenaDtor(void* object) {
  TrafficSign_DominantBackgroundColorAndConfidence* _this = reinterpret_cast< TrafficSign_DominantBackgroundColorAndConfidence* >(object);
  (void)_this;
}
void TrafficSign_DominantBackgroundColorAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TrafficSign_DominantBackgroundColorAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSign_DominantBackgroundColorAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSign_DominantBackgroundColorAndConfidence& TrafficSign_DominantBackgroundColorAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_DominantBackgroundColorAndConfidence.base);
  return *internal_default_instance();
}


void TrafficSign_DominantBackgroundColorAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool TrafficSign_DominantBackgroundColorAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
  return false;
#undef DO_
}

void TrafficSign_DominantBackgroundColorAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
}

::google::protobuf::uint8* TrafficSign_DominantBackgroundColorAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
  return target;
}

size_t TrafficSign_DominantBackgroundColorAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSign_DominantBackgroundColorAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign_DominantBackgroundColorAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSign_DominantBackgroundColorAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
    MergeFrom(*source);
  }
}

void TrafficSign_DominantBackgroundColorAndConfidence::MergeFrom(const TrafficSign_DominantBackgroundColorAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TrafficSign_DominantBackgroundColorAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign_DominantBackgroundColorAndConfidence::CopyFrom(const TrafficSign_DominantBackgroundColorAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_DominantBackgroundColorAndConfidence::IsInitialized() const {
  return true;
}

void TrafficSign_DominantBackgroundColorAndConfidence::Swap(TrafficSign_DominantBackgroundColorAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TrafficSign_DominantBackgroundColorAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TrafficSign_DominantBackgroundColorAndConfidence::UnsafeArenaSwap(TrafficSign_DominantBackgroundColorAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TrafficSign_DominantBackgroundColorAndConfidence::InternalSwap(TrafficSign_DominantBackgroundColorAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSign_DominantBackgroundColorAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_default_instance_._instance.get_mutable()->other_text_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
}
void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.confidence)
}
void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::unsafe_arena_set_allocated_other_text(
    ::google::protobuf::StringValue* other_text) {
  if (GetArenaNoVirtual() == NULL) {
    delete other_text_;
  }
  other_text_ = other_text;
  if (other_text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.other_text)
}
void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::clear_other_text() {
  if (GetArenaNoVirtual() == NULL && other_text_ != NULL) {
    delete other_text_;
  }
  other_text_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::kTypeFieldNumber;
const int TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::kConfidenceFieldNumber;
const int TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::kOtherTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
}
TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
}
TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence(const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  if (from.has_other_text()) {
    other_text_ = new ::google::protobuf::StringValue(*from.other_text_);
  } else {
    other_text_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
}

void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::~TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
  SharedDtor();
}

void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
  if (this != internal_default_instance()) delete other_text_;
}

void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::ArenaDtor(void* object) {
  TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence* _this = reinterpret_cast< TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence* >(object);
  (void)_this;
}
void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence& TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence.base);
  return *internal_default_instance();
}


void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && other_text_ != NULL) {
    delete other_text_;
  }
  other_text_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue other_text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_other_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
  return false;
#undef DO_
}

void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  // .google.protobuf.StringValue other_text = 3;
  if (this->has_other_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_other_text(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
}

::google::protobuf::uint8* TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  // .google.protobuf.StringValue other_text = 3;
  if (this->has_other_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_other_text(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
  return target;
}

size_t TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .google.protobuf.StringValue other_text = 3;
  if (this->has_other_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *other_text_);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
    MergeFrom(*source);
  }
}

void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::MergeFrom(const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.has_other_text()) {
    mutable_other_text()->::google::protobuf::StringValue::MergeFrom(from.other_text());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::CopyFrom(const TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::IsInitialized() const {
  return true;
}

void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::Swap(TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::UnsafeArenaSwap(TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::InternalSwap(TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(other_text_, other->other_text_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSign_SupplementarySignAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_SupplementarySignAndConfidence_default_instance_._instance.get_mutable()->existence_confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_SupplementarySignAndConfidence_default_instance_._instance.get_mutable()->detection_status_ = const_cast< ::sensoris::protobuf::types::base::EventDetectionStatus*>(
      ::sensoris::protobuf::types::base::EventDetectionStatus::internal_default_instance());
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_SupplementarySignAndConfidence_default_instance_._instance.get_mutable()->type_and_confidence_ = const_cast< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence*>(
      ::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::internal_default_instance());
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_SupplementarySignAndConfidence_default_instance_._instance.get_mutable()->value_and_confidence_ = const_cast< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence*>(
      ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence::internal_default_instance());
}
void TrafficSign_SupplementarySignAndConfidence::unsafe_arena_set_allocated_existence_confidence(
    ::sensoris::protobuf::types::base::Confidence* existence_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete existence_confidence_;
  }
  existence_confidence_ = existence_confidence;
  if (existence_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.existence_confidence)
}
void TrafficSign_SupplementarySignAndConfidence::clear_existence_confidence() {
  if (GetArenaNoVirtual() == NULL && existence_confidence_ != NULL) {
    delete existence_confidence_;
  }
  existence_confidence_ = NULL;
}
void TrafficSign_SupplementarySignAndConfidence::unsafe_arena_set_allocated_detection_status(
    ::sensoris::protobuf::types::base::EventDetectionStatus* detection_status) {
  if (GetArenaNoVirtual() == NULL) {
    delete detection_status_;
  }
  detection_status_ = detection_status;
  if (detection_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.detection_status)
}
void TrafficSign_SupplementarySignAndConfidence::clear_detection_status() {
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
}
void TrafficSign_SupplementarySignAndConfidence::unsafe_arena_set_allocated_type_and_confidence(
    ::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence* type_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = type_and_confidence;
  if (type_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.type_and_confidence)
}
void TrafficSign_SupplementarySignAndConfidence::unsafe_arena_set_allocated_value_and_confidence(
    ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence* value_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete value_and_confidence_;
  }
  value_and_confidence_ = value_and_confidence;
  if (value_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.value_and_confidence)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSign_SupplementarySignAndConfidence::kExistenceConfidenceFieldNumber;
const int TrafficSign_SupplementarySignAndConfidence::kDetectionStatusFieldNumber;
const int TrafficSign_SupplementarySignAndConfidence::kTypeAndConfidenceFieldNumber;
const int TrafficSign_SupplementarySignAndConfidence::kValueAndConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSign_SupplementarySignAndConfidence::TrafficSign_SupplementarySignAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_SupplementarySignAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
}
TrafficSign_SupplementarySignAndConfidence::TrafficSign_SupplementarySignAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_SupplementarySignAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
}
TrafficSign_SupplementarySignAndConfidence::TrafficSign_SupplementarySignAndConfidence(const TrafficSign_SupplementarySignAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_existence_confidence()) {
    existence_confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.existence_confidence_);
  } else {
    existence_confidence_ = NULL;
  }
  if (from.has_detection_status()) {
    detection_status_ = new ::sensoris::protobuf::types::base::EventDetectionStatus(*from.detection_status_);
  } else {
    detection_status_ = NULL;
  }
  if (from.has_type_and_confidence()) {
    type_and_confidence_ = new ::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence(*from.type_and_confidence_);
  } else {
    type_and_confidence_ = NULL;
  }
  if (from.has_value_and_confidence()) {
    value_and_confidence_ = new ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence(*from.value_and_confidence_);
  } else {
    value_and_confidence_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
}

void TrafficSign_SupplementarySignAndConfidence::SharedCtor() {
  ::memset(&existence_confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_and_confidence_) -
      reinterpret_cast<char*>(&existence_confidence_)) + sizeof(value_and_confidence_));
}

TrafficSign_SupplementarySignAndConfidence::~TrafficSign_SupplementarySignAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
  SharedDtor();
}

void TrafficSign_SupplementarySignAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete existence_confidence_;
  if (this != internal_default_instance()) delete detection_status_;
  if (this != internal_default_instance()) delete type_and_confidence_;
  if (this != internal_default_instance()) delete value_and_confidence_;
}

void TrafficSign_SupplementarySignAndConfidence::ArenaDtor(void* object) {
  TrafficSign_SupplementarySignAndConfidence* _this = reinterpret_cast< TrafficSign_SupplementarySignAndConfidence* >(object);
  (void)_this;
}
void TrafficSign_SupplementarySignAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TrafficSign_SupplementarySignAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSign_SupplementarySignAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSign_SupplementarySignAndConfidence& TrafficSign_SupplementarySignAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign_SupplementarySignAndConfidence.base);
  return *internal_default_instance();
}


void TrafficSign_SupplementarySignAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && existence_confidence_ != NULL) {
    delete existence_confidence_;
  }
  existence_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && type_and_confidence_ != NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_and_confidence_ != NULL) {
    delete value_and_confidence_;
  }
  value_and_confidence_ = NULL;
  _internal_metadata_.Clear();
}

bool TrafficSign_SupplementarySignAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.Confidence existence_confidence = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_existence_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detection_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence type_and_confidence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
  return false;
#undef DO_
}

void TrafficSign_SupplementarySignAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 1;
  if (this->has_existence_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_existence_confidence(), output);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (this->has_detection_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_detection_status(), output);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence type_and_confidence = 3;
  if (this->has_type_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_type_and_confidence(), output);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 4;
  if (this->has_value_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_value_and_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
}

::google::protobuf::uint8* TrafficSign_SupplementarySignAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 1;
  if (this->has_existence_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_existence_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (this->has_detection_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_detection_status(), deterministic, target);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence type_and_confidence = 3;
  if (this->has_type_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_type_and_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 4;
  if (this->has_value_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_value_and_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
  return target;
}

size_t TrafficSign_SupplementarySignAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence existence_confidence = 1;
  if (this->has_existence_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *existence_confidence_);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (this->has_detection_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *detection_status_);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence.TypeAndConfidence type_and_confidence = 3;
  if (this->has_type_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *type_and_confidence_);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 4;
  if (this->has_value_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_and_confidence_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSign_SupplementarySignAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign_SupplementarySignAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSign_SupplementarySignAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
    MergeFrom(*source);
  }
}

void TrafficSign_SupplementarySignAndConfidence::MergeFrom(const TrafficSign_SupplementarySignAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_existence_confidence()) {
    mutable_existence_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.existence_confidence());
  }
  if (from.has_detection_status()) {
    mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(from.detection_status());
  }
  if (from.has_type_and_confidence()) {
    mutable_type_and_confidence()->::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence::MergeFrom(from.type_and_confidence());
  }
  if (from.has_value_and_confidence()) {
    mutable_value_and_confidence()->::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence::MergeFrom(from.value_and_confidence());
  }
}

void TrafficSign_SupplementarySignAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign_SupplementarySignAndConfidence::CopyFrom(const TrafficSign_SupplementarySignAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_SupplementarySignAndConfidence::IsInitialized() const {
  return true;
}

void TrafficSign_SupplementarySignAndConfidence::Swap(TrafficSign_SupplementarySignAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TrafficSign_SupplementarySignAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TrafficSign_SupplementarySignAndConfidence::UnsafeArenaSwap(TrafficSign_SupplementarySignAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TrafficSign_SupplementarySignAndConfidence::InternalSwap(TrafficSign_SupplementarySignAndConfidence* other) {
  using std::swap;
  swap(existence_confidence_, other->existence_confidence_);
  swap(detection_status_, other->detection_status_);
  swap(type_and_confidence_, other->type_and_confidence_);
  swap(value_and_confidence_, other->value_and_confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSign_SupplementarySignAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSign::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_default_instance_._instance.get_mutable()->existence_confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_default_instance_._instance.get_mutable()->detection_status_ = const_cast< ::sensoris::protobuf::types::base::EventDetectionStatus*>(
      ::sensoris::protobuf::types::base::EventDetectionStatus::internal_default_instance());
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_default_instance_._instance.get_mutable()->rectangular_box_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_default_instance_._instance.get_mutable()->shape_and_confidence_ = const_cast< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence*>(
      ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence::internal_default_instance());
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_default_instance_._instance.get_mutable()->type_and_confidence_ = const_cast< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence*>(
      ::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence::internal_default_instance());
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_default_instance_._instance.get_mutable()->value_and_confidence_ = const_cast< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence*>(
      ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence::internal_default_instance());
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_default_instance_._instance.get_mutable()->permanency_and_confidence_ = const_cast< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence*>(
      ::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence::internal_default_instance());
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_default_instance_._instance.get_mutable()->validation_and_confidence_ = const_cast< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence*>(
      ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence::internal_default_instance());
  ::sensoris::protobuf::categories::trafficregulation::_TrafficSign_default_instance_._instance.get_mutable()->background_color_and_confidence_ = const_cast< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence*>(
      ::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence::internal_default_instance());
}
void TrafficSign::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.envelope)
}
void TrafficSign::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void TrafficSign::unsafe_arena_set_allocated_existence_confidence(
    ::sensoris::protobuf::types::base::Confidence* existence_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete existence_confidence_;
  }
  existence_confidence_ = existence_confidence;
  if (existence_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.existence_confidence)
}
void TrafficSign::clear_existence_confidence() {
  if (GetArenaNoVirtual() == NULL && existence_confidence_ != NULL) {
    delete existence_confidence_;
  }
  existence_confidence_ = NULL;
}
void TrafficSign::unsafe_arena_set_allocated_detection_status(
    ::sensoris::protobuf::types::base::EventDetectionStatus* detection_status) {
  if (GetArenaNoVirtual() == NULL) {
    delete detection_status_;
  }
  detection_status_ = detection_status;
  if (detection_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.detection_status)
}
void TrafficSign::clear_detection_status() {
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
}
void TrafficSign::unsafe_arena_set_allocated_rectangular_box_and_accuracy(
    ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* rectangular_box_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete rectangular_box_and_accuracy_;
  }
  rectangular_box_and_accuracy_ = rectangular_box_and_accuracy;
  if (rectangular_box_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.rectangular_box_and_accuracy)
}
void TrafficSign::clear_rectangular_box_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && rectangular_box_and_accuracy_ != NULL) {
    delete rectangular_box_and_accuracy_;
  }
  rectangular_box_and_accuracy_ = NULL;
}
void TrafficSign::unsafe_arena_set_allocated_shape_and_confidence(
    ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence* shape_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete shape_and_confidence_;
  }
  shape_and_confidence_ = shape_and_confidence;
  if (shape_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.shape_and_confidence)
}
void TrafficSign::unsafe_arena_set_allocated_type_and_confidence(
    ::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence* type_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = type_and_confidence;
  if (type_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.type_and_confidence)
}
void TrafficSign::unsafe_arena_set_allocated_value_and_confidence(
    ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence* value_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete value_and_confidence_;
  }
  value_and_confidence_ = value_and_confidence;
  if (value_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.value_and_confidence)
}
void TrafficSign::unsafe_arena_set_allocated_permanency_and_confidence(
    ::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence* permanency_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete permanency_and_confidence_;
  }
  permanency_and_confidence_ = permanency_and_confidence;
  if (permanency_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.permanency_and_confidence)
}
void TrafficSign::unsafe_arena_set_allocated_validation_and_confidence(
    ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence* validation_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete validation_and_confidence_;
  }
  validation_and_confidence_ = validation_and_confidence;
  if (validation_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.validation_and_confidence)
}
void TrafficSign::unsafe_arena_set_allocated_background_color_and_confidence(
    ::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence* background_color_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete background_color_and_confidence_;
  }
  background_color_and_confidence_ = background_color_and_confidence;
  if (background_color_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficSign.background_color_and_confidence)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSign::kEnvelopeFieldNumber;
const int TrafficSign::kExistenceConfidenceFieldNumber;
const int TrafficSign::kDetectionStatusFieldNumber;
const int TrafficSign::kRectangularBoxAndAccuracyFieldNumber;
const int TrafficSign::kShapeAndConfidenceFieldNumber;
const int TrafficSign::kTypeAndConfidenceFieldNumber;
const int TrafficSign::kValueAndConfidenceFieldNumber;
const int TrafficSign::kPermanencyAndConfidenceFieldNumber;
const int TrafficSign::kValidationAndConfidenceFieldNumber;
const int TrafficSign::kBackgroundColorAndConfidenceFieldNumber;
const int TrafficSign::kSupplementarySignAndConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSign::TrafficSign()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign)
}
TrafficSign::TrafficSign(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  supplementary_sign_and_confidence_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign)
}
TrafficSign::TrafficSign(const TrafficSign& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      supplementary_sign_and_confidence_(from.supplementary_sign_and_confidence_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_existence_confidence()) {
    existence_confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.existence_confidence_);
  } else {
    existence_confidence_ = NULL;
  }
  if (from.has_detection_status()) {
    detection_status_ = new ::sensoris::protobuf::types::base::EventDetectionStatus(*from.detection_status_);
  } else {
    detection_status_ = NULL;
  }
  if (from.has_rectangular_box_and_accuracy()) {
    rectangular_box_and_accuracy_ = new ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy(*from.rectangular_box_and_accuracy_);
  } else {
    rectangular_box_and_accuracy_ = NULL;
  }
  if (from.has_shape_and_confidence()) {
    shape_and_confidence_ = new ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence(*from.shape_and_confidence_);
  } else {
    shape_and_confidence_ = NULL;
  }
  if (from.has_type_and_confidence()) {
    type_and_confidence_ = new ::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence(*from.type_and_confidence_);
  } else {
    type_and_confidence_ = NULL;
  }
  if (from.has_value_and_confidence()) {
    value_and_confidence_ = new ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence(*from.value_and_confidence_);
  } else {
    value_and_confidence_ = NULL;
  }
  if (from.has_permanency_and_confidence()) {
    permanency_and_confidence_ = new ::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence(*from.permanency_and_confidence_);
  } else {
    permanency_and_confidence_ = NULL;
  }
  if (from.has_validation_and_confidence()) {
    validation_and_confidence_ = new ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence(*from.validation_and_confidence_);
  } else {
    validation_and_confidence_ = NULL;
  }
  if (from.has_background_color_and_confidence()) {
    background_color_and_confidence_ = new ::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence(*from.background_color_and_confidence_);
  } else {
    background_color_and_confidence_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficregulation.TrafficSign)
}

void TrafficSign::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&background_color_and_confidence_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(background_color_and_confidence_));
}

TrafficSign::~TrafficSign() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficregulation.TrafficSign)
  SharedDtor();
}

void TrafficSign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete existence_confidence_;
  if (this != internal_default_instance()) delete detection_status_;
  if (this != internal_default_instance()) delete rectangular_box_and_accuracy_;
  if (this != internal_default_instance()) delete shape_and_confidence_;
  if (this != internal_default_instance()) delete type_and_confidence_;
  if (this != internal_default_instance()) delete value_and_confidence_;
  if (this != internal_default_instance()) delete permanency_and_confidence_;
  if (this != internal_default_instance()) delete validation_and_confidence_;
  if (this != internal_default_instance()) delete background_color_and_confidence_;
}

void TrafficSign::ArenaDtor(void* object) {
  TrafficSign* _this = reinterpret_cast< TrafficSign* >(object);
  (void)_this;
}
void TrafficSign::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TrafficSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficSign::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSign& TrafficSign::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficSign.base);
  return *internal_default_instance();
}


void TrafficSign::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficregulation.TrafficSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supplementary_sign_and_confidence_.Clear();
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && existence_confidence_ != NULL) {
    delete existence_confidence_;
  }
  existence_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && rectangular_box_and_accuracy_ != NULL) {
    delete rectangular_box_and_accuracy_;
  }
  rectangular_box_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && shape_and_confidence_ != NULL) {
    delete shape_and_confidence_;
  }
  shape_and_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && type_and_confidence_ != NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_and_confidence_ != NULL) {
    delete value_and_confidence_;
  }
  value_and_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && permanency_and_confidence_ != NULL) {
    delete permanency_and_confidence_;
  }
  permanency_and_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && validation_and_confidence_ != NULL) {
    delete validation_and_confidence_;
  }
  validation_and_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && background_color_and_confidence_ != NULL) {
    delete background_color_and_confidence_;
  }
  background_color_and_confidence_ = NULL;
  _internal_metadata_.Clear();
}

bool TrafficSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficregulation.TrafficSign)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_existence_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detection_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rectangular_box_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence shape_and_confidence = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shape_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence type_and_confidence = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanency_and_confidence = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_permanency_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence validation_and_confidence = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_validation_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence background_color_and_confidence = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_background_color_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_supplementary_sign_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficregulation.TrafficSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficregulation.TrafficSign)
  return false;
#undef DO_
}

void TrafficSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficregulation.TrafficSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
  if (this->has_existence_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_existence_confidence(), output);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
  if (this->has_detection_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_detection_status(), output);
  }

  // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;
  if (this->has_rectangular_box_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_rectangular_box_and_accuracy(), output);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence shape_and_confidence = 5;
  if (this->has_shape_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_shape_and_confidence(), output);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence type_and_confidence = 6;
  if (this->has_type_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_type_and_confidence(), output);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 7;
  if (this->has_value_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_value_and_confidence(), output);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanency_and_confidence = 8;
  if (this->has_permanency_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_permanency_and_confidence(), output);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence validation_and_confidence = 9;
  if (this->has_validation_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_validation_and_confidence(), output);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence background_color_and_confidence = 10;
  if (this->has_background_color_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_background_color_and_confidence(), output);
  }

  // repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->supplementary_sign_and_confidence_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->supplementary_sign_and_confidence(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficregulation.TrafficSign)
}

::google::protobuf::uint8* TrafficSign::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficregulation.TrafficSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
  if (this->has_existence_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_existence_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
  if (this->has_detection_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_detection_status(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;
  if (this->has_rectangular_box_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_rectangular_box_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence shape_and_confidence = 5;
  if (this->has_shape_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_shape_and_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence type_and_confidence = 6;
  if (this->has_type_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_type_and_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 7;
  if (this->has_value_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_value_and_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanency_and_confidence = 8;
  if (this->has_permanency_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_permanency_and_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence validation_and_confidence = 9;
  if (this->has_validation_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_validation_and_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence background_color_and_confidence = 10;
  if (this->has_background_color_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_background_color_and_confidence(), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->supplementary_sign_and_confidence_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->supplementary_sign_and_confidence(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficregulation.TrafficSign)
  return target;
}

size_t TrafficSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficregulation.TrafficSign)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign.SupplementarySignAndConfidence supplementary_sign_and_confidence = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->supplementary_sign_and_confidence_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->supplementary_sign_and_confidence(static_cast<int>(i)));
    }
  }

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 2;
  if (this->has_existence_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *existence_confidence_);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 3;
  if (this->has_detection_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *detection_status_);
  }

  // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 4;
  if (this->has_rectangular_box_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rectangular_box_and_accuracy_);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ShapeAndConfidence shape_and_confidence = 5;
  if (this->has_shape_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *shape_and_confidence_);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.TypeAndConfidence type_and_confidence = 6;
  if (this->has_type_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *type_and_confidence_);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValueAndConfidence value_and_confidence = 7;
  if (this->has_value_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_and_confidence_);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.PermanencyAndConfidence permanency_and_confidence = 8;
  if (this->has_permanency_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *permanency_and_confidence_);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.ValidationAndConfidence validation_and_confidence = 9;
  if (this->has_validation_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *validation_and_confidence_);
  }

  // .sensoris.protobuf.categories.trafficregulation.TrafficSign.DominantBackgroundColorAndConfidence background_color_and_confidence = 10;
  if (this->has_background_color_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *background_color_and_confidence_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSign::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSign>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficregulation.TrafficSign)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficregulation.TrafficSign)
    MergeFrom(*source);
  }
}

void TrafficSign::MergeFrom(const TrafficSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supplementary_sign_and_confidence_.MergeFrom(from.supplementary_sign_and_confidence_);
  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_existence_confidence()) {
    mutable_existence_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.existence_confidence());
  }
  if (from.has_detection_status()) {
    mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(from.detection_status());
  }
  if (from.has_rectangular_box_and_accuracy()) {
    mutable_rectangular_box_and_accuracy()->::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy::MergeFrom(from.rectangular_box_and_accuracy());
  }
  if (from.has_shape_and_confidence()) {
    mutable_shape_and_confidence()->::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence::MergeFrom(from.shape_and_confidence());
  }
  if (from.has_type_and_confidence()) {
    mutable_type_and_confidence()->::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence::MergeFrom(from.type_and_confidence());
  }
  if (from.has_value_and_confidence()) {
    mutable_value_and_confidence()->::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence::MergeFrom(from.value_and_confidence());
  }
  if (from.has_permanency_and_confidence()) {
    mutable_permanency_and_confidence()->::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence::MergeFrom(from.permanency_and_confidence());
  }
  if (from.has_validation_and_confidence()) {
    mutable_validation_and_confidence()->::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence::MergeFrom(from.validation_and_confidence());
  }
  if (from.has_background_color_and_confidence()) {
    mutable_background_color_and_confidence()->::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence::MergeFrom(from.background_color_and_confidence());
  }
}

void TrafficSign::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign::CopyFrom(const TrafficSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign::IsInitialized() const {
  return true;
}

void TrafficSign::Swap(TrafficSign* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TrafficSign* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TrafficSign::UnsafeArenaSwap(TrafficSign* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TrafficSign::InternalSwap(TrafficSign* other) {
  using std::swap;
  CastToBase(&supplementary_sign_and_confidence_)->InternalSwap(CastToBase(&other->supplementary_sign_and_confidence_));
  swap(envelope_, other->envelope_);
  swap(existence_confidence_, other->existence_confidence_);
  swap(detection_status_, other->detection_status_);
  swap(rectangular_box_and_accuracy_, other->rectangular_box_and_accuracy_);
  swap(shape_and_confidence_, other->shape_and_confidence_);
  swap(type_and_confidence_, other->type_and_confidence_);
  swap(value_and_confidence_, other->value_and_confidence_);
  swap(permanency_and_confidence_, other->permanency_and_confidence_);
  swap(validation_and_confidence_, other->validation_and_confidence_);
  swap(background_color_and_confidence_, other->background_color_and_confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficSign::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficRegulationCategory::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficregulation::_TrafficRegulationCategory_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::CategoryEnvelope*>(
      ::sensoris::protobuf::types::base::CategoryEnvelope::internal_default_instance());
}
void TrafficRegulationCategory::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::CategoryEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory.envelope)
}
void TrafficRegulationCategory::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficRegulationCategory::kEnvelopeFieldNumber;
const int TrafficRegulationCategory::kTrafficSignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficRegulationCategory::TrafficRegulationCategory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficRegulationCategory.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
}
TrafficRegulationCategory::TrafficRegulationCategory(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  traffic_sign_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficRegulationCategory.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
}
TrafficRegulationCategory::TrafficRegulationCategory(const TrafficRegulationCategory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      traffic_sign_(from.traffic_sign_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::CategoryEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
}

void TrafficRegulationCategory::SharedCtor() {
  envelope_ = NULL;
}

TrafficRegulationCategory::~TrafficRegulationCategory() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
  SharedDtor();
}

void TrafficRegulationCategory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
}

void TrafficRegulationCategory::ArenaDtor(void* object) {
  TrafficRegulationCategory* _this = reinterpret_cast< TrafficRegulationCategory* >(object);
  (void)_this;
}
void TrafficRegulationCategory::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TrafficRegulationCategory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficRegulationCategory::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficRegulationCategory& TrafficRegulationCategory::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::scc_info_TrafficRegulationCategory.base);
  return *internal_default_instance();
}


void TrafficRegulationCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traffic_sign_.Clear();
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  _internal_metadata_.Clear();
}

bool TrafficRegulationCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign traffic_sign = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_traffic_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
  return false;
#undef DO_
}

void TrafficRegulationCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign traffic_sign = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_sign_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->traffic_sign(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
}

::google::protobuf::uint8* TrafficRegulationCategory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign traffic_sign = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_sign_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->traffic_sign(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
  return target;
}

size_t TrafficRegulationCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sensoris.protobuf.categories.trafficregulation.TrafficSign traffic_sign = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_sign_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->traffic_sign(static_cast<int>(i)));
    }
  }

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficRegulationCategory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficRegulationCategory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficRegulationCategory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
    MergeFrom(*source);
  }
}

void TrafficRegulationCategory::MergeFrom(const TrafficRegulationCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traffic_sign_.MergeFrom(from.traffic_sign_);
  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::CategoryEnvelope::MergeFrom(from.envelope());
  }
}

void TrafficRegulationCategory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficRegulationCategory::CopyFrom(const TrafficRegulationCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficregulation.TrafficRegulationCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficRegulationCategory::IsInitialized() const {
  return true;
}

void TrafficRegulationCategory::Swap(TrafficRegulationCategory* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TrafficRegulationCategory* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TrafficRegulationCategory::UnsafeArenaSwap(TrafficRegulationCategory* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TrafficRegulationCategory::InternalSwap(TrafficRegulationCategory* other) {
  using std::swap;
  CastToBase(&traffic_sign_)->InternalSwap(CastToBase(&other->traffic_sign_));
  swap(envelope_, other->envelope_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficRegulationCategory::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fregulation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace trafficregulation
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ShapeAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_TypeAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValueAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_PermanencyAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_ValidationAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_DominantBackgroundColorAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence_TypeAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficregulation::TrafficSign_SupplementarySignAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficregulation::TrafficSign* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficregulation::TrafficSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficregulation::TrafficSign >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficregulation::TrafficRegulationCategory* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficregulation::TrafficRegulationCategory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficregulation::TrafficRegulationCategory >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
