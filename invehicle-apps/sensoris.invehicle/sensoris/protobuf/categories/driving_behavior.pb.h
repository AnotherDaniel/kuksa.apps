// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/driving_behavior.proto

#ifndef PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto
#define PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "sensoris/protobuf/types/base.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto 

namespace protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace drivingbehavior {
class DrivingBehaviorCategory;
class DrivingBehaviorCategoryDefaultTypeInternal;
extern DrivingBehaviorCategoryDefaultTypeInternal _DrivingBehaviorCategory_default_instance_;
class ParkingStatus;
class ParkingStatusDefaultTypeInternal;
extern ParkingStatusDefaultTypeInternal _ParkingStatus_default_instance_;
class ParkingStatus_DirectionAndConfidence;
class ParkingStatus_DirectionAndConfidenceDefaultTypeInternal;
extern ParkingStatus_DirectionAndConfidenceDefaultTypeInternal _ParkingStatus_DirectionAndConfidence_default_instance_;
class ParkingStatus_StatusAndConfidence;
class ParkingStatus_StatusAndConfidenceDefaultTypeInternal;
extern ParkingStatus_StatusAndConfidenceDefaultTypeInternal _ParkingStatus_StatusAndConfidence_default_instance_;
}  // namespace drivingbehavior
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
template<> ::sensoris::protobuf::categories::drivingbehavior::DrivingBehaviorCategory* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::drivingbehavior::DrivingBehaviorCategory>(Arena*);
template<> ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus>(Arena*);
template<> ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence>(Arena*);
template<> ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sensoris {
namespace protobuf {
namespace categories {
namespace drivingbehavior {

enum ParkingStatus_StatusAndConfidence_Type {
  ParkingStatus_StatusAndConfidence_Type_UNKNOWN_TYPE = 0,
  ParkingStatus_StatusAndConfidence_Type_PARK_IN = 1,
  ParkingStatus_StatusAndConfidence_Type_PARK_OUT = 2,
  ParkingStatus_StatusAndConfidence_Type_ParkingStatus_StatusAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ParkingStatus_StatusAndConfidence_Type_ParkingStatus_StatusAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ParkingStatus_StatusAndConfidence_Type_IsValid(int value);
const ParkingStatus_StatusAndConfidence_Type ParkingStatus_StatusAndConfidence_Type_Type_MIN = ParkingStatus_StatusAndConfidence_Type_UNKNOWN_TYPE;
const ParkingStatus_StatusAndConfidence_Type ParkingStatus_StatusAndConfidence_Type_Type_MAX = ParkingStatus_StatusAndConfidence_Type_PARK_OUT;
const int ParkingStatus_StatusAndConfidence_Type_Type_ARRAYSIZE = ParkingStatus_StatusAndConfidence_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParkingStatus_StatusAndConfidence_Type_descriptor();
inline const ::std::string& ParkingStatus_StatusAndConfidence_Type_Name(ParkingStatus_StatusAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParkingStatus_StatusAndConfidence_Type_descriptor(), value);
}
inline bool ParkingStatus_StatusAndConfidence_Type_Parse(
    const ::std::string& name, ParkingStatus_StatusAndConfidence_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParkingStatus_StatusAndConfidence_Type>(
    ParkingStatus_StatusAndConfidence_Type_descriptor(), name, value);
}
enum ParkingStatus_DirectionAndConfidence_Type {
  ParkingStatus_DirectionAndConfidence_Type_UNKNOWN_TYPE = 0,
  ParkingStatus_DirectionAndConfidence_Type_LONGITUDINAL = 1,
  ParkingStatus_DirectionAndConfidence_Type_LATERAL = 2,
  ParkingStatus_DirectionAndConfidence_Type_DIAGONAL = 3,
  ParkingStatus_DirectionAndConfidence_Type_ParkingStatus_DirectionAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ParkingStatus_DirectionAndConfidence_Type_ParkingStatus_DirectionAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ParkingStatus_DirectionAndConfidence_Type_IsValid(int value);
const ParkingStatus_DirectionAndConfidence_Type ParkingStatus_DirectionAndConfidence_Type_Type_MIN = ParkingStatus_DirectionAndConfidence_Type_UNKNOWN_TYPE;
const ParkingStatus_DirectionAndConfidence_Type ParkingStatus_DirectionAndConfidence_Type_Type_MAX = ParkingStatus_DirectionAndConfidence_Type_DIAGONAL;
const int ParkingStatus_DirectionAndConfidence_Type_Type_ARRAYSIZE = ParkingStatus_DirectionAndConfidence_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParkingStatus_DirectionAndConfidence_Type_descriptor();
inline const ::std::string& ParkingStatus_DirectionAndConfidence_Type_Name(ParkingStatus_DirectionAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParkingStatus_DirectionAndConfidence_Type_descriptor(), value);
}
inline bool ParkingStatus_DirectionAndConfidence_Type_Parse(
    const ::std::string& name, ParkingStatus_DirectionAndConfidence_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParkingStatus_DirectionAndConfidence_Type>(
    ParkingStatus_DirectionAndConfidence_Type_descriptor(), name, value);
}
// ===================================================================

class ParkingStatus_StatusAndConfidence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence) */ {
 public:
  ParkingStatus_StatusAndConfidence();
  virtual ~ParkingStatus_StatusAndConfidence();

  ParkingStatus_StatusAndConfidence(const ParkingStatus_StatusAndConfidence& from);

  inline ParkingStatus_StatusAndConfidence& operator=(const ParkingStatus_StatusAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParkingStatus_StatusAndConfidence(ParkingStatus_StatusAndConfidence&& from) noexcept
    : ParkingStatus_StatusAndConfidence() {
    *this = ::std::move(from);
  }

  inline ParkingStatus_StatusAndConfidence& operator=(ParkingStatus_StatusAndConfidence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ParkingStatus_StatusAndConfidence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParkingStatus_StatusAndConfidence* internal_default_instance() {
    return reinterpret_cast<const ParkingStatus_StatusAndConfidence*>(
               &_ParkingStatus_StatusAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(ParkingStatus_StatusAndConfidence* other);
  void Swap(ParkingStatus_StatusAndConfidence* other);
  friend void swap(ParkingStatus_StatusAndConfidence& a, ParkingStatus_StatusAndConfidence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParkingStatus_StatusAndConfidence* New() const final {
    return CreateMaybeMessage<ParkingStatus_StatusAndConfidence>(NULL);
  }

  ParkingStatus_StatusAndConfidence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ParkingStatus_StatusAndConfidence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ParkingStatus_StatusAndConfidence& from);
  void MergeFrom(const ParkingStatus_StatusAndConfidence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParkingStatus_StatusAndConfidence* other);
  protected:
  explicit ParkingStatus_StatusAndConfidence(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ParkingStatus_StatusAndConfidence_Type Type;
  static const Type UNKNOWN_TYPE =
    ParkingStatus_StatusAndConfidence_Type_UNKNOWN_TYPE;
  static const Type PARK_IN =
    ParkingStatus_StatusAndConfidence_Type_PARK_IN;
  static const Type PARK_OUT =
    ParkingStatus_StatusAndConfidence_Type_PARK_OUT;
  static inline bool Type_IsValid(int value) {
    return ParkingStatus_StatusAndConfidence_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ParkingStatus_StatusAndConfidence_Type_Type_MIN;
  static const Type Type_MAX =
    ParkingStatus_StatusAndConfidence_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ParkingStatus_StatusAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ParkingStatus_StatusAndConfidence_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ParkingStatus_StatusAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ParkingStatus_StatusAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  public:
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  ::sensoris::protobuf::types::base::Confidence* release_confidence();
  ::sensoris::protobuf::types::base::Confidence* mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence);
  void unsafe_arena_set_allocated_confidence(
      ::sensoris::protobuf::types::base::Confidence* confidence);
  ::sensoris::protobuf::types::base::Confidence* unsafe_arena_release_confidence();

  // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence_Type value);

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::base::Confidence* confidence_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ParkingStatus_DirectionAndConfidence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence) */ {
 public:
  ParkingStatus_DirectionAndConfidence();
  virtual ~ParkingStatus_DirectionAndConfidence();

  ParkingStatus_DirectionAndConfidence(const ParkingStatus_DirectionAndConfidence& from);

  inline ParkingStatus_DirectionAndConfidence& operator=(const ParkingStatus_DirectionAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParkingStatus_DirectionAndConfidence(ParkingStatus_DirectionAndConfidence&& from) noexcept
    : ParkingStatus_DirectionAndConfidence() {
    *this = ::std::move(from);
  }

  inline ParkingStatus_DirectionAndConfidence& operator=(ParkingStatus_DirectionAndConfidence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ParkingStatus_DirectionAndConfidence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParkingStatus_DirectionAndConfidence* internal_default_instance() {
    return reinterpret_cast<const ParkingStatus_DirectionAndConfidence*>(
               &_ParkingStatus_DirectionAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(ParkingStatus_DirectionAndConfidence* other);
  void Swap(ParkingStatus_DirectionAndConfidence* other);
  friend void swap(ParkingStatus_DirectionAndConfidence& a, ParkingStatus_DirectionAndConfidence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParkingStatus_DirectionAndConfidence* New() const final {
    return CreateMaybeMessage<ParkingStatus_DirectionAndConfidence>(NULL);
  }

  ParkingStatus_DirectionAndConfidence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ParkingStatus_DirectionAndConfidence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ParkingStatus_DirectionAndConfidence& from);
  void MergeFrom(const ParkingStatus_DirectionAndConfidence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParkingStatus_DirectionAndConfidence* other);
  protected:
  explicit ParkingStatus_DirectionAndConfidence(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ParkingStatus_DirectionAndConfidence_Type Type;
  static const Type UNKNOWN_TYPE =
    ParkingStatus_DirectionAndConfidence_Type_UNKNOWN_TYPE;
  static const Type LONGITUDINAL =
    ParkingStatus_DirectionAndConfidence_Type_LONGITUDINAL;
  static const Type LATERAL =
    ParkingStatus_DirectionAndConfidence_Type_LATERAL;
  static const Type DIAGONAL =
    ParkingStatus_DirectionAndConfidence_Type_DIAGONAL;
  static inline bool Type_IsValid(int value) {
    return ParkingStatus_DirectionAndConfidence_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ParkingStatus_DirectionAndConfidence_Type_Type_MIN;
  static const Type Type_MAX =
    ParkingStatus_DirectionAndConfidence_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ParkingStatus_DirectionAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ParkingStatus_DirectionAndConfidence_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ParkingStatus_DirectionAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ParkingStatus_DirectionAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  public:
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  ::sensoris::protobuf::types::base::Confidence* release_confidence();
  ::sensoris::protobuf::types::base::Confidence* mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence);
  void unsafe_arena_set_allocated_confidence(
      ::sensoris::protobuf::types::base::Confidence* confidence);
  ::sensoris::protobuf::types::base::Confidence* unsafe_arena_release_confidence();

  // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence_Type value);

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::base::Confidence* confidence_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ParkingStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.drivingbehavior.ParkingStatus) */ {
 public:
  ParkingStatus();
  virtual ~ParkingStatus();

  ParkingStatus(const ParkingStatus& from);

  inline ParkingStatus& operator=(const ParkingStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParkingStatus(ParkingStatus&& from) noexcept
    : ParkingStatus() {
    *this = ::std::move(from);
  }

  inline ParkingStatus& operator=(ParkingStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ParkingStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParkingStatus* internal_default_instance() {
    return reinterpret_cast<const ParkingStatus*>(
               &_ParkingStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(ParkingStatus* other);
  void Swap(ParkingStatus* other);
  friend void swap(ParkingStatus& a, ParkingStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParkingStatus* New() const final {
    return CreateMaybeMessage<ParkingStatus>(NULL);
  }

  ParkingStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ParkingStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ParkingStatus& from);
  void MergeFrom(const ParkingStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParkingStatus* other);
  protected:
  explicit ParkingStatus(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ParkingStatus_StatusAndConfidence StatusAndConfidence;
  typedef ParkingStatus_DirectionAndConfidence DirectionAndConfidence;

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope();
  static const int kEnvelopeFieldNumber = 1;
  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  public:
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* envelope);
  void unsafe_arena_set_allocated_envelope(
      ::sensoris::protobuf::types::base::EventEnvelope* envelope);
  ::sensoris::protobuf::types::base::EventEnvelope* unsafe_arena_release_envelope();

  // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence status_and_confidence = 2;
  bool has_status_and_confidence() const;
  void clear_status_and_confidence();
  static const int kStatusAndConfidenceFieldNumber = 2;
  private:
  const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence& _internal_status_and_confidence() const;
  public:
  const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence& status_and_confidence() const;
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* release_status_and_confidence();
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* mutable_status_and_confidence();
  void set_allocated_status_and_confidence(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* status_and_confidence);
  void unsafe_arena_set_allocated_status_and_confidence(
      ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* status_and_confidence);
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* unsafe_arena_release_status_and_confidence();

  // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence direction_and_confidence = 3;
  bool has_direction_and_confidence() const;
  void clear_direction_and_confidence();
  static const int kDirectionAndConfidenceFieldNumber = 3;
  private:
  const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence& _internal_direction_and_confidence() const;
  public:
  const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence& direction_and_confidence() const;
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* release_direction_and_confidence();
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* mutable_direction_and_confidence();
  void set_allocated_direction_and_confidence(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* direction_and_confidence);
  void unsafe_arena_set_allocated_direction_and_confidence(
      ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* direction_and_confidence);
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* unsafe_arena_release_direction_and_confidence();

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy duration_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  bool has_duration_and_accuracy() const;
  void clear_duration_and_accuracy();
  static const int kDurationAndAccuracyFieldNumber = 4;
  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_duration_and_accuracy() const;
  public:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& duration_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* release_duration_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* mutable_duration_and_accuracy();
  void set_allocated_duration_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* duration_and_accuracy);
  void unsafe_arena_set_allocated_duration_and_accuracy(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* duration_and_accuracy);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* unsafe_arena_release_duration_and_accuracy();

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.drivingbehavior.ParkingStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::base::EventEnvelope* envelope_;
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* status_and_confidence_;
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* direction_and_confidence_;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* duration_and_accuracy_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DrivingBehaviorCategory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory) */ {
 public:
  DrivingBehaviorCategory();
  virtual ~DrivingBehaviorCategory();

  DrivingBehaviorCategory(const DrivingBehaviorCategory& from);

  inline DrivingBehaviorCategory& operator=(const DrivingBehaviorCategory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DrivingBehaviorCategory(DrivingBehaviorCategory&& from) noexcept
    : DrivingBehaviorCategory() {
    *this = ::std::move(from);
  }

  inline DrivingBehaviorCategory& operator=(DrivingBehaviorCategory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DrivingBehaviorCategory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrivingBehaviorCategory* internal_default_instance() {
    return reinterpret_cast<const DrivingBehaviorCategory*>(
               &_DrivingBehaviorCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(DrivingBehaviorCategory* other);
  void Swap(DrivingBehaviorCategory* other);
  friend void swap(DrivingBehaviorCategory& a, DrivingBehaviorCategory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DrivingBehaviorCategory* New() const final {
    return CreateMaybeMessage<DrivingBehaviorCategory>(NULL);
  }

  DrivingBehaviorCategory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DrivingBehaviorCategory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DrivingBehaviorCategory& from);
  void MergeFrom(const DrivingBehaviorCategory& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrivingBehaviorCategory* other);
  protected:
  explicit DrivingBehaviorCategory(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sensoris.protobuf.categories.drivingbehavior.ParkingStatus parking_status = 2;
  int parking_status_size() const;
  void clear_parking_status();
  static const int kParkingStatusFieldNumber = 2;
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus* mutable_parking_status(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus >*
      mutable_parking_status();
  const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus& parking_status(int index) const;
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus* add_parking_status();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus >&
      parking_status() const;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope();
  static const int kEnvelopeFieldNumber = 1;
  private:
  const ::sensoris::protobuf::types::base::CategoryEnvelope& _internal_envelope() const;
  public:
  const ::sensoris::protobuf::types::base::CategoryEnvelope& envelope() const;
  ::sensoris::protobuf::types::base::CategoryEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::CategoryEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* envelope);
  void unsafe_arena_set_allocated_envelope(
      ::sensoris::protobuf::types::base::CategoryEnvelope* envelope);
  ::sensoris::protobuf::types::base::CategoryEnvelope* unsafe_arena_release_envelope();

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus > parking_status_;
  ::sensoris::protobuf::types::base::CategoryEnvelope* envelope_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParkingStatus_StatusAndConfidence

// .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence.Type type = 1;
inline void ParkingStatus_StatusAndConfidence::clear_type() {
  type_ = 0;
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence_Type ParkingStatus_StatusAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence.type)
  return static_cast< ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence_Type >(type_);
}
inline void ParkingStatus_StatusAndConfidence::set_type(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence.type)
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool ParkingStatus_StatusAndConfidence::has_confidence() const {
  return this != internal_default_instance() && confidence_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Confidence& ParkingStatus_StatusAndConfidence::_internal_confidence() const {
  return *confidence_;
}
inline const ::sensoris::protobuf::types::base::Confidence& ParkingStatus_StatusAndConfidence::confidence() const {
  const ::sensoris::protobuf::types::base::Confidence* p = confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence.confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence*>(
      &::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline ::sensoris::protobuf::types::base::Confidence* ParkingStatus_StatusAndConfidence::release_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* ParkingStatus_StatusAndConfidence::unsafe_arena_release_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* ParkingStatus_StatusAndConfidence::mutable_confidence() {
  
  if (confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(GetArenaNoVirtual());
    confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence.confidence)
  return confidence_;
}
inline void ParkingStatus_StatusAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(confidence_);
  }
  if (confidence) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(confidence)->GetArena();
    if (message_arena != submessage_arena) {
      confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, confidence, submessage_arena);
    }
    
  } else {
    
  }
  confidence_ = confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence.confidence)
}

// -------------------------------------------------------------------

// ParkingStatus_DirectionAndConfidence

// .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence.Type type = 1;
inline void ParkingStatus_DirectionAndConfidence::clear_type() {
  type_ = 0;
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence_Type ParkingStatus_DirectionAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence.type)
  return static_cast< ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence_Type >(type_);
}
inline void ParkingStatus_DirectionAndConfidence::set_type(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence.type)
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool ParkingStatus_DirectionAndConfidence::has_confidence() const {
  return this != internal_default_instance() && confidence_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Confidence& ParkingStatus_DirectionAndConfidence::_internal_confidence() const {
  return *confidence_;
}
inline const ::sensoris::protobuf::types::base::Confidence& ParkingStatus_DirectionAndConfidence::confidence() const {
  const ::sensoris::protobuf::types::base::Confidence* p = confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence.confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence*>(
      &::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline ::sensoris::protobuf::types::base::Confidence* ParkingStatus_DirectionAndConfidence::release_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* ParkingStatus_DirectionAndConfidence::unsafe_arena_release_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* ParkingStatus_DirectionAndConfidence::mutable_confidence() {
  
  if (confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(GetArenaNoVirtual());
    confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence.confidence)
  return confidence_;
}
inline void ParkingStatus_DirectionAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(confidence_);
  }
  if (confidence) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(confidence)->GetArena();
    if (message_arena != submessage_arena) {
      confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, confidence, submessage_arena);
    }
    
  } else {
    
  }
  confidence_ = confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence.confidence)
}

// -------------------------------------------------------------------

// ParkingStatus

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool ParkingStatus::has_envelope() const {
  return this != internal_default_instance() && envelope_ != NULL;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& ParkingStatus::_internal_envelope() const {
  return *envelope_;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& ParkingStatus::envelope() const {
  const ::sensoris::protobuf::types::base::EventEnvelope* p = envelope_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.envelope)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope*>(
      &::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline ::sensoris::protobuf::types::base::EventEnvelope* ParkingStatus::release_envelope() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.envelope)
  
  ::sensoris::protobuf::types::base::EventEnvelope* temp = envelope_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* ParkingStatus::unsafe_arena_release_envelope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.envelope)
  
  ::sensoris::protobuf::types::base::EventEnvelope* temp = envelope_;
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* ParkingStatus::mutable_envelope() {
  
  if (envelope_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(GetArenaNoVirtual());
    envelope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.envelope)
  return envelope_;
}
inline void ParkingStatus::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(envelope_);
  }
  if (envelope) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(envelope)->GetArena();
    if (message_arena != submessage_arena) {
      envelope = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.envelope)
}

// .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence status_and_confidence = 2;
inline bool ParkingStatus::has_status_and_confidence() const {
  return this != internal_default_instance() && status_and_confidence_ != NULL;
}
inline void ParkingStatus::clear_status_and_confidence() {
  if (GetArenaNoVirtual() == NULL && status_and_confidence_ != NULL) {
    delete status_and_confidence_;
  }
  status_and_confidence_ = NULL;
}
inline const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence& ParkingStatus::_internal_status_and_confidence() const {
  return *status_and_confidence_;
}
inline const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence& ParkingStatus::status_and_confidence() const {
  const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* p = status_and_confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.status_and_confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence*>(
      &::sensoris::protobuf::categories::drivingbehavior::_ParkingStatus_StatusAndConfidence_default_instance_);
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* ParkingStatus::release_status_and_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.status_and_confidence)
  
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* temp = status_and_confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  status_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* ParkingStatus::unsafe_arena_release_status_and_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.status_and_confidence)
  
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* temp = status_and_confidence_;
  status_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* ParkingStatus::mutable_status_and_confidence() {
  
  if (status_and_confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence>(GetArenaNoVirtual());
    status_and_confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.status_and_confidence)
  return status_and_confidence_;
}
inline void ParkingStatus::set_allocated_status_and_confidence(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* status_and_confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_and_confidence_;
  }
  if (status_and_confidence) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(status_and_confidence);
    if (message_arena != submessage_arena) {
      status_and_confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status_and_confidence, submessage_arena);
    }
    
  } else {
    
  }
  status_and_confidence_ = status_and_confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.status_and_confidence)
}

// .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence direction_and_confidence = 3;
inline bool ParkingStatus::has_direction_and_confidence() const {
  return this != internal_default_instance() && direction_and_confidence_ != NULL;
}
inline void ParkingStatus::clear_direction_and_confidence() {
  if (GetArenaNoVirtual() == NULL && direction_and_confidence_ != NULL) {
    delete direction_and_confidence_;
  }
  direction_and_confidence_ = NULL;
}
inline const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence& ParkingStatus::_internal_direction_and_confidence() const {
  return *direction_and_confidence_;
}
inline const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence& ParkingStatus::direction_and_confidence() const {
  const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* p = direction_and_confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.direction_and_confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence*>(
      &::sensoris::protobuf::categories::drivingbehavior::_ParkingStatus_DirectionAndConfidence_default_instance_);
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* ParkingStatus::release_direction_and_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.direction_and_confidence)
  
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* temp = direction_and_confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  direction_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* ParkingStatus::unsafe_arena_release_direction_and_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.direction_and_confidence)
  
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* temp = direction_and_confidence_;
  direction_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* ParkingStatus::mutable_direction_and_confidence() {
  
  if (direction_and_confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence>(GetArenaNoVirtual());
    direction_and_confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.direction_and_confidence)
  return direction_and_confidence_;
}
inline void ParkingStatus::set_allocated_direction_and_confidence(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* direction_and_confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete direction_and_confidence_;
  }
  if (direction_and_confidence) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(direction_and_confidence);
    if (message_arena != submessage_arena) {
      direction_and_confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, direction_and_confidence, submessage_arena);
    }
    
  } else {
    
  }
  direction_and_confidence_ = direction_and_confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.direction_and_confidence)
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy duration_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
inline bool ParkingStatus::has_duration_and_accuracy() const {
  return this != internal_default_instance() && duration_and_accuracy_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& ParkingStatus::_internal_duration_and_accuracy() const {
  return *duration_and_accuracy_;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& ParkingStatus::duration_and_accuracy() const {
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* p = duration_and_accuracy_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.duration_and_accuracy)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      &::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* ParkingStatus::release_duration_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.duration_and_accuracy)
  
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = duration_and_accuracy_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  duration_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* ParkingStatus::unsafe_arena_release_duration_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.duration_and_accuracy)
  
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = duration_and_accuracy_;
  duration_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* ParkingStatus::mutable_duration_and_accuracy() {
  
  if (duration_and_accuracy_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArenaNoVirtual());
    duration_and_accuracy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.duration_and_accuracy)
  return duration_and_accuracy_;
}
inline void ParkingStatus::set_allocated_duration_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* duration_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(duration_and_accuracy_);
  }
  if (duration_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(duration_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      duration_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, duration_and_accuracy, submessage_arena);
    }
    
  } else {
    
  }
  duration_and_accuracy_ = duration_and_accuracy;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.duration_and_accuracy)
}

// -------------------------------------------------------------------

// DrivingBehaviorCategory

// .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
inline bool DrivingBehaviorCategory::has_envelope() const {
  return this != internal_default_instance() && envelope_ != NULL;
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& DrivingBehaviorCategory::_internal_envelope() const {
  return *envelope_;
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& DrivingBehaviorCategory::envelope() const {
  const ::sensoris::protobuf::types::base::CategoryEnvelope* p = envelope_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory.envelope)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::CategoryEnvelope*>(
      &::sensoris::protobuf::types::base::_CategoryEnvelope_default_instance_);
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* DrivingBehaviorCategory::release_envelope() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory.envelope)
  
  ::sensoris::protobuf::types::base::CategoryEnvelope* temp = envelope_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* DrivingBehaviorCategory::unsafe_arena_release_envelope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory.envelope)
  
  ::sensoris::protobuf::types::base::CategoryEnvelope* temp = envelope_;
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* DrivingBehaviorCategory::mutable_envelope() {
  
  if (envelope_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::CategoryEnvelope>(GetArenaNoVirtual());
    envelope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory.envelope)
  return envelope_;
}
inline void DrivingBehaviorCategory::set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* envelope) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(envelope_);
  }
  if (envelope) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(envelope)->GetArena();
    if (message_arena != submessage_arena) {
      envelope = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory.envelope)
}

// repeated .sensoris.protobuf.categories.drivingbehavior.ParkingStatus parking_status = 2;
inline int DrivingBehaviorCategory::parking_status_size() const {
  return parking_status_.size();
}
inline void DrivingBehaviorCategory::clear_parking_status() {
  parking_status_.Clear();
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus* DrivingBehaviorCategory::mutable_parking_status(int index) {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory.parking_status)
  return parking_status_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus >*
DrivingBehaviorCategory::mutable_parking_status() {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory.parking_status)
  return &parking_status_;
}
inline const ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus& DrivingBehaviorCategory::parking_status(int index) const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory.parking_status)
  return parking_status_.Get(index);
}
inline ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus* DrivingBehaviorCategory::add_parking_status() {
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory.parking_status)
  return parking_status_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus >&
DrivingBehaviorCategory::parking_status() const {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory.parking_status)
  return parking_status_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace drivingbehavior
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence_Type_descriptor();
}
template <> struct is_proto_enum< ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto
