// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/traffic_maneuver.proto

#ifndef PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto
#define PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "sensoris/protobuf/types/base.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto 

namespace protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace trafficmaneuver {
class Charging;
class ChargingDefaultTypeInternal;
extern ChargingDefaultTypeInternal _Charging_default_instance_;
class Maneuver;
class ManeuverDefaultTypeInternal;
extern ManeuverDefaultTypeInternal _Maneuver_default_instance_;
class Maneuver_TypeAndConfidence;
class Maneuver_TypeAndConfidenceDefaultTypeInternal;
extern Maneuver_TypeAndConfidenceDefaultTypeInternal _Maneuver_TypeAndConfidence_default_instance_;
class Refueling;
class RefuelingDefaultTypeInternal;
extern RefuelingDefaultTypeInternal _Refueling_default_instance_;
class TrafficManeuverCategory;
class TrafficManeuverCategoryDefaultTypeInternal;
extern TrafficManeuverCategoryDefaultTypeInternal _TrafficManeuverCategory_default_instance_;
}  // namespace trafficmaneuver
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
template<> ::sensoris::protobuf::categories::trafficmaneuver::Charging* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::trafficmaneuver::Charging>(Arena*);
template<> ::sensoris::protobuf::categories::trafficmaneuver::Maneuver* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::trafficmaneuver::Maneuver>(Arena*);
template<> ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence>(Arena*);
template<> ::sensoris::protobuf::categories::trafficmaneuver::Refueling* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::trafficmaneuver::Refueling>(Arena*);
template<> ::sensoris::protobuf::categories::trafficmaneuver::TrafficManeuverCategory* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::trafficmaneuver::TrafficManeuverCategory>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sensoris {
namespace protobuf {
namespace categories {
namespace trafficmaneuver {

enum Maneuver_TypeAndConfidence_Type {
  Maneuver_TypeAndConfidence_Type_UNKNOWN_TYPE = 0,
  Maneuver_TypeAndConfidence_Type_EVASIVE = 1,
  Maneuver_TypeAndConfidence_Type_LANE_CHANGE = 2,
  Maneuver_TypeAndConfidence_Type_LANE_CHANGE_RIGHT = 3,
  Maneuver_TypeAndConfidence_Type_LANE_CHANGE_LEFT = 4,
  Maneuver_TypeAndConfidence_Type_OVERTAKING = 5,
  Maneuver_TypeAndConfidence_Type_INTERSECTION_STOP = 6,
  Maneuver_TypeAndConfidence_Type_TURNING = 7,
  Maneuver_TypeAndConfidence_Type_TURNING_RIGHT = 8,
  Maneuver_TypeAndConfidence_Type_TURNING_LEFT = 9,
  Maneuver_TypeAndConfidence_Type_SHARP_TURNING_RIGHT = 10,
  Maneuver_TypeAndConfidence_Type_SHARP_TURNING_LEFT = 11,
  Maneuver_TypeAndConfidence_Type_ACCELERATING = 12,
  Maneuver_TypeAndConfidence_Type_BREAKING = 13,
  Maneuver_TypeAndConfidence_Type_Maneuver_TypeAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Maneuver_TypeAndConfidence_Type_Maneuver_TypeAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Maneuver_TypeAndConfidence_Type_IsValid(int value);
const Maneuver_TypeAndConfidence_Type Maneuver_TypeAndConfidence_Type_Type_MIN = Maneuver_TypeAndConfidence_Type_UNKNOWN_TYPE;
const Maneuver_TypeAndConfidence_Type Maneuver_TypeAndConfidence_Type_Type_MAX = Maneuver_TypeAndConfidence_Type_BREAKING;
const int Maneuver_TypeAndConfidence_Type_Type_ARRAYSIZE = Maneuver_TypeAndConfidence_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Maneuver_TypeAndConfidence_Type_descriptor();
inline const ::std::string& Maneuver_TypeAndConfidence_Type_Name(Maneuver_TypeAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Maneuver_TypeAndConfidence_Type_descriptor(), value);
}
inline bool Maneuver_TypeAndConfidence_Type_Parse(
    const ::std::string& name, Maneuver_TypeAndConfidence_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Maneuver_TypeAndConfidence_Type>(
    Maneuver_TypeAndConfidence_Type_descriptor(), name, value);
}
enum Charging_Type {
  Charging_Type_UNKNOWN_TYPE = 0,
  Charging_Type_PORT_J1772 = 1,
  Charging_Type_CHADEMO = 2,
  Charging_Type_SAE_COMBO = 3,
  Charging_Type_TESLA_HPWC = 4,
  Charging_Type_TESLA_SUPERCHARGER = 5,
  Charging_Type_Charging_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Charging_Type_Charging_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Charging_Type_IsValid(int value);
const Charging_Type Charging_Type_Type_MIN = Charging_Type_UNKNOWN_TYPE;
const Charging_Type Charging_Type_Type_MAX = Charging_Type_TESLA_SUPERCHARGER;
const int Charging_Type_Type_ARRAYSIZE = Charging_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Charging_Type_descriptor();
inline const ::std::string& Charging_Type_Name(Charging_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Charging_Type_descriptor(), value);
}
inline bool Charging_Type_Parse(
    const ::std::string& name, Charging_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Charging_Type>(
    Charging_Type_descriptor(), name, value);
}
enum Refueling_Type {
  Refueling_Type_UNKNOWN_TYPE = 0,
  Refueling_Type_PETROL_PREMIUM = 1,
  Refueling_Type_PETROL_SUPER = 2,
  Refueling_Type_DIESEL = 3,
  Refueling_Type_LPG = 4,
  Refueling_Type_CNG = 5,
  Refueling_Type_BIO_DIESEL = 6,
  Refueling_Type_BIO_ETHANOL = 7,
  Refueling_Type_HYDROGEN = 8,
  Refueling_Type_Refueling_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Refueling_Type_Refueling_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Refueling_Type_IsValid(int value);
const Refueling_Type Refueling_Type_Type_MIN = Refueling_Type_UNKNOWN_TYPE;
const Refueling_Type Refueling_Type_Type_MAX = Refueling_Type_HYDROGEN;
const int Refueling_Type_Type_ARRAYSIZE = Refueling_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Refueling_Type_descriptor();
inline const ::std::string& Refueling_Type_Name(Refueling_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Refueling_Type_descriptor(), value);
}
inline bool Refueling_Type_Parse(
    const ::std::string& name, Refueling_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Refueling_Type>(
    Refueling_Type_descriptor(), name, value);
}
// ===================================================================

class Maneuver_TypeAndConfidence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence) */ {
 public:
  Maneuver_TypeAndConfidence();
  virtual ~Maneuver_TypeAndConfidence();

  Maneuver_TypeAndConfidence(const Maneuver_TypeAndConfidence& from);

  inline Maneuver_TypeAndConfidence& operator=(const Maneuver_TypeAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Maneuver_TypeAndConfidence(Maneuver_TypeAndConfidence&& from) noexcept
    : Maneuver_TypeAndConfidence() {
    *this = ::std::move(from);
  }

  inline Maneuver_TypeAndConfidence& operator=(Maneuver_TypeAndConfidence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Maneuver_TypeAndConfidence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Maneuver_TypeAndConfidence* internal_default_instance() {
    return reinterpret_cast<const Maneuver_TypeAndConfidence*>(
               &_Maneuver_TypeAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Maneuver_TypeAndConfidence* other);
  void Swap(Maneuver_TypeAndConfidence* other);
  friend void swap(Maneuver_TypeAndConfidence& a, Maneuver_TypeAndConfidence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Maneuver_TypeAndConfidence* New() const final {
    return CreateMaybeMessage<Maneuver_TypeAndConfidence>(NULL);
  }

  Maneuver_TypeAndConfidence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Maneuver_TypeAndConfidence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Maneuver_TypeAndConfidence& from);
  void MergeFrom(const Maneuver_TypeAndConfidence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Maneuver_TypeAndConfidence* other);
  protected:
  explicit Maneuver_TypeAndConfidence(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Maneuver_TypeAndConfidence_Type Type;
  static const Type UNKNOWN_TYPE =
    Maneuver_TypeAndConfidence_Type_UNKNOWN_TYPE;
  static const Type EVASIVE =
    Maneuver_TypeAndConfidence_Type_EVASIVE;
  static const Type LANE_CHANGE =
    Maneuver_TypeAndConfidence_Type_LANE_CHANGE;
  static const Type LANE_CHANGE_RIGHT =
    Maneuver_TypeAndConfidence_Type_LANE_CHANGE_RIGHT;
  static const Type LANE_CHANGE_LEFT =
    Maneuver_TypeAndConfidence_Type_LANE_CHANGE_LEFT;
  static const Type OVERTAKING =
    Maneuver_TypeAndConfidence_Type_OVERTAKING;
  static const Type INTERSECTION_STOP =
    Maneuver_TypeAndConfidence_Type_INTERSECTION_STOP;
  static const Type TURNING =
    Maneuver_TypeAndConfidence_Type_TURNING;
  static const Type TURNING_RIGHT =
    Maneuver_TypeAndConfidence_Type_TURNING_RIGHT;
  static const Type TURNING_LEFT =
    Maneuver_TypeAndConfidence_Type_TURNING_LEFT;
  static const Type SHARP_TURNING_RIGHT =
    Maneuver_TypeAndConfidence_Type_SHARP_TURNING_RIGHT;
  static const Type SHARP_TURNING_LEFT =
    Maneuver_TypeAndConfidence_Type_SHARP_TURNING_LEFT;
  static const Type ACCELERATING =
    Maneuver_TypeAndConfidence_Type_ACCELERATING;
  static const Type BREAKING =
    Maneuver_TypeAndConfidence_Type_BREAKING;
  static inline bool Type_IsValid(int value) {
    return Maneuver_TypeAndConfidence_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Maneuver_TypeAndConfidence_Type_Type_MIN;
  static const Type Type_MAX =
    Maneuver_TypeAndConfidence_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Maneuver_TypeAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Maneuver_TypeAndConfidence_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Maneuver_TypeAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Maneuver_TypeAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  public:
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  ::sensoris::protobuf::types::base::Confidence* release_confidence();
  ::sensoris::protobuf::types::base::Confidence* mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence);
  void unsafe_arena_set_allocated_confidence(
      ::sensoris::protobuf::types::base::Confidence* confidence);
  ::sensoris::protobuf::types::base::Confidence* unsafe_arena_release_confidence();

  // .sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence_Type value);

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::base::Confidence* confidence_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Maneuver : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.trafficmaneuver.Maneuver) */ {
 public:
  Maneuver();
  virtual ~Maneuver();

  Maneuver(const Maneuver& from);

  inline Maneuver& operator=(const Maneuver& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Maneuver(Maneuver&& from) noexcept
    : Maneuver() {
    *this = ::std::move(from);
  }

  inline Maneuver& operator=(Maneuver&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Maneuver& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Maneuver* internal_default_instance() {
    return reinterpret_cast<const Maneuver*>(
               &_Maneuver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(Maneuver* other);
  void Swap(Maneuver* other);
  friend void swap(Maneuver& a, Maneuver& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Maneuver* New() const final {
    return CreateMaybeMessage<Maneuver>(NULL);
  }

  Maneuver* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Maneuver>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Maneuver& from);
  void MergeFrom(const Maneuver& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Maneuver* other);
  protected:
  explicit Maneuver(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Maneuver_TypeAndConfidence TypeAndConfidence;

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope();
  static const int kEnvelopeFieldNumber = 1;
  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  public:
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* envelope);
  void unsafe_arena_set_allocated_envelope(
      ::sensoris::protobuf::types::base::EventEnvelope* envelope);
  ::sensoris::protobuf::types::base::EventEnvelope* unsafe_arena_release_envelope();

  // .sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence type_and_confidence = 2;
  bool has_type_and_confidence() const;
  void clear_type_and_confidence();
  static const int kTypeAndConfidenceFieldNumber = 2;
  private:
  const ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence& _internal_type_and_confidence() const;
  public:
  const ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence& type_and_confidence() const;
  ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* release_type_and_confidence();
  ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* mutable_type_and_confidence();
  void set_allocated_type_and_confidence(::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* type_and_confidence);
  void unsafe_arena_set_allocated_type_and_confidence(
      ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* type_and_confidence);
  ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* unsafe_arena_release_type_and_confidence();

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.trafficmaneuver.Maneuver)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::base::EventEnvelope* envelope_;
  ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* type_and_confidence_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Charging : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.trafficmaneuver.Charging) */ {
 public:
  Charging();
  virtual ~Charging();

  Charging(const Charging& from);

  inline Charging& operator=(const Charging& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Charging(Charging&& from) noexcept
    : Charging() {
    *this = ::std::move(from);
  }

  inline Charging& operator=(Charging&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Charging& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Charging* internal_default_instance() {
    return reinterpret_cast<const Charging*>(
               &_Charging_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(Charging* other);
  void Swap(Charging* other);
  friend void swap(Charging& a, Charging& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Charging* New() const final {
    return CreateMaybeMessage<Charging>(NULL);
  }

  Charging* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Charging>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Charging& from);
  void MergeFrom(const Charging& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Charging* other);
  protected:
  explicit Charging(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Charging_Type Type;
  static const Type UNKNOWN_TYPE =
    Charging_Type_UNKNOWN_TYPE;
  static const Type PORT_J1772 =
    Charging_Type_PORT_J1772;
  static const Type CHADEMO =
    Charging_Type_CHADEMO;
  static const Type SAE_COMBO =
    Charging_Type_SAE_COMBO;
  static const Type TESLA_HPWC =
    Charging_Type_TESLA_HPWC;
  static const Type TESLA_SUPERCHARGER =
    Charging_Type_TESLA_SUPERCHARGER;
  static inline bool Type_IsValid(int value) {
    return Charging_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Charging_Type_Type_MIN;
  static const Type Type_MAX =
    Charging_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Charging_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Charging_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Charging_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Charging_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope();
  static const int kEnvelopeFieldNumber = 1;
  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  public:
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* envelope);
  void unsafe_arena_set_allocated_envelope(
      ::sensoris::protobuf::types::base::EventEnvelope* envelope);
  ::sensoris::protobuf::types::base::EventEnvelope* unsafe_arena_release_envelope();

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy voltage_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  bool has_voltage_and_accuracy() const;
  void clear_voltage_and_accuracy();
  static const int kVoltageAndAccuracyFieldNumber = 3;
  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_voltage_and_accuracy() const;
  public:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& voltage_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* release_voltage_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* mutable_voltage_and_accuracy();
  void set_allocated_voltage_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* voltage_and_accuracy);
  void unsafe_arena_set_allocated_voltage_and_accuracy(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* voltage_and_accuracy);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* unsafe_arena_release_voltage_and_accuracy();

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy current_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 1];
  bool has_current_and_accuracy() const;
  void clear_current_and_accuracy();
  static const int kCurrentAndAccuracyFieldNumber = 4;
  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_current_and_accuracy() const;
  public:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& current_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* release_current_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* mutable_current_and_accuracy();
  void set_allocated_current_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* current_and_accuracy);
  void unsafe_arena_set_allocated_current_and_accuracy(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* current_and_accuracy);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* unsafe_arena_release_current_and_accuracy();

  // .sensoris.protobuf.categories.trafficmaneuver.Charging.Type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::sensoris::protobuf::categories::trafficmaneuver::Charging_Type type() const;
  void set_type(::sensoris::protobuf::categories::trafficmaneuver::Charging_Type value);

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.trafficmaneuver.Charging)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::base::EventEnvelope* envelope_;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* voltage_and_accuracy_;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* current_and_accuracy_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Refueling : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.trafficmaneuver.Refueling) */ {
 public:
  Refueling();
  virtual ~Refueling();

  Refueling(const Refueling& from);

  inline Refueling& operator=(const Refueling& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Refueling(Refueling&& from) noexcept
    : Refueling() {
    *this = ::std::move(from);
  }

  inline Refueling& operator=(Refueling&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Refueling& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Refueling* internal_default_instance() {
    return reinterpret_cast<const Refueling*>(
               &_Refueling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(Refueling* other);
  void Swap(Refueling* other);
  friend void swap(Refueling& a, Refueling& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Refueling* New() const final {
    return CreateMaybeMessage<Refueling>(NULL);
  }

  Refueling* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Refueling>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Refueling& from);
  void MergeFrom(const Refueling& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Refueling* other);
  protected:
  explicit Refueling(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Refueling_Type Type;
  static const Type UNKNOWN_TYPE =
    Refueling_Type_UNKNOWN_TYPE;
  static const Type PETROL_PREMIUM =
    Refueling_Type_PETROL_PREMIUM;
  static const Type PETROL_SUPER =
    Refueling_Type_PETROL_SUPER;
  static const Type DIESEL =
    Refueling_Type_DIESEL;
  static const Type LPG =
    Refueling_Type_LPG;
  static const Type CNG =
    Refueling_Type_CNG;
  static const Type BIO_DIESEL =
    Refueling_Type_BIO_DIESEL;
  static const Type BIO_ETHANOL =
    Refueling_Type_BIO_ETHANOL;
  static const Type HYDROGEN =
    Refueling_Type_HYDROGEN;
  static inline bool Type_IsValid(int value) {
    return Refueling_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Refueling_Type_Type_MIN;
  static const Type Type_MAX =
    Refueling_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Refueling_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Refueling_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Refueling_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Refueling_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope();
  static const int kEnvelopeFieldNumber = 1;
  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  public:
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* envelope);
  void unsafe_arena_set_allocated_envelope(
      ::sensoris::protobuf::types::base::EventEnvelope* envelope);
  ::sensoris::protobuf::types::base::EventEnvelope* unsafe_arena_release_envelope();

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy quantity_to_full_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 1];
  bool has_quantity_to_full_and_accuracy() const;
  void clear_quantity_to_full_and_accuracy();
  static const int kQuantityToFullAndAccuracyFieldNumber = 3;
  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_quantity_to_full_and_accuracy() const;
  public:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& quantity_to_full_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* release_quantity_to_full_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* mutable_quantity_to_full_and_accuracy();
  void set_allocated_quantity_to_full_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* quantity_to_full_and_accuracy);
  void unsafe_arena_set_allocated_quantity_to_full_and_accuracy(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* quantity_to_full_and_accuracy);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* unsafe_arena_release_quantity_to_full_and_accuracy();

  // .sensoris.protobuf.categories.trafficmaneuver.Refueling.Type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::sensoris::protobuf::categories::trafficmaneuver::Refueling_Type type() const;
  void set_type(::sensoris::protobuf::categories::trafficmaneuver::Refueling_Type value);

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.trafficmaneuver.Refueling)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::base::EventEnvelope* envelope_;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* quantity_to_full_and_accuracy_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafficManeuverCategory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory) */ {
 public:
  TrafficManeuverCategory();
  virtual ~TrafficManeuverCategory();

  TrafficManeuverCategory(const TrafficManeuverCategory& from);

  inline TrafficManeuverCategory& operator=(const TrafficManeuverCategory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficManeuverCategory(TrafficManeuverCategory&& from) noexcept
    : TrafficManeuverCategory() {
    *this = ::std::move(from);
  }

  inline TrafficManeuverCategory& operator=(TrafficManeuverCategory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficManeuverCategory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficManeuverCategory* internal_default_instance() {
    return reinterpret_cast<const TrafficManeuverCategory*>(
               &_TrafficManeuverCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(TrafficManeuverCategory* other);
  void Swap(TrafficManeuverCategory* other);
  friend void swap(TrafficManeuverCategory& a, TrafficManeuverCategory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficManeuverCategory* New() const final {
    return CreateMaybeMessage<TrafficManeuverCategory>(NULL);
  }

  TrafficManeuverCategory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrafficManeuverCategory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrafficManeuverCategory& from);
  void MergeFrom(const TrafficManeuverCategory& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficManeuverCategory* other);
  protected:
  explicit TrafficManeuverCategory(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sensoris.protobuf.categories.trafficmaneuver.Maneuver maneuver = 2;
  int maneuver_size() const;
  void clear_maneuver();
  static const int kManeuverFieldNumber = 2;
  ::sensoris::protobuf::categories::trafficmaneuver::Maneuver* mutable_maneuver(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Maneuver >*
      mutable_maneuver();
  const ::sensoris::protobuf::categories::trafficmaneuver::Maneuver& maneuver(int index) const;
  ::sensoris::protobuf::categories::trafficmaneuver::Maneuver* add_maneuver();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Maneuver >&
      maneuver() const;

  // repeated .sensoris.protobuf.categories.trafficmaneuver.Charging charging = 3;
  int charging_size() const;
  void clear_charging();
  static const int kChargingFieldNumber = 3;
  ::sensoris::protobuf::categories::trafficmaneuver::Charging* mutable_charging(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Charging >*
      mutable_charging();
  const ::sensoris::protobuf::categories::trafficmaneuver::Charging& charging(int index) const;
  ::sensoris::protobuf::categories::trafficmaneuver::Charging* add_charging();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Charging >&
      charging() const;

  // repeated .sensoris.protobuf.categories.trafficmaneuver.Refueling refueling = 4;
  int refueling_size() const;
  void clear_refueling();
  static const int kRefuelingFieldNumber = 4;
  ::sensoris::protobuf::categories::trafficmaneuver::Refueling* mutable_refueling(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Refueling >*
      mutable_refueling();
  const ::sensoris::protobuf::categories::trafficmaneuver::Refueling& refueling(int index) const;
  ::sensoris::protobuf::categories::trafficmaneuver::Refueling* add_refueling();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Refueling >&
      refueling() const;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope();
  static const int kEnvelopeFieldNumber = 1;
  private:
  const ::sensoris::protobuf::types::base::CategoryEnvelope& _internal_envelope() const;
  public:
  const ::sensoris::protobuf::types::base::CategoryEnvelope& envelope() const;
  ::sensoris::protobuf::types::base::CategoryEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::CategoryEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* envelope);
  void unsafe_arena_set_allocated_envelope(
      ::sensoris::protobuf::types::base::CategoryEnvelope* envelope);
  ::sensoris::protobuf::types::base::CategoryEnvelope* unsafe_arena_release_envelope();

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Maneuver > maneuver_;
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Charging > charging_;
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Refueling > refueling_;
  ::sensoris::protobuf::types::base::CategoryEnvelope* envelope_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Maneuver_TypeAndConfidence

// .sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence.Type type = 1;
inline void Maneuver_TypeAndConfidence::clear_type() {
  type_ = 0;
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence_Type Maneuver_TypeAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence.type)
  return static_cast< ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence_Type >(type_);
}
inline void Maneuver_TypeAndConfidence::set_type(::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence.type)
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool Maneuver_TypeAndConfidence::has_confidence() const {
  return this != internal_default_instance() && confidence_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Confidence& Maneuver_TypeAndConfidence::_internal_confidence() const {
  return *confidence_;
}
inline const ::sensoris::protobuf::types::base::Confidence& Maneuver_TypeAndConfidence::confidence() const {
  const ::sensoris::protobuf::types::base::Confidence* p = confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence.confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence*>(
      &::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline ::sensoris::protobuf::types::base::Confidence* Maneuver_TypeAndConfidence::release_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* Maneuver_TypeAndConfidence::unsafe_arena_release_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* Maneuver_TypeAndConfidence::mutable_confidence() {
  
  if (confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(GetArenaNoVirtual());
    confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence.confidence)
  return confidence_;
}
inline void Maneuver_TypeAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(confidence_);
  }
  if (confidence) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(confidence)->GetArena();
    if (message_arena != submessage_arena) {
      confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, confidence, submessage_arena);
    }
    
  } else {
    
  }
  confidence_ = confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence.confidence)
}

// -------------------------------------------------------------------

// Maneuver

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool Maneuver::has_envelope() const {
  return this != internal_default_instance() && envelope_ != NULL;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& Maneuver::_internal_envelope() const {
  return *envelope_;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& Maneuver::envelope() const {
  const ::sensoris::protobuf::types::base::EventEnvelope* p = envelope_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.Maneuver.envelope)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope*>(
      &::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Maneuver::release_envelope() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.trafficmaneuver.Maneuver.envelope)
  
  ::sensoris::protobuf::types::base::EventEnvelope* temp = envelope_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Maneuver::unsafe_arena_release_envelope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.trafficmaneuver.Maneuver.envelope)
  
  ::sensoris::protobuf::types::base::EventEnvelope* temp = envelope_;
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Maneuver::mutable_envelope() {
  
  if (envelope_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(GetArenaNoVirtual());
    envelope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.Maneuver.envelope)
  return envelope_;
}
inline void Maneuver::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(envelope_);
  }
  if (envelope) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(envelope)->GetArena();
    if (message_arena != submessage_arena) {
      envelope = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Maneuver.envelope)
}

// .sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence type_and_confidence = 2;
inline bool Maneuver::has_type_and_confidence() const {
  return this != internal_default_instance() && type_and_confidence_ != NULL;
}
inline void Maneuver::clear_type_and_confidence() {
  if (GetArenaNoVirtual() == NULL && type_and_confidence_ != NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = NULL;
}
inline const ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence& Maneuver::_internal_type_and_confidence() const {
  return *type_and_confidence_;
}
inline const ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence& Maneuver::type_and_confidence() const {
  const ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* p = type_and_confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.Maneuver.type_and_confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence*>(
      &::sensoris::protobuf::categories::trafficmaneuver::_Maneuver_TypeAndConfidence_default_instance_);
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* Maneuver::release_type_and_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.trafficmaneuver.Maneuver.type_and_confidence)
  
  ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* temp = type_and_confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  type_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* Maneuver::unsafe_arena_release_type_and_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.trafficmaneuver.Maneuver.type_and_confidence)
  
  ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* temp = type_and_confidence_;
  type_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* Maneuver::mutable_type_and_confidence() {
  
  if (type_and_confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence>(GetArenaNoVirtual());
    type_and_confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.Maneuver.type_and_confidence)
  return type_and_confidence_;
}
inline void Maneuver::set_allocated_type_and_confidence(::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* type_and_confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete type_and_confidence_;
  }
  if (type_and_confidence) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(type_and_confidence);
    if (message_arena != submessage_arena) {
      type_and_confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type_and_confidence, submessage_arena);
    }
    
  } else {
    
  }
  type_and_confidence_ = type_and_confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Maneuver.type_and_confidence)
}

// -------------------------------------------------------------------

// Charging

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool Charging::has_envelope() const {
  return this != internal_default_instance() && envelope_ != NULL;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& Charging::_internal_envelope() const {
  return *envelope_;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& Charging::envelope() const {
  const ::sensoris::protobuf::types::base::EventEnvelope* p = envelope_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.Charging.envelope)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope*>(
      &::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Charging::release_envelope() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.trafficmaneuver.Charging.envelope)
  
  ::sensoris::protobuf::types::base::EventEnvelope* temp = envelope_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Charging::unsafe_arena_release_envelope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.trafficmaneuver.Charging.envelope)
  
  ::sensoris::protobuf::types::base::EventEnvelope* temp = envelope_;
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Charging::mutable_envelope() {
  
  if (envelope_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(GetArenaNoVirtual());
    envelope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.Charging.envelope)
  return envelope_;
}
inline void Charging::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(envelope_);
  }
  if (envelope) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(envelope)->GetArena();
    if (message_arena != submessage_arena) {
      envelope = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Charging.envelope)
}

// .sensoris.protobuf.categories.trafficmaneuver.Charging.Type type = 2;
inline void Charging::clear_type() {
  type_ = 0;
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Charging_Type Charging::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.Charging.type)
  return static_cast< ::sensoris::protobuf::categories::trafficmaneuver::Charging_Type >(type_);
}
inline void Charging::set_type(::sensoris::protobuf::categories::trafficmaneuver::Charging_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.trafficmaneuver.Charging.type)
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy voltage_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
inline bool Charging::has_voltage_and_accuracy() const {
  return this != internal_default_instance() && voltage_and_accuracy_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Charging::_internal_voltage_and_accuracy() const {
  return *voltage_and_accuracy_;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Charging::voltage_and_accuracy() const {
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* p = voltage_and_accuracy_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.Charging.voltage_and_accuracy)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      &::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Charging::release_voltage_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.trafficmaneuver.Charging.voltage_and_accuracy)
  
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = voltage_and_accuracy_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  voltage_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Charging::unsafe_arena_release_voltage_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.trafficmaneuver.Charging.voltage_and_accuracy)
  
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = voltage_and_accuracy_;
  voltage_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Charging::mutable_voltage_and_accuracy() {
  
  if (voltage_and_accuracy_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArenaNoVirtual());
    voltage_and_accuracy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.Charging.voltage_and_accuracy)
  return voltage_and_accuracy_;
}
inline void Charging::set_allocated_voltage_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* voltage_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(voltage_and_accuracy_);
  }
  if (voltage_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(voltage_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      voltage_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, voltage_and_accuracy, submessage_arena);
    }
    
  } else {
    
  }
  voltage_and_accuracy_ = voltage_and_accuracy;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Charging.voltage_and_accuracy)
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy current_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 1];
inline bool Charging::has_current_and_accuracy() const {
  return this != internal_default_instance() && current_and_accuracy_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Charging::_internal_current_and_accuracy() const {
  return *current_and_accuracy_;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Charging::current_and_accuracy() const {
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* p = current_and_accuracy_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.Charging.current_and_accuracy)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      &::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Charging::release_current_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.trafficmaneuver.Charging.current_and_accuracy)
  
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = current_and_accuracy_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  current_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Charging::unsafe_arena_release_current_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.trafficmaneuver.Charging.current_and_accuracy)
  
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = current_and_accuracy_;
  current_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Charging::mutable_current_and_accuracy() {
  
  if (current_and_accuracy_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArenaNoVirtual());
    current_and_accuracy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.Charging.current_and_accuracy)
  return current_and_accuracy_;
}
inline void Charging::set_allocated_current_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* current_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(current_and_accuracy_);
  }
  if (current_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(current_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      current_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, current_and_accuracy, submessage_arena);
    }
    
  } else {
    
  }
  current_and_accuracy_ = current_and_accuracy;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Charging.current_and_accuracy)
}

// -------------------------------------------------------------------

// Refueling

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool Refueling::has_envelope() const {
  return this != internal_default_instance() && envelope_ != NULL;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& Refueling::_internal_envelope() const {
  return *envelope_;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& Refueling::envelope() const {
  const ::sensoris::protobuf::types::base::EventEnvelope* p = envelope_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.Refueling.envelope)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope*>(
      &::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Refueling::release_envelope() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.trafficmaneuver.Refueling.envelope)
  
  ::sensoris::protobuf::types::base::EventEnvelope* temp = envelope_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Refueling::unsafe_arena_release_envelope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.trafficmaneuver.Refueling.envelope)
  
  ::sensoris::protobuf::types::base::EventEnvelope* temp = envelope_;
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Refueling::mutable_envelope() {
  
  if (envelope_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(GetArenaNoVirtual());
    envelope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.Refueling.envelope)
  return envelope_;
}
inline void Refueling::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(envelope_);
  }
  if (envelope) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(envelope)->GetArena();
    if (message_arena != submessage_arena) {
      envelope = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Refueling.envelope)
}

// .sensoris.protobuf.categories.trafficmaneuver.Refueling.Type type = 2;
inline void Refueling::clear_type() {
  type_ = 0;
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Refueling_Type Refueling::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.Refueling.type)
  return static_cast< ::sensoris::protobuf::categories::trafficmaneuver::Refueling_Type >(type_);
}
inline void Refueling::set_type(::sensoris::protobuf::categories::trafficmaneuver::Refueling_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.trafficmaneuver.Refueling.type)
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy quantity_to_full_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 1];
inline bool Refueling::has_quantity_to_full_and_accuracy() const {
  return this != internal_default_instance() && quantity_to_full_and_accuracy_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Refueling::_internal_quantity_to_full_and_accuracy() const {
  return *quantity_to_full_and_accuracy_;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Refueling::quantity_to_full_and_accuracy() const {
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* p = quantity_to_full_and_accuracy_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.Refueling.quantity_to_full_and_accuracy)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      &::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Refueling::release_quantity_to_full_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.trafficmaneuver.Refueling.quantity_to_full_and_accuracy)
  
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = quantity_to_full_and_accuracy_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  quantity_to_full_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Refueling::unsafe_arena_release_quantity_to_full_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.trafficmaneuver.Refueling.quantity_to_full_and_accuracy)
  
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = quantity_to_full_and_accuracy_;
  quantity_to_full_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Refueling::mutable_quantity_to_full_and_accuracy() {
  
  if (quantity_to_full_and_accuracy_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArenaNoVirtual());
    quantity_to_full_and_accuracy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.Refueling.quantity_to_full_and_accuracy)
  return quantity_to_full_and_accuracy_;
}
inline void Refueling::set_allocated_quantity_to_full_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* quantity_to_full_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(quantity_to_full_and_accuracy_);
  }
  if (quantity_to_full_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(quantity_to_full_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      quantity_to_full_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quantity_to_full_and_accuracy, submessage_arena);
    }
    
  } else {
    
  }
  quantity_to_full_and_accuracy_ = quantity_to_full_and_accuracy;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Refueling.quantity_to_full_and_accuracy)
}

// -------------------------------------------------------------------

// TrafficManeuverCategory

// .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
inline bool TrafficManeuverCategory::has_envelope() const {
  return this != internal_default_instance() && envelope_ != NULL;
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& TrafficManeuverCategory::_internal_envelope() const {
  return *envelope_;
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& TrafficManeuverCategory::envelope() const {
  const ::sensoris::protobuf::types::base::CategoryEnvelope* p = envelope_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.envelope)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::CategoryEnvelope*>(
      &::sensoris::protobuf::types::base::_CategoryEnvelope_default_instance_);
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* TrafficManeuverCategory::release_envelope() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.envelope)
  
  ::sensoris::protobuf::types::base::CategoryEnvelope* temp = envelope_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* TrafficManeuverCategory::unsafe_arena_release_envelope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.envelope)
  
  ::sensoris::protobuf::types::base::CategoryEnvelope* temp = envelope_;
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* TrafficManeuverCategory::mutable_envelope() {
  
  if (envelope_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::CategoryEnvelope>(GetArenaNoVirtual());
    envelope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.envelope)
  return envelope_;
}
inline void TrafficManeuverCategory::set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* envelope) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(envelope_);
  }
  if (envelope) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(envelope)->GetArena();
    if (message_arena != submessage_arena) {
      envelope = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.envelope)
}

// repeated .sensoris.protobuf.categories.trafficmaneuver.Maneuver maneuver = 2;
inline int TrafficManeuverCategory::maneuver_size() const {
  return maneuver_.size();
}
inline void TrafficManeuverCategory::clear_maneuver() {
  maneuver_.Clear();
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Maneuver* TrafficManeuverCategory::mutable_maneuver(int index) {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.maneuver)
  return maneuver_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Maneuver >*
TrafficManeuverCategory::mutable_maneuver() {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.maneuver)
  return &maneuver_;
}
inline const ::sensoris::protobuf::categories::trafficmaneuver::Maneuver& TrafficManeuverCategory::maneuver(int index) const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.maneuver)
  return maneuver_.Get(index);
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Maneuver* TrafficManeuverCategory::add_maneuver() {
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.maneuver)
  return maneuver_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Maneuver >&
TrafficManeuverCategory::maneuver() const {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.maneuver)
  return maneuver_;
}

// repeated .sensoris.protobuf.categories.trafficmaneuver.Charging charging = 3;
inline int TrafficManeuverCategory::charging_size() const {
  return charging_.size();
}
inline void TrafficManeuverCategory::clear_charging() {
  charging_.Clear();
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Charging* TrafficManeuverCategory::mutable_charging(int index) {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.charging)
  return charging_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Charging >*
TrafficManeuverCategory::mutable_charging() {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.charging)
  return &charging_;
}
inline const ::sensoris::protobuf::categories::trafficmaneuver::Charging& TrafficManeuverCategory::charging(int index) const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.charging)
  return charging_.Get(index);
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Charging* TrafficManeuverCategory::add_charging() {
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.charging)
  return charging_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Charging >&
TrafficManeuverCategory::charging() const {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.charging)
  return charging_;
}

// repeated .sensoris.protobuf.categories.trafficmaneuver.Refueling refueling = 4;
inline int TrafficManeuverCategory::refueling_size() const {
  return refueling_.size();
}
inline void TrafficManeuverCategory::clear_refueling() {
  refueling_.Clear();
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Refueling* TrafficManeuverCategory::mutable_refueling(int index) {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.refueling)
  return refueling_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Refueling >*
TrafficManeuverCategory::mutable_refueling() {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.refueling)
  return &refueling_;
}
inline const ::sensoris::protobuf::categories::trafficmaneuver::Refueling& TrafficManeuverCategory::refueling(int index) const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.refueling)
  return refueling_.Get(index);
}
inline ::sensoris::protobuf::categories::trafficmaneuver::Refueling* TrafficManeuverCategory::add_refueling() {
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.refueling)
  return refueling_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::trafficmaneuver::Refueling >&
TrafficManeuverCategory::refueling() const {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.refueling)
  return refueling_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace trafficmaneuver
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence_Type_descriptor();
}
template <> struct is_proto_enum< ::sensoris::protobuf::categories::trafficmaneuver::Charging_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sensoris::protobuf::categories::trafficmaneuver::Charging_Type>() {
  return ::sensoris::protobuf::categories::trafficmaneuver::Charging_Type_descriptor();
}
template <> struct is_proto_enum< ::sensoris::protobuf::categories::trafficmaneuver::Refueling_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sensoris::protobuf::categories::trafficmaneuver::Refueling_Type>() {
  return ::sensoris::protobuf::categories::trafficmaneuver::Refueling_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto
