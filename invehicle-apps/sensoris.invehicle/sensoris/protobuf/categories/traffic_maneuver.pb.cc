// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/traffic_maneuver.proto

#include "sensoris/protobuf/categories/traffic_maneuver.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Maneuver_TypeAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Charging;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Maneuver;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Refueling;
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto
namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Confidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CategoryEnvelope;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_EventEnvelope;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Int64ValueAndAccuracy;
}  // namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace trafficmaneuver {
class Maneuver_TypeAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Maneuver_TypeAndConfidence>
      _instance;
} _Maneuver_TypeAndConfidence_default_instance_;
class ManeuverDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Maneuver>
      _instance;
} _Maneuver_default_instance_;
class ChargingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Charging>
      _instance;
} _Charging_default_instance_;
class RefuelingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Refueling>
      _instance;
} _Refueling_default_instance_;
class TrafficManeuverCategoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficManeuverCategory>
      _instance;
} _TrafficManeuverCategory_default_instance_;
}  // namespace trafficmaneuver
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto {
static void InitDefaultsManeuver_TypeAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficmaneuver::_Maneuver_TypeAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Maneuver_TypeAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsManeuver_TypeAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsManeuver() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficmaneuver::_Maneuver_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficmaneuver::Maneuver();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficmaneuver::Maneuver::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Maneuver =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsManeuver}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::scc_info_Maneuver_TypeAndConfidence.base,}};

static void InitDefaultsCharging() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficmaneuver::_Charging_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficmaneuver::Charging();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficmaneuver::Charging::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Charging =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCharging}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64ValueAndAccuracy.base,}};

static void InitDefaultsRefueling() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficmaneuver::_Refueling_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficmaneuver::Refueling();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficmaneuver::Refueling::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Refueling =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRefueling}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64ValueAndAccuracy.base,}};

static void InitDefaultsTrafficManeuverCategory() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::trafficmaneuver::_TrafficManeuverCategory_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::trafficmaneuver::TrafficManeuverCategory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::trafficmaneuver::TrafficManeuverCategory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_TrafficManeuverCategory =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsTrafficManeuverCategory}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_CategoryEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::scc_info_Maneuver.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::scc_info_Charging.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::scc_info_Refueling.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Maneuver_TypeAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Maneuver.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Charging.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Refueling.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficManeuverCategory.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficmaneuver::Maneuver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficmaneuver::Maneuver, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficmaneuver::Maneuver, type_and_confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficmaneuver::Charging, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficmaneuver::Charging, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficmaneuver::Charging, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficmaneuver::Charging, voltage_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficmaneuver::Charging, current_and_accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficmaneuver::Refueling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficmaneuver::Refueling, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficmaneuver::Refueling, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficmaneuver::Refueling, quantity_to_full_and_accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficmaneuver::TrafficManeuverCategory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficmaneuver::TrafficManeuverCategory, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficmaneuver::TrafficManeuverCategory, maneuver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficmaneuver::TrafficManeuverCategory, charging_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::trafficmaneuver::TrafficManeuverCategory, refueling_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence)},
  { 7, -1, sizeof(::sensoris::protobuf::categories::trafficmaneuver::Maneuver)},
  { 14, -1, sizeof(::sensoris::protobuf::categories::trafficmaneuver::Charging)},
  { 23, -1, sizeof(::sensoris::protobuf::categories::trafficmaneuver::Refueling)},
  { 31, -1, sizeof(::sensoris::protobuf::categories::trafficmaneuver::TrafficManeuverCategory)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficmaneuver::_Maneuver_TypeAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficmaneuver::_Maneuver_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficmaneuver::_Charging_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficmaneuver::_Refueling_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::trafficmaneuver::_TrafficManeuverCategory_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "sensoris/protobuf/categories/traffic_maneuver.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n3sensoris/protobuf/categories/traffic_m"
      "aneuver.proto\022,sensoris.protobuf.categor"
      "ies.trafficmaneuver\032\"sensoris/protobuf/t"
      "ypes/base.proto\"\361\004\n\010Maneuver\022=\n\010envelope"
      "\030\001 \001(\0132+.sensoris.protobuf.types.base.Ev"
      "entEnvelope\022e\n\023type_and_confidence\030\002 \001(\013"
      "2H.sensoris.protobuf.categories.trafficm"
      "aneuver.Maneuver.TypeAndConfidence\032\276\003\n\021T"
      "ypeAndConfidence\022[\n\004type\030\001 \001(\0162M.sensori"
      "s.protobuf.categories.trafficmaneuver.Ma"
      "neuver.TypeAndConfidence.Type\022<\n\nconfide"
      "nce\030\002 \001(\0132(.sensoris.protobuf.types.base"
      ".Confidence\"\215\002\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\013"
      "\n\007EVASIVE\020\001\022\017\n\013LANE_CHANGE\020\002\022\025\n\021LANE_CHA"
      "NGE_RIGHT\020\003\022\024\n\020LANE_CHANGE_LEFT\020\004\022\016\n\nOVE"
      "RTAKING\020\005\022\025\n\021INTERSECTION_STOP\020\006\022\013\n\007TURN"
      "ING\020\007\022\021\n\rTURNING_RIGHT\020\010\022\020\n\014TURNING_LEFT"
      "\020\t\022\027\n\023SHARP_TURNING_RIGHT\020\n\022\026\n\022SHARP_TUR"
      "NING_LEFT\020\013\022\020\n\014ACCELERATING\020\014\022\014\n\010BREAKIN"
      "G\020\r\"\264\003\n\010Charging\022=\n\010envelope\030\001 \001(\0132+.sen"
      "soris.protobuf.types.base.EventEnvelope\022"
      "I\n\004type\030\002 \001(\0162;.sensoris.protobuf.catego"
      "ries.trafficmaneuver.Charging.Type\022W\n\024vo"
      "ltage_and_accuracy\030\003 \001(\01323.sensoris.prot"
      "obuf.types.base.Int64ValueAndAccuracyB\004\210"
      "\265\030\000\022W\n\024current_and_accuracy\030\004 \001(\01323.sens"
      "oris.protobuf.types.base.Int64ValueAndAc"
      "curacyB\004\210\265\030\001\"l\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\016"
      "\n\nPORT_J1772\020\001\022\013\n\007CHADEMO\020\002\022\r\n\tSAE_COMBO"
      "\020\003\022\016\n\nTESLA_HPWC\020\004\022\026\n\022TESLA_SUPERCHARGER"
      "\020\005\"\206\003\n\tRefueling\022=\n\010envelope\030\001 \001(\0132+.sen"
      "soris.protobuf.types.base.EventEnvelope\022"
      "J\n\004type\030\002 \001(\0162<.sensoris.protobuf.catego"
      "ries.trafficmaneuver.Refueling.Type\022`\n\035q"
      "uantity_to_full_and_accuracy\030\003 \001(\01323.sen"
      "soris.protobuf.types.base.Int64ValueAndA"
      "ccuracyB\004\210\265\030\001\"\213\001\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000"
      "\022\022\n\016PETROL_PREMIUM\020\001\022\020\n\014PETROL_SUPER\020\002\022\n"
      "\n\006DIESEL\020\003\022\007\n\003LPG\020\004\022\007\n\003CNG\020\005\022\016\n\nBIO_DIES"
      "EL\020\006\022\017\n\013BIO_ETHANOL\020\007\022\014\n\010HYDROGEN\020\010\"\273\002\n\027"
      "TrafficManeuverCategory\022@\n\010envelope\030\001 \001("
      "\0132..sensoris.protobuf.types.base.Categor"
      "yEnvelope\022H\n\010maneuver\030\002 \003(\01326.sensoris.p"
      "rotobuf.categories.trafficmaneuver.Maneu"
      "ver\022H\n\010charging\030\003 \003(\01326.sensoris.protobu"
      "f.categories.trafficmaneuver.Charging\022J\n"
      "\trefueling\030\004 \003(\01327.sensoris.protobuf.cat"
      "egories.trafficmaneuver.RefuelingBO\n\'org"
      ".sensoris.categories.trafficmaneuverB\037Se"
      "nsorisTrafficManeuverCategoryP\001\370\001\001b\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2002);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensoris/protobuf/categories/traffic_maneuver.proto", &protobuf_RegisterTypes);
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace trafficmaneuver {
const ::google::protobuf::EnumDescriptor* Maneuver_TypeAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::file_level_enum_descriptors[0];
}
bool Maneuver_TypeAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Maneuver_TypeAndConfidence_Type Maneuver_TypeAndConfidence::UNKNOWN_TYPE;
const Maneuver_TypeAndConfidence_Type Maneuver_TypeAndConfidence::EVASIVE;
const Maneuver_TypeAndConfidence_Type Maneuver_TypeAndConfidence::LANE_CHANGE;
const Maneuver_TypeAndConfidence_Type Maneuver_TypeAndConfidence::LANE_CHANGE_RIGHT;
const Maneuver_TypeAndConfidence_Type Maneuver_TypeAndConfidence::LANE_CHANGE_LEFT;
const Maneuver_TypeAndConfidence_Type Maneuver_TypeAndConfidence::OVERTAKING;
const Maneuver_TypeAndConfidence_Type Maneuver_TypeAndConfidence::INTERSECTION_STOP;
const Maneuver_TypeAndConfidence_Type Maneuver_TypeAndConfidence::TURNING;
const Maneuver_TypeAndConfidence_Type Maneuver_TypeAndConfidence::TURNING_RIGHT;
const Maneuver_TypeAndConfidence_Type Maneuver_TypeAndConfidence::TURNING_LEFT;
const Maneuver_TypeAndConfidence_Type Maneuver_TypeAndConfidence::SHARP_TURNING_RIGHT;
const Maneuver_TypeAndConfidence_Type Maneuver_TypeAndConfidence::SHARP_TURNING_LEFT;
const Maneuver_TypeAndConfidence_Type Maneuver_TypeAndConfidence::ACCELERATING;
const Maneuver_TypeAndConfidence_Type Maneuver_TypeAndConfidence::BREAKING;
const Maneuver_TypeAndConfidence_Type Maneuver_TypeAndConfidence::Type_MIN;
const Maneuver_TypeAndConfidence_Type Maneuver_TypeAndConfidence::Type_MAX;
const int Maneuver_TypeAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Charging_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::file_level_enum_descriptors[1];
}
bool Charging_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Charging_Type Charging::UNKNOWN_TYPE;
const Charging_Type Charging::PORT_J1772;
const Charging_Type Charging::CHADEMO;
const Charging_Type Charging::SAE_COMBO;
const Charging_Type Charging::TESLA_HPWC;
const Charging_Type Charging::TESLA_SUPERCHARGER;
const Charging_Type Charging::Type_MIN;
const Charging_Type Charging::Type_MAX;
const int Charging::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Refueling_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::file_level_enum_descriptors[2];
}
bool Refueling_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Refueling_Type Refueling::UNKNOWN_TYPE;
const Refueling_Type Refueling::PETROL_PREMIUM;
const Refueling_Type Refueling::PETROL_SUPER;
const Refueling_Type Refueling::DIESEL;
const Refueling_Type Refueling::LPG;
const Refueling_Type Refueling::CNG;
const Refueling_Type Refueling::BIO_DIESEL;
const Refueling_Type Refueling::BIO_ETHANOL;
const Refueling_Type Refueling::HYDROGEN;
const Refueling_Type Refueling::Type_MIN;
const Refueling_Type Refueling::Type_MAX;
const int Refueling::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Maneuver_TypeAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficmaneuver::_Maneuver_TypeAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void Maneuver_TypeAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence.confidence)
}
void Maneuver_TypeAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Maneuver_TypeAndConfidence::kTypeFieldNumber;
const int Maneuver_TypeAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Maneuver_TypeAndConfidence::Maneuver_TypeAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::scc_info_Maneuver_TypeAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence)
}
Maneuver_TypeAndConfidence::Maneuver_TypeAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::scc_info_Maneuver_TypeAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence)
}
Maneuver_TypeAndConfidence::Maneuver_TypeAndConfidence(const Maneuver_TypeAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence)
}

void Maneuver_TypeAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

Maneuver_TypeAndConfidence::~Maneuver_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence)
  SharedDtor();
}

void Maneuver_TypeAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void Maneuver_TypeAndConfidence::ArenaDtor(void* object) {
  Maneuver_TypeAndConfidence* _this = reinterpret_cast< Maneuver_TypeAndConfidence* >(object);
  (void)_this;
}
void Maneuver_TypeAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Maneuver_TypeAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Maneuver_TypeAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Maneuver_TypeAndConfidence& Maneuver_TypeAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::scc_info_Maneuver_TypeAndConfidence.base);
  return *internal_default_instance();
}


void Maneuver_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Maneuver_TypeAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence)
  return false;
#undef DO_
}

void Maneuver_TypeAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence)
}

::google::protobuf::uint8* Maneuver_TypeAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence)
  return target;
}

size_t Maneuver_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Maneuver_TypeAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const Maneuver_TypeAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Maneuver_TypeAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence)
    MergeFrom(*source);
  }
}

void Maneuver_TypeAndConfidence::MergeFrom(const Maneuver_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Maneuver_TypeAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Maneuver_TypeAndConfidence::CopyFrom(const Maneuver_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Maneuver_TypeAndConfidence::IsInitialized() const {
  return true;
}

void Maneuver_TypeAndConfidence::Swap(Maneuver_TypeAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Maneuver_TypeAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Maneuver_TypeAndConfidence::UnsafeArenaSwap(Maneuver_TypeAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Maneuver_TypeAndConfidence::InternalSwap(Maneuver_TypeAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Maneuver_TypeAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Maneuver::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficmaneuver::_Maneuver_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::trafficmaneuver::_Maneuver_default_instance_._instance.get_mutable()->type_and_confidence_ = const_cast< ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence*>(
      ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence::internal_default_instance());
}
void Maneuver::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Maneuver.envelope)
}
void Maneuver::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void Maneuver::unsafe_arena_set_allocated_type_and_confidence(
    ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* type_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = type_and_confidence;
  if (type_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Maneuver.type_and_confidence)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Maneuver::kEnvelopeFieldNumber;
const int Maneuver::kTypeAndConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Maneuver::Maneuver()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::scc_info_Maneuver.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficmaneuver.Maneuver)
}
Maneuver::Maneuver(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::scc_info_Maneuver.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficmaneuver.Maneuver)
}
Maneuver::Maneuver(const Maneuver& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_type_and_confidence()) {
    type_and_confidence_ = new ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence(*from.type_and_confidence_);
  } else {
    type_and_confidence_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficmaneuver.Maneuver)
}

void Maneuver::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_and_confidence_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(type_and_confidence_));
}

Maneuver::~Maneuver() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficmaneuver.Maneuver)
  SharedDtor();
}

void Maneuver::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete type_and_confidence_;
}

void Maneuver::ArenaDtor(void* object) {
  Maneuver* _this = reinterpret_cast< Maneuver* >(object);
  (void)_this;
}
void Maneuver::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Maneuver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Maneuver::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Maneuver& Maneuver::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::scc_info_Maneuver.base);
  return *internal_default_instance();
}


void Maneuver::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficmaneuver.Maneuver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && type_and_confidence_ != NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = NULL;
  _internal_metadata_.Clear();
}

bool Maneuver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficmaneuver.Maneuver)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence type_and_confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficmaneuver.Maneuver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficmaneuver.Maneuver)
  return false;
#undef DO_
}

void Maneuver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficmaneuver.Maneuver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence type_and_confidence = 2;
  if (this->has_type_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_type_and_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficmaneuver.Maneuver)
}

::google::protobuf::uint8* Maneuver::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficmaneuver.Maneuver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence type_and_confidence = 2;
  if (this->has_type_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_type_and_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficmaneuver.Maneuver)
  return target;
}

size_t Maneuver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficmaneuver.Maneuver)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.categories.trafficmaneuver.Maneuver.TypeAndConfidence type_and_confidence = 2;
  if (this->has_type_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *type_and_confidence_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Maneuver::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficmaneuver.Maneuver)
  GOOGLE_DCHECK_NE(&from, this);
  const Maneuver* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Maneuver>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficmaneuver.Maneuver)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficmaneuver.Maneuver)
    MergeFrom(*source);
  }
}

void Maneuver::MergeFrom(const Maneuver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficmaneuver.Maneuver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_type_and_confidence()) {
    mutable_type_and_confidence()->::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence::MergeFrom(from.type_and_confidence());
  }
}

void Maneuver::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficmaneuver.Maneuver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Maneuver::CopyFrom(const Maneuver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficmaneuver.Maneuver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Maneuver::IsInitialized() const {
  return true;
}

void Maneuver::Swap(Maneuver* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Maneuver* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Maneuver::UnsafeArenaSwap(Maneuver* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Maneuver::InternalSwap(Maneuver* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(type_and_confidence_, other->type_and_confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Maneuver::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Charging::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficmaneuver::_Charging_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::trafficmaneuver::_Charging_default_instance_._instance.get_mutable()->voltage_and_accuracy_ = const_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::trafficmaneuver::_Charging_default_instance_._instance.get_mutable()->current_and_accuracy_ = const_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy::internal_default_instance());
}
void Charging::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Charging.envelope)
}
void Charging::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void Charging::unsafe_arena_set_allocated_voltage_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* voltage_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete voltage_and_accuracy_;
  }
  voltage_and_accuracy_ = voltage_and_accuracy;
  if (voltage_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Charging.voltage_and_accuracy)
}
void Charging::clear_voltage_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && voltage_and_accuracy_ != NULL) {
    delete voltage_and_accuracy_;
  }
  voltage_and_accuracy_ = NULL;
}
void Charging::unsafe_arena_set_allocated_current_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* current_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete current_and_accuracy_;
  }
  current_and_accuracy_ = current_and_accuracy;
  if (current_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Charging.current_and_accuracy)
}
void Charging::clear_current_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && current_and_accuracy_ != NULL) {
    delete current_and_accuracy_;
  }
  current_and_accuracy_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Charging::kEnvelopeFieldNumber;
const int Charging::kTypeFieldNumber;
const int Charging::kVoltageAndAccuracyFieldNumber;
const int Charging::kCurrentAndAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Charging::Charging()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::scc_info_Charging.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficmaneuver.Charging)
}
Charging::Charging(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::scc_info_Charging.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficmaneuver.Charging)
}
Charging::Charging(const Charging& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_voltage_and_accuracy()) {
    voltage_and_accuracy_ = new ::sensoris::protobuf::types::base::Int64ValueAndAccuracy(*from.voltage_and_accuracy_);
  } else {
    voltage_and_accuracy_ = NULL;
  }
  if (from.has_current_and_accuracy()) {
    current_and_accuracy_ = new ::sensoris::protobuf::types::base::Int64ValueAndAccuracy(*from.current_and_accuracy_);
  } else {
    current_and_accuracy_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficmaneuver.Charging)
}

void Charging::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(type_));
}

Charging::~Charging() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficmaneuver.Charging)
  SharedDtor();
}

void Charging::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete voltage_and_accuracy_;
  if (this != internal_default_instance()) delete current_and_accuracy_;
}

void Charging::ArenaDtor(void* object) {
  Charging* _this = reinterpret_cast< Charging* >(object);
  (void)_this;
}
void Charging::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Charging::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Charging::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Charging& Charging::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::scc_info_Charging.base);
  return *internal_default_instance();
}


void Charging::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficmaneuver.Charging)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && voltage_and_accuracy_ != NULL) {
    delete voltage_and_accuracy_;
  }
  voltage_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && current_and_accuracy_ != NULL) {
    delete current_and_accuracy_;
  }
  current_and_accuracy_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Charging::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficmaneuver.Charging)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.trafficmaneuver.Charging.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::trafficmaneuver::Charging_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64ValueAndAccuracy voltage_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_voltage_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64ValueAndAccuracy current_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_current_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficmaneuver.Charging)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficmaneuver.Charging)
  return false;
#undef DO_
}

void Charging::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficmaneuver.Charging)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.categories.trafficmaneuver.Charging.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy voltage_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_voltage_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_voltage_and_accuracy(), output);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy current_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_current_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_current_and_accuracy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficmaneuver.Charging)
}

::google::protobuf::uint8* Charging::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficmaneuver.Charging)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.categories.trafficmaneuver.Charging.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy voltage_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_voltage_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_voltage_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy current_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_current_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_current_and_accuracy(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficmaneuver.Charging)
  return target;
}

size_t Charging::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficmaneuver.Charging)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy voltage_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_voltage_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *voltage_and_accuracy_);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy current_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_current_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *current_and_accuracy_);
  }

  // .sensoris.protobuf.categories.trafficmaneuver.Charging.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Charging::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficmaneuver.Charging)
  GOOGLE_DCHECK_NE(&from, this);
  const Charging* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Charging>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficmaneuver.Charging)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficmaneuver.Charging)
    MergeFrom(*source);
  }
}

void Charging::MergeFrom(const Charging& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficmaneuver.Charging)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_voltage_and_accuracy()) {
    mutable_voltage_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.voltage_and_accuracy());
  }
  if (from.has_current_and_accuracy()) {
    mutable_current_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.current_and_accuracy());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Charging::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficmaneuver.Charging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Charging::CopyFrom(const Charging& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficmaneuver.Charging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Charging::IsInitialized() const {
  return true;
}

void Charging::Swap(Charging* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Charging* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Charging::UnsafeArenaSwap(Charging* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Charging::InternalSwap(Charging* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(voltage_and_accuracy_, other->voltage_and_accuracy_);
  swap(current_and_accuracy_, other->current_and_accuracy_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Charging::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Refueling::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficmaneuver::_Refueling_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::trafficmaneuver::_Refueling_default_instance_._instance.get_mutable()->quantity_to_full_and_accuracy_ = const_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy::internal_default_instance());
}
void Refueling::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Refueling.envelope)
}
void Refueling::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void Refueling::unsafe_arena_set_allocated_quantity_to_full_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* quantity_to_full_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete quantity_to_full_and_accuracy_;
  }
  quantity_to_full_and_accuracy_ = quantity_to_full_and_accuracy;
  if (quantity_to_full_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficmaneuver.Refueling.quantity_to_full_and_accuracy)
}
void Refueling::clear_quantity_to_full_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && quantity_to_full_and_accuracy_ != NULL) {
    delete quantity_to_full_and_accuracy_;
  }
  quantity_to_full_and_accuracy_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Refueling::kEnvelopeFieldNumber;
const int Refueling::kTypeFieldNumber;
const int Refueling::kQuantityToFullAndAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Refueling::Refueling()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::scc_info_Refueling.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficmaneuver.Refueling)
}
Refueling::Refueling(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::scc_info_Refueling.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficmaneuver.Refueling)
}
Refueling::Refueling(const Refueling& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_quantity_to_full_and_accuracy()) {
    quantity_to_full_and_accuracy_ = new ::sensoris::protobuf::types::base::Int64ValueAndAccuracy(*from.quantity_to_full_and_accuracy_);
  } else {
    quantity_to_full_and_accuracy_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficmaneuver.Refueling)
}

void Refueling::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(type_));
}

Refueling::~Refueling() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficmaneuver.Refueling)
  SharedDtor();
}

void Refueling::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete quantity_to_full_and_accuracy_;
}

void Refueling::ArenaDtor(void* object) {
  Refueling* _this = reinterpret_cast< Refueling* >(object);
  (void)_this;
}
void Refueling::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Refueling::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Refueling::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Refueling& Refueling::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::scc_info_Refueling.base);
  return *internal_default_instance();
}


void Refueling::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficmaneuver.Refueling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && quantity_to_full_and_accuracy_ != NULL) {
    delete quantity_to_full_and_accuracy_;
  }
  quantity_to_full_and_accuracy_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Refueling::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficmaneuver.Refueling)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.trafficmaneuver.Refueling.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::trafficmaneuver::Refueling_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64ValueAndAccuracy quantity_to_full_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quantity_to_full_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficmaneuver.Refueling)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficmaneuver.Refueling)
  return false;
#undef DO_
}

void Refueling::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficmaneuver.Refueling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.categories.trafficmaneuver.Refueling.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy quantity_to_full_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_quantity_to_full_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_quantity_to_full_and_accuracy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficmaneuver.Refueling)
}

::google::protobuf::uint8* Refueling::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficmaneuver.Refueling)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.categories.trafficmaneuver.Refueling.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy quantity_to_full_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_quantity_to_full_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_quantity_to_full_and_accuracy(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficmaneuver.Refueling)
  return target;
}

size_t Refueling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficmaneuver.Refueling)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy quantity_to_full_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_quantity_to_full_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *quantity_to_full_and_accuracy_);
  }

  // .sensoris.protobuf.categories.trafficmaneuver.Refueling.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Refueling::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficmaneuver.Refueling)
  GOOGLE_DCHECK_NE(&from, this);
  const Refueling* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Refueling>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficmaneuver.Refueling)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficmaneuver.Refueling)
    MergeFrom(*source);
  }
}

void Refueling::MergeFrom(const Refueling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficmaneuver.Refueling)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_quantity_to_full_and_accuracy()) {
    mutable_quantity_to_full_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.quantity_to_full_and_accuracy());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Refueling::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficmaneuver.Refueling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Refueling::CopyFrom(const Refueling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficmaneuver.Refueling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Refueling::IsInitialized() const {
  return true;
}

void Refueling::Swap(Refueling* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Refueling* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Refueling::UnsafeArenaSwap(Refueling* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Refueling::InternalSwap(Refueling* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(quantity_to_full_and_accuracy_, other->quantity_to_full_and_accuracy_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Refueling::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficManeuverCategory::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::trafficmaneuver::_TrafficManeuverCategory_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::CategoryEnvelope*>(
      ::sensoris::protobuf::types::base::CategoryEnvelope::internal_default_instance());
}
void TrafficManeuverCategory::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::CategoryEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory.envelope)
}
void TrafficManeuverCategory::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficManeuverCategory::kEnvelopeFieldNumber;
const int TrafficManeuverCategory::kManeuverFieldNumber;
const int TrafficManeuverCategory::kChargingFieldNumber;
const int TrafficManeuverCategory::kRefuelingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficManeuverCategory::TrafficManeuverCategory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::scc_info_TrafficManeuverCategory.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory)
}
TrafficManeuverCategory::TrafficManeuverCategory(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  maneuver_(arena),
  charging_(arena),
  refueling_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::scc_info_TrafficManeuverCategory.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory)
}
TrafficManeuverCategory::TrafficManeuverCategory(const TrafficManeuverCategory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      maneuver_(from.maneuver_),
      charging_(from.charging_),
      refueling_(from.refueling_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::CategoryEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory)
}

void TrafficManeuverCategory::SharedCtor() {
  envelope_ = NULL;
}

TrafficManeuverCategory::~TrafficManeuverCategory() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory)
  SharedDtor();
}

void TrafficManeuverCategory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
}

void TrafficManeuverCategory::ArenaDtor(void* object) {
  TrafficManeuverCategory* _this = reinterpret_cast< TrafficManeuverCategory* >(object);
  (void)_this;
}
void TrafficManeuverCategory::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TrafficManeuverCategory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficManeuverCategory::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficManeuverCategory& TrafficManeuverCategory::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::scc_info_TrafficManeuverCategory.base);
  return *internal_default_instance();
}


void TrafficManeuverCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  maneuver_.Clear();
  charging_.Clear();
  refueling_.Clear();
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  _internal_metadata_.Clear();
}

bool TrafficManeuverCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.trafficmaneuver.Maneuver maneuver = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_maneuver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.trafficmaneuver.Charging charging = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_charging()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.trafficmaneuver.Refueling refueling = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_refueling()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory)
  return false;
#undef DO_
}

void TrafficManeuverCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // repeated .sensoris.protobuf.categories.trafficmaneuver.Maneuver maneuver = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->maneuver_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->maneuver(static_cast<int>(i)),
      output);
  }

  // repeated .sensoris.protobuf.categories.trafficmaneuver.Charging charging = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->charging_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->charging(static_cast<int>(i)),
      output);
  }

  // repeated .sensoris.protobuf.categories.trafficmaneuver.Refueling refueling = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->refueling_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->refueling(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory)
}

::google::protobuf::uint8* TrafficManeuverCategory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.trafficmaneuver.Maneuver maneuver = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->maneuver_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->maneuver(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.trafficmaneuver.Charging charging = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->charging_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->charging(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.trafficmaneuver.Refueling refueling = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->refueling_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->refueling(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory)
  return target;
}

size_t TrafficManeuverCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sensoris.protobuf.categories.trafficmaneuver.Maneuver maneuver = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->maneuver_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->maneuver(static_cast<int>(i)));
    }
  }

  // repeated .sensoris.protobuf.categories.trafficmaneuver.Charging charging = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->charging_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->charging(static_cast<int>(i)));
    }
  }

  // repeated .sensoris.protobuf.categories.trafficmaneuver.Refueling refueling = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->refueling_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->refueling(static_cast<int>(i)));
    }
  }

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficManeuverCategory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficManeuverCategory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficManeuverCategory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory)
    MergeFrom(*source);
  }
}

void TrafficManeuverCategory::MergeFrom(const TrafficManeuverCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  maneuver_.MergeFrom(from.maneuver_);
  charging_.MergeFrom(from.charging_);
  refueling_.MergeFrom(from.refueling_);
  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::CategoryEnvelope::MergeFrom(from.envelope());
  }
}

void TrafficManeuverCategory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficManeuverCategory::CopyFrom(const TrafficManeuverCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.trafficmaneuver.TrafficManeuverCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficManeuverCategory::IsInitialized() const {
  return true;
}

void TrafficManeuverCategory::Swap(TrafficManeuverCategory* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TrafficManeuverCategory* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TrafficManeuverCategory::UnsafeArenaSwap(TrafficManeuverCategory* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TrafficManeuverCategory::InternalSwap(TrafficManeuverCategory* other) {
  using std::swap;
  CastToBase(&maneuver_)->InternalSwap(CastToBase(&other->maneuver_));
  CastToBase(&charging_)->InternalSwap(CastToBase(&other->charging_));
  CastToBase(&refueling_)->InternalSwap(CastToBase(&other->refueling_));
  swap(envelope_, other->envelope_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficManeuverCategory::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2ftraffic_5fmaneuver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace trafficmaneuver
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficmaneuver::Maneuver_TypeAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficmaneuver::Maneuver* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficmaneuver::Maneuver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficmaneuver::Maneuver >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficmaneuver::Charging* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficmaneuver::Charging >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficmaneuver::Charging >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficmaneuver::Refueling* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficmaneuver::Refueling >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficmaneuver::Refueling >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::trafficmaneuver::TrafficManeuverCategory* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::trafficmaneuver::TrafficManeuverCategory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::trafficmaneuver::TrafficManeuverCategory >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
