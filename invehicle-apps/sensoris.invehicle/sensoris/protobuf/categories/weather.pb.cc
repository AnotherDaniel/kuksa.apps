// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/weather.proto

#include "sensoris/protobuf/categories/weather.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Precipitation_TypeAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Precipitation;
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto
namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Confidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CategoryEnvelope;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EventDetectionStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_EventEnvelope;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Int64ValueAndAccuracy;
}  // namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace weather {
class Precipitation_TypeAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Precipitation_TypeAndConfidence>
      _instance;
} _Precipitation_TypeAndConfidence_default_instance_;
class PrecipitationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Precipitation>
      _instance;
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* relative_intensity_and_accuracy_;
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* absolute_intensity_and_accuracy_;
} _Precipitation_default_instance_;
class WeatherCategoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WeatherCategory>
      _instance;
} _WeatherCategory_default_instance_;
}  // namespace weather
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto {
static void InitDefaultsPrecipitation_TypeAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::weather::_Precipitation_TypeAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Precipitation_TypeAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPrecipitation_TypeAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsPrecipitation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::weather::_Precipitation_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::weather::Precipitation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::weather::Precipitation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Precipitation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsPrecipitation}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventDetectionStatus.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::scc_info_Precipitation_TypeAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64ValueAndAccuracy.base,}};

static void InitDefaultsWeatherCategory() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::weather::_WeatherCategory_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::weather::WeatherCategory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::weather::WeatherCategory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_WeatherCategory =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsWeatherCategory}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_CategoryEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::scc_info_Precipitation.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Precipitation_TypeAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Precipitation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WeatherCategory.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation, detection_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation, type_and_confidence_),
  offsetof(::sensoris::protobuf::categories::weather::PrecipitationDefaultTypeInternal, relative_intensity_and_accuracy_),
  offsetof(::sensoris::protobuf::categories::weather::PrecipitationDefaultTypeInternal, absolute_intensity_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::weather::Precipitation, intensity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::weather::WeatherCategory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::weather::WeatherCategory, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::weather::WeatherCategory, precipitation_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence)},
  { 7, -1, sizeof(::sensoris::protobuf::categories::weather::Precipitation)},
  { 18, -1, sizeof(::sensoris::protobuf::categories::weather::WeatherCategory)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::weather::_Precipitation_TypeAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::weather::_Precipitation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::weather::_WeatherCategory_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "sensoris/protobuf/categories/weather.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n*sensoris/protobuf/categories/weather.p"
      "roto\022$sensoris.protobuf.categories.weath"
      "er\032\"sensoris/protobuf/types/base.proto\"\336"
      "\005\n\rPrecipitation\022=\n\010envelope\030\001 \001(\0132+.sen"
      "soris.protobuf.types.base.EventEnvelope\022"
      "L\n\020detection_status\030\002 \001(\01322.sensoris.pro"
      "tobuf.types.base.EventDetectionStatus\022b\n"
      "\023type_and_confidence\030\003 \001(\0132E.sensoris.pr"
      "otobuf.categories.weather.Precipitation."
      "TypeAndConfidence\022d\n\037relative_intensity_"
      "and_accuracy\030\004 \001(\01323.sensoris.protobuf.t"
      "ypes.base.Int64ValueAndAccuracyB\004\210\265\030\000H\000\022"
      "d\n\037absolute_intensity_and_accuracy\030\005 \001(\013"
      "23.sensoris.protobuf.types.base.Int64Val"
      "ueAndAccuracyB\004\210\265\030\001H\000\032\202\002\n\021TypeAndConfide"
      "nce\022X\n\004type\030\001 \001(\0162J.sensoris.protobuf.ca"
      "tegories.weather.Precipitation.TypeAndCo"
      "nfidence.Type\022<\n\nconfidence\030\002 \001(\0132(.sens"
      "oris.protobuf.types.base.Confidence\"U\n\004T"
      "ype\022\020\n\014UNKNOWN_TYPE\020\000\022\010\n\004NONE\020\001\022\010\n\004RAIN\020"
      "\002\022\023\n\017MIXED_RAIN_SNOW\020\003\022\010\n\004SNOW\020\004\022\010\n\004HAIL"
      "\020\005B\013\n\tintensity\"\237\001\n\017WeatherCategory\022@\n\010e"
      "nvelope\030\001 \001(\0132..sensoris.protobuf.types."
      "base.CategoryEnvelope\022J\n\rprecipitation\030\002"
      " \003(\01323.sensoris.protobuf.categories.weat"
      "her.PrecipitationB\?\n\037org.sensoris.catego"
      "ries.weatherB\027SensorisWeatherCategoryP\001\370"
      "\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1090);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensoris/protobuf/categories/weather.proto", &protobuf_RegisterTypes);
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace weather {
const ::google::protobuf::EnumDescriptor* Precipitation_TypeAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::file_level_enum_descriptors[0];
}
bool Precipitation_TypeAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence::UNKNOWN_TYPE;
const Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence::NONE;
const Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence::RAIN;
const Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence::MIXED_RAIN_SNOW;
const Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence::SNOW;
const Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence::HAIL;
const Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence::Type_MIN;
const Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence::Type_MAX;
const int Precipitation_TypeAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Precipitation_TypeAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::weather::_Precipitation_TypeAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void Precipitation_TypeAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.confidence)
}
void Precipitation_TypeAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Precipitation_TypeAndConfidence::kTypeFieldNumber;
const int Precipitation_TypeAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Precipitation_TypeAndConfidence::Precipitation_TypeAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::scc_info_Precipitation_TypeAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
}
Precipitation_TypeAndConfidence::Precipitation_TypeAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::scc_info_Precipitation_TypeAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
}
Precipitation_TypeAndConfidence::Precipitation_TypeAndConfidence(const Precipitation_TypeAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
}

void Precipitation_TypeAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

Precipitation_TypeAndConfidence::~Precipitation_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  SharedDtor();
}

void Precipitation_TypeAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void Precipitation_TypeAndConfidence::ArenaDtor(void* object) {
  Precipitation_TypeAndConfidence* _this = reinterpret_cast< Precipitation_TypeAndConfidence* >(object);
  (void)_this;
}
void Precipitation_TypeAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Precipitation_TypeAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Precipitation_TypeAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Precipitation_TypeAndConfidence& Precipitation_TypeAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::scc_info_Precipitation_TypeAndConfidence.base);
  return *internal_default_instance();
}


void Precipitation_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Precipitation_TypeAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  return false;
#undef DO_
}

void Precipitation_TypeAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
}

::google::protobuf::uint8* Precipitation_TypeAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  return target;
}

size_t Precipitation_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Precipitation_TypeAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const Precipitation_TypeAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Precipitation_TypeAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
    MergeFrom(*source);
  }
}

void Precipitation_TypeAndConfidence::MergeFrom(const Precipitation_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Precipitation_TypeAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Precipitation_TypeAndConfidence::CopyFrom(const Precipitation_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Precipitation_TypeAndConfidence::IsInitialized() const {
  return true;
}

void Precipitation_TypeAndConfidence::Swap(Precipitation_TypeAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Precipitation_TypeAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Precipitation_TypeAndConfidence::UnsafeArenaSwap(Precipitation_TypeAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Precipitation_TypeAndConfidence::InternalSwap(Precipitation_TypeAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Precipitation_TypeAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Precipitation::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::weather::_Precipitation_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::weather::_Precipitation_default_instance_._instance.get_mutable()->detection_status_ = const_cast< ::sensoris::protobuf::types::base::EventDetectionStatus*>(
      ::sensoris::protobuf::types::base::EventDetectionStatus::internal_default_instance());
  ::sensoris::protobuf::categories::weather::_Precipitation_default_instance_._instance.get_mutable()->type_and_confidence_ = const_cast< ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence*>(
      ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence::internal_default_instance());
  ::sensoris::protobuf::categories::weather::_Precipitation_default_instance_.relative_intensity_and_accuracy_ = const_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::weather::_Precipitation_default_instance_.absolute_intensity_and_accuracy_ = const_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy::internal_default_instance());
}
void Precipitation::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.Precipitation.envelope)
}
void Precipitation::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void Precipitation::unsafe_arena_set_allocated_detection_status(
    ::sensoris::protobuf::types::base::EventDetectionStatus* detection_status) {
  if (GetArenaNoVirtual() == NULL) {
    delete detection_status_;
  }
  detection_status_ = detection_status;
  if (detection_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.Precipitation.detection_status)
}
void Precipitation::clear_detection_status() {
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
}
void Precipitation::unsafe_arena_set_allocated_type_and_confidence(
    ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* type_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = type_and_confidence;
  if (type_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.Precipitation.type_and_confidence)
}
void Precipitation::set_allocated_relative_intensity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* relative_intensity_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_intensity();
  if (relative_intensity_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(relative_intensity_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      relative_intensity_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, relative_intensity_and_accuracy, submessage_arena);
    }
    set_has_relative_intensity_and_accuracy();
    intensity_.relative_intensity_and_accuracy_ = relative_intensity_and_accuracy;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.Precipitation.relative_intensity_and_accuracy)
}
void Precipitation::clear_relative_intensity_and_accuracy() {
  if (has_relative_intensity_and_accuracy()) {
    if (GetArenaNoVirtual() == NULL) {
      delete intensity_.relative_intensity_and_accuracy_;
    }
    clear_has_intensity();
  }
}
void Precipitation::set_allocated_absolute_intensity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* absolute_intensity_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_intensity();
  if (absolute_intensity_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(absolute_intensity_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      absolute_intensity_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, absolute_intensity_and_accuracy, submessage_arena);
    }
    set_has_absolute_intensity_and_accuracy();
    intensity_.absolute_intensity_and_accuracy_ = absolute_intensity_and_accuracy;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.Precipitation.absolute_intensity_and_accuracy)
}
void Precipitation::clear_absolute_intensity_and_accuracy() {
  if (has_absolute_intensity_and_accuracy()) {
    if (GetArenaNoVirtual() == NULL) {
      delete intensity_.absolute_intensity_and_accuracy_;
    }
    clear_has_intensity();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Precipitation::kEnvelopeFieldNumber;
const int Precipitation::kDetectionStatusFieldNumber;
const int Precipitation::kTypeAndConfidenceFieldNumber;
const int Precipitation::kRelativeIntensityAndAccuracyFieldNumber;
const int Precipitation::kAbsoluteIntensityAndAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Precipitation::Precipitation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::scc_info_Precipitation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.weather.Precipitation)
}
Precipitation::Precipitation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::scc_info_Precipitation.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.weather.Precipitation)
}
Precipitation::Precipitation(const Precipitation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_detection_status()) {
    detection_status_ = new ::sensoris::protobuf::types::base::EventDetectionStatus(*from.detection_status_);
  } else {
    detection_status_ = NULL;
  }
  if (from.has_type_and_confidence()) {
    type_and_confidence_ = new ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence(*from.type_and_confidence_);
  } else {
    type_and_confidence_ = NULL;
  }
  clear_has_intensity();
  switch (from.intensity_case()) {
    case kRelativeIntensityAndAccuracy: {
      mutable_relative_intensity_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.relative_intensity_and_accuracy());
      break;
    }
    case kAbsoluteIntensityAndAccuracy: {
      mutable_absolute_intensity_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.absolute_intensity_and_accuracy());
      break;
    }
    case INTENSITY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.weather.Precipitation)
}

void Precipitation::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_and_confidence_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(type_and_confidence_));
  clear_has_intensity();
}

Precipitation::~Precipitation() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.weather.Precipitation)
  SharedDtor();
}

void Precipitation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete detection_status_;
  if (this != internal_default_instance()) delete type_and_confidence_;
  if (has_intensity()) {
    clear_intensity();
  }
}

void Precipitation::ArenaDtor(void* object) {
  Precipitation* _this = reinterpret_cast< Precipitation* >(object);
  (void)_this;
}
void Precipitation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Precipitation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Precipitation::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Precipitation& Precipitation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::scc_info_Precipitation.base);
  return *internal_default_instance();
}


void Precipitation::clear_intensity() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.categories.weather.Precipitation)
  switch (intensity_case()) {
    case kRelativeIntensityAndAccuracy: {
      if (GetArenaNoVirtual() == NULL) {
        delete intensity_.relative_intensity_and_accuracy_;
      }
      break;
    }
    case kAbsoluteIntensityAndAccuracy: {
      if (GetArenaNoVirtual() == NULL) {
        delete intensity_.absolute_intensity_and_accuracy_;
      }
      break;
    }
    case INTENSITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INTENSITY_NOT_SET;
}


void Precipitation::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.weather.Precipitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && type_and_confidence_ != NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = NULL;
  clear_intensity();
  _internal_metadata_.Clear();
}

bool Precipitation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.weather.Precipitation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detection_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence type_and_confidence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_intensity_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_intensity_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64ValueAndAccuracy absolute_intensity_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_absolute_intensity_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.weather.Precipitation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.weather.Precipitation)
  return false;
#undef DO_
}

void Precipitation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.weather.Precipitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (this->has_detection_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_detection_status(), output);
  }

  // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence type_and_confidence = 3;
  if (this->has_type_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_type_and_confidence(), output);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_intensity_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (has_relative_intensity_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_relative_intensity_and_accuracy(), output);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy absolute_intensity_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (has_absolute_intensity_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_absolute_intensity_and_accuracy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.weather.Precipitation)
}

::google::protobuf::uint8* Precipitation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.weather.Precipitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (this->has_detection_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_detection_status(), deterministic, target);
  }

  // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence type_and_confidence = 3;
  if (this->has_type_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_type_and_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_intensity_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (has_relative_intensity_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_relative_intensity_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy absolute_intensity_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (has_absolute_intensity_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_absolute_intensity_and_accuracy(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.weather.Precipitation)
  return target;
}

size_t Precipitation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.weather.Precipitation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  if (this->has_detection_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *detection_status_);
  }

  // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence type_and_confidence = 3;
  if (this->has_type_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *type_and_confidence_);
  }

  switch (intensity_case()) {
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_intensity_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    case kRelativeIntensityAndAccuracy: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *intensity_.relative_intensity_and_accuracy_);
      break;
    }
    // .sensoris.protobuf.types.base.Int64ValueAndAccuracy absolute_intensity_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
    case kAbsoluteIntensityAndAccuracy: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *intensity_.absolute_intensity_and_accuracy_);
      break;
    }
    case INTENSITY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Precipitation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.weather.Precipitation)
  GOOGLE_DCHECK_NE(&from, this);
  const Precipitation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Precipitation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.weather.Precipitation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.weather.Precipitation)
    MergeFrom(*source);
  }
}

void Precipitation::MergeFrom(const Precipitation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.weather.Precipitation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_detection_status()) {
    mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(from.detection_status());
  }
  if (from.has_type_and_confidence()) {
    mutable_type_and_confidence()->::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence::MergeFrom(from.type_and_confidence());
  }
  switch (from.intensity_case()) {
    case kRelativeIntensityAndAccuracy: {
      mutable_relative_intensity_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.relative_intensity_and_accuracy());
      break;
    }
    case kAbsoluteIntensityAndAccuracy: {
      mutable_absolute_intensity_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.absolute_intensity_and_accuracy());
      break;
    }
    case INTENSITY_NOT_SET: {
      break;
    }
  }
}

void Precipitation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.weather.Precipitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Precipitation::CopyFrom(const Precipitation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.weather.Precipitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Precipitation::IsInitialized() const {
  return true;
}

void Precipitation::Swap(Precipitation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Precipitation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Precipitation::UnsafeArenaSwap(Precipitation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Precipitation::InternalSwap(Precipitation* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(detection_status_, other->detection_status_);
  swap(type_and_confidence_, other->type_and_confidence_);
  swap(intensity_, other->intensity_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Precipitation::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WeatherCategory::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::weather::_WeatherCategory_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::CategoryEnvelope*>(
      ::sensoris::protobuf::types::base::CategoryEnvelope::internal_default_instance());
}
void WeatherCategory::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::CategoryEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.WeatherCategory.envelope)
}
void WeatherCategory::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeatherCategory::kEnvelopeFieldNumber;
const int WeatherCategory::kPrecipitationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeatherCategory::WeatherCategory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::scc_info_WeatherCategory.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.weather.WeatherCategory)
}
WeatherCategory::WeatherCategory(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  precipitation_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::scc_info_WeatherCategory.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.weather.WeatherCategory)
}
WeatherCategory::WeatherCategory(const WeatherCategory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      precipitation_(from.precipitation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::CategoryEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.weather.WeatherCategory)
}

void WeatherCategory::SharedCtor() {
  envelope_ = NULL;
}

WeatherCategory::~WeatherCategory() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.weather.WeatherCategory)
  SharedDtor();
}

void WeatherCategory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
}

void WeatherCategory::ArenaDtor(void* object) {
  WeatherCategory* _this = reinterpret_cast< WeatherCategory* >(object);
  (void)_this;
}
void WeatherCategory::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void WeatherCategory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WeatherCategory::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeatherCategory& WeatherCategory::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::scc_info_WeatherCategory.base);
  return *internal_default_instance();
}


void WeatherCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.weather.WeatherCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  precipitation_.Clear();
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  _internal_metadata_.Clear();
}

bool WeatherCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.weather.WeatherCategory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.weather.Precipitation precipitation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_precipitation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.weather.WeatherCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.weather.WeatherCategory)
  return false;
#undef DO_
}

void WeatherCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.weather.WeatherCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // repeated .sensoris.protobuf.categories.weather.Precipitation precipitation = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->precipitation_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->precipitation(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.weather.WeatherCategory)
}

::google::protobuf::uint8* WeatherCategory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.weather.WeatherCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.weather.Precipitation precipitation = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->precipitation_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->precipitation(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.weather.WeatherCategory)
  return target;
}

size_t WeatherCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.weather.WeatherCategory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sensoris.protobuf.categories.weather.Precipitation precipitation = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->precipitation_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->precipitation(static_cast<int>(i)));
    }
  }

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WeatherCategory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.weather.WeatherCategory)
  GOOGLE_DCHECK_NE(&from, this);
  const WeatherCategory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeatherCategory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.weather.WeatherCategory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.weather.WeatherCategory)
    MergeFrom(*source);
  }
}

void WeatherCategory::MergeFrom(const WeatherCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.weather.WeatherCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  precipitation_.MergeFrom(from.precipitation_);
  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::CategoryEnvelope::MergeFrom(from.envelope());
  }
}

void WeatherCategory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.weather.WeatherCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeatherCategory::CopyFrom(const WeatherCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.weather.WeatherCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherCategory::IsInitialized() const {
  return true;
}

void WeatherCategory::Swap(WeatherCategory* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    WeatherCategory* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void WeatherCategory::UnsafeArenaSwap(WeatherCategory* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void WeatherCategory::InternalSwap(WeatherCategory* other) {
  using std::swap;
  CastToBase(&precipitation_)->InternalSwap(CastToBase(&other->precipitation_));
  swap(envelope_, other->envelope_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WeatherCategory::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace weather
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::weather::Precipitation* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::weather::Precipitation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::weather::Precipitation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::weather::WeatherCategory* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::weather::WeatherCategory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::weather::WeatherCategory >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
