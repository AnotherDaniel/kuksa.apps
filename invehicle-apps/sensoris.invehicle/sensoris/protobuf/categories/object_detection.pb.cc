// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/object_detection.proto

#include "sensoris/protobuf/categories/object_detection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fany_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fany_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Any;
}  // namespace protobuf_google_2fprotobuf_2fany_2eproto
namespace protobuf_google_2fprotobuf_2fwrappers_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Int64Value;
}  // namespace protobuf_google_2fprotobuf_2fwrappers_2eproto
namespace protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto ::google::protobuf::internal::SCCInfo<10> scc_info_StaticObject;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MovableObject_TypeAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StaticObject_SurfaceColorAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StaticObject_SurfaceTypeAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StaticObject_TypeAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_StaticObject_SurfaceMaterialAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_StaticObject_ConeAndAccuracy;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_MovableObject;
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto
namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Confidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CategoryEnvelope;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EventDetectionStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_EventEnvelope;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Int64ValueAndAccuracy;
}  // namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto
namespace protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_RectangularBoxAndAccuracy;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_XyzVectorAndAccuracy;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_PositionAndAccuracy;
}  // namespace protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace objectdetection {
class MovableObject_TypeAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MovableObject_TypeAndConfidence>
      _instance;
} _MovableObject_TypeAndConfidence_default_instance_;
class MovableObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MovableObject>
      _instance;
} _MovableObject_default_instance_;
class StaticObject_TypeAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StaticObject_TypeAndConfidence>
      _instance;
} _StaticObject_TypeAndConfidence_default_instance_;
class StaticObject_ConeAndAccuracyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StaticObject_ConeAndAccuracy>
      _instance;
} _StaticObject_ConeAndAccuracy_default_instance_;
class StaticObject_SurfaceTypeAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StaticObject_SurfaceTypeAndConfidence>
      _instance;
} _StaticObject_SurfaceTypeAndConfidence_default_instance_;
class StaticObject_SurfaceMaterialAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StaticObject_SurfaceMaterialAndConfidence>
      _instance;
} _StaticObject_SurfaceMaterialAndConfidence_default_instance_;
class StaticObject_SurfaceColorAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StaticObject_SurfaceColorAndConfidence>
      _instance;
} _StaticObject_SurfaceColorAndConfidence_default_instance_;
class StaticObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StaticObject>
      _instance;
  const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* rectangular_box_and_accuracy_;
  const ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy* cone_and_accuracy_;
} _StaticObject_default_instance_;
class ObjectDetectionCategoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObjectDetectionCategory>
      _instance;
} _ObjectDetectionCategory_default_instance_;
}  // namespace objectdetection
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto {
static void InitDefaultsMovableObject_TypeAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::objectdetection::_MovableObject_TypeAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MovableObject_TypeAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMovableObject_TypeAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsMovableObject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::objectdetection::_MovableObject_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::objectdetection::MovableObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::objectdetection::MovableObject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_MovableObject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsMovableObject}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int64Value.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventDetectionStatus.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_MovableObject_TypeAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RectangularBoxAndAccuracy.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_XyzVectorAndAccuracy.base,}};

static void InitDefaultsStaticObject_TypeAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::objectdetection::_StaticObject_TypeAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StaticObject_TypeAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStaticObject_TypeAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsStaticObject_ConeAndAccuracy() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::objectdetection::_StaticObject_ConeAndAccuracy_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_StaticObject_ConeAndAccuracy =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsStaticObject_ConeAndAccuracy}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64ValueAndAccuracy.base,
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsStaticObject_SurfaceTypeAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::objectdetection::_StaticObject_SurfaceTypeAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StaticObject_SurfaceTypeAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStaticObject_SurfaceTypeAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsStaticObject_SurfaceMaterialAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::objectdetection::_StaticObject_SurfaceMaterialAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_StaticObject_SurfaceMaterialAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsStaticObject_SurfaceMaterialAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64ValueAndAccuracy.base,}};

static void InitDefaultsStaticObject_SurfaceColorAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::objectdetection::_StaticObject_SurfaceColorAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StaticObject_SurfaceColorAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStaticObject_SurfaceColorAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsStaticObject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::objectdetection::_StaticObject_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::objectdetection::StaticObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::objectdetection::StaticObject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<10> scc_info_StaticObject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 10, InitDefaultsStaticObject}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int64Value.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventDetectionStatus.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject_TypeAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RectangularBoxAndAccuracy.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject_ConeAndAccuracy.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject_SurfaceTypeAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject_SurfaceMaterialAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject_SurfaceColorAndConfidence.base,}};

static void InitDefaultsObjectDetectionCategory() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::objectdetection::_ObjectDetectionCategory_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::objectdetection::ObjectDetectionCategory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::objectdetection::ObjectDetectionCategory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ObjectDetectionCategory =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsObjectDetectionCategory}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_CategoryEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_MovableObject.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MovableObject_TypeAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MovableObject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StaticObject_TypeAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StaticObject_ConeAndAccuracy.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StaticObject_SurfaceTypeAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StaticObject_SurfaceMaterialAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StaticObject_SurfaceColorAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StaticObject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObjectDetectionCategory.base);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::MovableObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::MovableObject, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::MovableObject, object_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::MovableObject, existence_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::MovableObject, detection_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::MovableObject, type_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::MovableObject, rectangular_box_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::MovableObject, speed_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::MovableObject, acceleration_and_accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy, lower_position_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy, upper_position_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy, lower_diameter_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy, upper_diameter_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy, extension_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence, reflectivity_and_accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject, object_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject, existence_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject, detection_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject, type_and_confidence_),
  offsetof(::sensoris::protobuf::categories::objectdetection::StaticObjectDefaultTypeInternal, rectangular_box_and_accuracy_),
  offsetof(::sensoris::protobuf::categories::objectdetection::StaticObjectDefaultTypeInternal, cone_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject, surface_type_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject, surface_material_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject, surface_color_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::StaticObject, geometry_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::ObjectDetectionCategory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::ObjectDetectionCategory, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::ObjectDetectionCategory, movable_object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::objectdetection::ObjectDetectionCategory, static_object_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence)},
  { 7, -1, sizeof(::sensoris::protobuf::categories::objectdetection::MovableObject)},
  { 20, -1, sizeof(::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence)},
  { 27, -1, sizeof(::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy)},
  { 37, -1, sizeof(::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence)},
  { 44, -1, sizeof(::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence)},
  { 52, -1, sizeof(::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence)},
  { 59, -1, sizeof(::sensoris::protobuf::categories::objectdetection::StaticObject)},
  { 75, -1, sizeof(::sensoris::protobuf::categories::objectdetection::ObjectDetectionCategory)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::objectdetection::_MovableObject_TypeAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::objectdetection::_MovableObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::objectdetection::_StaticObject_TypeAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::objectdetection::_StaticObject_ConeAndAccuracy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::objectdetection::_StaticObject_SurfaceTypeAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::objectdetection::_StaticObject_SurfaceMaterialAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::objectdetection::_StaticObject_SurfaceColorAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::objectdetection::_StaticObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::objectdetection::_ObjectDetectionCategory_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "sensoris/protobuf/categories/object_detection.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n3sensoris/protobuf/categories/object_de"
      "tection.proto\022,sensoris.protobuf.categor"
      "ies.objectdetection\032\031google/protobuf/any"
      ".proto\032\036google/protobuf/wrappers.proto\032\""
      "sensoris/protobuf/types/base.proto\032%sens"
      "oris/protobuf/types/spatial.proto\"\275\010\n\rMo"
      "vableObject\022=\n\010envelope\030\001 \001(\0132+.sensoris"
      ".protobuf.types.base.EventEnvelope\022.\n\tob"
      "ject_id\030\002 \001(\0132\033.google.protobuf.Int64Val"
      "ue\022F\n\024existence_confidence\030\003 \001(\0132(.senso"
      "ris.protobuf.types.base.Confidence\022L\n\020de"
      "tection_status\030\004 \001(\01322.sensoris.protobuf"
      ".types.base.EventDetectionStatus\022j\n\023type"
      "_and_confidence\030\005 \001(\0132M.sensoris.protobu"
      "f.categories.objectdetection.MovableObje"
      "ct.TypeAndConfidence\022`\n\034rectangular_box_"
      "and_accuracy\030\006 \001(\0132:.sensoris.protobuf.t"
      "ypes.spatial.RectangularBoxAndAccuracy\022W"
      "\n\022speed_and_accuracy\030\007 \001(\01325.sensoris.pr"
      "otobuf.types.spatial.XyzVectorAndAccurac"
      "yB\004\210\265\030\001\022^\n\031acceleration_and_accuracy\030\010 \001"
      "(\01325.sensoris.protobuf.types.spatial.Xyz"
      "VectorAndAccuracyB\004\210\265\030\001\032\237\003\n\021TypeAndConfi"
      "dence\022`\n\004type\030\001 \001(\0162R.sensoris.protobuf."
      "categories.objectdetection.MovableObject"
      ".TypeAndConfidence.Type\022<\n\nconfidence\030\002 "
      "\001(\0132(.sensoris.protobuf.types.base.Confi"
      "dence\"\351\001\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\013\n\007VEHI"
      "CLE\020\001\022\031\n\025VEHICLE_PASSENGER_CAR\020\002\022\021\n\rVEHI"
      "CLE_TRUCK\020\003\022\017\n\013VEHICLE_BUS\020\004\022\020\n\014VEHICLE_"
      "TRAM\020\005\022\023\n\017VEHICLE_TRAILER\020\006\022\017\n\013TWO_WHEEL"
      "ER\020\007\022\032\n\026TWO_WHEELER_MOTORCYCLE\020\010\022\027\n\023TWO_"
      "WHEELER_BICYCLE\020\t\022\n\n\006PERSON\020\n\022\n\n\006ANIMAL\020"
      "\013\"\254\027\n\014StaticObject\022=\n\010envelope\030\001 \001(\0132+.s"
      "ensoris.protobuf.types.base.EventEnvelop"
      "e\022.\n\tobject_id\030\002 \001(\0132\033.google.protobuf.I"
      "nt64Value\022F\n\024existence_confidence\030\003 \001(\0132"
      "(.sensoris.protobuf.types.base.Confidenc"
      "e\022L\n\020detection_status\030\004 \001(\01322.sensoris.p"
      "rotobuf.types.base.EventDetectionStatus\022"
      "i\n\023type_and_confidence\030\005 \001(\0132L.sensoris."
      "protobuf.categories.objectdetection.Stat"
      "icObject.TypeAndConfidence\022b\n\034rectangula"
      "r_box_and_accuracy\030\006 \001(\0132:.sensoris.prot"
      "obuf.types.spatial.RectangularBoxAndAccu"
      "racyH\000\022g\n\021cone_and_accuracy\030\007 \001(\0132J.sens"
      "oris.protobuf.categories.objectdetection"
      ".StaticObject.ConeAndAccuracyH\000\022x\n\033surfa"
      "ce_type_and_confidence\030\010 \001(\0132S.sensoris."
      "protobuf.categories.objectdetection.Stat"
      "icObject.SurfaceTypeAndConfidence\022\200\001\n\037su"
      "rface_material_and_confidence\030\t \001(\0132W.se"
      "nsoris.protobuf.categories.objectdetecti"
      "on.StaticObject.SurfaceMaterialAndConfid"
      "ence\022z\n\034surface_color_and_confidence\030\n \003"
      "(\0132T.sensoris.protobuf.categories.object"
      "detection.StaticObject.SurfaceColorAndCo"
      "nfidence\032\326\004\n\021TypeAndConfidence\022_\n\004type\030\001"
      " \001(\0162Q.sensoris.protobuf.categories.obje"
      "ctdetection.StaticObject.TypeAndConfiden"
      "ce.Type\022<\n\nconfidence\030\002 \001(\0132(.sensoris.p"
      "rotobuf.types.base.Confidence\"\241\003\n\004Type\022\020"
      "\n\014UNKNOWN_TYPE\020\000\022\n\n\006BRIDGE\020\001\022\n\n\006TUNNEL\020\002"
      "\022\010\n\004POLE\020\003\022\016\n\nPOLE_LIGHT\020\004\022\022\n\016POLE_REFLE"
      "CTOR\020\005\022\023\n\017POLE_DELINEATOR\020\006\022\017\n\013POLE_GANT"
      "RY\020\007\022\r\n\tPOLE_SIGN\020\010\022\023\n\017POLE_GUARD_RAIL\020\t"
      "\022\007\n\003BAR\020\n\022\010\n\004TREE\020\013\022\013\n\007BOLLARD\020\014\022\010\n\004CONE"
      "\020\r\022\n\n\006BARREL\020\016\022\010\n\004WALL\020\017\022\022\n\016TRAFFIC_ISLA"
      "ND\020\020\022\016\n\nSPEED_BUMP\020\021\022\014\n\010POT_HOLE\020\022\022\021\n\rMA"
      "NHOLE_COVER\020\023\022\030\n\024MANHOLE_COVER_CLOSED\020\024\022"
      "\026\n\022MANHOLE_COVER_OPEN\020\025\022\017\n\013SIGN_BRIDGE\020\026"
      "\022\026\n\022TRAFFIC_LIGHT_BODY\020\027\022\027\n\023BARRIER_PARK"
      "ING_LOT\020\030\032\260\003\n\017ConeAndAccuracy\022Y\n\033lower_p"
      "osition_and_accuracy\030\001 \001(\01324.sensoris.pr"
      "otobuf.types.spatial.PositionAndAccuracy"
      "\022Y\n\033upper_position_and_accuracy\030\002 \001(\01324."
      "sensoris.protobuf.types.spatial.Position"
      "AndAccuracy\022^\n\033lower_diameter_and_accura"
      "cy\030\003 \001(\01323.sensoris.protobuf.types.base."
      "Int64ValueAndAccuracyB\004\210\265\030\000\022^\n\033upper_dia"
      "meter_and_accuracy\030\004 \001(\01323.sensoris.prot"
      "obuf.types.base.Int64ValueAndAccuracyB\004\210"
      "\265\030\000\022\'\n\textension\030\017 \003(\0132\024.google.protobuf"
      ".Any\032\357\001\n\030SurfaceTypeAndConfidence\022f\n\004typ"
      "e\030\001 \001(\0162X.sensoris.protobuf.categories.o"
      "bjectdetection.StaticObject.SurfaceTypeA"
      "ndConfidence.Type\022<\n\nconfidence\030\002 \001(\0132(."
      "sensoris.protobuf.types.base.Confidence\""
      "-\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\010\n\004FLAT\020\001\022\t\n\005R"
      "OUGH\020\002\032\225\003\n\034SurfaceMaterialAndConfidence\022"
      "j\n\004type\030\001 \001(\0162\\.sensoris.protobuf.catego"
      "ries.objectdetection.StaticObject.Surfac"
      "eMaterialAndConfidence.Type\022<\n\nconfidenc"
      "e\030\002 \001(\0132(.sensoris.protobuf.types.base.C"
      "onfidence\022\\\n\031reflectivity_and_accuracy\030\003"
      " \001(\01323.sensoris.protobuf.types.base.Int6"
      "4ValueAndAccuracyB\004\210\265\030\000\"m\n\004Type\022\020\n\014UNKNO"
      "WN_TYPE\020\000\022\t\n\005METAL\020\001\022\014\n\010CONCRETE\020\002\022\t\n\005ST"
      "ONE\020\003\022\010\n\004WOOD\020\004\022\013\n\007PLASTIC\020\005\022\013\n\007ASPHALT\020"
      "\006\022\013\n\007ORGANIC\020\007\032\303\002\n\031SurfaceColorAndConfid"
      "ence\022g\n\004type\030\001 \001(\0162Y.sensoris.protobuf.c"
      "ategories.objectdetection.StaticObject.S"
      "urfaceColorAndConfidence.Type\022<\n\nconfide"
      "nce\030\002 \001(\0132(.sensoris.protobuf.types.base"
      ".Confidence\"\177\n\004Type\022\017\n\013UNKOWN_TYPE\020\000\022\t\n\005"
      "OTHER\020\001\022\t\n\005WHITE\020\002\022\010\n\004GRAY\020\003\022\016\n\nGRAY_LIG"
      "HT\020\004\022\r\n\tGRAY_DARK\020\005\022\t\n\005BLACK\020\006\022\007\n\003RED\020\007\022"
      "\t\n\005GREEN\020\010\022\010\n\004BLUE\020\tB\n\n\010geometry\"\203\002\n\027Obj"
      "ectDetectionCategory\022@\n\010envelope\030\001 \001(\0132."
      ".sensoris.protobuf.types.base.CategoryEn"
      "velope\022S\n\016movable_object\030\002 \003(\0132;.sensori"
      "s.protobuf.categories.objectdetection.Mo"
      "vableObject\022Q\n\rstatic_object\030\003 \003(\0132:.sen"
      "soris.protobuf.categories.objectdetectio"
      "n.StaticObjectBO\n\'org.sensoris.categorie"
      "s.objectdetectionB\037SensorisObjectDetecti"
      "onCategoryP\001\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4663);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensoris/protobuf/categories/object_detection.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::AddDescriptors();
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace objectdetection {
const ::google::protobuf::EnumDescriptor* MovableObject_TypeAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::file_level_enum_descriptors[0];
}
bool MovableObject_TypeAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MovableObject_TypeAndConfidence_Type MovableObject_TypeAndConfidence::UNKNOWN_TYPE;
const MovableObject_TypeAndConfidence_Type MovableObject_TypeAndConfidence::VEHICLE;
const MovableObject_TypeAndConfidence_Type MovableObject_TypeAndConfidence::VEHICLE_PASSENGER_CAR;
const MovableObject_TypeAndConfidence_Type MovableObject_TypeAndConfidence::VEHICLE_TRUCK;
const MovableObject_TypeAndConfidence_Type MovableObject_TypeAndConfidence::VEHICLE_BUS;
const MovableObject_TypeAndConfidence_Type MovableObject_TypeAndConfidence::VEHICLE_TRAM;
const MovableObject_TypeAndConfidence_Type MovableObject_TypeAndConfidence::VEHICLE_TRAILER;
const MovableObject_TypeAndConfidence_Type MovableObject_TypeAndConfidence::TWO_WHEELER;
const MovableObject_TypeAndConfidence_Type MovableObject_TypeAndConfidence::TWO_WHEELER_MOTORCYCLE;
const MovableObject_TypeAndConfidence_Type MovableObject_TypeAndConfidence::TWO_WHEELER_BICYCLE;
const MovableObject_TypeAndConfidence_Type MovableObject_TypeAndConfidence::PERSON;
const MovableObject_TypeAndConfidence_Type MovableObject_TypeAndConfidence::ANIMAL;
const MovableObject_TypeAndConfidence_Type MovableObject_TypeAndConfidence::Type_MIN;
const MovableObject_TypeAndConfidence_Type MovableObject_TypeAndConfidence::Type_MAX;
const int MovableObject_TypeAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StaticObject_TypeAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::file_level_enum_descriptors[1];
}
bool StaticObject_TypeAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::UNKNOWN_TYPE;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::BRIDGE;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::TUNNEL;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::POLE;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::POLE_LIGHT;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::POLE_REFLECTOR;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::POLE_DELINEATOR;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::POLE_GANTRY;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::POLE_SIGN;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::POLE_GUARD_RAIL;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::BAR;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::TREE;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::BOLLARD;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::CONE;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::BARREL;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::WALL;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::TRAFFIC_ISLAND;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::SPEED_BUMP;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::POT_HOLE;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::MANHOLE_COVER;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::MANHOLE_COVER_CLOSED;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::MANHOLE_COVER_OPEN;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::SIGN_BRIDGE;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::TRAFFIC_LIGHT_BODY;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::BARRIER_PARKING_LOT;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::Type_MIN;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::Type_MAX;
const int StaticObject_TypeAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StaticObject_SurfaceTypeAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::file_level_enum_descriptors[2];
}
bool StaticObject_SurfaceTypeAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StaticObject_SurfaceTypeAndConfidence_Type StaticObject_SurfaceTypeAndConfidence::UNKNOWN_TYPE;
const StaticObject_SurfaceTypeAndConfidence_Type StaticObject_SurfaceTypeAndConfidence::FLAT;
const StaticObject_SurfaceTypeAndConfidence_Type StaticObject_SurfaceTypeAndConfidence::ROUGH;
const StaticObject_SurfaceTypeAndConfidence_Type StaticObject_SurfaceTypeAndConfidence::Type_MIN;
const StaticObject_SurfaceTypeAndConfidence_Type StaticObject_SurfaceTypeAndConfidence::Type_MAX;
const int StaticObject_SurfaceTypeAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StaticObject_SurfaceMaterialAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::file_level_enum_descriptors[3];
}
bool StaticObject_SurfaceMaterialAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StaticObject_SurfaceMaterialAndConfidence_Type StaticObject_SurfaceMaterialAndConfidence::UNKNOWN_TYPE;
const StaticObject_SurfaceMaterialAndConfidence_Type StaticObject_SurfaceMaterialAndConfidence::METAL;
const StaticObject_SurfaceMaterialAndConfidence_Type StaticObject_SurfaceMaterialAndConfidence::CONCRETE;
const StaticObject_SurfaceMaterialAndConfidence_Type StaticObject_SurfaceMaterialAndConfidence::STONE;
const StaticObject_SurfaceMaterialAndConfidence_Type StaticObject_SurfaceMaterialAndConfidence::WOOD;
const StaticObject_SurfaceMaterialAndConfidence_Type StaticObject_SurfaceMaterialAndConfidence::PLASTIC;
const StaticObject_SurfaceMaterialAndConfidence_Type StaticObject_SurfaceMaterialAndConfidence::ASPHALT;
const StaticObject_SurfaceMaterialAndConfidence_Type StaticObject_SurfaceMaterialAndConfidence::ORGANIC;
const StaticObject_SurfaceMaterialAndConfidence_Type StaticObject_SurfaceMaterialAndConfidence::Type_MIN;
const StaticObject_SurfaceMaterialAndConfidence_Type StaticObject_SurfaceMaterialAndConfidence::Type_MAX;
const int StaticObject_SurfaceMaterialAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StaticObject_SurfaceColorAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::file_level_enum_descriptors[4];
}
bool StaticObject_SurfaceColorAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StaticObject_SurfaceColorAndConfidence_Type StaticObject_SurfaceColorAndConfidence::UNKOWN_TYPE;
const StaticObject_SurfaceColorAndConfidence_Type StaticObject_SurfaceColorAndConfidence::OTHER;
const StaticObject_SurfaceColorAndConfidence_Type StaticObject_SurfaceColorAndConfidence::WHITE;
const StaticObject_SurfaceColorAndConfidence_Type StaticObject_SurfaceColorAndConfidence::GRAY;
const StaticObject_SurfaceColorAndConfidence_Type StaticObject_SurfaceColorAndConfidence::GRAY_LIGHT;
const StaticObject_SurfaceColorAndConfidence_Type StaticObject_SurfaceColorAndConfidence::GRAY_DARK;
const StaticObject_SurfaceColorAndConfidence_Type StaticObject_SurfaceColorAndConfidence::BLACK;
const StaticObject_SurfaceColorAndConfidence_Type StaticObject_SurfaceColorAndConfidence::RED;
const StaticObject_SurfaceColorAndConfidence_Type StaticObject_SurfaceColorAndConfidence::GREEN;
const StaticObject_SurfaceColorAndConfidence_Type StaticObject_SurfaceColorAndConfidence::BLUE;
const StaticObject_SurfaceColorAndConfidence_Type StaticObject_SurfaceColorAndConfidence::Type_MIN;
const StaticObject_SurfaceColorAndConfidence_Type StaticObject_SurfaceColorAndConfidence::Type_MAX;
const int StaticObject_SurfaceColorAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void MovableObject_TypeAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::objectdetection::_MovableObject_TypeAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void MovableObject_TypeAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence.confidence)
}
void MovableObject_TypeAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MovableObject_TypeAndConfidence::kTypeFieldNumber;
const int MovableObject_TypeAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MovableObject_TypeAndConfidence::MovableObject_TypeAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_MovableObject_TypeAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence)
}
MovableObject_TypeAndConfidence::MovableObject_TypeAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_MovableObject_TypeAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence)
}
MovableObject_TypeAndConfidence::MovableObject_TypeAndConfidence(const MovableObject_TypeAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence)
}

void MovableObject_TypeAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

MovableObject_TypeAndConfidence::~MovableObject_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence)
  SharedDtor();
}

void MovableObject_TypeAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void MovableObject_TypeAndConfidence::ArenaDtor(void* object) {
  MovableObject_TypeAndConfidence* _this = reinterpret_cast< MovableObject_TypeAndConfidence* >(object);
  (void)_this;
}
void MovableObject_TypeAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MovableObject_TypeAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MovableObject_TypeAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MovableObject_TypeAndConfidence& MovableObject_TypeAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_MovableObject_TypeAndConfidence.base);
  return *internal_default_instance();
}


void MovableObject_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool MovableObject_TypeAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence)
  return false;
#undef DO_
}

void MovableObject_TypeAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence)
}

::google::protobuf::uint8* MovableObject_TypeAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence)
  return target;
}

size_t MovableObject_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MovableObject_TypeAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const MovableObject_TypeAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MovableObject_TypeAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence)
    MergeFrom(*source);
  }
}

void MovableObject_TypeAndConfidence::MergeFrom(const MovableObject_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void MovableObject_TypeAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovableObject_TypeAndConfidence::CopyFrom(const MovableObject_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovableObject_TypeAndConfidence::IsInitialized() const {
  return true;
}

void MovableObject_TypeAndConfidence::Swap(MovableObject_TypeAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MovableObject_TypeAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MovableObject_TypeAndConfidence::UnsafeArenaSwap(MovableObject_TypeAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MovableObject_TypeAndConfidence::InternalSwap(MovableObject_TypeAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MovableObject_TypeAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MovableObject::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::objectdetection::_MovableObject_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::objectdetection::_MovableObject_default_instance_._instance.get_mutable()->object_id_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::categories::objectdetection::_MovableObject_default_instance_._instance.get_mutable()->existence_confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
  ::sensoris::protobuf::categories::objectdetection::_MovableObject_default_instance_._instance.get_mutable()->detection_status_ = const_cast< ::sensoris::protobuf::types::base::EventDetectionStatus*>(
      ::sensoris::protobuf::types::base::EventDetectionStatus::internal_default_instance());
  ::sensoris::protobuf::categories::objectdetection::_MovableObject_default_instance_._instance.get_mutable()->type_and_confidence_ = const_cast< ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence*>(
      ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence::internal_default_instance());
  ::sensoris::protobuf::categories::objectdetection::_MovableObject_default_instance_._instance.get_mutable()->rectangular_box_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::objectdetection::_MovableObject_default_instance_._instance.get_mutable()->speed_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::objectdetection::_MovableObject_default_instance_._instance.get_mutable()->acceleration_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy::internal_default_instance());
}
void MovableObject::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.MovableObject.envelope)
}
void MovableObject::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void MovableObject::unsafe_arena_set_allocated_object_id(
    ::google::protobuf::Int64Value* object_id) {
  if (GetArenaNoVirtual() == NULL) {
    delete object_id_;
  }
  object_id_ = object_id;
  if (object_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.MovableObject.object_id)
}
void MovableObject::clear_object_id() {
  if (GetArenaNoVirtual() == NULL && object_id_ != NULL) {
    delete object_id_;
  }
  object_id_ = NULL;
}
void MovableObject::unsafe_arena_set_allocated_existence_confidence(
    ::sensoris::protobuf::types::base::Confidence* existence_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete existence_confidence_;
  }
  existence_confidence_ = existence_confidence;
  if (existence_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.MovableObject.existence_confidence)
}
void MovableObject::clear_existence_confidence() {
  if (GetArenaNoVirtual() == NULL && existence_confidence_ != NULL) {
    delete existence_confidence_;
  }
  existence_confidence_ = NULL;
}
void MovableObject::unsafe_arena_set_allocated_detection_status(
    ::sensoris::protobuf::types::base::EventDetectionStatus* detection_status) {
  if (GetArenaNoVirtual() == NULL) {
    delete detection_status_;
  }
  detection_status_ = detection_status;
  if (detection_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.MovableObject.detection_status)
}
void MovableObject::clear_detection_status() {
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
}
void MovableObject::unsafe_arena_set_allocated_type_and_confidence(
    ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence* type_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = type_and_confidence;
  if (type_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.MovableObject.type_and_confidence)
}
void MovableObject::unsafe_arena_set_allocated_rectangular_box_and_accuracy(
    ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* rectangular_box_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete rectangular_box_and_accuracy_;
  }
  rectangular_box_and_accuracy_ = rectangular_box_and_accuracy;
  if (rectangular_box_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.MovableObject.rectangular_box_and_accuracy)
}
void MovableObject::clear_rectangular_box_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && rectangular_box_and_accuracy_ != NULL) {
    delete rectangular_box_and_accuracy_;
  }
  rectangular_box_and_accuracy_ = NULL;
}
void MovableObject::unsafe_arena_set_allocated_speed_and_accuracy(
    ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* speed_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete speed_and_accuracy_;
  }
  speed_and_accuracy_ = speed_and_accuracy;
  if (speed_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.MovableObject.speed_and_accuracy)
}
void MovableObject::clear_speed_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && speed_and_accuracy_ != NULL) {
    delete speed_and_accuracy_;
  }
  speed_and_accuracy_ = NULL;
}
void MovableObject::unsafe_arena_set_allocated_acceleration_and_accuracy(
    ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* acceleration_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete acceleration_and_accuracy_;
  }
  acceleration_and_accuracy_ = acceleration_and_accuracy;
  if (acceleration_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.MovableObject.acceleration_and_accuracy)
}
void MovableObject::clear_acceleration_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && acceleration_and_accuracy_ != NULL) {
    delete acceleration_and_accuracy_;
  }
  acceleration_and_accuracy_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MovableObject::kEnvelopeFieldNumber;
const int MovableObject::kObjectIdFieldNumber;
const int MovableObject::kExistenceConfidenceFieldNumber;
const int MovableObject::kDetectionStatusFieldNumber;
const int MovableObject::kTypeAndConfidenceFieldNumber;
const int MovableObject::kRectangularBoxAndAccuracyFieldNumber;
const int MovableObject::kSpeedAndAccuracyFieldNumber;
const int MovableObject::kAccelerationAndAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MovableObject::MovableObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_MovableObject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.objectdetection.MovableObject)
}
MovableObject::MovableObject(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_MovableObject.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.objectdetection.MovableObject)
}
MovableObject::MovableObject(const MovableObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_object_id()) {
    object_id_ = new ::google::protobuf::Int64Value(*from.object_id_);
  } else {
    object_id_ = NULL;
  }
  if (from.has_existence_confidence()) {
    existence_confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.existence_confidence_);
  } else {
    existence_confidence_ = NULL;
  }
  if (from.has_detection_status()) {
    detection_status_ = new ::sensoris::protobuf::types::base::EventDetectionStatus(*from.detection_status_);
  } else {
    detection_status_ = NULL;
  }
  if (from.has_type_and_confidence()) {
    type_and_confidence_ = new ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence(*from.type_and_confidence_);
  } else {
    type_and_confidence_ = NULL;
  }
  if (from.has_rectangular_box_and_accuracy()) {
    rectangular_box_and_accuracy_ = new ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy(*from.rectangular_box_and_accuracy_);
  } else {
    rectangular_box_and_accuracy_ = NULL;
  }
  if (from.has_speed_and_accuracy()) {
    speed_and_accuracy_ = new ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy(*from.speed_and_accuracy_);
  } else {
    speed_and_accuracy_ = NULL;
  }
  if (from.has_acceleration_and_accuracy()) {
    acceleration_and_accuracy_ = new ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy(*from.acceleration_and_accuracy_);
  } else {
    acceleration_and_accuracy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.objectdetection.MovableObject)
}

void MovableObject::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceleration_and_accuracy_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(acceleration_and_accuracy_));
}

MovableObject::~MovableObject() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.objectdetection.MovableObject)
  SharedDtor();
}

void MovableObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete object_id_;
  if (this != internal_default_instance()) delete existence_confidence_;
  if (this != internal_default_instance()) delete detection_status_;
  if (this != internal_default_instance()) delete type_and_confidence_;
  if (this != internal_default_instance()) delete rectangular_box_and_accuracy_;
  if (this != internal_default_instance()) delete speed_and_accuracy_;
  if (this != internal_default_instance()) delete acceleration_and_accuracy_;
}

void MovableObject::ArenaDtor(void* object) {
  MovableObject* _this = reinterpret_cast< MovableObject* >(object);
  (void)_this;
}
void MovableObject::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MovableObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MovableObject::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MovableObject& MovableObject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_MovableObject.base);
  return *internal_default_instance();
}


void MovableObject::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.objectdetection.MovableObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && object_id_ != NULL) {
    delete object_id_;
  }
  object_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && existence_confidence_ != NULL) {
    delete existence_confidence_;
  }
  existence_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && type_and_confidence_ != NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && rectangular_box_and_accuracy_ != NULL) {
    delete rectangular_box_and_accuracy_;
  }
  rectangular_box_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && speed_and_accuracy_ != NULL) {
    delete speed_and_accuracy_;
  }
  speed_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && acceleration_and_accuracy_ != NULL) {
    delete acceleration_and_accuracy_;
  }
  acceleration_and_accuracy_ = NULL;
  _internal_metadata_.Clear();
}

bool MovableObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.objectdetection.MovableObject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value object_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_object_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_existence_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detection_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence type_and_confidence = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rectangular_box_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy speed_and_accuracy = 7 [(.sensoris.protobuf.types.base.exponent) = 1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_speed_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy acceleration_and_accuracy = 8 [(.sensoris.protobuf.types.base.exponent) = 1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acceleration_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.objectdetection.MovableObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.objectdetection.MovableObject)
  return false;
#undef DO_
}

void MovableObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.objectdetection.MovableObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .google.protobuf.Int64Value object_id = 2;
  if (this->has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_object_id(), output);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
  if (this->has_existence_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_existence_confidence(), output);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
  if (this->has_detection_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_detection_status(), output);
  }

  // .sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence type_and_confidence = 5;
  if (this->has_type_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_type_and_confidence(), output);
  }

  // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 6;
  if (this->has_rectangular_box_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_rectangular_box_and_accuracy(), output);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy speed_and_accuracy = 7 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_speed_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_speed_and_accuracy(), output);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy acceleration_and_accuracy = 8 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_acceleration_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_acceleration_and_accuracy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.objectdetection.MovableObject)
}

::google::protobuf::uint8* MovableObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.objectdetection.MovableObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .google.protobuf.Int64Value object_id = 2;
  if (this->has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_object_id(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
  if (this->has_existence_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_existence_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
  if (this->has_detection_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_detection_status(), deterministic, target);
  }

  // .sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence type_and_confidence = 5;
  if (this->has_type_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_type_and_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 6;
  if (this->has_rectangular_box_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_rectangular_box_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy speed_and_accuracy = 7 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_speed_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_speed_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy acceleration_and_accuracy = 8 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_acceleration_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_acceleration_and_accuracy(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.objectdetection.MovableObject)
  return target;
}

size_t MovableObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.objectdetection.MovableObject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .google.protobuf.Int64Value object_id = 2;
  if (this->has_object_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *object_id_);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
  if (this->has_existence_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *existence_confidence_);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
  if (this->has_detection_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *detection_status_);
  }

  // .sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence type_and_confidence = 5;
  if (this->has_type_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *type_and_confidence_);
  }

  // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 6;
  if (this->has_rectangular_box_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rectangular_box_and_accuracy_);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy speed_and_accuracy = 7 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_speed_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *speed_and_accuracy_);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy acceleration_and_accuracy = 8 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_acceleration_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *acceleration_and_accuracy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MovableObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.objectdetection.MovableObject)
  GOOGLE_DCHECK_NE(&from, this);
  const MovableObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MovableObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.objectdetection.MovableObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.objectdetection.MovableObject)
    MergeFrom(*source);
  }
}

void MovableObject::MergeFrom(const MovableObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.objectdetection.MovableObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_object_id()) {
    mutable_object_id()->::google::protobuf::Int64Value::MergeFrom(from.object_id());
  }
  if (from.has_existence_confidence()) {
    mutable_existence_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.existence_confidence());
  }
  if (from.has_detection_status()) {
    mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(from.detection_status());
  }
  if (from.has_type_and_confidence()) {
    mutable_type_and_confidence()->::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence::MergeFrom(from.type_and_confidence());
  }
  if (from.has_rectangular_box_and_accuracy()) {
    mutable_rectangular_box_and_accuracy()->::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy::MergeFrom(from.rectangular_box_and_accuracy());
  }
  if (from.has_speed_and_accuracy()) {
    mutable_speed_and_accuracy()->::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy::MergeFrom(from.speed_and_accuracy());
  }
  if (from.has_acceleration_and_accuracy()) {
    mutable_acceleration_and_accuracy()->::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy::MergeFrom(from.acceleration_and_accuracy());
  }
}

void MovableObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.objectdetection.MovableObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovableObject::CopyFrom(const MovableObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.objectdetection.MovableObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovableObject::IsInitialized() const {
  return true;
}

void MovableObject::Swap(MovableObject* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MovableObject* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MovableObject::UnsafeArenaSwap(MovableObject* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MovableObject::InternalSwap(MovableObject* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(object_id_, other->object_id_);
  swap(existence_confidence_, other->existence_confidence_);
  swap(detection_status_, other->detection_status_);
  swap(type_and_confidence_, other->type_and_confidence_);
  swap(rectangular_box_and_accuracy_, other->rectangular_box_and_accuracy_);
  swap(speed_and_accuracy_, other->speed_and_accuracy_);
  swap(acceleration_and_accuracy_, other->acceleration_and_accuracy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MovableObject::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StaticObject_TypeAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::objectdetection::_StaticObject_TypeAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void StaticObject_TypeAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence.confidence)
}
void StaticObject_TypeAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaticObject_TypeAndConfidence::kTypeFieldNumber;
const int StaticObject_TypeAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaticObject_TypeAndConfidence::StaticObject_TypeAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject_TypeAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence)
}
StaticObject_TypeAndConfidence::StaticObject_TypeAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject_TypeAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence)
}
StaticObject_TypeAndConfidence::StaticObject_TypeAndConfidence(const StaticObject_TypeAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence)
}

void StaticObject_TypeAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

StaticObject_TypeAndConfidence::~StaticObject_TypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence)
  SharedDtor();
}

void StaticObject_TypeAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void StaticObject_TypeAndConfidence::ArenaDtor(void* object) {
  StaticObject_TypeAndConfidence* _this = reinterpret_cast< StaticObject_TypeAndConfidence* >(object);
  (void)_this;
}
void StaticObject_TypeAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StaticObject_TypeAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StaticObject_TypeAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StaticObject_TypeAndConfidence& StaticObject_TypeAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject_TypeAndConfidence.base);
  return *internal_default_instance();
}


void StaticObject_TypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool StaticObject_TypeAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence)
  return false;
#undef DO_
}

void StaticObject_TypeAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence)
}

::google::protobuf::uint8* StaticObject_TypeAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence)
  return target;
}

size_t StaticObject_TypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StaticObject_TypeAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticObject_TypeAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StaticObject_TypeAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence)
    MergeFrom(*source);
  }
}

void StaticObject_TypeAndConfidence::MergeFrom(const StaticObject_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void StaticObject_TypeAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticObject_TypeAndConfidence::CopyFrom(const StaticObject_TypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticObject_TypeAndConfidence::IsInitialized() const {
  return true;
}

void StaticObject_TypeAndConfidence::Swap(StaticObject_TypeAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StaticObject_TypeAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StaticObject_TypeAndConfidence::UnsafeArenaSwap(StaticObject_TypeAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StaticObject_TypeAndConfidence::InternalSwap(StaticObject_TypeAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StaticObject_TypeAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StaticObject_ConeAndAccuracy::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::objectdetection::_StaticObject_ConeAndAccuracy_default_instance_._instance.get_mutable()->lower_position_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::PositionAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::PositionAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::objectdetection::_StaticObject_ConeAndAccuracy_default_instance_._instance.get_mutable()->upper_position_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::PositionAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::PositionAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::objectdetection::_StaticObject_ConeAndAccuracy_default_instance_._instance.get_mutable()->lower_diameter_and_accuracy_ = const_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::objectdetection::_StaticObject_ConeAndAccuracy_default_instance_._instance.get_mutable()->upper_diameter_and_accuracy_ = const_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy::internal_default_instance());
}
void StaticObject_ConeAndAccuracy::unsafe_arena_set_allocated_lower_position_and_accuracy(
    ::sensoris::protobuf::types::spatial::PositionAndAccuracy* lower_position_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete lower_position_and_accuracy_;
  }
  lower_position_and_accuracy_ = lower_position_and_accuracy;
  if (lower_position_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.lower_position_and_accuracy)
}
void StaticObject_ConeAndAccuracy::clear_lower_position_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && lower_position_and_accuracy_ != NULL) {
    delete lower_position_and_accuracy_;
  }
  lower_position_and_accuracy_ = NULL;
}
void StaticObject_ConeAndAccuracy::unsafe_arena_set_allocated_upper_position_and_accuracy(
    ::sensoris::protobuf::types::spatial::PositionAndAccuracy* upper_position_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete upper_position_and_accuracy_;
  }
  upper_position_and_accuracy_ = upper_position_and_accuracy;
  if (upper_position_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.upper_position_and_accuracy)
}
void StaticObject_ConeAndAccuracy::clear_upper_position_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && upper_position_and_accuracy_ != NULL) {
    delete upper_position_and_accuracy_;
  }
  upper_position_and_accuracy_ = NULL;
}
void StaticObject_ConeAndAccuracy::unsafe_arena_set_allocated_lower_diameter_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* lower_diameter_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete lower_diameter_and_accuracy_;
  }
  lower_diameter_and_accuracy_ = lower_diameter_and_accuracy;
  if (lower_diameter_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.lower_diameter_and_accuracy)
}
void StaticObject_ConeAndAccuracy::clear_lower_diameter_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && lower_diameter_and_accuracy_ != NULL) {
    delete lower_diameter_and_accuracy_;
  }
  lower_diameter_and_accuracy_ = NULL;
}
void StaticObject_ConeAndAccuracy::unsafe_arena_set_allocated_upper_diameter_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* upper_diameter_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete upper_diameter_and_accuracy_;
  }
  upper_diameter_and_accuracy_ = upper_diameter_and_accuracy;
  if (upper_diameter_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.upper_diameter_and_accuracy)
}
void StaticObject_ConeAndAccuracy::clear_upper_diameter_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && upper_diameter_and_accuracy_ != NULL) {
    delete upper_diameter_and_accuracy_;
  }
  upper_diameter_and_accuracy_ = NULL;
}
void StaticObject_ConeAndAccuracy::clear_extension() {
  extension_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaticObject_ConeAndAccuracy::kLowerPositionAndAccuracyFieldNumber;
const int StaticObject_ConeAndAccuracy::kUpperPositionAndAccuracyFieldNumber;
const int StaticObject_ConeAndAccuracy::kLowerDiameterAndAccuracyFieldNumber;
const int StaticObject_ConeAndAccuracy::kUpperDiameterAndAccuracyFieldNumber;
const int StaticObject_ConeAndAccuracy::kExtensionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaticObject_ConeAndAccuracy::StaticObject_ConeAndAccuracy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject_ConeAndAccuracy.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy)
}
StaticObject_ConeAndAccuracy::StaticObject_ConeAndAccuracy(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  extension_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject_ConeAndAccuracy.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy)
}
StaticObject_ConeAndAccuracy::StaticObject_ConeAndAccuracy(const StaticObject_ConeAndAccuracy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lower_position_and_accuracy()) {
    lower_position_and_accuracy_ = new ::sensoris::protobuf::types::spatial::PositionAndAccuracy(*from.lower_position_and_accuracy_);
  } else {
    lower_position_and_accuracy_ = NULL;
  }
  if (from.has_upper_position_and_accuracy()) {
    upper_position_and_accuracy_ = new ::sensoris::protobuf::types::spatial::PositionAndAccuracy(*from.upper_position_and_accuracy_);
  } else {
    upper_position_and_accuracy_ = NULL;
  }
  if (from.has_lower_diameter_and_accuracy()) {
    lower_diameter_and_accuracy_ = new ::sensoris::protobuf::types::base::Int64ValueAndAccuracy(*from.lower_diameter_and_accuracy_);
  } else {
    lower_diameter_and_accuracy_ = NULL;
  }
  if (from.has_upper_diameter_and_accuracy()) {
    upper_diameter_and_accuracy_ = new ::sensoris::protobuf::types::base::Int64ValueAndAccuracy(*from.upper_diameter_and_accuracy_);
  } else {
    upper_diameter_and_accuracy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy)
}

void StaticObject_ConeAndAccuracy::SharedCtor() {
  ::memset(&lower_position_and_accuracy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_diameter_and_accuracy_) -
      reinterpret_cast<char*>(&lower_position_and_accuracy_)) + sizeof(upper_diameter_and_accuracy_));
}

StaticObject_ConeAndAccuracy::~StaticObject_ConeAndAccuracy() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy)
  SharedDtor();
}

void StaticObject_ConeAndAccuracy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete lower_position_and_accuracy_;
  if (this != internal_default_instance()) delete upper_position_and_accuracy_;
  if (this != internal_default_instance()) delete lower_diameter_and_accuracy_;
  if (this != internal_default_instance()) delete upper_diameter_and_accuracy_;
}

void StaticObject_ConeAndAccuracy::ArenaDtor(void* object) {
  StaticObject_ConeAndAccuracy* _this = reinterpret_cast< StaticObject_ConeAndAccuracy* >(object);
  (void)_this;
}
void StaticObject_ConeAndAccuracy::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StaticObject_ConeAndAccuracy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StaticObject_ConeAndAccuracy::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StaticObject_ConeAndAccuracy& StaticObject_ConeAndAccuracy::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject_ConeAndAccuracy.base);
  return *internal_default_instance();
}


void StaticObject_ConeAndAccuracy::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extension_.Clear();
  if (GetArenaNoVirtual() == NULL && lower_position_and_accuracy_ != NULL) {
    delete lower_position_and_accuracy_;
  }
  lower_position_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && upper_position_and_accuracy_ != NULL) {
    delete upper_position_and_accuracy_;
  }
  upper_position_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && lower_diameter_and_accuracy_ != NULL) {
    delete lower_diameter_and_accuracy_;
  }
  lower_diameter_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && upper_diameter_and_accuracy_ != NULL) {
    delete upper_diameter_and_accuracy_;
  }
  upper_diameter_and_accuracy_ = NULL;
  _internal_metadata_.Clear();
}

bool StaticObject_ConeAndAccuracy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.spatial.PositionAndAccuracy lower_position_and_accuracy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lower_position_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.PositionAndAccuracy upper_position_and_accuracy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_upper_position_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64ValueAndAccuracy lower_diameter_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lower_diameter_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64ValueAndAccuracy upper_diameter_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_upper_diameter_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any extension = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_extension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy)
  return false;
#undef DO_
}

void StaticObject_ConeAndAccuracy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy lower_position_and_accuracy = 1;
  if (this->has_lower_position_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_lower_position_and_accuracy(), output);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy upper_position_and_accuracy = 2;
  if (this->has_upper_position_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_upper_position_and_accuracy(), output);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy lower_diameter_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_lower_diameter_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_lower_diameter_and_accuracy(), output);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy upper_diameter_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_upper_diameter_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_upper_diameter_and_accuracy(), output);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->extension(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy)
}

::google::protobuf::uint8* StaticObject_ConeAndAccuracy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy lower_position_and_accuracy = 1;
  if (this->has_lower_position_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_lower_position_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy upper_position_and_accuracy = 2;
  if (this->has_upper_position_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_upper_position_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy lower_diameter_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_lower_diameter_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_lower_diameter_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy upper_diameter_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_upper_diameter_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_upper_diameter_and_accuracy(), deterministic, target);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->extension(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy)
  return target;
}

size_t StaticObject_ConeAndAccuracy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.protobuf.Any extension = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->extension_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->extension(static_cast<int>(i)));
    }
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy lower_position_and_accuracy = 1;
  if (this->has_lower_position_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lower_position_and_accuracy_);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy upper_position_and_accuracy = 2;
  if (this->has_upper_position_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *upper_position_and_accuracy_);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy lower_diameter_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_lower_diameter_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lower_diameter_and_accuracy_);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy upper_diameter_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_upper_diameter_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *upper_diameter_and_accuracy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StaticObject_ConeAndAccuracy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticObject_ConeAndAccuracy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StaticObject_ConeAndAccuracy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy)
    MergeFrom(*source);
  }
}

void StaticObject_ConeAndAccuracy::MergeFrom(const StaticObject_ConeAndAccuracy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extension_.MergeFrom(from.extension_);
  if (from.has_lower_position_and_accuracy()) {
    mutable_lower_position_and_accuracy()->::sensoris::protobuf::types::spatial::PositionAndAccuracy::MergeFrom(from.lower_position_and_accuracy());
  }
  if (from.has_upper_position_and_accuracy()) {
    mutable_upper_position_and_accuracy()->::sensoris::protobuf::types::spatial::PositionAndAccuracy::MergeFrom(from.upper_position_and_accuracy());
  }
  if (from.has_lower_diameter_and_accuracy()) {
    mutable_lower_diameter_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.lower_diameter_and_accuracy());
  }
  if (from.has_upper_diameter_and_accuracy()) {
    mutable_upper_diameter_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.upper_diameter_and_accuracy());
  }
}

void StaticObject_ConeAndAccuracy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticObject_ConeAndAccuracy::CopyFrom(const StaticObject_ConeAndAccuracy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticObject_ConeAndAccuracy::IsInitialized() const {
  return true;
}

void StaticObject_ConeAndAccuracy::Swap(StaticObject_ConeAndAccuracy* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StaticObject_ConeAndAccuracy* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StaticObject_ConeAndAccuracy::UnsafeArenaSwap(StaticObject_ConeAndAccuracy* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StaticObject_ConeAndAccuracy::InternalSwap(StaticObject_ConeAndAccuracy* other) {
  using std::swap;
  CastToBase(&extension_)->InternalSwap(CastToBase(&other->extension_));
  swap(lower_position_and_accuracy_, other->lower_position_and_accuracy_);
  swap(upper_position_and_accuracy_, other->upper_position_and_accuracy_);
  swap(lower_diameter_and_accuracy_, other->lower_diameter_and_accuracy_);
  swap(upper_diameter_and_accuracy_, other->upper_diameter_and_accuracy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StaticObject_ConeAndAccuracy::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StaticObject_SurfaceTypeAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::objectdetection::_StaticObject_SurfaceTypeAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void StaticObject_SurfaceTypeAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence.confidence)
}
void StaticObject_SurfaceTypeAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaticObject_SurfaceTypeAndConfidence::kTypeFieldNumber;
const int StaticObject_SurfaceTypeAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaticObject_SurfaceTypeAndConfidence::StaticObject_SurfaceTypeAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject_SurfaceTypeAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence)
}
StaticObject_SurfaceTypeAndConfidence::StaticObject_SurfaceTypeAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject_SurfaceTypeAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence)
}
StaticObject_SurfaceTypeAndConfidence::StaticObject_SurfaceTypeAndConfidence(const StaticObject_SurfaceTypeAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence)
}

void StaticObject_SurfaceTypeAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

StaticObject_SurfaceTypeAndConfidence::~StaticObject_SurfaceTypeAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence)
  SharedDtor();
}

void StaticObject_SurfaceTypeAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void StaticObject_SurfaceTypeAndConfidence::ArenaDtor(void* object) {
  StaticObject_SurfaceTypeAndConfidence* _this = reinterpret_cast< StaticObject_SurfaceTypeAndConfidence* >(object);
  (void)_this;
}
void StaticObject_SurfaceTypeAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StaticObject_SurfaceTypeAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StaticObject_SurfaceTypeAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StaticObject_SurfaceTypeAndConfidence& StaticObject_SurfaceTypeAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject_SurfaceTypeAndConfidence.base);
  return *internal_default_instance();
}


void StaticObject_SurfaceTypeAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool StaticObject_SurfaceTypeAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence)
  return false;
#undef DO_
}

void StaticObject_SurfaceTypeAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence)
}

::google::protobuf::uint8* StaticObject_SurfaceTypeAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence)
  return target;
}

size_t StaticObject_SurfaceTypeAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StaticObject_SurfaceTypeAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticObject_SurfaceTypeAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StaticObject_SurfaceTypeAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence)
    MergeFrom(*source);
  }
}

void StaticObject_SurfaceTypeAndConfidence::MergeFrom(const StaticObject_SurfaceTypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void StaticObject_SurfaceTypeAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticObject_SurfaceTypeAndConfidence::CopyFrom(const StaticObject_SurfaceTypeAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticObject_SurfaceTypeAndConfidence::IsInitialized() const {
  return true;
}

void StaticObject_SurfaceTypeAndConfidence::Swap(StaticObject_SurfaceTypeAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StaticObject_SurfaceTypeAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StaticObject_SurfaceTypeAndConfidence::UnsafeArenaSwap(StaticObject_SurfaceTypeAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StaticObject_SurfaceTypeAndConfidence::InternalSwap(StaticObject_SurfaceTypeAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StaticObject_SurfaceTypeAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StaticObject_SurfaceMaterialAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::objectdetection::_StaticObject_SurfaceMaterialAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
  ::sensoris::protobuf::categories::objectdetection::_StaticObject_SurfaceMaterialAndConfidence_default_instance_._instance.get_mutable()->reflectivity_and_accuracy_ = const_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy::internal_default_instance());
}
void StaticObject_SurfaceMaterialAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence.confidence)
}
void StaticObject_SurfaceMaterialAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
void StaticObject_SurfaceMaterialAndConfidence::unsafe_arena_set_allocated_reflectivity_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* reflectivity_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete reflectivity_and_accuracy_;
  }
  reflectivity_and_accuracy_ = reflectivity_and_accuracy;
  if (reflectivity_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence.reflectivity_and_accuracy)
}
void StaticObject_SurfaceMaterialAndConfidence::clear_reflectivity_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && reflectivity_and_accuracy_ != NULL) {
    delete reflectivity_and_accuracy_;
  }
  reflectivity_and_accuracy_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaticObject_SurfaceMaterialAndConfidence::kTypeFieldNumber;
const int StaticObject_SurfaceMaterialAndConfidence::kConfidenceFieldNumber;
const int StaticObject_SurfaceMaterialAndConfidence::kReflectivityAndAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaticObject_SurfaceMaterialAndConfidence::StaticObject_SurfaceMaterialAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject_SurfaceMaterialAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence)
}
StaticObject_SurfaceMaterialAndConfidence::StaticObject_SurfaceMaterialAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject_SurfaceMaterialAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence)
}
StaticObject_SurfaceMaterialAndConfidence::StaticObject_SurfaceMaterialAndConfidence(const StaticObject_SurfaceMaterialAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  if (from.has_reflectivity_and_accuracy()) {
    reflectivity_and_accuracy_ = new ::sensoris::protobuf::types::base::Int64ValueAndAccuracy(*from.reflectivity_and_accuracy_);
  } else {
    reflectivity_and_accuracy_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence)
}

void StaticObject_SurfaceMaterialAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

StaticObject_SurfaceMaterialAndConfidence::~StaticObject_SurfaceMaterialAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence)
  SharedDtor();
}

void StaticObject_SurfaceMaterialAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
  if (this != internal_default_instance()) delete reflectivity_and_accuracy_;
}

void StaticObject_SurfaceMaterialAndConfidence::ArenaDtor(void* object) {
  StaticObject_SurfaceMaterialAndConfidence* _this = reinterpret_cast< StaticObject_SurfaceMaterialAndConfidence* >(object);
  (void)_this;
}
void StaticObject_SurfaceMaterialAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StaticObject_SurfaceMaterialAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StaticObject_SurfaceMaterialAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StaticObject_SurfaceMaterialAndConfidence& StaticObject_SurfaceMaterialAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject_SurfaceMaterialAndConfidence.base);
  return *internal_default_instance();
}


void StaticObject_SurfaceMaterialAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && reflectivity_and_accuracy_ != NULL) {
    delete reflectivity_and_accuracy_;
  }
  reflectivity_and_accuracy_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool StaticObject_SurfaceMaterialAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64ValueAndAccuracy reflectivity_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reflectivity_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence)
  return false;
#undef DO_
}

void StaticObject_SurfaceMaterialAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy reflectivity_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_reflectivity_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_reflectivity_and_accuracy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence)
}

::google::protobuf::uint8* StaticObject_SurfaceMaterialAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy reflectivity_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_reflectivity_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_reflectivity_and_accuracy(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence)
  return target;
}

size_t StaticObject_SurfaceMaterialAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy reflectivity_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_reflectivity_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reflectivity_and_accuracy_);
  }

  // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StaticObject_SurfaceMaterialAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticObject_SurfaceMaterialAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StaticObject_SurfaceMaterialAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence)
    MergeFrom(*source);
  }
}

void StaticObject_SurfaceMaterialAndConfidence::MergeFrom(const StaticObject_SurfaceMaterialAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.has_reflectivity_and_accuracy()) {
    mutable_reflectivity_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.reflectivity_and_accuracy());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void StaticObject_SurfaceMaterialAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticObject_SurfaceMaterialAndConfidence::CopyFrom(const StaticObject_SurfaceMaterialAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticObject_SurfaceMaterialAndConfidence::IsInitialized() const {
  return true;
}

void StaticObject_SurfaceMaterialAndConfidence::Swap(StaticObject_SurfaceMaterialAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StaticObject_SurfaceMaterialAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StaticObject_SurfaceMaterialAndConfidence::UnsafeArenaSwap(StaticObject_SurfaceMaterialAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StaticObject_SurfaceMaterialAndConfidence::InternalSwap(StaticObject_SurfaceMaterialAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(reflectivity_and_accuracy_, other->reflectivity_and_accuracy_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StaticObject_SurfaceMaterialAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StaticObject_SurfaceColorAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::objectdetection::_StaticObject_SurfaceColorAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void StaticObject_SurfaceColorAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence.confidence)
}
void StaticObject_SurfaceColorAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaticObject_SurfaceColorAndConfidence::kTypeFieldNumber;
const int StaticObject_SurfaceColorAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaticObject_SurfaceColorAndConfidence::StaticObject_SurfaceColorAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject_SurfaceColorAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence)
}
StaticObject_SurfaceColorAndConfidence::StaticObject_SurfaceColorAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject_SurfaceColorAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence)
}
StaticObject_SurfaceColorAndConfidence::StaticObject_SurfaceColorAndConfidence(const StaticObject_SurfaceColorAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence)
}

void StaticObject_SurfaceColorAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

StaticObject_SurfaceColorAndConfidence::~StaticObject_SurfaceColorAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence)
  SharedDtor();
}

void StaticObject_SurfaceColorAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void StaticObject_SurfaceColorAndConfidence::ArenaDtor(void* object) {
  StaticObject_SurfaceColorAndConfidence* _this = reinterpret_cast< StaticObject_SurfaceColorAndConfidence* >(object);
  (void)_this;
}
void StaticObject_SurfaceColorAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StaticObject_SurfaceColorAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StaticObject_SurfaceColorAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StaticObject_SurfaceColorAndConfidence& StaticObject_SurfaceColorAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject_SurfaceColorAndConfidence.base);
  return *internal_default_instance();
}


void StaticObject_SurfaceColorAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool StaticObject_SurfaceColorAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence)
  return false;
#undef DO_
}

void StaticObject_SurfaceColorAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence)
}

::google::protobuf::uint8* StaticObject_SurfaceColorAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence)
  return target;
}

size_t StaticObject_SurfaceColorAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StaticObject_SurfaceColorAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticObject_SurfaceColorAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StaticObject_SurfaceColorAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence)
    MergeFrom(*source);
  }
}

void StaticObject_SurfaceColorAndConfidence::MergeFrom(const StaticObject_SurfaceColorAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void StaticObject_SurfaceColorAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticObject_SurfaceColorAndConfidence::CopyFrom(const StaticObject_SurfaceColorAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticObject_SurfaceColorAndConfidence::IsInitialized() const {
  return true;
}

void StaticObject_SurfaceColorAndConfidence::Swap(StaticObject_SurfaceColorAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StaticObject_SurfaceColorAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StaticObject_SurfaceColorAndConfidence::UnsafeArenaSwap(StaticObject_SurfaceColorAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StaticObject_SurfaceColorAndConfidence::InternalSwap(StaticObject_SurfaceColorAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StaticObject_SurfaceColorAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StaticObject::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::objectdetection::_StaticObject_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::objectdetection::_StaticObject_default_instance_._instance.get_mutable()->object_id_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::categories::objectdetection::_StaticObject_default_instance_._instance.get_mutable()->existence_confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
  ::sensoris::protobuf::categories::objectdetection::_StaticObject_default_instance_._instance.get_mutable()->detection_status_ = const_cast< ::sensoris::protobuf::types::base::EventDetectionStatus*>(
      ::sensoris::protobuf::types::base::EventDetectionStatus::internal_default_instance());
  ::sensoris::protobuf::categories::objectdetection::_StaticObject_default_instance_._instance.get_mutable()->type_and_confidence_ = const_cast< ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence*>(
      ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence::internal_default_instance());
  ::sensoris::protobuf::categories::objectdetection::_StaticObject_default_instance_.rectangular_box_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::objectdetection::_StaticObject_default_instance_.cone_and_accuracy_ = const_cast< ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy*>(
      ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::objectdetection::_StaticObject_default_instance_._instance.get_mutable()->surface_type_and_confidence_ = const_cast< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence*>(
      ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence::internal_default_instance());
  ::sensoris::protobuf::categories::objectdetection::_StaticObject_default_instance_._instance.get_mutable()->surface_material_and_confidence_ = const_cast< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence*>(
      ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence::internal_default_instance());
}
void StaticObject::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.envelope)
}
void StaticObject::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void StaticObject::unsafe_arena_set_allocated_object_id(
    ::google::protobuf::Int64Value* object_id) {
  if (GetArenaNoVirtual() == NULL) {
    delete object_id_;
  }
  object_id_ = object_id;
  if (object_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.object_id)
}
void StaticObject::clear_object_id() {
  if (GetArenaNoVirtual() == NULL && object_id_ != NULL) {
    delete object_id_;
  }
  object_id_ = NULL;
}
void StaticObject::unsafe_arena_set_allocated_existence_confidence(
    ::sensoris::protobuf::types::base::Confidence* existence_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete existence_confidence_;
  }
  existence_confidence_ = existence_confidence;
  if (existence_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.existence_confidence)
}
void StaticObject::clear_existence_confidence() {
  if (GetArenaNoVirtual() == NULL && existence_confidence_ != NULL) {
    delete existence_confidence_;
  }
  existence_confidence_ = NULL;
}
void StaticObject::unsafe_arena_set_allocated_detection_status(
    ::sensoris::protobuf::types::base::EventDetectionStatus* detection_status) {
  if (GetArenaNoVirtual() == NULL) {
    delete detection_status_;
  }
  detection_status_ = detection_status;
  if (detection_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.detection_status)
}
void StaticObject::clear_detection_status() {
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
}
void StaticObject::unsafe_arena_set_allocated_type_and_confidence(
    ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence* type_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = type_and_confidence;
  if (type_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.type_and_confidence)
}
void StaticObject::set_allocated_rectangular_box_and_accuracy(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* rectangular_box_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_geometry();
  if (rectangular_box_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(rectangular_box_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      rectangular_box_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rectangular_box_and_accuracy, submessage_arena);
    }
    set_has_rectangular_box_and_accuracy();
    geometry_.rectangular_box_and_accuracy_ = rectangular_box_and_accuracy;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.rectangular_box_and_accuracy)
}
void StaticObject::clear_rectangular_box_and_accuracy() {
  if (has_rectangular_box_and_accuracy()) {
    if (GetArenaNoVirtual() == NULL) {
      delete geometry_.rectangular_box_and_accuracy_;
    }
    clear_has_geometry();
  }
}
void StaticObject::set_allocated_cone_and_accuracy(::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy* cone_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_geometry();
  if (cone_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(cone_and_accuracy);
    if (message_arena != submessage_arena) {
      cone_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cone_and_accuracy, submessage_arena);
    }
    set_has_cone_and_accuracy();
    geometry_.cone_and_accuracy_ = cone_and_accuracy;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.cone_and_accuracy)
}
void StaticObject::unsafe_arena_set_allocated_surface_type_and_confidence(
    ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence* surface_type_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete surface_type_and_confidence_;
  }
  surface_type_and_confidence_ = surface_type_and_confidence;
  if (surface_type_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.surface_type_and_confidence)
}
void StaticObject::unsafe_arena_set_allocated_surface_material_and_confidence(
    ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence* surface_material_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete surface_material_and_confidence_;
  }
  surface_material_and_confidence_ = surface_material_and_confidence;
  if (surface_material_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.surface_material_and_confidence)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaticObject::kEnvelopeFieldNumber;
const int StaticObject::kObjectIdFieldNumber;
const int StaticObject::kExistenceConfidenceFieldNumber;
const int StaticObject::kDetectionStatusFieldNumber;
const int StaticObject::kTypeAndConfidenceFieldNumber;
const int StaticObject::kRectangularBoxAndAccuracyFieldNumber;
const int StaticObject::kConeAndAccuracyFieldNumber;
const int StaticObject::kSurfaceTypeAndConfidenceFieldNumber;
const int StaticObject::kSurfaceMaterialAndConfidenceFieldNumber;
const int StaticObject::kSurfaceColorAndConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaticObject::StaticObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.objectdetection.StaticObject)
}
StaticObject::StaticObject(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  surface_color_and_confidence_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.objectdetection.StaticObject)
}
StaticObject::StaticObject(const StaticObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      surface_color_and_confidence_(from.surface_color_and_confidence_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_object_id()) {
    object_id_ = new ::google::protobuf::Int64Value(*from.object_id_);
  } else {
    object_id_ = NULL;
  }
  if (from.has_existence_confidence()) {
    existence_confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.existence_confidence_);
  } else {
    existence_confidence_ = NULL;
  }
  if (from.has_detection_status()) {
    detection_status_ = new ::sensoris::protobuf::types::base::EventDetectionStatus(*from.detection_status_);
  } else {
    detection_status_ = NULL;
  }
  if (from.has_type_and_confidence()) {
    type_and_confidence_ = new ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence(*from.type_and_confidence_);
  } else {
    type_and_confidence_ = NULL;
  }
  if (from.has_surface_type_and_confidence()) {
    surface_type_and_confidence_ = new ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence(*from.surface_type_and_confidence_);
  } else {
    surface_type_and_confidence_ = NULL;
  }
  if (from.has_surface_material_and_confidence()) {
    surface_material_and_confidence_ = new ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence(*from.surface_material_and_confidence_);
  } else {
    surface_material_and_confidence_ = NULL;
  }
  clear_has_geometry();
  switch (from.geometry_case()) {
    case kRectangularBoxAndAccuracy: {
      mutable_rectangular_box_and_accuracy()->::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy::MergeFrom(from.rectangular_box_and_accuracy());
      break;
    }
    case kConeAndAccuracy: {
      mutable_cone_and_accuracy()->::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy::MergeFrom(from.cone_and_accuracy());
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.objectdetection.StaticObject)
}

void StaticObject::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&surface_material_and_confidence_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(surface_material_and_confidence_));
  clear_has_geometry();
}

StaticObject::~StaticObject() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.objectdetection.StaticObject)
  SharedDtor();
}

void StaticObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete object_id_;
  if (this != internal_default_instance()) delete existence_confidence_;
  if (this != internal_default_instance()) delete detection_status_;
  if (this != internal_default_instance()) delete type_and_confidence_;
  if (this != internal_default_instance()) delete surface_type_and_confidence_;
  if (this != internal_default_instance()) delete surface_material_and_confidence_;
  if (has_geometry()) {
    clear_geometry();
  }
}

void StaticObject::ArenaDtor(void* object) {
  StaticObject* _this = reinterpret_cast< StaticObject* >(object);
  (void)_this;
}
void StaticObject::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StaticObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StaticObject::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StaticObject& StaticObject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_StaticObject.base);
  return *internal_default_instance();
}


void StaticObject::clear_geometry() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.categories.objectdetection.StaticObject)
  switch (geometry_case()) {
    case kRectangularBoxAndAccuracy: {
      if (GetArenaNoVirtual() == NULL) {
        delete geometry_.rectangular_box_and_accuracy_;
      }
      break;
    }
    case kConeAndAccuracy: {
      if (GetArenaNoVirtual() == NULL) {
        delete geometry_.cone_and_accuracy_;
      }
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GEOMETRY_NOT_SET;
}


void StaticObject::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.objectdetection.StaticObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  surface_color_and_confidence_.Clear();
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && object_id_ != NULL) {
    delete object_id_;
  }
  object_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && existence_confidence_ != NULL) {
    delete existence_confidence_;
  }
  existence_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && detection_status_ != NULL) {
    delete detection_status_;
  }
  detection_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && type_and_confidence_ != NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && surface_type_and_confidence_ != NULL) {
    delete surface_type_and_confidence_;
  }
  surface_type_and_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && surface_material_and_confidence_ != NULL) {
    delete surface_material_and_confidence_;
  }
  surface_material_and_confidence_ = NULL;
  clear_geometry();
  _internal_metadata_.Clear();
}

bool StaticObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.objectdetection.StaticObject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value object_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_object_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_existence_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detection_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence type_and_confidence = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rectangular_box_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy cone_and_accuracy = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cone_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence surface_type_and_confidence = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_surface_type_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence surface_material_and_confidence = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_surface_material_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence surface_color_and_confidence = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_surface_color_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.objectdetection.StaticObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.objectdetection.StaticObject)
  return false;
#undef DO_
}

void StaticObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.objectdetection.StaticObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .google.protobuf.Int64Value object_id = 2;
  if (this->has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_object_id(), output);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
  if (this->has_existence_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_existence_confidence(), output);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
  if (this->has_detection_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_detection_status(), output);
  }

  // .sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence type_and_confidence = 5;
  if (this->has_type_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_type_and_confidence(), output);
  }

  // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 6;
  if (has_rectangular_box_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_rectangular_box_and_accuracy(), output);
  }

  // .sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy cone_and_accuracy = 7;
  if (has_cone_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_cone_and_accuracy(), output);
  }

  // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence surface_type_and_confidence = 8;
  if (this->has_surface_type_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_surface_type_and_confidence(), output);
  }

  // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence surface_material_and_confidence = 9;
  if (this->has_surface_material_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_surface_material_and_confidence(), output);
  }

  // repeated .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence surface_color_and_confidence = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->surface_color_and_confidence_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->surface_color_and_confidence(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.objectdetection.StaticObject)
}

::google::protobuf::uint8* StaticObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.objectdetection.StaticObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .google.protobuf.Int64Value object_id = 2;
  if (this->has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_object_id(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
  if (this->has_existence_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_existence_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
  if (this->has_detection_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_detection_status(), deterministic, target);
  }

  // .sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence type_and_confidence = 5;
  if (this->has_type_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_type_and_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 6;
  if (has_rectangular_box_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_rectangular_box_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy cone_and_accuracy = 7;
  if (has_cone_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_cone_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence surface_type_and_confidence = 8;
  if (this->has_surface_type_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_surface_type_and_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence surface_material_and_confidence = 9;
  if (this->has_surface_material_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_surface_material_and_confidence(), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence surface_color_and_confidence = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->surface_color_and_confidence_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->surface_color_and_confidence(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.objectdetection.StaticObject)
  return target;
}

size_t StaticObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.objectdetection.StaticObject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence surface_color_and_confidence = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->surface_color_and_confidence_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->surface_color_and_confidence(static_cast<int>(i)));
    }
  }

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .google.protobuf.Int64Value object_id = 2;
  if (this->has_object_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *object_id_);
  }

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
  if (this->has_existence_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *existence_confidence_);
  }

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
  if (this->has_detection_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *detection_status_);
  }

  // .sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence type_and_confidence = 5;
  if (this->has_type_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *type_and_confidence_);
  }

  // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence surface_type_and_confidence = 8;
  if (this->has_surface_type_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *surface_type_and_confidence_);
  }

  // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence surface_material_and_confidence = 9;
  if (this->has_surface_material_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *surface_material_and_confidence_);
  }

  switch (geometry_case()) {
    // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 6;
    case kRectangularBoxAndAccuracy: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *geometry_.rectangular_box_and_accuracy_);
      break;
    }
    // .sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy cone_and_accuracy = 7;
    case kConeAndAccuracy: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *geometry_.cone_and_accuracy_);
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StaticObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.objectdetection.StaticObject)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StaticObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.objectdetection.StaticObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.objectdetection.StaticObject)
    MergeFrom(*source);
  }
}

void StaticObject::MergeFrom(const StaticObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.objectdetection.StaticObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  surface_color_and_confidence_.MergeFrom(from.surface_color_and_confidence_);
  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_object_id()) {
    mutable_object_id()->::google::protobuf::Int64Value::MergeFrom(from.object_id());
  }
  if (from.has_existence_confidence()) {
    mutable_existence_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.existence_confidence());
  }
  if (from.has_detection_status()) {
    mutable_detection_status()->::sensoris::protobuf::types::base::EventDetectionStatus::MergeFrom(from.detection_status());
  }
  if (from.has_type_and_confidence()) {
    mutable_type_and_confidence()->::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence::MergeFrom(from.type_and_confidence());
  }
  if (from.has_surface_type_and_confidence()) {
    mutable_surface_type_and_confidence()->::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence::MergeFrom(from.surface_type_and_confidence());
  }
  if (from.has_surface_material_and_confidence()) {
    mutable_surface_material_and_confidence()->::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence::MergeFrom(from.surface_material_and_confidence());
  }
  switch (from.geometry_case()) {
    case kRectangularBoxAndAccuracy: {
      mutable_rectangular_box_and_accuracy()->::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy::MergeFrom(from.rectangular_box_and_accuracy());
      break;
    }
    case kConeAndAccuracy: {
      mutable_cone_and_accuracy()->::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy::MergeFrom(from.cone_and_accuracy());
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
}

void StaticObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.objectdetection.StaticObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticObject::CopyFrom(const StaticObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.objectdetection.StaticObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticObject::IsInitialized() const {
  return true;
}

void StaticObject::Swap(StaticObject* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StaticObject* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StaticObject::UnsafeArenaSwap(StaticObject* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StaticObject::InternalSwap(StaticObject* other) {
  using std::swap;
  CastToBase(&surface_color_and_confidence_)->InternalSwap(CastToBase(&other->surface_color_and_confidence_));
  swap(envelope_, other->envelope_);
  swap(object_id_, other->object_id_);
  swap(existence_confidence_, other->existence_confidence_);
  swap(detection_status_, other->detection_status_);
  swap(type_and_confidence_, other->type_and_confidence_);
  swap(surface_type_and_confidence_, other->surface_type_and_confidence_);
  swap(surface_material_and_confidence_, other->surface_material_and_confidence_);
  swap(geometry_, other->geometry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StaticObject::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObjectDetectionCategory::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::objectdetection::_ObjectDetectionCategory_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::CategoryEnvelope*>(
      ::sensoris::protobuf::types::base::CategoryEnvelope::internal_default_instance());
}
void ObjectDetectionCategory::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::CategoryEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory.envelope)
}
void ObjectDetectionCategory::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectDetectionCategory::kEnvelopeFieldNumber;
const int ObjectDetectionCategory::kMovableObjectFieldNumber;
const int ObjectDetectionCategory::kStaticObjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectDetectionCategory::ObjectDetectionCategory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_ObjectDetectionCategory.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory)
}
ObjectDetectionCategory::ObjectDetectionCategory(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  movable_object_(arena),
  static_object_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_ObjectDetectionCategory.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory)
}
ObjectDetectionCategory::ObjectDetectionCategory(const ObjectDetectionCategory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      movable_object_(from.movable_object_),
      static_object_(from.static_object_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::CategoryEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory)
}

void ObjectDetectionCategory::SharedCtor() {
  envelope_ = NULL;
}

ObjectDetectionCategory::~ObjectDetectionCategory() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory)
  SharedDtor();
}

void ObjectDetectionCategory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
}

void ObjectDetectionCategory::ArenaDtor(void* object) {
  ObjectDetectionCategory* _this = reinterpret_cast< ObjectDetectionCategory* >(object);
  (void)_this;
}
void ObjectDetectionCategory::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ObjectDetectionCategory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ObjectDetectionCategory::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectDetectionCategory& ObjectDetectionCategory::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::scc_info_ObjectDetectionCategory.base);
  return *internal_default_instance();
}


void ObjectDetectionCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  movable_object_.Clear();
  static_object_.Clear();
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  _internal_metadata_.Clear();
}

bool ObjectDetectionCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.objectdetection.MovableObject movable_object = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_movable_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.objectdetection.StaticObject static_object = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_static_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory)
  return false;
#undef DO_
}

void ObjectDetectionCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // repeated .sensoris.protobuf.categories.objectdetection.MovableObject movable_object = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->movable_object_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->movable_object(static_cast<int>(i)),
      output);
  }

  // repeated .sensoris.protobuf.categories.objectdetection.StaticObject static_object = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->static_object_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->static_object(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory)
}

::google::protobuf::uint8* ObjectDetectionCategory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.objectdetection.MovableObject movable_object = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->movable_object_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->movable_object(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.objectdetection.StaticObject static_object = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->static_object_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->static_object(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory)
  return target;
}

size_t ObjectDetectionCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sensoris.protobuf.categories.objectdetection.MovableObject movable_object = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->movable_object_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->movable_object(static_cast<int>(i)));
    }
  }

  // repeated .sensoris.protobuf.categories.objectdetection.StaticObject static_object = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->static_object_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->static_object(static_cast<int>(i)));
    }
  }

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectDetectionCategory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDetectionCategory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectDetectionCategory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory)
    MergeFrom(*source);
  }
}

void ObjectDetectionCategory::MergeFrom(const ObjectDetectionCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  movable_object_.MergeFrom(from.movable_object_);
  static_object_.MergeFrom(from.static_object_);
  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::CategoryEnvelope::MergeFrom(from.envelope());
  }
}

void ObjectDetectionCategory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDetectionCategory::CopyFrom(const ObjectDetectionCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDetectionCategory::IsInitialized() const {
  return true;
}

void ObjectDetectionCategory::Swap(ObjectDetectionCategory* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ObjectDetectionCategory* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ObjectDetectionCategory::UnsafeArenaSwap(ObjectDetectionCategory* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ObjectDetectionCategory::InternalSwap(ObjectDetectionCategory* other) {
  using std::swap;
  CastToBase(&movable_object_)->InternalSwap(CastToBase(&other->movable_object_));
  CastToBase(&static_object_)->InternalSwap(CastToBase(&other->static_object_));
  swap(envelope_, other->envelope_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ObjectDetectionCategory::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace objectdetection
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::objectdetection::MovableObject* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::objectdetection::MovableObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::objectdetection::MovableObject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::objectdetection::StaticObject* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::objectdetection::StaticObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::objectdetection::StaticObject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::objectdetection::ObjectDetectionCategory* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::objectdetection::ObjectDetectionCategory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::objectdetection::ObjectDetectionCategory >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
