// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/localization.proto

#include "sensoris/protobuf/categories/localization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VehiclePositionAndOrientation_NavigationSatelliteSystemStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_VehicleAcceleration;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_VehicleRotationRate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_VehicleSpeed;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_VehicleOdometry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_VehiclePositionAndOrientation;
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto
namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CategoryEnvelope;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Timestamp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_EventEnvelope;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Int64Value;
}  // namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto
namespace protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_RotationRateAndAccuracy;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_XyzVectorAndAccuracy;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_RotationAndAccuracy;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_PositionAndAccuracy;
}  // namespace protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace localization {
class VehiclePositionAndOrientation_NavigationSatelliteSystemStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehiclePositionAndOrientation_NavigationSatelliteSystemStatus>
      _instance;
} _VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_default_instance_;
class VehiclePositionAndOrientationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehiclePositionAndOrientation>
      _instance;
} _VehiclePositionAndOrientation_default_instance_;
class VehicleOdometryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleOdometry>
      _instance;
} _VehicleOdometry_default_instance_;
class VehicleSpeedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleSpeed>
      _instance;
} _VehicleSpeed_default_instance_;
class VehicleAccelerationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleAcceleration>
      _instance;
} _VehicleAcceleration_default_instance_;
class VehicleRotationRateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleRotationRate>
      _instance;
} _VehicleRotationRate_default_instance_;
class LocalizationCategoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocalizationCategory>
      _instance;
} _LocalizationCategory_default_instance_;
}  // namespace localization
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto {
static void InitDefaultsVehiclePositionAndOrientation_NavigationSatelliteSystemStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::localization::_VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation_NavigationSatelliteSystemStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VehiclePositionAndOrientation_NavigationSatelliteSystemStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVehiclePositionAndOrientation_NavigationSatelliteSystemStatus}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64Value.base,}};

static void InitDefaultsVehiclePositionAndOrientation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::localization::_VehiclePositionAndOrientation_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_VehiclePositionAndOrientation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsVehiclePositionAndOrientation}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationAndAccuracy.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehiclePositionAndOrientation_NavigationSatelliteSystemStatus.base,}};

static void InitDefaultsVehicleOdometry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::localization::_VehicleOdometry_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::localization::VehicleOdometry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::localization::VehicleOdometry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_VehicleOdometry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsVehicleOdometry}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Timestamp.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationAndAccuracy.base,}};

static void InitDefaultsVehicleSpeed() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::localization::_VehicleSpeed_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::localization::VehicleSpeed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::localization::VehicleSpeed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_VehicleSpeed =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsVehicleSpeed}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_XyzVectorAndAccuracy.base,}};

static void InitDefaultsVehicleAcceleration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::localization::_VehicleAcceleration_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::localization::VehicleAcceleration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::localization::VehicleAcceleration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_VehicleAcceleration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsVehicleAcceleration}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_XyzVectorAndAccuracy.base,}};

static void InitDefaultsVehicleRotationRate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::localization::_VehicleRotationRate_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::localization::VehicleRotationRate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::localization::VehicleRotationRate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_VehicleRotationRate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsVehicleRotationRate}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationRateAndAccuracy.base,}};

static void InitDefaultsLocalizationCategory() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::localization::_LocalizationCategory_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::localization::LocalizationCategory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::localization::LocalizationCategory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_LocalizationCategory =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsLocalizationCategory}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_CategoryEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehiclePositionAndOrientation.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehicleOdometry.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehicleSpeed.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehicleAcceleration.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehicleRotationRate.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_VehiclePositionAndOrientation_NavigationSatelliteSystemStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehiclePositionAndOrientation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleOdometry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleSpeed.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleAcceleration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleRotationRate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocalizationCategory.base);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation_NavigationSatelliteSystemStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation_NavigationSatelliteSystemStatus, fix_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation_NavigationSatelliteSystemStatus, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation_NavigationSatelliteSystemStatus, hdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation_NavigationSatelliteSystemStatus, vdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation_NavigationSatelliteSystemStatus, pdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation_NavigationSatelliteSystemStatus, tdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation_NavigationSatelliteSystemStatus, snr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation, position_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation, orientation_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation, navigation_satellite_system_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehicleOdometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehicleOdometry, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehicleOdometry, end_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehicleOdometry, translation_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehicleOdometry, rotation_and_accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehicleSpeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehicleSpeed, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehicleSpeed, value_and_accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehicleAcceleration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehicleAcceleration, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehicleAcceleration, value_and_accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehicleRotationRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehicleRotationRate, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::VehicleRotationRate, value_and_accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::LocalizationCategory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::LocalizationCategory, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::LocalizationCategory, vehicle_position_and_orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::LocalizationCategory, vehicle_odometry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::LocalizationCategory, vehicle_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::LocalizationCategory, vehicle_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::localization::LocalizationCategory, vehicle_rotation_rate_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation_NavigationSatelliteSystemStatus)},
  { 12, -1, sizeof(::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation)},
  { 21, -1, sizeof(::sensoris::protobuf::categories::localization::VehicleOdometry)},
  { 30, -1, sizeof(::sensoris::protobuf::categories::localization::VehicleSpeed)},
  { 37, -1, sizeof(::sensoris::protobuf::categories::localization::VehicleAcceleration)},
  { 44, -1, sizeof(::sensoris::protobuf::categories::localization::VehicleRotationRate)},
  { 51, -1, sizeof(::sensoris::protobuf::categories::localization::LocalizationCategory)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::localization::_VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::localization::_VehiclePositionAndOrientation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::localization::_VehicleOdometry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::localization::_VehicleSpeed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::localization::_VehicleAcceleration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::localization::_VehicleRotationRate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::localization::_LocalizationCategory_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "sensoris/protobuf/categories/localization.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n/sensoris/protobuf/categories/localizat"
      "ion.proto\022)sensoris.protobuf.categories."
      "localization\032\"sensoris/protobuf/types/ba"
      "se.proto\032%sensoris/protobuf/types/spatia"
      "l.proto\"\203\n\n\035VehiclePositionAndOrientatio"
      "n\022=\n\010envelope\030\001 \001(\0132+.sensoris.protobuf."
      "types.base.EventEnvelope\022S\n\025position_and"
      "_accuracy\030\002 \001(\01324.sensoris.protobuf.type"
      "s.spatial.PositionAndAccuracy\022V\n\030orienta"
      "tion_and_accuracy\030\003 \001(\01324.sensoris.proto"
      "buf.types.spatial.RotationAndAccuracy\022\224\001"
      "\n\"navigation_satellite_system_status\030\004 \001"
      "(\0132h.sensoris.protobuf.categories.locali"
      "zation.VehiclePositionAndOrientation.Nav"
      "igationSatelliteSystemStatus\032\336\006\n\037Navigat"
      "ionSatelliteSystemStatus\022\202\001\n\010fix_type\030\001 "
      "\001(\0162p.sensoris.protobuf.categories.local"
      "ization.VehiclePositionAndOrientation.Na"
      "vigationSatelliteSystemStatus.FixType\0227\n"
      "\005count\030\002 \001(\0132(.sensoris.protobuf.types.b"
      "ase.Int64Value\022<\n\004hdop\030\003 \001(\0132(.sensoris."
      "protobuf.types.base.Int64ValueB\004\210\265\030\002\022<\n\004"
      "vdop\030\004 \001(\0132(.sensoris.protobuf.types.bas"
      "e.Int64ValueB\004\210\265\030\002\022<\n\004pdop\030\005 \001(\0132(.senso"
      "ris.protobuf.types.base.Int64ValueB\004\210\265\030\002"
      "\022<\n\004tdop\030\006 \001(\0132(.sensoris.protobuf.types"
      ".base.Int64ValueB\004\210\265\030\002\022;\n\003snr\030\010 \001(\0132(.se"
      "nsoris.protobuf.types.base.Int64ValueB\004\210"
      "\265\030\001\"\307\002\n\007FixType\022\024\n\020UNKNOWN_FIX_TYPE\020\000\022\010\n"
      "\004NONE\020\001\022\t\n\005TWO_D\020\002\022&\n\"TWO_D_SATELLITE_BA"
      "SED_AUGMENTATION\020\003\022#\n\037TWO_D_GROUND_BASED"
      "_AUGMENTATION\020\004\0221\n-TWO_D_SATELLITE_AND_G"
      "ROUND_BASED_AUGMENTATION\020\005\022\013\n\007THREE_D\020\006\022"
      "(\n$THREE_D_SATELLITE_BASED_AUGMENTATION\020"
      "\007\022%\n!THREE_D_GROUND_BASED_AUGMENTATION\020\010"
      "\0223\n/THREE_D_SATELLITE_AND_GROUND_BASED_A"
      "UGMENTATION\020\t\"\275\002\n\017VehicleOdometry\022=\n\010env"
      "elope\030\001 \001(\0132+.sensoris.protobuf.types.ba"
      "se.EventEnvelope\022>\n\rend_timestamp\030\002 \001(\0132"
      "\'.sensoris.protobuf.types.base.Timestamp"
      "\022V\n\030translation_and_accuracy\030\003 \001(\01324.sen"
      "soris.protobuf.types.spatial.PositionAnd"
      "Accuracy\022S\n\025rotation_and_accuracy\030\004 \001(\0132"
      "4.sensoris.protobuf.types.spatial.Rotati"
      "onAndAccuracy\"\246\001\n\014VehicleSpeed\022=\n\010envelo"
      "pe\030\001 \001(\0132+.sensoris.protobuf.types.base."
      "EventEnvelope\022W\n\022value_and_accuracy\030\002 \001("
      "\01325.sensoris.protobuf.types.spatial.XyzV"
      "ectorAndAccuracyB\004\210\265\030\001\"\255\001\n\023VehicleAccele"
      "ration\022=\n\010envelope\030\001 \001(\0132+.sensoris.prot"
      "obuf.types.base.EventEnvelope\022W\n\022value_a"
      "nd_accuracy\030\002 \001(\01325.sensoris.protobuf.ty"
      "pes.spatial.XyzVectorAndAccuracyB\004\210\265\030\001\"\252"
      "\001\n\023VehicleRotationRate\022=\n\010envelope\030\001 \001(\013"
      "2+.sensoris.protobuf.types.base.EventEnv"
      "elope\022T\n\022value_and_accuracy\030\002 \001(\01328.sens"
      "oris.protobuf.types.spatial.RotationRate"
      "AndAccuracy\"\257\004\n\024LocalizationCategory\022@\n\010"
      "envelope\030\001 \001(\0132..sensoris.protobuf.types"
      ".base.CategoryEnvelope\022r\n vehicle_positi"
      "on_and_orientation\030\002 \003(\0132H.sensoris.prot"
      "obuf.categories.localization.VehiclePosi"
      "tionAndOrientation\022T\n\020vehicle_odometry\030\003"
      " \003(\0132:.sensoris.protobuf.categories.loca"
      "lization.VehicleOdometry\022N\n\rvehicle_spee"
      "d\030\004 \003(\01327.sensoris.protobuf.categories.l"
      "ocalization.VehicleSpeed\022\\\n\024vehicle_acce"
      "leration\030\005 \003(\0132>.sensoris.protobuf.categ"
      "ories.localization.VehicleAcceleration\022]"
      "\n\025vehicle_rotation_rate\030\006 \003(\0132>.sensoris"
      ".protobuf.categories.localization.Vehicl"
      "eRotationRateBI\n$org.sensoris.categories"
      ".localizationB\034SensorisLocalizationCateg"
      "oryP\001\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2936);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensoris/protobuf/categories/localization.proto", &protobuf_RegisterTypes);
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::AddDescriptors();
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace localization {
const ::google::protobuf::EnumDescriptor* VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_FixType_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::file_level_enum_descriptors[0];
}
bool VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_FixType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_FixType VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::UNKNOWN_FIX_TYPE;
const VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_FixType VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::NONE;
const VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_FixType VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::TWO_D;
const VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_FixType VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::TWO_D_SATELLITE_BASED_AUGMENTATION;
const VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_FixType VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::TWO_D_GROUND_BASED_AUGMENTATION;
const VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_FixType VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::TWO_D_SATELLITE_AND_GROUND_BASED_AUGMENTATION;
const VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_FixType VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::THREE_D;
const VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_FixType VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::THREE_D_SATELLITE_BASED_AUGMENTATION;
const VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_FixType VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::THREE_D_GROUND_BASED_AUGMENTATION;
const VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_FixType VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::THREE_D_SATELLITE_AND_GROUND_BASED_AUGMENTATION;
const VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_FixType VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::FixType_MIN;
const VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_FixType VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::FixType_MAX;
const int VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::FixType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::localization::_VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_default_instance_._instance.get_mutable()->count_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
  ::sensoris::protobuf::categories::localization::_VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_default_instance_._instance.get_mutable()->hdop_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
  ::sensoris::protobuf::categories::localization::_VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_default_instance_._instance.get_mutable()->vdop_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
  ::sensoris::protobuf::categories::localization::_VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_default_instance_._instance.get_mutable()->pdop_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
  ::sensoris::protobuf::categories::localization::_VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_default_instance_._instance.get_mutable()->tdop_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
  ::sensoris::protobuf::categories::localization::_VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_default_instance_._instance.get_mutable()->snr_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
}
void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::unsafe_arena_set_allocated_count(
    ::sensoris::protobuf::types::base::Int64Value* count) {
  if (GetArenaNoVirtual() == NULL) {
    delete count_;
  }
  count_ = count;
  if (count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus.count)
}
void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::clear_count() {
  if (GetArenaNoVirtual() == NULL && count_ != NULL) {
    delete count_;
  }
  count_ = NULL;
}
void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::unsafe_arena_set_allocated_hdop(
    ::sensoris::protobuf::types::base::Int64Value* hdop) {
  if (GetArenaNoVirtual() == NULL) {
    delete hdop_;
  }
  hdop_ = hdop;
  if (hdop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus.hdop)
}
void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::clear_hdop() {
  if (GetArenaNoVirtual() == NULL && hdop_ != NULL) {
    delete hdop_;
  }
  hdop_ = NULL;
}
void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::unsafe_arena_set_allocated_vdop(
    ::sensoris::protobuf::types::base::Int64Value* vdop) {
  if (GetArenaNoVirtual() == NULL) {
    delete vdop_;
  }
  vdop_ = vdop;
  if (vdop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus.vdop)
}
void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::clear_vdop() {
  if (GetArenaNoVirtual() == NULL && vdop_ != NULL) {
    delete vdop_;
  }
  vdop_ = NULL;
}
void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::unsafe_arena_set_allocated_pdop(
    ::sensoris::protobuf::types::base::Int64Value* pdop) {
  if (GetArenaNoVirtual() == NULL) {
    delete pdop_;
  }
  pdop_ = pdop;
  if (pdop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus.pdop)
}
void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::clear_pdop() {
  if (GetArenaNoVirtual() == NULL && pdop_ != NULL) {
    delete pdop_;
  }
  pdop_ = NULL;
}
void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::unsafe_arena_set_allocated_tdop(
    ::sensoris::protobuf::types::base::Int64Value* tdop) {
  if (GetArenaNoVirtual() == NULL) {
    delete tdop_;
  }
  tdop_ = tdop;
  if (tdop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus.tdop)
}
void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::clear_tdop() {
  if (GetArenaNoVirtual() == NULL && tdop_ != NULL) {
    delete tdop_;
  }
  tdop_ = NULL;
}
void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::unsafe_arena_set_allocated_snr(
    ::sensoris::protobuf::types::base::Int64Value* snr) {
  if (GetArenaNoVirtual() == NULL) {
    delete snr_;
  }
  snr_ = snr;
  if (snr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus.snr)
}
void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::clear_snr() {
  if (GetArenaNoVirtual() == NULL && snr_ != NULL) {
    delete snr_;
  }
  snr_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::kFixTypeFieldNumber;
const int VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::kCountFieldNumber;
const int VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::kHdopFieldNumber;
const int VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::kVdopFieldNumber;
const int VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::kPdopFieldNumber;
const int VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::kTdopFieldNumber;
const int VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::kSnrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::VehiclePositionAndOrientation_NavigationSatelliteSystemStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehiclePositionAndOrientation_NavigationSatelliteSystemStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus)
}
VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::VehiclePositionAndOrientation_NavigationSatelliteSystemStatus(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehiclePositionAndOrientation_NavigationSatelliteSystemStatus.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus)
}
VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::VehiclePositionAndOrientation_NavigationSatelliteSystemStatus(const VehiclePositionAndOrientation_NavigationSatelliteSystemStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_count()) {
    count_ = new ::sensoris::protobuf::types::base::Int64Value(*from.count_);
  } else {
    count_ = NULL;
  }
  if (from.has_hdop()) {
    hdop_ = new ::sensoris::protobuf::types::base::Int64Value(*from.hdop_);
  } else {
    hdop_ = NULL;
  }
  if (from.has_vdop()) {
    vdop_ = new ::sensoris::protobuf::types::base::Int64Value(*from.vdop_);
  } else {
    vdop_ = NULL;
  }
  if (from.has_pdop()) {
    pdop_ = new ::sensoris::protobuf::types::base::Int64Value(*from.pdop_);
  } else {
    pdop_ = NULL;
  }
  if (from.has_tdop()) {
    tdop_ = new ::sensoris::protobuf::types::base::Int64Value(*from.tdop_);
  } else {
    tdop_ = NULL;
  }
  if (from.has_snr()) {
    snr_ = new ::sensoris::protobuf::types::base::Int64Value(*from.snr_);
  } else {
    snr_ = NULL;
  }
  fix_type_ = from.fix_type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus)
}

void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::SharedCtor() {
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fix_type_) -
      reinterpret_cast<char*>(&count_)) + sizeof(fix_type_));
}

VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::~VehiclePositionAndOrientation_NavigationSatelliteSystemStatus() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus)
  SharedDtor();
}

void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete count_;
  if (this != internal_default_instance()) delete hdop_;
  if (this != internal_default_instance()) delete vdop_;
  if (this != internal_default_instance()) delete pdop_;
  if (this != internal_default_instance()) delete tdop_;
  if (this != internal_default_instance()) delete snr_;
}

void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::ArenaDtor(void* object) {
  VehiclePositionAndOrientation_NavigationSatelliteSystemStatus* _this = reinterpret_cast< VehiclePositionAndOrientation_NavigationSatelliteSystemStatus* >(object);
  (void)_this;
}
void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehiclePositionAndOrientation_NavigationSatelliteSystemStatus& VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehiclePositionAndOrientation_NavigationSatelliteSystemStatus.base);
  return *internal_default_instance();
}


void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && count_ != NULL) {
    delete count_;
  }
  count_ = NULL;
  if (GetArenaNoVirtual() == NULL && hdop_ != NULL) {
    delete hdop_;
  }
  hdop_ = NULL;
  if (GetArenaNoVirtual() == NULL && vdop_ != NULL) {
    delete vdop_;
  }
  vdop_ = NULL;
  if (GetArenaNoVirtual() == NULL && pdop_ != NULL) {
    delete pdop_;
  }
  pdop_ = NULL;
  if (GetArenaNoVirtual() == NULL && tdop_ != NULL) {
    delete tdop_;
  }
  tdop_ = NULL;
  if (GetArenaNoVirtual() == NULL && snr_ != NULL) {
    delete snr_;
  }
  snr_ = NULL;
  fix_type_ = 0;
  _internal_metadata_.Clear();
}

bool VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus.FixType fix_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_fix_type(static_cast< ::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation_NavigationSatelliteSystemStatus_FixType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Value count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Value hdop = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Value vdop = 4 [(.sensoris.protobuf.types.base.exponent) = 2];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vdop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Value pdop = 5 [(.sensoris.protobuf.types.base.exponent) = 2];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pdop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Value tdop = 6 [(.sensoris.protobuf.types.base.exponent) = 2];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tdop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Value snr = 8 [(.sensoris.protobuf.types.base.exponent) = 1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_snr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus)
  return false;
#undef DO_
}

void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus.FixType fix_type = 1;
  if (this->fix_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->fix_type(), output);
  }

  // .sensoris.protobuf.types.base.Int64Value count = 2;
  if (this->has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_count(), output);
  }

  // .sensoris.protobuf.types.base.Int64Value hdop = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_hdop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_hdop(), output);
  }

  // .sensoris.protobuf.types.base.Int64Value vdop = 4 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_vdop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_vdop(), output);
  }

  // .sensoris.protobuf.types.base.Int64Value pdop = 5 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_pdop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_pdop(), output);
  }

  // .sensoris.protobuf.types.base.Int64Value tdop = 6 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_tdop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_tdop(), output);
  }

  // .sensoris.protobuf.types.base.Int64Value snr = 8 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_snr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_snr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus)
}

::google::protobuf::uint8* VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus.FixType fix_type = 1;
  if (this->fix_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->fix_type(), target);
  }

  // .sensoris.protobuf.types.base.Int64Value count = 2;
  if (this->has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_count(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Value hdop = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_hdop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_hdop(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Value vdop = 4 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_vdop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_vdop(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Value pdop = 5 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_pdop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_pdop(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Value tdop = 6 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_tdop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_tdop(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Value snr = 8 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_snr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_snr(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus)
  return target;
}

size_t VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Int64Value count = 2;
  if (this->has_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *count_);
  }

  // .sensoris.protobuf.types.base.Int64Value hdop = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_hdop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdop_);
  }

  // .sensoris.protobuf.types.base.Int64Value vdop = 4 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_vdop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vdop_);
  }

  // .sensoris.protobuf.types.base.Int64Value pdop = 5 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_pdop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pdop_);
  }

  // .sensoris.protobuf.types.base.Int64Value tdop = 6 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_tdop()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tdop_);
  }

  // .sensoris.protobuf.types.base.Int64Value snr = 8 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_snr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *snr_);
  }

  // .sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus.FixType fix_type = 1;
  if (this->fix_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fix_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const VehiclePositionAndOrientation_NavigationSatelliteSystemStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehiclePositionAndOrientation_NavigationSatelliteSystemStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus)
    MergeFrom(*source);
  }
}

void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::MergeFrom(const VehiclePositionAndOrientation_NavigationSatelliteSystemStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_count()) {
    mutable_count()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.count());
  }
  if (from.has_hdop()) {
    mutable_hdop()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.hdop());
  }
  if (from.has_vdop()) {
    mutable_vdop()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.vdop());
  }
  if (from.has_pdop()) {
    mutable_pdop()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.pdop());
  }
  if (from.has_tdop()) {
    mutable_tdop()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.tdop());
  }
  if (from.has_snr()) {
    mutable_snr()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.snr());
  }
  if (from.fix_type() != 0) {
    set_fix_type(from.fix_type());
  }
}

void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::CopyFrom(const VehiclePositionAndOrientation_NavigationSatelliteSystemStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::IsInitialized() const {
  return true;
}

void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::Swap(VehiclePositionAndOrientation_NavigationSatelliteSystemStatus* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VehiclePositionAndOrientation_NavigationSatelliteSystemStatus* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::UnsafeArenaSwap(VehiclePositionAndOrientation_NavigationSatelliteSystemStatus* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::InternalSwap(VehiclePositionAndOrientation_NavigationSatelliteSystemStatus* other) {
  using std::swap;
  swap(count_, other->count_);
  swap(hdop_, other->hdop_);
  swap(vdop_, other->vdop_);
  swap(pdop_, other->pdop_);
  swap(tdop_, other->tdop_);
  swap(snr_, other->snr_);
  swap(fix_type_, other->fix_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehiclePositionAndOrientation::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::localization::_VehiclePositionAndOrientation_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::localization::_VehiclePositionAndOrientation_default_instance_._instance.get_mutable()->position_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::PositionAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::PositionAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::localization::_VehiclePositionAndOrientation_default_instance_._instance.get_mutable()->orientation_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::RotationAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::RotationAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::localization::_VehiclePositionAndOrientation_default_instance_._instance.get_mutable()->navigation_satellite_system_status_ = const_cast< ::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation_NavigationSatelliteSystemStatus*>(
      ::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::internal_default_instance());
}
void VehiclePositionAndOrientation::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.envelope)
}
void VehiclePositionAndOrientation::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void VehiclePositionAndOrientation::unsafe_arena_set_allocated_position_and_accuracy(
    ::sensoris::protobuf::types::spatial::PositionAndAccuracy* position_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete position_and_accuracy_;
  }
  position_and_accuracy_ = position_and_accuracy;
  if (position_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.position_and_accuracy)
}
void VehiclePositionAndOrientation::clear_position_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && position_and_accuracy_ != NULL) {
    delete position_and_accuracy_;
  }
  position_and_accuracy_ = NULL;
}
void VehiclePositionAndOrientation::unsafe_arena_set_allocated_orientation_and_accuracy(
    ::sensoris::protobuf::types::spatial::RotationAndAccuracy* orientation_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete orientation_and_accuracy_;
  }
  orientation_and_accuracy_ = orientation_and_accuracy;
  if (orientation_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.orientation_and_accuracy)
}
void VehiclePositionAndOrientation::clear_orientation_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && orientation_and_accuracy_ != NULL) {
    delete orientation_and_accuracy_;
  }
  orientation_and_accuracy_ = NULL;
}
void VehiclePositionAndOrientation::unsafe_arena_set_allocated_navigation_satellite_system_status(
    ::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation_NavigationSatelliteSystemStatus* navigation_satellite_system_status) {
  if (GetArenaNoVirtual() == NULL) {
    delete navigation_satellite_system_status_;
  }
  navigation_satellite_system_status_ = navigation_satellite_system_status;
  if (navigation_satellite_system_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.navigation_satellite_system_status)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehiclePositionAndOrientation::kEnvelopeFieldNumber;
const int VehiclePositionAndOrientation::kPositionAndAccuracyFieldNumber;
const int VehiclePositionAndOrientation::kOrientationAndAccuracyFieldNumber;
const int VehiclePositionAndOrientation::kNavigationSatelliteSystemStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehiclePositionAndOrientation::VehiclePositionAndOrientation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehiclePositionAndOrientation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation)
}
VehiclePositionAndOrientation::VehiclePositionAndOrientation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehiclePositionAndOrientation.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation)
}
VehiclePositionAndOrientation::VehiclePositionAndOrientation(const VehiclePositionAndOrientation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_position_and_accuracy()) {
    position_and_accuracy_ = new ::sensoris::protobuf::types::spatial::PositionAndAccuracy(*from.position_and_accuracy_);
  } else {
    position_and_accuracy_ = NULL;
  }
  if (from.has_orientation_and_accuracy()) {
    orientation_and_accuracy_ = new ::sensoris::protobuf::types::spatial::RotationAndAccuracy(*from.orientation_and_accuracy_);
  } else {
    orientation_and_accuracy_ = NULL;
  }
  if (from.has_navigation_satellite_system_status()) {
    navigation_satellite_system_status_ = new ::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation_NavigationSatelliteSystemStatus(*from.navigation_satellite_system_status_);
  } else {
    navigation_satellite_system_status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation)
}

void VehiclePositionAndOrientation::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&navigation_satellite_system_status_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(navigation_satellite_system_status_));
}

VehiclePositionAndOrientation::~VehiclePositionAndOrientation() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation)
  SharedDtor();
}

void VehiclePositionAndOrientation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete position_and_accuracy_;
  if (this != internal_default_instance()) delete orientation_and_accuracy_;
  if (this != internal_default_instance()) delete navigation_satellite_system_status_;
}

void VehiclePositionAndOrientation::ArenaDtor(void* object) {
  VehiclePositionAndOrientation* _this = reinterpret_cast< VehiclePositionAndOrientation* >(object);
  (void)_this;
}
void VehiclePositionAndOrientation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VehiclePositionAndOrientation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehiclePositionAndOrientation::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehiclePositionAndOrientation& VehiclePositionAndOrientation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehiclePositionAndOrientation.base);
  return *internal_default_instance();
}


void VehiclePositionAndOrientation::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && position_and_accuracy_ != NULL) {
    delete position_and_accuracy_;
  }
  position_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientation_and_accuracy_ != NULL) {
    delete orientation_and_accuracy_;
  }
  orientation_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && navigation_satellite_system_status_ != NULL) {
    delete navigation_satellite_system_status_;
  }
  navigation_satellite_system_status_ = NULL;
  _internal_metadata_.Clear();
}

bool VehiclePositionAndOrientation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.RotationAndAccuracy orientation_and_accuracy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus navigation_satellite_system_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_navigation_satellite_system_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation)
  return false;
#undef DO_
}

void VehiclePositionAndOrientation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
  if (this->has_position_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_position_and_accuracy(), output);
  }

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy orientation_and_accuracy = 3;
  if (this->has_orientation_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_orientation_and_accuracy(), output);
  }

  // .sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus navigation_satellite_system_status = 4;
  if (this->has_navigation_satellite_system_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_navigation_satellite_system_status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation)
}

::google::protobuf::uint8* VehiclePositionAndOrientation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
  if (this->has_position_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_position_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy orientation_and_accuracy = 3;
  if (this->has_orientation_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_orientation_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus navigation_satellite_system_status = 4;
  if (this->has_navigation_satellite_system_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_navigation_satellite_system_status(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation)
  return target;
}

size_t VehiclePositionAndOrientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 2;
  if (this->has_position_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_and_accuracy_);
  }

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy orientation_and_accuracy = 3;
  if (this->has_orientation_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *orientation_and_accuracy_);
  }

  // .sensoris.protobuf.categories.localization.VehiclePositionAndOrientation.NavigationSatelliteSystemStatus navigation_satellite_system_status = 4;
  if (this->has_navigation_satellite_system_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *navigation_satellite_system_status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehiclePositionAndOrientation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation)
  GOOGLE_DCHECK_NE(&from, this);
  const VehiclePositionAndOrientation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehiclePositionAndOrientation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation)
    MergeFrom(*source);
  }
}

void VehiclePositionAndOrientation::MergeFrom(const VehiclePositionAndOrientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_position_and_accuracy()) {
    mutable_position_and_accuracy()->::sensoris::protobuf::types::spatial::PositionAndAccuracy::MergeFrom(from.position_and_accuracy());
  }
  if (from.has_orientation_and_accuracy()) {
    mutable_orientation_and_accuracy()->::sensoris::protobuf::types::spatial::RotationAndAccuracy::MergeFrom(from.orientation_and_accuracy());
  }
  if (from.has_navigation_satellite_system_status()) {
    mutable_navigation_satellite_system_status()->::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation_NavigationSatelliteSystemStatus::MergeFrom(from.navigation_satellite_system_status());
  }
}

void VehiclePositionAndOrientation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehiclePositionAndOrientation::CopyFrom(const VehiclePositionAndOrientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.localization.VehiclePositionAndOrientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehiclePositionAndOrientation::IsInitialized() const {
  return true;
}

void VehiclePositionAndOrientation::Swap(VehiclePositionAndOrientation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VehiclePositionAndOrientation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void VehiclePositionAndOrientation::UnsafeArenaSwap(VehiclePositionAndOrientation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VehiclePositionAndOrientation::InternalSwap(VehiclePositionAndOrientation* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(position_and_accuracy_, other->position_and_accuracy_);
  swap(orientation_and_accuracy_, other->orientation_and_accuracy_);
  swap(navigation_satellite_system_status_, other->navigation_satellite_system_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehiclePositionAndOrientation::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleOdometry::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::localization::_VehicleOdometry_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::localization::_VehicleOdometry_default_instance_._instance.get_mutable()->end_timestamp_ = const_cast< ::sensoris::protobuf::types::base::Timestamp*>(
      ::sensoris::protobuf::types::base::Timestamp::internal_default_instance());
  ::sensoris::protobuf::categories::localization::_VehicleOdometry_default_instance_._instance.get_mutable()->translation_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::PositionAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::PositionAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::categories::localization::_VehicleOdometry_default_instance_._instance.get_mutable()->rotation_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::RotationAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::RotationAndAccuracy::internal_default_instance());
}
void VehicleOdometry::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.localization.VehicleOdometry.envelope)
}
void VehicleOdometry::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void VehicleOdometry::unsafe_arena_set_allocated_end_timestamp(
    ::sensoris::protobuf::types::base::Timestamp* end_timestamp) {
  if (GetArenaNoVirtual() == NULL) {
    delete end_timestamp_;
  }
  end_timestamp_ = end_timestamp;
  if (end_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.localization.VehicleOdometry.end_timestamp)
}
void VehicleOdometry::clear_end_timestamp() {
  if (GetArenaNoVirtual() == NULL && end_timestamp_ != NULL) {
    delete end_timestamp_;
  }
  end_timestamp_ = NULL;
}
void VehicleOdometry::unsafe_arena_set_allocated_translation_and_accuracy(
    ::sensoris::protobuf::types::spatial::PositionAndAccuracy* translation_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete translation_and_accuracy_;
  }
  translation_and_accuracy_ = translation_and_accuracy;
  if (translation_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.localization.VehicleOdometry.translation_and_accuracy)
}
void VehicleOdometry::clear_translation_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && translation_and_accuracy_ != NULL) {
    delete translation_and_accuracy_;
  }
  translation_and_accuracy_ = NULL;
}
void VehicleOdometry::unsafe_arena_set_allocated_rotation_and_accuracy(
    ::sensoris::protobuf::types::spatial::RotationAndAccuracy* rotation_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete rotation_and_accuracy_;
  }
  rotation_and_accuracy_ = rotation_and_accuracy;
  if (rotation_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.localization.VehicleOdometry.rotation_and_accuracy)
}
void VehicleOdometry::clear_rotation_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && rotation_and_accuracy_ != NULL) {
    delete rotation_and_accuracy_;
  }
  rotation_and_accuracy_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleOdometry::kEnvelopeFieldNumber;
const int VehicleOdometry::kEndTimestampFieldNumber;
const int VehicleOdometry::kTranslationAndAccuracyFieldNumber;
const int VehicleOdometry::kRotationAndAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleOdometry::VehicleOdometry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehicleOdometry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.localization.VehicleOdometry)
}
VehicleOdometry::VehicleOdometry(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehicleOdometry.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.localization.VehicleOdometry)
}
VehicleOdometry::VehicleOdometry(const VehicleOdometry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_end_timestamp()) {
    end_timestamp_ = new ::sensoris::protobuf::types::base::Timestamp(*from.end_timestamp_);
  } else {
    end_timestamp_ = NULL;
  }
  if (from.has_translation_and_accuracy()) {
    translation_and_accuracy_ = new ::sensoris::protobuf::types::spatial::PositionAndAccuracy(*from.translation_and_accuracy_);
  } else {
    translation_and_accuracy_ = NULL;
  }
  if (from.has_rotation_and_accuracy()) {
    rotation_and_accuracy_ = new ::sensoris::protobuf::types::spatial::RotationAndAccuracy(*from.rotation_and_accuracy_);
  } else {
    rotation_and_accuracy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.localization.VehicleOdometry)
}

void VehicleOdometry::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_and_accuracy_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(rotation_and_accuracy_));
}

VehicleOdometry::~VehicleOdometry() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.localization.VehicleOdometry)
  SharedDtor();
}

void VehicleOdometry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete end_timestamp_;
  if (this != internal_default_instance()) delete translation_and_accuracy_;
  if (this != internal_default_instance()) delete rotation_and_accuracy_;
}

void VehicleOdometry::ArenaDtor(void* object) {
  VehicleOdometry* _this = reinterpret_cast< VehicleOdometry* >(object);
  (void)_this;
}
void VehicleOdometry::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VehicleOdometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleOdometry::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleOdometry& VehicleOdometry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehicleOdometry.base);
  return *internal_default_instance();
}


void VehicleOdometry::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.localization.VehicleOdometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_timestamp_ != NULL) {
    delete end_timestamp_;
  }
  end_timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && translation_and_accuracy_ != NULL) {
    delete translation_and_accuracy_;
  }
  translation_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && rotation_and_accuracy_ != NULL) {
    delete rotation_and_accuracy_;
  }
  rotation_and_accuracy_ = NULL;
  _internal_metadata_.Clear();
}

bool VehicleOdometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.localization.VehicleOdometry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Timestamp end_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.PositionAndAccuracy translation_and_accuracy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_translation_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.RotationAndAccuracy rotation_and_accuracy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.localization.VehicleOdometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.localization.VehicleOdometry)
  return false;
#undef DO_
}

void VehicleOdometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.localization.VehicleOdometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.types.base.Timestamp end_timestamp = 2;
  if (this->has_end_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_end_timestamp(), output);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy translation_and_accuracy = 3;
  if (this->has_translation_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_translation_and_accuracy(), output);
  }

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy rotation_and_accuracy = 4;
  if (this->has_rotation_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_rotation_and_accuracy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.localization.VehicleOdometry)
}

::google::protobuf::uint8* VehicleOdometry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.localization.VehicleOdometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Timestamp end_timestamp = 2;
  if (this->has_end_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_end_timestamp(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy translation_and_accuracy = 3;
  if (this->has_translation_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_translation_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy rotation_and_accuracy = 4;
  if (this->has_rotation_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_rotation_and_accuracy(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.localization.VehicleOdometry)
  return target;
}

size_t VehicleOdometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.localization.VehicleOdometry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.types.base.Timestamp end_timestamp = 2;
  if (this->has_end_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_timestamp_);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy translation_and_accuracy = 3;
  if (this->has_translation_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *translation_and_accuracy_);
  }

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy rotation_and_accuracy = 4;
  if (this->has_rotation_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rotation_and_accuracy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleOdometry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.localization.VehicleOdometry)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleOdometry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleOdometry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.localization.VehicleOdometry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.localization.VehicleOdometry)
    MergeFrom(*source);
  }
}

void VehicleOdometry::MergeFrom(const VehicleOdometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.localization.VehicleOdometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_end_timestamp()) {
    mutable_end_timestamp()->::sensoris::protobuf::types::base::Timestamp::MergeFrom(from.end_timestamp());
  }
  if (from.has_translation_and_accuracy()) {
    mutable_translation_and_accuracy()->::sensoris::protobuf::types::spatial::PositionAndAccuracy::MergeFrom(from.translation_and_accuracy());
  }
  if (from.has_rotation_and_accuracy()) {
    mutable_rotation_and_accuracy()->::sensoris::protobuf::types::spatial::RotationAndAccuracy::MergeFrom(from.rotation_and_accuracy());
  }
}

void VehicleOdometry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.localization.VehicleOdometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleOdometry::CopyFrom(const VehicleOdometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.localization.VehicleOdometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleOdometry::IsInitialized() const {
  return true;
}

void VehicleOdometry::Swap(VehicleOdometry* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VehicleOdometry* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void VehicleOdometry::UnsafeArenaSwap(VehicleOdometry* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VehicleOdometry::InternalSwap(VehicleOdometry* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(end_timestamp_, other->end_timestamp_);
  swap(translation_and_accuracy_, other->translation_and_accuracy_);
  swap(rotation_and_accuracy_, other->rotation_and_accuracy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleOdometry::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleSpeed::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::localization::_VehicleSpeed_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::localization::_VehicleSpeed_default_instance_._instance.get_mutable()->value_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy::internal_default_instance());
}
void VehicleSpeed::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.localization.VehicleSpeed.envelope)
}
void VehicleSpeed::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void VehicleSpeed::unsafe_arena_set_allocated_value_and_accuracy(
    ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* value_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete value_and_accuracy_;
  }
  value_and_accuracy_ = value_and_accuracy;
  if (value_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.localization.VehicleSpeed.value_and_accuracy)
}
void VehicleSpeed::clear_value_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && value_and_accuracy_ != NULL) {
    delete value_and_accuracy_;
  }
  value_and_accuracy_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleSpeed::kEnvelopeFieldNumber;
const int VehicleSpeed::kValueAndAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleSpeed::VehicleSpeed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehicleSpeed.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.localization.VehicleSpeed)
}
VehicleSpeed::VehicleSpeed(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehicleSpeed.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.localization.VehicleSpeed)
}
VehicleSpeed::VehicleSpeed(const VehicleSpeed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_value_and_accuracy()) {
    value_and_accuracy_ = new ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy(*from.value_and_accuracy_);
  } else {
    value_and_accuracy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.localization.VehicleSpeed)
}

void VehicleSpeed::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_and_accuracy_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(value_and_accuracy_));
}

VehicleSpeed::~VehicleSpeed() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.localization.VehicleSpeed)
  SharedDtor();
}

void VehicleSpeed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete value_and_accuracy_;
}

void VehicleSpeed::ArenaDtor(void* object) {
  VehicleSpeed* _this = reinterpret_cast< VehicleSpeed* >(object);
  (void)_this;
}
void VehicleSpeed::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VehicleSpeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleSpeed::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleSpeed& VehicleSpeed::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehicleSpeed.base);
  return *internal_default_instance();
}


void VehicleSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.localization.VehicleSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_and_accuracy_ != NULL) {
    delete value_and_accuracy_;
  }
  value_and_accuracy_ = NULL;
  _internal_metadata_.Clear();
}

bool VehicleSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.localization.VehicleSpeed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy value_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.localization.VehicleSpeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.localization.VehicleSpeed)
  return false;
#undef DO_
}

void VehicleSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.localization.VehicleSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy value_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_value_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_value_and_accuracy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.localization.VehicleSpeed)
}

::google::protobuf::uint8* VehicleSpeed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.localization.VehicleSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy value_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_value_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_value_and_accuracy(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.localization.VehicleSpeed)
  return target;
}

size_t VehicleSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.localization.VehicleSpeed)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy value_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_value_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_and_accuracy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleSpeed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.localization.VehicleSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleSpeed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleSpeed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.localization.VehicleSpeed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.localization.VehicleSpeed)
    MergeFrom(*source);
  }
}

void VehicleSpeed::MergeFrom(const VehicleSpeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.localization.VehicleSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_value_and_accuracy()) {
    mutable_value_and_accuracy()->::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy::MergeFrom(from.value_and_accuracy());
  }
}

void VehicleSpeed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.localization.VehicleSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleSpeed::CopyFrom(const VehicleSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.localization.VehicleSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleSpeed::IsInitialized() const {
  return true;
}

void VehicleSpeed::Swap(VehicleSpeed* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VehicleSpeed* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void VehicleSpeed::UnsafeArenaSwap(VehicleSpeed* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VehicleSpeed::InternalSwap(VehicleSpeed* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(value_and_accuracy_, other->value_and_accuracy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleSpeed::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleAcceleration::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::localization::_VehicleAcceleration_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::localization::_VehicleAcceleration_default_instance_._instance.get_mutable()->value_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy::internal_default_instance());
}
void VehicleAcceleration::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.localization.VehicleAcceleration.envelope)
}
void VehicleAcceleration::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void VehicleAcceleration::unsafe_arena_set_allocated_value_and_accuracy(
    ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* value_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete value_and_accuracy_;
  }
  value_and_accuracy_ = value_and_accuracy;
  if (value_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.localization.VehicleAcceleration.value_and_accuracy)
}
void VehicleAcceleration::clear_value_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && value_and_accuracy_ != NULL) {
    delete value_and_accuracy_;
  }
  value_and_accuracy_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleAcceleration::kEnvelopeFieldNumber;
const int VehicleAcceleration::kValueAndAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleAcceleration::VehicleAcceleration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehicleAcceleration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.localization.VehicleAcceleration)
}
VehicleAcceleration::VehicleAcceleration(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehicleAcceleration.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.localization.VehicleAcceleration)
}
VehicleAcceleration::VehicleAcceleration(const VehicleAcceleration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_value_and_accuracy()) {
    value_and_accuracy_ = new ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy(*from.value_and_accuracy_);
  } else {
    value_and_accuracy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.localization.VehicleAcceleration)
}

void VehicleAcceleration::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_and_accuracy_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(value_and_accuracy_));
}

VehicleAcceleration::~VehicleAcceleration() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.localization.VehicleAcceleration)
  SharedDtor();
}

void VehicleAcceleration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete value_and_accuracy_;
}

void VehicleAcceleration::ArenaDtor(void* object) {
  VehicleAcceleration* _this = reinterpret_cast< VehicleAcceleration* >(object);
  (void)_this;
}
void VehicleAcceleration::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VehicleAcceleration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleAcceleration::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleAcceleration& VehicleAcceleration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehicleAcceleration.base);
  return *internal_default_instance();
}


void VehicleAcceleration::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.localization.VehicleAcceleration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_and_accuracy_ != NULL) {
    delete value_and_accuracy_;
  }
  value_and_accuracy_ = NULL;
  _internal_metadata_.Clear();
}

bool VehicleAcceleration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.localization.VehicleAcceleration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy value_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.localization.VehicleAcceleration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.localization.VehicleAcceleration)
  return false;
#undef DO_
}

void VehicleAcceleration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.localization.VehicleAcceleration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy value_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_value_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_value_and_accuracy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.localization.VehicleAcceleration)
}

::google::protobuf::uint8* VehicleAcceleration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.localization.VehicleAcceleration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy value_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_value_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_value_and_accuracy(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.localization.VehicleAcceleration)
  return target;
}

size_t VehicleAcceleration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.localization.VehicleAcceleration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy value_and_accuracy = 2 [(.sensoris.protobuf.types.base.exponent) = 1];
  if (this->has_value_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_and_accuracy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleAcceleration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.localization.VehicleAcceleration)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleAcceleration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleAcceleration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.localization.VehicleAcceleration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.localization.VehicleAcceleration)
    MergeFrom(*source);
  }
}

void VehicleAcceleration::MergeFrom(const VehicleAcceleration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.localization.VehicleAcceleration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_value_and_accuracy()) {
    mutable_value_and_accuracy()->::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy::MergeFrom(from.value_and_accuracy());
  }
}

void VehicleAcceleration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.localization.VehicleAcceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleAcceleration::CopyFrom(const VehicleAcceleration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.localization.VehicleAcceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleAcceleration::IsInitialized() const {
  return true;
}

void VehicleAcceleration::Swap(VehicleAcceleration* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VehicleAcceleration* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void VehicleAcceleration::UnsafeArenaSwap(VehicleAcceleration* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VehicleAcceleration::InternalSwap(VehicleAcceleration* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(value_and_accuracy_, other->value_and_accuracy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleAcceleration::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleRotationRate::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::localization::_VehicleRotationRate_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::localization::_VehicleRotationRate_default_instance_._instance.get_mutable()->value_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::RotationRateAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::RotationRateAndAccuracy::internal_default_instance());
}
void VehicleRotationRate::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.localization.VehicleRotationRate.envelope)
}
void VehicleRotationRate::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void VehicleRotationRate::unsafe_arena_set_allocated_value_and_accuracy(
    ::sensoris::protobuf::types::spatial::RotationRateAndAccuracy* value_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete value_and_accuracy_;
  }
  value_and_accuracy_ = value_and_accuracy;
  if (value_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.localization.VehicleRotationRate.value_and_accuracy)
}
void VehicleRotationRate::clear_value_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && value_and_accuracy_ != NULL) {
    delete value_and_accuracy_;
  }
  value_and_accuracy_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleRotationRate::kEnvelopeFieldNumber;
const int VehicleRotationRate::kValueAndAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleRotationRate::VehicleRotationRate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehicleRotationRate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.localization.VehicleRotationRate)
}
VehicleRotationRate::VehicleRotationRate(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehicleRotationRate.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.localization.VehicleRotationRate)
}
VehicleRotationRate::VehicleRotationRate(const VehicleRotationRate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_value_and_accuracy()) {
    value_and_accuracy_ = new ::sensoris::protobuf::types::spatial::RotationRateAndAccuracy(*from.value_and_accuracy_);
  } else {
    value_and_accuracy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.localization.VehicleRotationRate)
}

void VehicleRotationRate::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_and_accuracy_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(value_and_accuracy_));
}

VehicleRotationRate::~VehicleRotationRate() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.localization.VehicleRotationRate)
  SharedDtor();
}

void VehicleRotationRate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete value_and_accuracy_;
}

void VehicleRotationRate::ArenaDtor(void* object) {
  VehicleRotationRate* _this = reinterpret_cast< VehicleRotationRate* >(object);
  (void)_this;
}
void VehicleRotationRate::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void VehicleRotationRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleRotationRate::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleRotationRate& VehicleRotationRate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_VehicleRotationRate.base);
  return *internal_default_instance();
}


void VehicleRotationRate::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.localization.VehicleRotationRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_and_accuracy_ != NULL) {
    delete value_and_accuracy_;
  }
  value_and_accuracy_ = NULL;
  _internal_metadata_.Clear();
}

bool VehicleRotationRate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.localization.VehicleRotationRate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.RotationRateAndAccuracy value_and_accuracy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.localization.VehicleRotationRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.localization.VehicleRotationRate)
  return false;
#undef DO_
}

void VehicleRotationRate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.localization.VehicleRotationRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.types.spatial.RotationRateAndAccuracy value_and_accuracy = 2;
  if (this->has_value_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_value_and_accuracy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.localization.VehicleRotationRate)
}

::google::protobuf::uint8* VehicleRotationRate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.localization.VehicleRotationRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.RotationRateAndAccuracy value_and_accuracy = 2;
  if (this->has_value_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_value_and_accuracy(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.localization.VehicleRotationRate)
  return target;
}

size_t VehicleRotationRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.localization.VehicleRotationRate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.types.spatial.RotationRateAndAccuracy value_and_accuracy = 2;
  if (this->has_value_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_and_accuracy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleRotationRate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.localization.VehicleRotationRate)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleRotationRate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleRotationRate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.localization.VehicleRotationRate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.localization.VehicleRotationRate)
    MergeFrom(*source);
  }
}

void VehicleRotationRate::MergeFrom(const VehicleRotationRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.localization.VehicleRotationRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_value_and_accuracy()) {
    mutable_value_and_accuracy()->::sensoris::protobuf::types::spatial::RotationRateAndAccuracy::MergeFrom(from.value_and_accuracy());
  }
}

void VehicleRotationRate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.localization.VehicleRotationRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleRotationRate::CopyFrom(const VehicleRotationRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.localization.VehicleRotationRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleRotationRate::IsInitialized() const {
  return true;
}

void VehicleRotationRate::Swap(VehicleRotationRate* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    VehicleRotationRate* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void VehicleRotationRate::UnsafeArenaSwap(VehicleRotationRate* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void VehicleRotationRate::InternalSwap(VehicleRotationRate* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(value_and_accuracy_, other->value_and_accuracy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleRotationRate::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LocalizationCategory::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::localization::_LocalizationCategory_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::CategoryEnvelope*>(
      ::sensoris::protobuf::types::base::CategoryEnvelope::internal_default_instance());
}
void LocalizationCategory::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::CategoryEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.localization.LocalizationCategory.envelope)
}
void LocalizationCategory::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalizationCategory::kEnvelopeFieldNumber;
const int LocalizationCategory::kVehiclePositionAndOrientationFieldNumber;
const int LocalizationCategory::kVehicleOdometryFieldNumber;
const int LocalizationCategory::kVehicleSpeedFieldNumber;
const int LocalizationCategory::kVehicleAccelerationFieldNumber;
const int LocalizationCategory::kVehicleRotationRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalizationCategory::LocalizationCategory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_LocalizationCategory.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.localization.LocalizationCategory)
}
LocalizationCategory::LocalizationCategory(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  vehicle_position_and_orientation_(arena),
  vehicle_odometry_(arena),
  vehicle_speed_(arena),
  vehicle_acceleration_(arena),
  vehicle_rotation_rate_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_LocalizationCategory.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.localization.LocalizationCategory)
}
LocalizationCategory::LocalizationCategory(const LocalizationCategory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      vehicle_position_and_orientation_(from.vehicle_position_and_orientation_),
      vehicle_odometry_(from.vehicle_odometry_),
      vehicle_speed_(from.vehicle_speed_),
      vehicle_acceleration_(from.vehicle_acceleration_),
      vehicle_rotation_rate_(from.vehicle_rotation_rate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::CategoryEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.localization.LocalizationCategory)
}

void LocalizationCategory::SharedCtor() {
  envelope_ = NULL;
}

LocalizationCategory::~LocalizationCategory() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.localization.LocalizationCategory)
  SharedDtor();
}

void LocalizationCategory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
}

void LocalizationCategory::ArenaDtor(void* object) {
  LocalizationCategory* _this = reinterpret_cast< LocalizationCategory* >(object);
  (void)_this;
}
void LocalizationCategory::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LocalizationCategory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LocalizationCategory::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocalizationCategory& LocalizationCategory::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::scc_info_LocalizationCategory.base);
  return *internal_default_instance();
}


void LocalizationCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.localization.LocalizationCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vehicle_position_and_orientation_.Clear();
  vehicle_odometry_.Clear();
  vehicle_speed_.Clear();
  vehicle_acceleration_.Clear();
  vehicle_rotation_rate_.Clear();
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  _internal_metadata_.Clear();
}

bool LocalizationCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.localization.LocalizationCategory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.localization.VehiclePositionAndOrientation vehicle_position_and_orientation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vehicle_position_and_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.localization.VehicleOdometry vehicle_odometry = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vehicle_odometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.localization.VehicleSpeed vehicle_speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vehicle_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.localization.VehicleAcceleration vehicle_acceleration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vehicle_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.localization.VehicleRotationRate vehicle_rotation_rate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vehicle_rotation_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.localization.LocalizationCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.localization.LocalizationCategory)
  return false;
#undef DO_
}

void LocalizationCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.localization.LocalizationCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // repeated .sensoris.protobuf.categories.localization.VehiclePositionAndOrientation vehicle_position_and_orientation = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicle_position_and_orientation_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->vehicle_position_and_orientation(static_cast<int>(i)),
      output);
  }

  // repeated .sensoris.protobuf.categories.localization.VehicleOdometry vehicle_odometry = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicle_odometry_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->vehicle_odometry(static_cast<int>(i)),
      output);
  }

  // repeated .sensoris.protobuf.categories.localization.VehicleSpeed vehicle_speed = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicle_speed_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->vehicle_speed(static_cast<int>(i)),
      output);
  }

  // repeated .sensoris.protobuf.categories.localization.VehicleAcceleration vehicle_acceleration = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicle_acceleration_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->vehicle_acceleration(static_cast<int>(i)),
      output);
  }

  // repeated .sensoris.protobuf.categories.localization.VehicleRotationRate vehicle_rotation_rate = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicle_rotation_rate_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->vehicle_rotation_rate(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.localization.LocalizationCategory)
}

::google::protobuf::uint8* LocalizationCategory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.localization.LocalizationCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.localization.VehiclePositionAndOrientation vehicle_position_and_orientation = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicle_position_and_orientation_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->vehicle_position_and_orientation(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.localization.VehicleOdometry vehicle_odometry = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicle_odometry_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->vehicle_odometry(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.localization.VehicleSpeed vehicle_speed = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicle_speed_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->vehicle_speed(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.localization.VehicleAcceleration vehicle_acceleration = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicle_acceleration_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->vehicle_acceleration(static_cast<int>(i)), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.localization.VehicleRotationRate vehicle_rotation_rate = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicle_rotation_rate_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->vehicle_rotation_rate(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.localization.LocalizationCategory)
  return target;
}

size_t LocalizationCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.localization.LocalizationCategory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sensoris.protobuf.categories.localization.VehiclePositionAndOrientation vehicle_position_and_orientation = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->vehicle_position_and_orientation_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vehicle_position_and_orientation(static_cast<int>(i)));
    }
  }

  // repeated .sensoris.protobuf.categories.localization.VehicleOdometry vehicle_odometry = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->vehicle_odometry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vehicle_odometry(static_cast<int>(i)));
    }
  }

  // repeated .sensoris.protobuf.categories.localization.VehicleSpeed vehicle_speed = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->vehicle_speed_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vehicle_speed(static_cast<int>(i)));
    }
  }

  // repeated .sensoris.protobuf.categories.localization.VehicleAcceleration vehicle_acceleration = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->vehicle_acceleration_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vehicle_acceleration(static_cast<int>(i)));
    }
  }

  // repeated .sensoris.protobuf.categories.localization.VehicleRotationRate vehicle_rotation_rate = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->vehicle_rotation_rate_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vehicle_rotation_rate(static_cast<int>(i)));
    }
  }

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalizationCategory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.localization.LocalizationCategory)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalizationCategory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalizationCategory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.localization.LocalizationCategory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.localization.LocalizationCategory)
    MergeFrom(*source);
  }
}

void LocalizationCategory::MergeFrom(const LocalizationCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.localization.LocalizationCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vehicle_position_and_orientation_.MergeFrom(from.vehicle_position_and_orientation_);
  vehicle_odometry_.MergeFrom(from.vehicle_odometry_);
  vehicle_speed_.MergeFrom(from.vehicle_speed_);
  vehicle_acceleration_.MergeFrom(from.vehicle_acceleration_);
  vehicle_rotation_rate_.MergeFrom(from.vehicle_rotation_rate_);
  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::CategoryEnvelope::MergeFrom(from.envelope());
  }
}

void LocalizationCategory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.localization.LocalizationCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationCategory::CopyFrom(const LocalizationCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.localization.LocalizationCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationCategory::IsInitialized() const {
  return true;
}

void LocalizationCategory::Swap(LocalizationCategory* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LocalizationCategory* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LocalizationCategory::UnsafeArenaSwap(LocalizationCategory* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LocalizationCategory::InternalSwap(LocalizationCategory* other) {
  using std::swap;
  CastToBase(&vehicle_position_and_orientation_)->InternalSwap(CastToBase(&other->vehicle_position_and_orientation_));
  CastToBase(&vehicle_odometry_)->InternalSwap(CastToBase(&other->vehicle_odometry_));
  CastToBase(&vehicle_speed_)->InternalSwap(CastToBase(&other->vehicle_speed_));
  CastToBase(&vehicle_acceleration_)->InternalSwap(CastToBase(&other->vehicle_acceleration_));
  CastToBase(&vehicle_rotation_rate_)->InternalSwap(CastToBase(&other->vehicle_rotation_rate_));
  swap(envelope_, other->envelope_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LocalizationCategory::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2flocalization_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace localization
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation_NavigationSatelliteSystemStatus* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation_NavigationSatelliteSystemStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation_NavigationSatelliteSystemStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::localization::VehiclePositionAndOrientation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::localization::VehicleOdometry* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::localization::VehicleOdometry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::localization::VehicleOdometry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::localization::VehicleSpeed* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::localization::VehicleSpeed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::localization::VehicleSpeed >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::localization::VehicleAcceleration* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::localization::VehicleAcceleration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::localization::VehicleAcceleration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::localization::VehicleRotationRate* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::localization::VehicleRotationRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::localization::VehicleRotationRate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::localization::LocalizationCategory* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::localization::LocalizationCategory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::localization::LocalizationCategory >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
