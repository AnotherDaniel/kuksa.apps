// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/weather.proto

#ifndef PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fweather_2eproto
#define PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fweather_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "sensoris/protobuf/types/base.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto 

namespace protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace weather {
class Precipitation;
class PrecipitationDefaultTypeInternal;
extern PrecipitationDefaultTypeInternal _Precipitation_default_instance_;
class Precipitation_TypeAndConfidence;
class Precipitation_TypeAndConfidenceDefaultTypeInternal;
extern Precipitation_TypeAndConfidenceDefaultTypeInternal _Precipitation_TypeAndConfidence_default_instance_;
class WeatherCategory;
class WeatherCategoryDefaultTypeInternal;
extern WeatherCategoryDefaultTypeInternal _WeatherCategory_default_instance_;
}  // namespace weather
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
template<> ::sensoris::protobuf::categories::weather::Precipitation* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::weather::Precipitation>(Arena*);
template<> ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence>(Arena*);
template<> ::sensoris::protobuf::categories::weather::WeatherCategory* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::weather::WeatherCategory>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sensoris {
namespace protobuf {
namespace categories {
namespace weather {

enum Precipitation_TypeAndConfidence_Type {
  Precipitation_TypeAndConfidence_Type_UNKNOWN_TYPE = 0,
  Precipitation_TypeAndConfidence_Type_NONE = 1,
  Precipitation_TypeAndConfidence_Type_RAIN = 2,
  Precipitation_TypeAndConfidence_Type_MIXED_RAIN_SNOW = 3,
  Precipitation_TypeAndConfidence_Type_SNOW = 4,
  Precipitation_TypeAndConfidence_Type_HAIL = 5,
  Precipitation_TypeAndConfidence_Type_Precipitation_TypeAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Precipitation_TypeAndConfidence_Type_Precipitation_TypeAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Precipitation_TypeAndConfidence_Type_IsValid(int value);
const Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence_Type_Type_MIN = Precipitation_TypeAndConfidence_Type_UNKNOWN_TYPE;
const Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence_Type_Type_MAX = Precipitation_TypeAndConfidence_Type_HAIL;
const int Precipitation_TypeAndConfidence_Type_Type_ARRAYSIZE = Precipitation_TypeAndConfidence_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Precipitation_TypeAndConfidence_Type_descriptor();
inline const ::std::string& Precipitation_TypeAndConfidence_Type_Name(Precipitation_TypeAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Precipitation_TypeAndConfidence_Type_descriptor(), value);
}
inline bool Precipitation_TypeAndConfidence_Type_Parse(
    const ::std::string& name, Precipitation_TypeAndConfidence_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Precipitation_TypeAndConfidence_Type>(
    Precipitation_TypeAndConfidence_Type_descriptor(), name, value);
}
// ===================================================================

class Precipitation_TypeAndConfidence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence) */ {
 public:
  Precipitation_TypeAndConfidence();
  virtual ~Precipitation_TypeAndConfidence();

  Precipitation_TypeAndConfidence(const Precipitation_TypeAndConfidence& from);

  inline Precipitation_TypeAndConfidence& operator=(const Precipitation_TypeAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Precipitation_TypeAndConfidence(Precipitation_TypeAndConfidence&& from) noexcept
    : Precipitation_TypeAndConfidence() {
    *this = ::std::move(from);
  }

  inline Precipitation_TypeAndConfidence& operator=(Precipitation_TypeAndConfidence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Precipitation_TypeAndConfidence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Precipitation_TypeAndConfidence* internal_default_instance() {
    return reinterpret_cast<const Precipitation_TypeAndConfidence*>(
               &_Precipitation_TypeAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Precipitation_TypeAndConfidence* other);
  void Swap(Precipitation_TypeAndConfidence* other);
  friend void swap(Precipitation_TypeAndConfidence& a, Precipitation_TypeAndConfidence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Precipitation_TypeAndConfidence* New() const final {
    return CreateMaybeMessage<Precipitation_TypeAndConfidence>(NULL);
  }

  Precipitation_TypeAndConfidence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Precipitation_TypeAndConfidence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Precipitation_TypeAndConfidence& from);
  void MergeFrom(const Precipitation_TypeAndConfidence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Precipitation_TypeAndConfidence* other);
  protected:
  explicit Precipitation_TypeAndConfidence(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Precipitation_TypeAndConfidence_Type Type;
  static const Type UNKNOWN_TYPE =
    Precipitation_TypeAndConfidence_Type_UNKNOWN_TYPE;
  static const Type NONE =
    Precipitation_TypeAndConfidence_Type_NONE;
  static const Type RAIN =
    Precipitation_TypeAndConfidence_Type_RAIN;
  static const Type MIXED_RAIN_SNOW =
    Precipitation_TypeAndConfidence_Type_MIXED_RAIN_SNOW;
  static const Type SNOW =
    Precipitation_TypeAndConfidence_Type_SNOW;
  static const Type HAIL =
    Precipitation_TypeAndConfidence_Type_HAIL;
  static inline bool Type_IsValid(int value) {
    return Precipitation_TypeAndConfidence_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Precipitation_TypeAndConfidence_Type_Type_MIN;
  static const Type Type_MAX =
    Precipitation_TypeAndConfidence_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Precipitation_TypeAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Precipitation_TypeAndConfidence_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Precipitation_TypeAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Precipitation_TypeAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  public:
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  ::sensoris::protobuf::types::base::Confidence* release_confidence();
  ::sensoris::protobuf::types::base::Confidence* mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence);
  void unsafe_arena_set_allocated_confidence(
      ::sensoris::protobuf::types::base::Confidence* confidence);
  ::sensoris::protobuf::types::base::Confidence* unsafe_arena_release_confidence();

  // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type value);

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::base::Confidence* confidence_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Precipitation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.weather.Precipitation) */ {
 public:
  Precipitation();
  virtual ~Precipitation();

  Precipitation(const Precipitation& from);

  inline Precipitation& operator=(const Precipitation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Precipitation(Precipitation&& from) noexcept
    : Precipitation() {
    *this = ::std::move(from);
  }

  inline Precipitation& operator=(Precipitation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Precipitation& default_instance();

  enum IntensityCase {
    kRelativeIntensityAndAccuracy = 4,
    kAbsoluteIntensityAndAccuracy = 5,
    INTENSITY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Precipitation* internal_default_instance() {
    return reinterpret_cast<const Precipitation*>(
               &_Precipitation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(Precipitation* other);
  void Swap(Precipitation* other);
  friend void swap(Precipitation& a, Precipitation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Precipitation* New() const final {
    return CreateMaybeMessage<Precipitation>(NULL);
  }

  Precipitation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Precipitation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Precipitation& from);
  void MergeFrom(const Precipitation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Precipitation* other);
  protected:
  explicit Precipitation(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Precipitation_TypeAndConfidence TypeAndConfidence;

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope();
  static const int kEnvelopeFieldNumber = 1;
  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  public:
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* envelope);
  void unsafe_arena_set_allocated_envelope(
      ::sensoris::protobuf::types::base::EventEnvelope* envelope);
  ::sensoris::protobuf::types::base::EventEnvelope* unsafe_arena_release_envelope();

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
  bool has_detection_status() const;
  void clear_detection_status();
  static const int kDetectionStatusFieldNumber = 2;
  private:
  const ::sensoris::protobuf::types::base::EventDetectionStatus& _internal_detection_status() const;
  public:
  const ::sensoris::protobuf::types::base::EventDetectionStatus& detection_status() const;
  ::sensoris::protobuf::types::base::EventDetectionStatus* release_detection_status();
  ::sensoris::protobuf::types::base::EventDetectionStatus* mutable_detection_status();
  void set_allocated_detection_status(::sensoris::protobuf::types::base::EventDetectionStatus* detection_status);
  void unsafe_arena_set_allocated_detection_status(
      ::sensoris::protobuf::types::base::EventDetectionStatus* detection_status);
  ::sensoris::protobuf::types::base::EventDetectionStatus* unsafe_arena_release_detection_status();

  // .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence type_and_confidence = 3;
  bool has_type_and_confidence() const;
  void clear_type_and_confidence();
  static const int kTypeAndConfidenceFieldNumber = 3;
  private:
  const ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence& _internal_type_and_confidence() const;
  public:
  const ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence& type_and_confidence() const;
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* release_type_and_confidence();
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* mutable_type_and_confidence();
  void set_allocated_type_and_confidence(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* type_and_confidence);
  void unsafe_arena_set_allocated_type_and_confidence(
      ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* type_and_confidence);
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* unsafe_arena_release_type_and_confidence();

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_intensity_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  bool has_relative_intensity_and_accuracy() const;
  void clear_relative_intensity_and_accuracy();
  static const int kRelativeIntensityAndAccuracyFieldNumber = 4;
  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_relative_intensity_and_accuracy() const;
  public:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& relative_intensity_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* release_relative_intensity_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* mutable_relative_intensity_and_accuracy();
  void set_allocated_relative_intensity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* relative_intensity_and_accuracy);
  void unsafe_arena_set_allocated_relative_intensity_and_accuracy(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* relative_intensity_and_accuracy);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* unsafe_arena_release_relative_intensity_and_accuracy();

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy absolute_intensity_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
  bool has_absolute_intensity_and_accuracy() const;
  void clear_absolute_intensity_and_accuracy();
  static const int kAbsoluteIntensityAndAccuracyFieldNumber = 5;
  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_absolute_intensity_and_accuracy() const;
  public:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& absolute_intensity_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* release_absolute_intensity_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* mutable_absolute_intensity_and_accuracy();
  void set_allocated_absolute_intensity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* absolute_intensity_and_accuracy);
  void unsafe_arena_set_allocated_absolute_intensity_and_accuracy(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* absolute_intensity_and_accuracy);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* unsafe_arena_release_absolute_intensity_and_accuracy();

  void clear_intensity();
  IntensityCase intensity_case() const;
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.weather.Precipitation)
 private:
  void set_has_relative_intensity_and_accuracy();
  void set_has_absolute_intensity_and_accuracy();

  inline bool has_intensity() const;
  inline void clear_has_intensity();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::base::EventEnvelope* envelope_;
  ::sensoris::protobuf::types::base::EventDetectionStatus* detection_status_;
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* type_and_confidence_;
  union IntensityUnion {
    IntensityUnion() {}
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* relative_intensity_and_accuracy_;
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* absolute_intensity_and_accuracy_;
  } intensity_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WeatherCategory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.weather.WeatherCategory) */ {
 public:
  WeatherCategory();
  virtual ~WeatherCategory();

  WeatherCategory(const WeatherCategory& from);

  inline WeatherCategory& operator=(const WeatherCategory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WeatherCategory(WeatherCategory&& from) noexcept
    : WeatherCategory() {
    *this = ::std::move(from);
  }

  inline WeatherCategory& operator=(WeatherCategory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const WeatherCategory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WeatherCategory* internal_default_instance() {
    return reinterpret_cast<const WeatherCategory*>(
               &_WeatherCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(WeatherCategory* other);
  void Swap(WeatherCategory* other);
  friend void swap(WeatherCategory& a, WeatherCategory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WeatherCategory* New() const final {
    return CreateMaybeMessage<WeatherCategory>(NULL);
  }

  WeatherCategory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WeatherCategory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WeatherCategory& from);
  void MergeFrom(const WeatherCategory& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeatherCategory* other);
  protected:
  explicit WeatherCategory(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sensoris.protobuf.categories.weather.Precipitation precipitation = 2;
  int precipitation_size() const;
  void clear_precipitation();
  static const int kPrecipitationFieldNumber = 2;
  ::sensoris::protobuf::categories::weather::Precipitation* mutable_precipitation(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::weather::Precipitation >*
      mutable_precipitation();
  const ::sensoris::protobuf::categories::weather::Precipitation& precipitation(int index) const;
  ::sensoris::protobuf::categories::weather::Precipitation* add_precipitation();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::weather::Precipitation >&
      precipitation() const;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope();
  static const int kEnvelopeFieldNumber = 1;
  private:
  const ::sensoris::protobuf::types::base::CategoryEnvelope& _internal_envelope() const;
  public:
  const ::sensoris::protobuf::types::base::CategoryEnvelope& envelope() const;
  ::sensoris::protobuf::types::base::CategoryEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::CategoryEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* envelope);
  void unsafe_arena_set_allocated_envelope(
      ::sensoris::protobuf::types::base::CategoryEnvelope* envelope);
  ::sensoris::protobuf::types::base::CategoryEnvelope* unsafe_arena_release_envelope();

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.weather.WeatherCategory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::weather::Precipitation > precipitation_;
  ::sensoris::protobuf::types::base::CategoryEnvelope* envelope_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fweather_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Precipitation_TypeAndConfidence

// .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.Type type = 1;
inline void Precipitation_TypeAndConfidence::clear_type() {
  type_ = 0;
}
inline ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type Precipitation_TypeAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.type)
  return static_cast< ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type >(type_);
}
inline void Precipitation_TypeAndConfidence::set_type(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.type)
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool Precipitation_TypeAndConfidence::has_confidence() const {
  return this != internal_default_instance() && confidence_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Confidence& Precipitation_TypeAndConfidence::_internal_confidence() const {
  return *confidence_;
}
inline const ::sensoris::protobuf::types::base::Confidence& Precipitation_TypeAndConfidence::confidence() const {
  const ::sensoris::protobuf::types::base::Confidence* p = confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence*>(
      &::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline ::sensoris::protobuf::types::base::Confidence* Precipitation_TypeAndConfidence::release_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* Precipitation_TypeAndConfidence::unsafe_arena_release_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* Precipitation_TypeAndConfidence::mutable_confidence() {
  
  if (confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(GetArenaNoVirtual());
    confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.confidence)
  return confidence_;
}
inline void Precipitation_TypeAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(confidence_);
  }
  if (confidence) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(confidence)->GetArena();
    if (message_arena != submessage_arena) {
      confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, confidence, submessage_arena);
    }
    
  } else {
    
  }
  confidence_ = confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence.confidence)
}

// -------------------------------------------------------------------

// Precipitation

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool Precipitation::has_envelope() const {
  return this != internal_default_instance() && envelope_ != NULL;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& Precipitation::_internal_envelope() const {
  return *envelope_;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& Precipitation::envelope() const {
  const ::sensoris::protobuf::types::base::EventEnvelope* p = envelope_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.Precipitation.envelope)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope*>(
      &::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Precipitation::release_envelope() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.Precipitation.envelope)
  
  ::sensoris::protobuf::types::base::EventEnvelope* temp = envelope_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Precipitation::unsafe_arena_release_envelope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.weather.Precipitation.envelope)
  
  ::sensoris::protobuf::types::base::EventEnvelope* temp = envelope_;
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* Precipitation::mutable_envelope() {
  
  if (envelope_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(GetArenaNoVirtual());
    envelope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.Precipitation.envelope)
  return envelope_;
}
inline void Precipitation::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(envelope_);
  }
  if (envelope) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(envelope)->GetArena();
    if (message_arena != submessage_arena) {
      envelope = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.Precipitation.envelope)
}

// .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 2;
inline bool Precipitation::has_detection_status() const {
  return this != internal_default_instance() && detection_status_ != NULL;
}
inline const ::sensoris::protobuf::types::base::EventDetectionStatus& Precipitation::_internal_detection_status() const {
  return *detection_status_;
}
inline const ::sensoris::protobuf::types::base::EventDetectionStatus& Precipitation::detection_status() const {
  const ::sensoris::protobuf::types::base::EventDetectionStatus* p = detection_status_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.Precipitation.detection_status)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::EventDetectionStatus*>(
      &::sensoris::protobuf::types::base::_EventDetectionStatus_default_instance_);
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* Precipitation::release_detection_status() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.Precipitation.detection_status)
  
  ::sensoris::protobuf::types::base::EventDetectionStatus* temp = detection_status_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  detection_status_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* Precipitation::unsafe_arena_release_detection_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.weather.Precipitation.detection_status)
  
  ::sensoris::protobuf::types::base::EventDetectionStatus* temp = detection_status_;
  detection_status_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* Precipitation::mutable_detection_status() {
  
  if (detection_status_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventDetectionStatus>(GetArenaNoVirtual());
    detection_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.Precipitation.detection_status)
  return detection_status_;
}
inline void Precipitation::set_allocated_detection_status(::sensoris::protobuf::types::base::EventDetectionStatus* detection_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(detection_status_);
  }
  if (detection_status) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(detection_status)->GetArena();
    if (message_arena != submessage_arena) {
      detection_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, detection_status, submessage_arena);
    }
    
  } else {
    
  }
  detection_status_ = detection_status;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.Precipitation.detection_status)
}

// .sensoris.protobuf.categories.weather.Precipitation.TypeAndConfidence type_and_confidence = 3;
inline bool Precipitation::has_type_and_confidence() const {
  return this != internal_default_instance() && type_and_confidence_ != NULL;
}
inline void Precipitation::clear_type_and_confidence() {
  if (GetArenaNoVirtual() == NULL && type_and_confidence_ != NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = NULL;
}
inline const ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence& Precipitation::_internal_type_and_confidence() const {
  return *type_and_confidence_;
}
inline const ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence& Precipitation::type_and_confidence() const {
  const ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* p = type_and_confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.Precipitation.type_and_confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence*>(
      &::sensoris::protobuf::categories::weather::_Precipitation_TypeAndConfidence_default_instance_);
}
inline ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* Precipitation::release_type_and_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.Precipitation.type_and_confidence)
  
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* temp = type_and_confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  type_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* Precipitation::unsafe_arena_release_type_and_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.weather.Precipitation.type_and_confidence)
  
  ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* temp = type_and_confidence_;
  type_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* Precipitation::mutable_type_and_confidence() {
  
  if (type_and_confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence>(GetArenaNoVirtual());
    type_and_confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.Precipitation.type_and_confidence)
  return type_and_confidence_;
}
inline void Precipitation::set_allocated_type_and_confidence(::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence* type_and_confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete type_and_confidence_;
  }
  if (type_and_confidence) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(type_and_confidence);
    if (message_arena != submessage_arena) {
      type_and_confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type_and_confidence, submessage_arena);
    }
    
  } else {
    
  }
  type_and_confidence_ = type_and_confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.Precipitation.type_and_confidence)
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy relative_intensity_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
inline bool Precipitation::has_relative_intensity_and_accuracy() const {
  return intensity_case() == kRelativeIntensityAndAccuracy;
}
inline void Precipitation::set_has_relative_intensity_and_accuracy() {
  _oneof_case_[0] = kRelativeIntensityAndAccuracy;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Precipitation::_internal_relative_intensity_and_accuracy() const {
  return *intensity_.relative_intensity_and_accuracy_;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Precipitation::release_relative_intensity_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.Precipitation.relative_intensity_and_accuracy)
  if (has_relative_intensity_and_accuracy()) {
    clear_has_intensity();
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = intensity_.relative_intensity_and_accuracy_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    intensity_.relative_intensity_and_accuracy_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Precipitation::relative_intensity_and_accuracy() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.Precipitation.relative_intensity_and_accuracy)
  return has_relative_intensity_and_accuracy()
      ? *intensity_.relative_intensity_and_accuracy_
      : *reinterpret_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(&::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Precipitation::unsafe_arena_release_relative_intensity_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.weather.Precipitation.relative_intensity_and_accuracy)
  if (has_relative_intensity_and_accuracy()) {
    clear_has_intensity();
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = intensity_.relative_intensity_and_accuracy_;
    intensity_.relative_intensity_and_accuracy_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Precipitation::unsafe_arena_set_allocated_relative_intensity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* relative_intensity_and_accuracy) {
  clear_intensity();
  if (relative_intensity_and_accuracy) {
    set_has_relative_intensity_and_accuracy();
    intensity_.relative_intensity_and_accuracy_ = relative_intensity_and_accuracy;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.Precipitation.relative_intensity_and_accuracy)
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Precipitation::mutable_relative_intensity_and_accuracy() {
  if (!has_relative_intensity_and_accuracy()) {
    clear_intensity();
    set_has_relative_intensity_and_accuracy();
    intensity_.relative_intensity_and_accuracy_ = CreateMaybeMessage< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.Precipitation.relative_intensity_and_accuracy)
  return intensity_.relative_intensity_and_accuracy_;
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy absolute_intensity_and_accuracy = 5 [(.sensoris.protobuf.types.base.exponent) = 1];
inline bool Precipitation::has_absolute_intensity_and_accuracy() const {
  return intensity_case() == kAbsoluteIntensityAndAccuracy;
}
inline void Precipitation::set_has_absolute_intensity_and_accuracy() {
  _oneof_case_[0] = kAbsoluteIntensityAndAccuracy;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Precipitation::_internal_absolute_intensity_and_accuracy() const {
  return *intensity_.absolute_intensity_and_accuracy_;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Precipitation::release_absolute_intensity_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.Precipitation.absolute_intensity_and_accuracy)
  if (has_absolute_intensity_and_accuracy()) {
    clear_has_intensity();
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = intensity_.absolute_intensity_and_accuracy_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    intensity_.absolute_intensity_and_accuracy_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& Precipitation::absolute_intensity_and_accuracy() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.Precipitation.absolute_intensity_and_accuracy)
  return has_absolute_intensity_and_accuracy()
      ? *intensity_.absolute_intensity_and_accuracy_
      : *reinterpret_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(&::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Precipitation::unsafe_arena_release_absolute_intensity_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.weather.Precipitation.absolute_intensity_and_accuracy)
  if (has_absolute_intensity_and_accuracy()) {
    clear_has_intensity();
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = intensity_.absolute_intensity_and_accuracy_;
    intensity_.absolute_intensity_and_accuracy_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Precipitation::unsafe_arena_set_allocated_absolute_intensity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* absolute_intensity_and_accuracy) {
  clear_intensity();
  if (absolute_intensity_and_accuracy) {
    set_has_absolute_intensity_and_accuracy();
    intensity_.absolute_intensity_and_accuracy_ = absolute_intensity_and_accuracy;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.weather.Precipitation.absolute_intensity_and_accuracy)
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* Precipitation::mutable_absolute_intensity_and_accuracy() {
  if (!has_absolute_intensity_and_accuracy()) {
    clear_intensity();
    set_has_absolute_intensity_and_accuracy();
    intensity_.absolute_intensity_and_accuracy_ = CreateMaybeMessage< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.Precipitation.absolute_intensity_and_accuracy)
  return intensity_.absolute_intensity_and_accuracy_;
}

inline bool Precipitation::has_intensity() const {
  return intensity_case() != INTENSITY_NOT_SET;
}
inline void Precipitation::clear_has_intensity() {
  _oneof_case_[0] = INTENSITY_NOT_SET;
}
inline Precipitation::IntensityCase Precipitation::intensity_case() const {
  return Precipitation::IntensityCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// WeatherCategory

// .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
inline bool WeatherCategory::has_envelope() const {
  return this != internal_default_instance() && envelope_ != NULL;
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& WeatherCategory::_internal_envelope() const {
  return *envelope_;
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& WeatherCategory::envelope() const {
  const ::sensoris::protobuf::types::base::CategoryEnvelope* p = envelope_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.WeatherCategory.envelope)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::CategoryEnvelope*>(
      &::sensoris::protobuf::types::base::_CategoryEnvelope_default_instance_);
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* WeatherCategory::release_envelope() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.weather.WeatherCategory.envelope)
  
  ::sensoris::protobuf::types::base::CategoryEnvelope* temp = envelope_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* WeatherCategory::unsafe_arena_release_envelope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.weather.WeatherCategory.envelope)
  
  ::sensoris::protobuf::types::base::CategoryEnvelope* temp = envelope_;
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* WeatherCategory::mutable_envelope() {
  
  if (envelope_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::CategoryEnvelope>(GetArenaNoVirtual());
    envelope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.WeatherCategory.envelope)
  return envelope_;
}
inline void WeatherCategory::set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* envelope) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(envelope_);
  }
  if (envelope) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(envelope)->GetArena();
    if (message_arena != submessage_arena) {
      envelope = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.weather.WeatherCategory.envelope)
}

// repeated .sensoris.protobuf.categories.weather.Precipitation precipitation = 2;
inline int WeatherCategory::precipitation_size() const {
  return precipitation_.size();
}
inline void WeatherCategory::clear_precipitation() {
  precipitation_.Clear();
}
inline ::sensoris::protobuf::categories::weather::Precipitation* WeatherCategory::mutable_precipitation(int index) {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.weather.WeatherCategory.precipitation)
  return precipitation_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::weather::Precipitation >*
WeatherCategory::mutable_precipitation() {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.weather.WeatherCategory.precipitation)
  return &precipitation_;
}
inline const ::sensoris::protobuf::categories::weather::Precipitation& WeatherCategory::precipitation(int index) const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.weather.WeatherCategory.precipitation)
  return precipitation_.Get(index);
}
inline ::sensoris::protobuf::categories::weather::Precipitation* WeatherCategory::add_precipitation() {
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.weather.WeatherCategory.precipitation)
  return precipitation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::weather::Precipitation >&
WeatherCategory::precipitation() const {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.weather.WeatherCategory.precipitation)
  return precipitation_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace weather
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::weather::Precipitation_TypeAndConfidence_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fweather_2eproto
