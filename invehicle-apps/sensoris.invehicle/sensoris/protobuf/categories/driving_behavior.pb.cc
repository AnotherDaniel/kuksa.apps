// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/driving_behavior.proto

#include "sensoris/protobuf/categories/driving_behavior.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ParkingStatus_DirectionAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ParkingStatus_StatusAndConfidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_ParkingStatus;
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto
namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Confidence;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CategoryEnvelope;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_EventEnvelope;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Int64ValueAndAccuracy;
}  // namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace drivingbehavior {
class ParkingStatus_StatusAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParkingStatus_StatusAndConfidence>
      _instance;
} _ParkingStatus_StatusAndConfidence_default_instance_;
class ParkingStatus_DirectionAndConfidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParkingStatus_DirectionAndConfidence>
      _instance;
} _ParkingStatus_DirectionAndConfidence_default_instance_;
class ParkingStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParkingStatus>
      _instance;
} _ParkingStatus_default_instance_;
class DrivingBehaviorCategoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DrivingBehaviorCategory>
      _instance;
} _DrivingBehaviorCategory_default_instance_;
}  // namespace drivingbehavior
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto {
static void InitDefaultsParkingStatus_StatusAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::drivingbehavior::_ParkingStatus_StatusAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ParkingStatus_StatusAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsParkingStatus_StatusAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsParkingStatus_DirectionAndConfidence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::drivingbehavior::_ParkingStatus_DirectionAndConfidence_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ParkingStatus_DirectionAndConfidence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsParkingStatus_DirectionAndConfidence}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Confidence.base,}};

static void InitDefaultsParkingStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::drivingbehavior::_ParkingStatus_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_ParkingStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsParkingStatus}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_EventEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::scc_info_ParkingStatus_StatusAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::scc_info_ParkingStatus_DirectionAndConfidence.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64ValueAndAccuracy.base,}};

static void InitDefaultsDrivingBehaviorCategory() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::categories::drivingbehavior::_DrivingBehaviorCategory_default_instance_;
    new (ptr) ::sensoris::protobuf::categories::drivingbehavior::DrivingBehaviorCategory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::categories::drivingbehavior::DrivingBehaviorCategory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DrivingBehaviorCategory =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDrivingBehaviorCategory}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_CategoryEnvelope.base,
      &protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::scc_info_ParkingStatus.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ParkingStatus_StatusAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ParkingStatus_DirectionAndConfidence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ParkingStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DrivingBehaviorCategory.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence, confidence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus, status_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus, direction_and_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus, duration_and_accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::drivingbehavior::DrivingBehaviorCategory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::drivingbehavior::DrivingBehaviorCategory, envelope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::categories::drivingbehavior::DrivingBehaviorCategory, parking_status_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence)},
  { 7, -1, sizeof(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence)},
  { 14, -1, sizeof(::sensoris::protobuf::categories::drivingbehavior::ParkingStatus)},
  { 23, -1, sizeof(::sensoris::protobuf::categories::drivingbehavior::DrivingBehaviorCategory)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::drivingbehavior::_ParkingStatus_StatusAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::drivingbehavior::_ParkingStatus_DirectionAndConfidence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::drivingbehavior::_ParkingStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::categories::drivingbehavior::_DrivingBehaviorCategory_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "sensoris/protobuf/categories/driving_behavior.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n3sensoris/protobuf/categories/driving_b"
      "ehavior.proto\022,sensoris.protobuf.categor"
      "ies.drivingbehavior\032\"sensoris/protobuf/t"
      "ypes/base.proto\"\204\007\n\rParkingStatus\022=\n\010env"
      "elope\030\001 \001(\0132+.sensoris.protobuf.types.ba"
      "se.EventEnvelope\022n\n\025status_and_confidenc"
      "e\030\002 \001(\0132O.sensoris.protobuf.categories.d"
      "rivingbehavior.ParkingStatus.StatusAndCo"
      "nfidence\022t\n\030direction_and_confidence\030\003 \001"
      "(\0132R.sensoris.protobuf.categories.drivin"
      "gbehavior.ParkingStatus.DirectionAndConf"
      "idence\022X\n\025duration_and_accuracy\030\004 \001(\01323."
      "sensoris.protobuf.types.base.Int64ValueA"
      "ndAccuracyB\004\210\265\030\000\032\354\001\n\023StatusAndConfidence"
      "\022b\n\004type\030\001 \001(\0162T.sensoris.protobuf.categ"
      "ories.drivingbehavior.ParkingStatus.Stat"
      "usAndConfidence.Type\022<\n\nconfidence\030\002 \001(\013"
      "2(.sensoris.protobuf.types.base.Confiden"
      "ce\"3\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\013\n\007PARK_IN\020"
      "\001\022\014\n\010PARK_OUT\020\002\032\204\002\n\026DirectionAndConfiden"
      "ce\022e\n\004type\030\001 \001(\0162W.sensoris.protobuf.cat"
      "egories.drivingbehavior.ParkingStatus.Di"
      "rectionAndConfidence.Type\022<\n\nconfidence\030"
      "\002 \001(\0132(.sensoris.protobuf.types.base.Con"
      "fidence\"E\n\004Type\022\020\n\014UNKNOWN_TYPE\020\000\022\020\n\014LON"
      "GITUDINAL\020\001\022\013\n\007LATERAL\020\002\022\014\n\010DIAGONAL\020\003\"\260"
      "\001\n\027DrivingBehaviorCategory\022@\n\010envelope\030\001"
      " \001(\0132..sensoris.protobuf.types.base.Cate"
      "goryEnvelope\022S\n\016parking_status\030\002 \003(\0132;.s"
      "ensoris.protobuf.categories.drivingbehav"
      "ior.ParkingStatusBO\n\'org.sensoris.catego"
      "ries.drivingbehaviorB\037SensorisDrivingBeh"
      "aviorCategoryP\001\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1306);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensoris/protobuf/categories/driving_behavior.proto", &protobuf_RegisterTypes);
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace drivingbehavior {
const ::google::protobuf::EnumDescriptor* ParkingStatus_StatusAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::file_level_enum_descriptors[0];
}
bool ParkingStatus_StatusAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ParkingStatus_StatusAndConfidence_Type ParkingStatus_StatusAndConfidence::UNKNOWN_TYPE;
const ParkingStatus_StatusAndConfidence_Type ParkingStatus_StatusAndConfidence::PARK_IN;
const ParkingStatus_StatusAndConfidence_Type ParkingStatus_StatusAndConfidence::PARK_OUT;
const ParkingStatus_StatusAndConfidence_Type ParkingStatus_StatusAndConfidence::Type_MIN;
const ParkingStatus_StatusAndConfidence_Type ParkingStatus_StatusAndConfidence::Type_MAX;
const int ParkingStatus_StatusAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ParkingStatus_DirectionAndConfidence_Type_descriptor() {
  protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::file_level_enum_descriptors[1];
}
bool ParkingStatus_DirectionAndConfidence_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ParkingStatus_DirectionAndConfidence_Type ParkingStatus_DirectionAndConfidence::UNKNOWN_TYPE;
const ParkingStatus_DirectionAndConfidence_Type ParkingStatus_DirectionAndConfidence::LONGITUDINAL;
const ParkingStatus_DirectionAndConfidence_Type ParkingStatus_DirectionAndConfidence::LATERAL;
const ParkingStatus_DirectionAndConfidence_Type ParkingStatus_DirectionAndConfidence::DIAGONAL;
const ParkingStatus_DirectionAndConfidence_Type ParkingStatus_DirectionAndConfidence::Type_MIN;
const ParkingStatus_DirectionAndConfidence_Type ParkingStatus_DirectionAndConfidence::Type_MAX;
const int ParkingStatus_DirectionAndConfidence::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ParkingStatus_StatusAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::drivingbehavior::_ParkingStatus_StatusAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void ParkingStatus_StatusAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence.confidence)
}
void ParkingStatus_StatusAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParkingStatus_StatusAndConfidence::kTypeFieldNumber;
const int ParkingStatus_StatusAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParkingStatus_StatusAndConfidence::ParkingStatus_StatusAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::scc_info_ParkingStatus_StatusAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence)
}
ParkingStatus_StatusAndConfidence::ParkingStatus_StatusAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::scc_info_ParkingStatus_StatusAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence)
}
ParkingStatus_StatusAndConfidence::ParkingStatus_StatusAndConfidence(const ParkingStatus_StatusAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence)
}

void ParkingStatus_StatusAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

ParkingStatus_StatusAndConfidence::~ParkingStatus_StatusAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence)
  SharedDtor();
}

void ParkingStatus_StatusAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void ParkingStatus_StatusAndConfidence::ArenaDtor(void* object) {
  ParkingStatus_StatusAndConfidence* _this = reinterpret_cast< ParkingStatus_StatusAndConfidence* >(object);
  (void)_this;
}
void ParkingStatus_StatusAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ParkingStatus_StatusAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ParkingStatus_StatusAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParkingStatus_StatusAndConfidence& ParkingStatus_StatusAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::scc_info_ParkingStatus_StatusAndConfidence.base);
  return *internal_default_instance();
}


void ParkingStatus_StatusAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool ParkingStatus_StatusAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence)
  return false;
#undef DO_
}

void ParkingStatus_StatusAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence)
}

::google::protobuf::uint8* ParkingStatus_StatusAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence)
  return target;
}

size_t ParkingStatus_StatusAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingStatus_StatusAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingStatus_StatusAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParkingStatus_StatusAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence)
    MergeFrom(*source);
  }
}

void ParkingStatus_StatusAndConfidence::MergeFrom(const ParkingStatus_StatusAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ParkingStatus_StatusAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingStatus_StatusAndConfidence::CopyFrom(const ParkingStatus_StatusAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingStatus_StatusAndConfidence::IsInitialized() const {
  return true;
}

void ParkingStatus_StatusAndConfidence::Swap(ParkingStatus_StatusAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ParkingStatus_StatusAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ParkingStatus_StatusAndConfidence::UnsafeArenaSwap(ParkingStatus_StatusAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ParkingStatus_StatusAndConfidence::InternalSwap(ParkingStatus_StatusAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ParkingStatus_StatusAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ParkingStatus_DirectionAndConfidence::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::drivingbehavior::_ParkingStatus_DirectionAndConfidence_default_instance_._instance.get_mutable()->confidence_ = const_cast< ::sensoris::protobuf::types::base::Confidence*>(
      ::sensoris::protobuf::types::base::Confidence::internal_default_instance());
}
void ParkingStatus_DirectionAndConfidence::unsafe_arena_set_allocated_confidence(
    ::sensoris::protobuf::types::base::Confidence* confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete confidence_;
  }
  confidence_ = confidence;
  if (confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence.confidence)
}
void ParkingStatus_DirectionAndConfidence::clear_confidence() {
  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParkingStatus_DirectionAndConfidence::kTypeFieldNumber;
const int ParkingStatus_DirectionAndConfidence::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParkingStatus_DirectionAndConfidence::ParkingStatus_DirectionAndConfidence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::scc_info_ParkingStatus_DirectionAndConfidence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence)
}
ParkingStatus_DirectionAndConfidence::ParkingStatus_DirectionAndConfidence(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::scc_info_ParkingStatus_DirectionAndConfidence.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence)
}
ParkingStatus_DirectionAndConfidence::ParkingStatus_DirectionAndConfidence(const ParkingStatus_DirectionAndConfidence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_confidence()) {
    confidence_ = new ::sensoris::protobuf::types::base::Confidence(*from.confidence_);
  } else {
    confidence_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence)
}

void ParkingStatus_DirectionAndConfidence::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(type_));
}

ParkingStatus_DirectionAndConfidence::~ParkingStatus_DirectionAndConfidence() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence)
  SharedDtor();
}

void ParkingStatus_DirectionAndConfidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete confidence_;
}

void ParkingStatus_DirectionAndConfidence::ArenaDtor(void* object) {
  ParkingStatus_DirectionAndConfidence* _this = reinterpret_cast< ParkingStatus_DirectionAndConfidence* >(object);
  (void)_this;
}
void ParkingStatus_DirectionAndConfidence::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ParkingStatus_DirectionAndConfidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ParkingStatus_DirectionAndConfidence::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParkingStatus_DirectionAndConfidence& ParkingStatus_DirectionAndConfidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::scc_info_ParkingStatus_DirectionAndConfidence.base);
  return *internal_default_instance();
}


void ParkingStatus_DirectionAndConfidence::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && confidence_ != NULL) {
    delete confidence_;
  }
  confidence_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool ParkingStatus_DirectionAndConfidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Confidence confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence)
  return false;
#undef DO_
}

void ParkingStatus_DirectionAndConfidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_confidence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence)
}

::google::protobuf::uint8* ParkingStatus_DirectionAndConfidence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_confidence(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence)
  return target;
}

size_t ParkingStatus_DirectionAndConfidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  if (this->has_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *confidence_);
  }

  // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingStatus_DirectionAndConfidence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingStatus_DirectionAndConfidence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParkingStatus_DirectionAndConfidence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence)
    MergeFrom(*source);
  }
}

void ParkingStatus_DirectionAndConfidence::MergeFrom(const ParkingStatus_DirectionAndConfidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_confidence()) {
    mutable_confidence()->::sensoris::protobuf::types::base::Confidence::MergeFrom(from.confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ParkingStatus_DirectionAndConfidence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingStatus_DirectionAndConfidence::CopyFrom(const ParkingStatus_DirectionAndConfidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingStatus_DirectionAndConfidence::IsInitialized() const {
  return true;
}

void ParkingStatus_DirectionAndConfidence::Swap(ParkingStatus_DirectionAndConfidence* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ParkingStatus_DirectionAndConfidence* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ParkingStatus_DirectionAndConfidence::UnsafeArenaSwap(ParkingStatus_DirectionAndConfidence* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ParkingStatus_DirectionAndConfidence::InternalSwap(ParkingStatus_DirectionAndConfidence* other) {
  using std::swap;
  swap(confidence_, other->confidence_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ParkingStatus_DirectionAndConfidence::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ParkingStatus::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::drivingbehavior::_ParkingStatus_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::EventEnvelope*>(
      ::sensoris::protobuf::types::base::EventEnvelope::internal_default_instance());
  ::sensoris::protobuf::categories::drivingbehavior::_ParkingStatus_default_instance_._instance.get_mutable()->status_and_confidence_ = const_cast< ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence*>(
      ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence::internal_default_instance());
  ::sensoris::protobuf::categories::drivingbehavior::_ParkingStatus_default_instance_._instance.get_mutable()->direction_and_confidence_ = const_cast< ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence*>(
      ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence::internal_default_instance());
  ::sensoris::protobuf::categories::drivingbehavior::_ParkingStatus_default_instance_._instance.get_mutable()->duration_and_accuracy_ = const_cast< ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy::internal_default_instance());
}
void ParkingStatus::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.envelope)
}
void ParkingStatus::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
void ParkingStatus::unsafe_arena_set_allocated_status_and_confidence(
    ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* status_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete status_and_confidence_;
  }
  status_and_confidence_ = status_and_confidence;
  if (status_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.status_and_confidence)
}
void ParkingStatus::unsafe_arena_set_allocated_direction_and_confidence(
    ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* direction_and_confidence) {
  if (GetArenaNoVirtual() == NULL) {
    delete direction_and_confidence_;
  }
  direction_and_confidence_ = direction_and_confidence;
  if (direction_and_confidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.direction_and_confidence)
}
void ParkingStatus::unsafe_arena_set_allocated_duration_and_accuracy(
    ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* duration_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete duration_and_accuracy_;
  }
  duration_and_accuracy_ = duration_and_accuracy;
  if (duration_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.drivingbehavior.ParkingStatus.duration_and_accuracy)
}
void ParkingStatus::clear_duration_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && duration_and_accuracy_ != NULL) {
    delete duration_and_accuracy_;
  }
  duration_and_accuracy_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParkingStatus::kEnvelopeFieldNumber;
const int ParkingStatus::kStatusAndConfidenceFieldNumber;
const int ParkingStatus::kDirectionAndConfidenceFieldNumber;
const int ParkingStatus::kDurationAndAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParkingStatus::ParkingStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::scc_info_ParkingStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.drivingbehavior.ParkingStatus)
}
ParkingStatus::ParkingStatus(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::scc_info_ParkingStatus.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.drivingbehavior.ParkingStatus)
}
ParkingStatus::ParkingStatus(const ParkingStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::EventEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  if (from.has_status_and_confidence()) {
    status_and_confidence_ = new ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence(*from.status_and_confidence_);
  } else {
    status_and_confidence_ = NULL;
  }
  if (from.has_direction_and_confidence()) {
    direction_and_confidence_ = new ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence(*from.direction_and_confidence_);
  } else {
    direction_and_confidence_ = NULL;
  }
  if (from.has_duration_and_accuracy()) {
    duration_and_accuracy_ = new ::sensoris::protobuf::types::base::Int64ValueAndAccuracy(*from.duration_and_accuracy_);
  } else {
    duration_and_accuracy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.drivingbehavior.ParkingStatus)
}

void ParkingStatus::SharedCtor() {
  ::memset(&envelope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_and_accuracy_) -
      reinterpret_cast<char*>(&envelope_)) + sizeof(duration_and_accuracy_));
}

ParkingStatus::~ParkingStatus() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.drivingbehavior.ParkingStatus)
  SharedDtor();
}

void ParkingStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
  if (this != internal_default_instance()) delete status_and_confidence_;
  if (this != internal_default_instance()) delete direction_and_confidence_;
  if (this != internal_default_instance()) delete duration_and_accuracy_;
}

void ParkingStatus::ArenaDtor(void* object) {
  ParkingStatus* _this = reinterpret_cast< ParkingStatus* >(object);
  (void)_this;
}
void ParkingStatus::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ParkingStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ParkingStatus::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParkingStatus& ParkingStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::scc_info_ParkingStatus.base);
  return *internal_default_instance();
}


void ParkingStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_and_confidence_ != NULL) {
    delete status_and_confidence_;
  }
  status_and_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && direction_and_confidence_ != NULL) {
    delete direction_and_confidence_;
  }
  direction_and_confidence_ = NULL;
  if (GetArenaNoVirtual() == NULL && duration_and_accuracy_ != NULL) {
    delete duration_and_accuracy_;
  }
  duration_and_accuracy_ = NULL;
  _internal_metadata_.Clear();
}

bool ParkingStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence status_and_confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence direction_and_confidence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_direction_and_confidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64ValueAndAccuracy duration_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_duration_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.drivingbehavior.ParkingStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.drivingbehavior.ParkingStatus)
  return false;
#undef DO_
}

void ParkingStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence status_and_confidence = 2;
  if (this->has_status_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_status_and_confidence(), output);
  }

  // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence direction_and_confidence = 3;
  if (this->has_direction_and_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_direction_and_confidence(), output);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy duration_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_duration_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_duration_and_accuracy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.drivingbehavior.ParkingStatus)
}

::google::protobuf::uint8* ParkingStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence status_and_confidence = 2;
  if (this->has_status_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_status_and_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence direction_and_confidence = 3;
  if (this->has_direction_and_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_direction_and_confidence(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy duration_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_duration_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_duration_and_accuracy(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.drivingbehavior.ParkingStatus)
  return target;
}

size_t ParkingStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.StatusAndConfidence status_and_confidence = 2;
  if (this->has_status_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_and_confidence_);
  }

  // .sensoris.protobuf.categories.drivingbehavior.ParkingStatus.DirectionAndConfidence direction_and_confidence = 3;
  if (this->has_direction_and_confidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *direction_and_confidence_);
  }

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy duration_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_duration_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *duration_and_accuracy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParkingStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.drivingbehavior.ParkingStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.drivingbehavior.ParkingStatus)
    MergeFrom(*source);
  }
}

void ParkingStatus::MergeFrom(const ParkingStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::EventEnvelope::MergeFrom(from.envelope());
  }
  if (from.has_status_and_confidence()) {
    mutable_status_and_confidence()->::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence::MergeFrom(from.status_and_confidence());
  }
  if (from.has_direction_and_confidence()) {
    mutable_direction_and_confidence()->::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence::MergeFrom(from.direction_and_confidence());
  }
  if (from.has_duration_and_accuracy()) {
    mutable_duration_and_accuracy()->::sensoris::protobuf::types::base::Int64ValueAndAccuracy::MergeFrom(from.duration_and_accuracy());
  }
}

void ParkingStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingStatus::CopyFrom(const ParkingStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.drivingbehavior.ParkingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingStatus::IsInitialized() const {
  return true;
}

void ParkingStatus::Swap(ParkingStatus* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ParkingStatus* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ParkingStatus::UnsafeArenaSwap(ParkingStatus* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ParkingStatus::InternalSwap(ParkingStatus* other) {
  using std::swap;
  swap(envelope_, other->envelope_);
  swap(status_and_confidence_, other->status_and_confidence_);
  swap(direction_and_confidence_, other->direction_and_confidence_);
  swap(duration_and_accuracy_, other->duration_and_accuracy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ParkingStatus::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DrivingBehaviorCategory::InitAsDefaultInstance() {
  ::sensoris::protobuf::categories::drivingbehavior::_DrivingBehaviorCategory_default_instance_._instance.get_mutable()->envelope_ = const_cast< ::sensoris::protobuf::types::base::CategoryEnvelope*>(
      ::sensoris::protobuf::types::base::CategoryEnvelope::internal_default_instance());
}
void DrivingBehaviorCategory::unsafe_arena_set_allocated_envelope(
    ::sensoris::protobuf::types::base::CategoryEnvelope* envelope) {
  if (GetArenaNoVirtual() == NULL) {
    delete envelope_;
  }
  envelope_ = envelope;
  if (envelope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory.envelope)
}
void DrivingBehaviorCategory::clear_envelope() {
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DrivingBehaviorCategory::kEnvelopeFieldNumber;
const int DrivingBehaviorCategory::kParkingStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DrivingBehaviorCategory::DrivingBehaviorCategory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::scc_info_DrivingBehaviorCategory.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory)
}
DrivingBehaviorCategory::DrivingBehaviorCategory(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  parking_status_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::scc_info_DrivingBehaviorCategory.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory)
}
DrivingBehaviorCategory::DrivingBehaviorCategory(const DrivingBehaviorCategory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      parking_status_(from.parking_status_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_envelope()) {
    envelope_ = new ::sensoris::protobuf::types::base::CategoryEnvelope(*from.envelope_);
  } else {
    envelope_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory)
}

void DrivingBehaviorCategory::SharedCtor() {
  envelope_ = NULL;
}

DrivingBehaviorCategory::~DrivingBehaviorCategory() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory)
  SharedDtor();
}

void DrivingBehaviorCategory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete envelope_;
}

void DrivingBehaviorCategory::ArenaDtor(void* object) {
  DrivingBehaviorCategory* _this = reinterpret_cast< DrivingBehaviorCategory* >(object);
  (void)_this;
}
void DrivingBehaviorCategory::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DrivingBehaviorCategory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DrivingBehaviorCategory::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DrivingBehaviorCategory& DrivingBehaviorCategory::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::scc_info_DrivingBehaviorCategory.base);
  return *internal_default_instance();
}


void DrivingBehaviorCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parking_status_.Clear();
  if (GetArenaNoVirtual() == NULL && envelope_ != NULL) {
    delete envelope_;
  }
  envelope_ = NULL;
  _internal_metadata_.Clear();
}

bool DrivingBehaviorCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_envelope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.categories.drivingbehavior.ParkingStatus parking_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_parking_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory)
  return false;
#undef DO_
}

void DrivingBehaviorCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_envelope(), output);
  }

  // repeated .sensoris.protobuf.categories.drivingbehavior.ParkingStatus parking_status = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parking_status_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->parking_status(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory)
}

::google::protobuf::uint8* DrivingBehaviorCategory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_envelope(), deterministic, target);
  }

  // repeated .sensoris.protobuf.categories.drivingbehavior.ParkingStatus parking_status = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parking_status_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->parking_status(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory)
  return target;
}

size_t DrivingBehaviorCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sensoris.protobuf.categories.drivingbehavior.ParkingStatus parking_status = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->parking_status_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->parking_status(static_cast<int>(i)));
    }
  }

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  if (this->has_envelope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *envelope_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrivingBehaviorCategory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory)
  GOOGLE_DCHECK_NE(&from, this);
  const DrivingBehaviorCategory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DrivingBehaviorCategory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory)
    MergeFrom(*source);
  }
}

void DrivingBehaviorCategory::MergeFrom(const DrivingBehaviorCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parking_status_.MergeFrom(from.parking_status_);
  if (from.has_envelope()) {
    mutable_envelope()->::sensoris::protobuf::types::base::CategoryEnvelope::MergeFrom(from.envelope());
  }
}

void DrivingBehaviorCategory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrivingBehaviorCategory::CopyFrom(const DrivingBehaviorCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.categories.drivingbehavior.DrivingBehaviorCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrivingBehaviorCategory::IsInitialized() const {
  return true;
}

void DrivingBehaviorCategory::Swap(DrivingBehaviorCategory* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DrivingBehaviorCategory* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DrivingBehaviorCategory::UnsafeArenaSwap(DrivingBehaviorCategory* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DrivingBehaviorCategory::InternalSwap(DrivingBehaviorCategory* other) {
  using std::swap;
  CastToBase(&parking_status_)->InternalSwap(CastToBase(&other->parking_status_));
  swap(envelope_, other->envelope_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DrivingBehaviorCategory::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2fcategories_2fdriving_5fbehavior_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace drivingbehavior
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_StatusAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus_DirectionAndConfidence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::drivingbehavior::ParkingStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::categories::drivingbehavior::DrivingBehaviorCategory* Arena::CreateMaybeMessage< ::sensoris::protobuf::categories::drivingbehavior::DrivingBehaviorCategory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::categories::drivingbehavior::DrivingBehaviorCategory >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
