// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/object_detection.proto

#ifndef PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto
#define PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "sensoris/protobuf/types/base.pb.h"
#include "sensoris/protobuf/types/spatial.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto 

namespace protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace objectdetection {
class MovableObject;
class MovableObjectDefaultTypeInternal;
extern MovableObjectDefaultTypeInternal _MovableObject_default_instance_;
class MovableObject_TypeAndConfidence;
class MovableObject_TypeAndConfidenceDefaultTypeInternal;
extern MovableObject_TypeAndConfidenceDefaultTypeInternal _MovableObject_TypeAndConfidence_default_instance_;
class ObjectDetectionCategory;
class ObjectDetectionCategoryDefaultTypeInternal;
extern ObjectDetectionCategoryDefaultTypeInternal _ObjectDetectionCategory_default_instance_;
class StaticObject;
class StaticObjectDefaultTypeInternal;
extern StaticObjectDefaultTypeInternal _StaticObject_default_instance_;
class StaticObject_ConeAndAccuracy;
class StaticObject_ConeAndAccuracyDefaultTypeInternal;
extern StaticObject_ConeAndAccuracyDefaultTypeInternal _StaticObject_ConeAndAccuracy_default_instance_;
class StaticObject_SurfaceColorAndConfidence;
class StaticObject_SurfaceColorAndConfidenceDefaultTypeInternal;
extern StaticObject_SurfaceColorAndConfidenceDefaultTypeInternal _StaticObject_SurfaceColorAndConfidence_default_instance_;
class StaticObject_SurfaceMaterialAndConfidence;
class StaticObject_SurfaceMaterialAndConfidenceDefaultTypeInternal;
extern StaticObject_SurfaceMaterialAndConfidenceDefaultTypeInternal _StaticObject_SurfaceMaterialAndConfidence_default_instance_;
class StaticObject_SurfaceTypeAndConfidence;
class StaticObject_SurfaceTypeAndConfidenceDefaultTypeInternal;
extern StaticObject_SurfaceTypeAndConfidenceDefaultTypeInternal _StaticObject_SurfaceTypeAndConfidence_default_instance_;
class StaticObject_TypeAndConfidence;
class StaticObject_TypeAndConfidenceDefaultTypeInternal;
extern StaticObject_TypeAndConfidenceDefaultTypeInternal _StaticObject_TypeAndConfidence_default_instance_;
}  // namespace objectdetection
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
template<> ::sensoris::protobuf::categories::objectdetection::MovableObject* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::objectdetection::MovableObject>(Arena*);
template<> ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence>(Arena*);
template<> ::sensoris::protobuf::categories::objectdetection::ObjectDetectionCategory* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::objectdetection::ObjectDetectionCategory>(Arena*);
template<> ::sensoris::protobuf::categories::objectdetection::StaticObject* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::objectdetection::StaticObject>(Arena*);
template<> ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy>(Arena*);
template<> ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence>(Arena*);
template<> ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence>(Arena*);
template<> ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence>(Arena*);
template<> ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sensoris {
namespace protobuf {
namespace categories {
namespace objectdetection {

enum MovableObject_TypeAndConfidence_Type {
  MovableObject_TypeAndConfidence_Type_UNKNOWN_TYPE = 0,
  MovableObject_TypeAndConfidence_Type_VEHICLE = 1,
  MovableObject_TypeAndConfidence_Type_VEHICLE_PASSENGER_CAR = 2,
  MovableObject_TypeAndConfidence_Type_VEHICLE_TRUCK = 3,
  MovableObject_TypeAndConfidence_Type_VEHICLE_BUS = 4,
  MovableObject_TypeAndConfidence_Type_VEHICLE_TRAM = 5,
  MovableObject_TypeAndConfidence_Type_VEHICLE_TRAILER = 6,
  MovableObject_TypeAndConfidence_Type_TWO_WHEELER = 7,
  MovableObject_TypeAndConfidence_Type_TWO_WHEELER_MOTORCYCLE = 8,
  MovableObject_TypeAndConfidence_Type_TWO_WHEELER_BICYCLE = 9,
  MovableObject_TypeAndConfidence_Type_PERSON = 10,
  MovableObject_TypeAndConfidence_Type_ANIMAL = 11,
  MovableObject_TypeAndConfidence_Type_MovableObject_TypeAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MovableObject_TypeAndConfidence_Type_MovableObject_TypeAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MovableObject_TypeAndConfidence_Type_IsValid(int value);
const MovableObject_TypeAndConfidence_Type MovableObject_TypeAndConfidence_Type_Type_MIN = MovableObject_TypeAndConfidence_Type_UNKNOWN_TYPE;
const MovableObject_TypeAndConfidence_Type MovableObject_TypeAndConfidence_Type_Type_MAX = MovableObject_TypeAndConfidence_Type_ANIMAL;
const int MovableObject_TypeAndConfidence_Type_Type_ARRAYSIZE = MovableObject_TypeAndConfidence_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* MovableObject_TypeAndConfidence_Type_descriptor();
inline const ::std::string& MovableObject_TypeAndConfidence_Type_Name(MovableObject_TypeAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MovableObject_TypeAndConfidence_Type_descriptor(), value);
}
inline bool MovableObject_TypeAndConfidence_Type_Parse(
    const ::std::string& name, MovableObject_TypeAndConfidence_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MovableObject_TypeAndConfidence_Type>(
    MovableObject_TypeAndConfidence_Type_descriptor(), name, value);
}
enum StaticObject_TypeAndConfidence_Type {
  StaticObject_TypeAndConfidence_Type_UNKNOWN_TYPE = 0,
  StaticObject_TypeAndConfidence_Type_BRIDGE = 1,
  StaticObject_TypeAndConfidence_Type_TUNNEL = 2,
  StaticObject_TypeAndConfidence_Type_POLE = 3,
  StaticObject_TypeAndConfidence_Type_POLE_LIGHT = 4,
  StaticObject_TypeAndConfidence_Type_POLE_REFLECTOR = 5,
  StaticObject_TypeAndConfidence_Type_POLE_DELINEATOR = 6,
  StaticObject_TypeAndConfidence_Type_POLE_GANTRY = 7,
  StaticObject_TypeAndConfidence_Type_POLE_SIGN = 8,
  StaticObject_TypeAndConfidence_Type_POLE_GUARD_RAIL = 9,
  StaticObject_TypeAndConfidence_Type_BAR = 10,
  StaticObject_TypeAndConfidence_Type_TREE = 11,
  StaticObject_TypeAndConfidence_Type_BOLLARD = 12,
  StaticObject_TypeAndConfidence_Type_CONE = 13,
  StaticObject_TypeAndConfidence_Type_BARREL = 14,
  StaticObject_TypeAndConfidence_Type_WALL = 15,
  StaticObject_TypeAndConfidence_Type_TRAFFIC_ISLAND = 16,
  StaticObject_TypeAndConfidence_Type_SPEED_BUMP = 17,
  StaticObject_TypeAndConfidence_Type_POT_HOLE = 18,
  StaticObject_TypeAndConfidence_Type_MANHOLE_COVER = 19,
  StaticObject_TypeAndConfidence_Type_MANHOLE_COVER_CLOSED = 20,
  StaticObject_TypeAndConfidence_Type_MANHOLE_COVER_OPEN = 21,
  StaticObject_TypeAndConfidence_Type_SIGN_BRIDGE = 22,
  StaticObject_TypeAndConfidence_Type_TRAFFIC_LIGHT_BODY = 23,
  StaticObject_TypeAndConfidence_Type_BARRIER_PARKING_LOT = 24,
  StaticObject_TypeAndConfidence_Type_StaticObject_TypeAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StaticObject_TypeAndConfidence_Type_StaticObject_TypeAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StaticObject_TypeAndConfidence_Type_IsValid(int value);
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence_Type_Type_MIN = StaticObject_TypeAndConfidence_Type_UNKNOWN_TYPE;
const StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence_Type_Type_MAX = StaticObject_TypeAndConfidence_Type_BARRIER_PARKING_LOT;
const int StaticObject_TypeAndConfidence_Type_Type_ARRAYSIZE = StaticObject_TypeAndConfidence_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* StaticObject_TypeAndConfidence_Type_descriptor();
inline const ::std::string& StaticObject_TypeAndConfidence_Type_Name(StaticObject_TypeAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    StaticObject_TypeAndConfidence_Type_descriptor(), value);
}
inline bool StaticObject_TypeAndConfidence_Type_Parse(
    const ::std::string& name, StaticObject_TypeAndConfidence_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StaticObject_TypeAndConfidence_Type>(
    StaticObject_TypeAndConfidence_Type_descriptor(), name, value);
}
enum StaticObject_SurfaceTypeAndConfidence_Type {
  StaticObject_SurfaceTypeAndConfidence_Type_UNKNOWN_TYPE = 0,
  StaticObject_SurfaceTypeAndConfidence_Type_FLAT = 1,
  StaticObject_SurfaceTypeAndConfidence_Type_ROUGH = 2,
  StaticObject_SurfaceTypeAndConfidence_Type_StaticObject_SurfaceTypeAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StaticObject_SurfaceTypeAndConfidence_Type_StaticObject_SurfaceTypeAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StaticObject_SurfaceTypeAndConfidence_Type_IsValid(int value);
const StaticObject_SurfaceTypeAndConfidence_Type StaticObject_SurfaceTypeAndConfidence_Type_Type_MIN = StaticObject_SurfaceTypeAndConfidence_Type_UNKNOWN_TYPE;
const StaticObject_SurfaceTypeAndConfidence_Type StaticObject_SurfaceTypeAndConfidence_Type_Type_MAX = StaticObject_SurfaceTypeAndConfidence_Type_ROUGH;
const int StaticObject_SurfaceTypeAndConfidence_Type_Type_ARRAYSIZE = StaticObject_SurfaceTypeAndConfidence_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* StaticObject_SurfaceTypeAndConfidence_Type_descriptor();
inline const ::std::string& StaticObject_SurfaceTypeAndConfidence_Type_Name(StaticObject_SurfaceTypeAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    StaticObject_SurfaceTypeAndConfidence_Type_descriptor(), value);
}
inline bool StaticObject_SurfaceTypeAndConfidence_Type_Parse(
    const ::std::string& name, StaticObject_SurfaceTypeAndConfidence_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StaticObject_SurfaceTypeAndConfidence_Type>(
    StaticObject_SurfaceTypeAndConfidence_Type_descriptor(), name, value);
}
enum StaticObject_SurfaceMaterialAndConfidence_Type {
  StaticObject_SurfaceMaterialAndConfidence_Type_UNKNOWN_TYPE = 0,
  StaticObject_SurfaceMaterialAndConfidence_Type_METAL = 1,
  StaticObject_SurfaceMaterialAndConfidence_Type_CONCRETE = 2,
  StaticObject_SurfaceMaterialAndConfidence_Type_STONE = 3,
  StaticObject_SurfaceMaterialAndConfidence_Type_WOOD = 4,
  StaticObject_SurfaceMaterialAndConfidence_Type_PLASTIC = 5,
  StaticObject_SurfaceMaterialAndConfidence_Type_ASPHALT = 6,
  StaticObject_SurfaceMaterialAndConfidence_Type_ORGANIC = 7,
  StaticObject_SurfaceMaterialAndConfidence_Type_StaticObject_SurfaceMaterialAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StaticObject_SurfaceMaterialAndConfidence_Type_StaticObject_SurfaceMaterialAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StaticObject_SurfaceMaterialAndConfidence_Type_IsValid(int value);
const StaticObject_SurfaceMaterialAndConfidence_Type StaticObject_SurfaceMaterialAndConfidence_Type_Type_MIN = StaticObject_SurfaceMaterialAndConfidence_Type_UNKNOWN_TYPE;
const StaticObject_SurfaceMaterialAndConfidence_Type StaticObject_SurfaceMaterialAndConfidence_Type_Type_MAX = StaticObject_SurfaceMaterialAndConfidence_Type_ORGANIC;
const int StaticObject_SurfaceMaterialAndConfidence_Type_Type_ARRAYSIZE = StaticObject_SurfaceMaterialAndConfidence_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* StaticObject_SurfaceMaterialAndConfidence_Type_descriptor();
inline const ::std::string& StaticObject_SurfaceMaterialAndConfidence_Type_Name(StaticObject_SurfaceMaterialAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    StaticObject_SurfaceMaterialAndConfidence_Type_descriptor(), value);
}
inline bool StaticObject_SurfaceMaterialAndConfidence_Type_Parse(
    const ::std::string& name, StaticObject_SurfaceMaterialAndConfidence_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StaticObject_SurfaceMaterialAndConfidence_Type>(
    StaticObject_SurfaceMaterialAndConfidence_Type_descriptor(), name, value);
}
enum StaticObject_SurfaceColorAndConfidence_Type {
  StaticObject_SurfaceColorAndConfidence_Type_UNKOWN_TYPE = 0,
  StaticObject_SurfaceColorAndConfidence_Type_OTHER = 1,
  StaticObject_SurfaceColorAndConfidence_Type_WHITE = 2,
  StaticObject_SurfaceColorAndConfidence_Type_GRAY = 3,
  StaticObject_SurfaceColorAndConfidence_Type_GRAY_LIGHT = 4,
  StaticObject_SurfaceColorAndConfidence_Type_GRAY_DARK = 5,
  StaticObject_SurfaceColorAndConfidence_Type_BLACK = 6,
  StaticObject_SurfaceColorAndConfidence_Type_RED = 7,
  StaticObject_SurfaceColorAndConfidence_Type_GREEN = 8,
  StaticObject_SurfaceColorAndConfidence_Type_BLUE = 9,
  StaticObject_SurfaceColorAndConfidence_Type_StaticObject_SurfaceColorAndConfidence_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StaticObject_SurfaceColorAndConfidence_Type_StaticObject_SurfaceColorAndConfidence_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StaticObject_SurfaceColorAndConfidence_Type_IsValid(int value);
const StaticObject_SurfaceColorAndConfidence_Type StaticObject_SurfaceColorAndConfidence_Type_Type_MIN = StaticObject_SurfaceColorAndConfidence_Type_UNKOWN_TYPE;
const StaticObject_SurfaceColorAndConfidence_Type StaticObject_SurfaceColorAndConfidence_Type_Type_MAX = StaticObject_SurfaceColorAndConfidence_Type_BLUE;
const int StaticObject_SurfaceColorAndConfidence_Type_Type_ARRAYSIZE = StaticObject_SurfaceColorAndConfidence_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* StaticObject_SurfaceColorAndConfidence_Type_descriptor();
inline const ::std::string& StaticObject_SurfaceColorAndConfidence_Type_Name(StaticObject_SurfaceColorAndConfidence_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    StaticObject_SurfaceColorAndConfidence_Type_descriptor(), value);
}
inline bool StaticObject_SurfaceColorAndConfidence_Type_Parse(
    const ::std::string& name, StaticObject_SurfaceColorAndConfidence_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StaticObject_SurfaceColorAndConfidence_Type>(
    StaticObject_SurfaceColorAndConfidence_Type_descriptor(), name, value);
}
// ===================================================================

class MovableObject_TypeAndConfidence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence) */ {
 public:
  MovableObject_TypeAndConfidence();
  virtual ~MovableObject_TypeAndConfidence();

  MovableObject_TypeAndConfidence(const MovableObject_TypeAndConfidence& from);

  inline MovableObject_TypeAndConfidence& operator=(const MovableObject_TypeAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MovableObject_TypeAndConfidence(MovableObject_TypeAndConfidence&& from) noexcept
    : MovableObject_TypeAndConfidence() {
    *this = ::std::move(from);
  }

  inline MovableObject_TypeAndConfidence& operator=(MovableObject_TypeAndConfidence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MovableObject_TypeAndConfidence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MovableObject_TypeAndConfidence* internal_default_instance() {
    return reinterpret_cast<const MovableObject_TypeAndConfidence*>(
               &_MovableObject_TypeAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(MovableObject_TypeAndConfidence* other);
  void Swap(MovableObject_TypeAndConfidence* other);
  friend void swap(MovableObject_TypeAndConfidence& a, MovableObject_TypeAndConfidence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MovableObject_TypeAndConfidence* New() const final {
    return CreateMaybeMessage<MovableObject_TypeAndConfidence>(NULL);
  }

  MovableObject_TypeAndConfidence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MovableObject_TypeAndConfidence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MovableObject_TypeAndConfidence& from);
  void MergeFrom(const MovableObject_TypeAndConfidence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovableObject_TypeAndConfidence* other);
  protected:
  explicit MovableObject_TypeAndConfidence(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MovableObject_TypeAndConfidence_Type Type;
  static const Type UNKNOWN_TYPE =
    MovableObject_TypeAndConfidence_Type_UNKNOWN_TYPE;
  static const Type VEHICLE =
    MovableObject_TypeAndConfidence_Type_VEHICLE;
  static const Type VEHICLE_PASSENGER_CAR =
    MovableObject_TypeAndConfidence_Type_VEHICLE_PASSENGER_CAR;
  static const Type VEHICLE_TRUCK =
    MovableObject_TypeAndConfidence_Type_VEHICLE_TRUCK;
  static const Type VEHICLE_BUS =
    MovableObject_TypeAndConfidence_Type_VEHICLE_BUS;
  static const Type VEHICLE_TRAM =
    MovableObject_TypeAndConfidence_Type_VEHICLE_TRAM;
  static const Type VEHICLE_TRAILER =
    MovableObject_TypeAndConfidence_Type_VEHICLE_TRAILER;
  static const Type TWO_WHEELER =
    MovableObject_TypeAndConfidence_Type_TWO_WHEELER;
  static const Type TWO_WHEELER_MOTORCYCLE =
    MovableObject_TypeAndConfidence_Type_TWO_WHEELER_MOTORCYCLE;
  static const Type TWO_WHEELER_BICYCLE =
    MovableObject_TypeAndConfidence_Type_TWO_WHEELER_BICYCLE;
  static const Type PERSON =
    MovableObject_TypeAndConfidence_Type_PERSON;
  static const Type ANIMAL =
    MovableObject_TypeAndConfidence_Type_ANIMAL;
  static inline bool Type_IsValid(int value) {
    return MovableObject_TypeAndConfidence_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MovableObject_TypeAndConfidence_Type_Type_MIN;
  static const Type Type_MAX =
    MovableObject_TypeAndConfidence_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MovableObject_TypeAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MovableObject_TypeAndConfidence_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MovableObject_TypeAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MovableObject_TypeAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  public:
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  ::sensoris::protobuf::types::base::Confidence* release_confidence();
  ::sensoris::protobuf::types::base::Confidence* mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence);
  void unsafe_arena_set_allocated_confidence(
      ::sensoris::protobuf::types::base::Confidence* confidence);
  ::sensoris::protobuf::types::base::Confidence* unsafe_arena_release_confidence();

  // .sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence_Type value);

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::base::Confidence* confidence_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MovableObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.objectdetection.MovableObject) */ {
 public:
  MovableObject();
  virtual ~MovableObject();

  MovableObject(const MovableObject& from);

  inline MovableObject& operator=(const MovableObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MovableObject(MovableObject&& from) noexcept
    : MovableObject() {
    *this = ::std::move(from);
  }

  inline MovableObject& operator=(MovableObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MovableObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MovableObject* internal_default_instance() {
    return reinterpret_cast<const MovableObject*>(
               &_MovableObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(MovableObject* other);
  void Swap(MovableObject* other);
  friend void swap(MovableObject& a, MovableObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MovableObject* New() const final {
    return CreateMaybeMessage<MovableObject>(NULL);
  }

  MovableObject* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MovableObject>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MovableObject& from);
  void MergeFrom(const MovableObject& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovableObject* other);
  protected:
  explicit MovableObject(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MovableObject_TypeAndConfidence TypeAndConfidence;

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope();
  static const int kEnvelopeFieldNumber = 1;
  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  public:
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* envelope);
  void unsafe_arena_set_allocated_envelope(
      ::sensoris::protobuf::types::base::EventEnvelope* envelope);
  ::sensoris::protobuf::types::base::EventEnvelope* unsafe_arena_release_envelope();

  // .google.protobuf.Int64Value object_id = 2;
  bool has_object_id() const;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  private:
  const ::google::protobuf::Int64Value& _internal_object_id() const;
  public:
  const ::google::protobuf::Int64Value& object_id() const;
  ::google::protobuf::Int64Value* release_object_id();
  ::google::protobuf::Int64Value* mutable_object_id();
  void set_allocated_object_id(::google::protobuf::Int64Value* object_id);
  void unsafe_arena_set_allocated_object_id(
      ::google::protobuf::Int64Value* object_id);
  ::google::protobuf::Int64Value* unsafe_arena_release_object_id();

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
  bool has_existence_confidence() const;
  void clear_existence_confidence();
  static const int kExistenceConfidenceFieldNumber = 3;
  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_existence_confidence() const;
  public:
  const ::sensoris::protobuf::types::base::Confidence& existence_confidence() const;
  ::sensoris::protobuf::types::base::Confidence* release_existence_confidence();
  ::sensoris::protobuf::types::base::Confidence* mutable_existence_confidence();
  void set_allocated_existence_confidence(::sensoris::protobuf::types::base::Confidence* existence_confidence);
  void unsafe_arena_set_allocated_existence_confidence(
      ::sensoris::protobuf::types::base::Confidence* existence_confidence);
  ::sensoris::protobuf::types::base::Confidence* unsafe_arena_release_existence_confidence();

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
  bool has_detection_status() const;
  void clear_detection_status();
  static const int kDetectionStatusFieldNumber = 4;
  private:
  const ::sensoris::protobuf::types::base::EventDetectionStatus& _internal_detection_status() const;
  public:
  const ::sensoris::protobuf::types::base::EventDetectionStatus& detection_status() const;
  ::sensoris::protobuf::types::base::EventDetectionStatus* release_detection_status();
  ::sensoris::protobuf::types::base::EventDetectionStatus* mutable_detection_status();
  void set_allocated_detection_status(::sensoris::protobuf::types::base::EventDetectionStatus* detection_status);
  void unsafe_arena_set_allocated_detection_status(
      ::sensoris::protobuf::types::base::EventDetectionStatus* detection_status);
  ::sensoris::protobuf::types::base::EventDetectionStatus* unsafe_arena_release_detection_status();

  // .sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence type_and_confidence = 5;
  bool has_type_and_confidence() const;
  void clear_type_and_confidence();
  static const int kTypeAndConfidenceFieldNumber = 5;
  private:
  const ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence& _internal_type_and_confidence() const;
  public:
  const ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence& type_and_confidence() const;
  ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence* release_type_and_confidence();
  ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence* mutable_type_and_confidence();
  void set_allocated_type_and_confidence(::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence* type_and_confidence);
  void unsafe_arena_set_allocated_type_and_confidence(
      ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence* type_and_confidence);
  ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence* unsafe_arena_release_type_and_confidence();

  // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 6;
  bool has_rectangular_box_and_accuracy() const;
  void clear_rectangular_box_and_accuracy();
  static const int kRectangularBoxAndAccuracyFieldNumber = 6;
  private:
  const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy& _internal_rectangular_box_and_accuracy() const;
  public:
  const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy& rectangular_box_and_accuracy() const;
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* release_rectangular_box_and_accuracy();
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* mutable_rectangular_box_and_accuracy();
  void set_allocated_rectangular_box_and_accuracy(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* rectangular_box_and_accuracy);
  void unsafe_arena_set_allocated_rectangular_box_and_accuracy(
      ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* rectangular_box_and_accuracy);
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* unsafe_arena_release_rectangular_box_and_accuracy();

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy speed_and_accuracy = 7 [(.sensoris.protobuf.types.base.exponent) = 1];
  bool has_speed_and_accuracy() const;
  void clear_speed_and_accuracy();
  static const int kSpeedAndAccuracyFieldNumber = 7;
  private:
  const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy& _internal_speed_and_accuracy() const;
  public:
  const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy& speed_and_accuracy() const;
  ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* release_speed_and_accuracy();
  ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* mutable_speed_and_accuracy();
  void set_allocated_speed_and_accuracy(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* speed_and_accuracy);
  void unsafe_arena_set_allocated_speed_and_accuracy(
      ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* speed_and_accuracy);
  ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* unsafe_arena_release_speed_and_accuracy();

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy acceleration_and_accuracy = 8 [(.sensoris.protobuf.types.base.exponent) = 1];
  bool has_acceleration_and_accuracy() const;
  void clear_acceleration_and_accuracy();
  static const int kAccelerationAndAccuracyFieldNumber = 8;
  private:
  const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy& _internal_acceleration_and_accuracy() const;
  public:
  const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy& acceleration_and_accuracy() const;
  ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* release_acceleration_and_accuracy();
  ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* mutable_acceleration_and_accuracy();
  void set_allocated_acceleration_and_accuracy(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* acceleration_and_accuracy);
  void unsafe_arena_set_allocated_acceleration_and_accuracy(
      ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* acceleration_and_accuracy);
  ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* unsafe_arena_release_acceleration_and_accuracy();

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.objectdetection.MovableObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::base::EventEnvelope* envelope_;
  ::google::protobuf::Int64Value* object_id_;
  ::sensoris::protobuf::types::base::Confidence* existence_confidence_;
  ::sensoris::protobuf::types::base::EventDetectionStatus* detection_status_;
  ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence* type_and_confidence_;
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* rectangular_box_and_accuracy_;
  ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* speed_and_accuracy_;
  ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* acceleration_and_accuracy_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StaticObject_TypeAndConfidence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence) */ {
 public:
  StaticObject_TypeAndConfidence();
  virtual ~StaticObject_TypeAndConfidence();

  StaticObject_TypeAndConfidence(const StaticObject_TypeAndConfidence& from);

  inline StaticObject_TypeAndConfidence& operator=(const StaticObject_TypeAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StaticObject_TypeAndConfidence(StaticObject_TypeAndConfidence&& from) noexcept
    : StaticObject_TypeAndConfidence() {
    *this = ::std::move(from);
  }

  inline StaticObject_TypeAndConfidence& operator=(StaticObject_TypeAndConfidence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StaticObject_TypeAndConfidence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StaticObject_TypeAndConfidence* internal_default_instance() {
    return reinterpret_cast<const StaticObject_TypeAndConfidence*>(
               &_StaticObject_TypeAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(StaticObject_TypeAndConfidence* other);
  void Swap(StaticObject_TypeAndConfidence* other);
  friend void swap(StaticObject_TypeAndConfidence& a, StaticObject_TypeAndConfidence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StaticObject_TypeAndConfidence* New() const final {
    return CreateMaybeMessage<StaticObject_TypeAndConfidence>(NULL);
  }

  StaticObject_TypeAndConfidence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StaticObject_TypeAndConfidence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StaticObject_TypeAndConfidence& from);
  void MergeFrom(const StaticObject_TypeAndConfidence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaticObject_TypeAndConfidence* other);
  protected:
  explicit StaticObject_TypeAndConfidence(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StaticObject_TypeAndConfidence_Type Type;
  static const Type UNKNOWN_TYPE =
    StaticObject_TypeAndConfidence_Type_UNKNOWN_TYPE;
  static const Type BRIDGE =
    StaticObject_TypeAndConfidence_Type_BRIDGE;
  static const Type TUNNEL =
    StaticObject_TypeAndConfidence_Type_TUNNEL;
  static const Type POLE =
    StaticObject_TypeAndConfidence_Type_POLE;
  static const Type POLE_LIGHT =
    StaticObject_TypeAndConfidence_Type_POLE_LIGHT;
  static const Type POLE_REFLECTOR =
    StaticObject_TypeAndConfidence_Type_POLE_REFLECTOR;
  static const Type POLE_DELINEATOR =
    StaticObject_TypeAndConfidence_Type_POLE_DELINEATOR;
  static const Type POLE_GANTRY =
    StaticObject_TypeAndConfidence_Type_POLE_GANTRY;
  static const Type POLE_SIGN =
    StaticObject_TypeAndConfidence_Type_POLE_SIGN;
  static const Type POLE_GUARD_RAIL =
    StaticObject_TypeAndConfidence_Type_POLE_GUARD_RAIL;
  static const Type BAR =
    StaticObject_TypeAndConfidence_Type_BAR;
  static const Type TREE =
    StaticObject_TypeAndConfidence_Type_TREE;
  static const Type BOLLARD =
    StaticObject_TypeAndConfidence_Type_BOLLARD;
  static const Type CONE =
    StaticObject_TypeAndConfidence_Type_CONE;
  static const Type BARREL =
    StaticObject_TypeAndConfidence_Type_BARREL;
  static const Type WALL =
    StaticObject_TypeAndConfidence_Type_WALL;
  static const Type TRAFFIC_ISLAND =
    StaticObject_TypeAndConfidence_Type_TRAFFIC_ISLAND;
  static const Type SPEED_BUMP =
    StaticObject_TypeAndConfidence_Type_SPEED_BUMP;
  static const Type POT_HOLE =
    StaticObject_TypeAndConfidence_Type_POT_HOLE;
  static const Type MANHOLE_COVER =
    StaticObject_TypeAndConfidence_Type_MANHOLE_COVER;
  static const Type MANHOLE_COVER_CLOSED =
    StaticObject_TypeAndConfidence_Type_MANHOLE_COVER_CLOSED;
  static const Type MANHOLE_COVER_OPEN =
    StaticObject_TypeAndConfidence_Type_MANHOLE_COVER_OPEN;
  static const Type SIGN_BRIDGE =
    StaticObject_TypeAndConfidence_Type_SIGN_BRIDGE;
  static const Type TRAFFIC_LIGHT_BODY =
    StaticObject_TypeAndConfidence_Type_TRAFFIC_LIGHT_BODY;
  static const Type BARRIER_PARKING_LOT =
    StaticObject_TypeAndConfidence_Type_BARRIER_PARKING_LOT;
  static inline bool Type_IsValid(int value) {
    return StaticObject_TypeAndConfidence_Type_IsValid(value);
  }
  static const Type Type_MIN =
    StaticObject_TypeAndConfidence_Type_Type_MIN;
  static const Type Type_MAX =
    StaticObject_TypeAndConfidence_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    StaticObject_TypeAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return StaticObject_TypeAndConfidence_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return StaticObject_TypeAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return StaticObject_TypeAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  public:
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  ::sensoris::protobuf::types::base::Confidence* release_confidence();
  ::sensoris::protobuf::types::base::Confidence* mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence);
  void unsafe_arena_set_allocated_confidence(
      ::sensoris::protobuf::types::base::Confidence* confidence);
  ::sensoris::protobuf::types::base::Confidence* unsafe_arena_release_confidence();

  // .sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence_Type value);

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::base::Confidence* confidence_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StaticObject_ConeAndAccuracy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy) */ {
 public:
  StaticObject_ConeAndAccuracy();
  virtual ~StaticObject_ConeAndAccuracy();

  StaticObject_ConeAndAccuracy(const StaticObject_ConeAndAccuracy& from);

  inline StaticObject_ConeAndAccuracy& operator=(const StaticObject_ConeAndAccuracy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StaticObject_ConeAndAccuracy(StaticObject_ConeAndAccuracy&& from) noexcept
    : StaticObject_ConeAndAccuracy() {
    *this = ::std::move(from);
  }

  inline StaticObject_ConeAndAccuracy& operator=(StaticObject_ConeAndAccuracy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StaticObject_ConeAndAccuracy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StaticObject_ConeAndAccuracy* internal_default_instance() {
    return reinterpret_cast<const StaticObject_ConeAndAccuracy*>(
               &_StaticObject_ConeAndAccuracy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(StaticObject_ConeAndAccuracy* other);
  void Swap(StaticObject_ConeAndAccuracy* other);
  friend void swap(StaticObject_ConeAndAccuracy& a, StaticObject_ConeAndAccuracy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StaticObject_ConeAndAccuracy* New() const final {
    return CreateMaybeMessage<StaticObject_ConeAndAccuracy>(NULL);
  }

  StaticObject_ConeAndAccuracy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StaticObject_ConeAndAccuracy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StaticObject_ConeAndAccuracy& from);
  void MergeFrom(const StaticObject_ConeAndAccuracy& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaticObject_ConeAndAccuracy* other);
  protected:
  explicit StaticObject_ConeAndAccuracy(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 15;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 15;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy lower_position_and_accuracy = 1;
  bool has_lower_position_and_accuracy() const;
  void clear_lower_position_and_accuracy();
  static const int kLowerPositionAndAccuracyFieldNumber = 1;
  private:
  const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& _internal_lower_position_and_accuracy() const;
  public:
  const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& lower_position_and_accuracy() const;
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* release_lower_position_and_accuracy();
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* mutable_lower_position_and_accuracy();
  void set_allocated_lower_position_and_accuracy(::sensoris::protobuf::types::spatial::PositionAndAccuracy* lower_position_and_accuracy);
  void unsafe_arena_set_allocated_lower_position_and_accuracy(
      ::sensoris::protobuf::types::spatial::PositionAndAccuracy* lower_position_and_accuracy);
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* unsafe_arena_release_lower_position_and_accuracy();

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy upper_position_and_accuracy = 2;
  bool has_upper_position_and_accuracy() const;
  void clear_upper_position_and_accuracy();
  static const int kUpperPositionAndAccuracyFieldNumber = 2;
  private:
  const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& _internal_upper_position_and_accuracy() const;
  public:
  const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& upper_position_and_accuracy() const;
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* release_upper_position_and_accuracy();
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* mutable_upper_position_and_accuracy();
  void set_allocated_upper_position_and_accuracy(::sensoris::protobuf::types::spatial::PositionAndAccuracy* upper_position_and_accuracy);
  void unsafe_arena_set_allocated_upper_position_and_accuracy(
      ::sensoris::protobuf::types::spatial::PositionAndAccuracy* upper_position_and_accuracy);
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* unsafe_arena_release_upper_position_and_accuracy();

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy lower_diameter_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  bool has_lower_diameter_and_accuracy() const;
  void clear_lower_diameter_and_accuracy();
  static const int kLowerDiameterAndAccuracyFieldNumber = 3;
  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_lower_diameter_and_accuracy() const;
  public:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& lower_diameter_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* release_lower_diameter_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* mutable_lower_diameter_and_accuracy();
  void set_allocated_lower_diameter_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* lower_diameter_and_accuracy);
  void unsafe_arena_set_allocated_lower_diameter_and_accuracy(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* lower_diameter_and_accuracy);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* unsafe_arena_release_lower_diameter_and_accuracy();

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy upper_diameter_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  bool has_upper_diameter_and_accuracy() const;
  void clear_upper_diameter_and_accuracy();
  static const int kUpperDiameterAndAccuracyFieldNumber = 4;
  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_upper_diameter_and_accuracy() const;
  public:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& upper_diameter_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* release_upper_diameter_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* mutable_upper_diameter_and_accuracy();
  void set_allocated_upper_diameter_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* upper_diameter_and_accuracy);
  void unsafe_arena_set_allocated_upper_diameter_and_accuracy(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* upper_diameter_and_accuracy);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* unsafe_arena_release_upper_diameter_and_accuracy();

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* lower_position_and_accuracy_;
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* upper_position_and_accuracy_;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* lower_diameter_and_accuracy_;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* upper_diameter_and_accuracy_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StaticObject_SurfaceTypeAndConfidence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence) */ {
 public:
  StaticObject_SurfaceTypeAndConfidence();
  virtual ~StaticObject_SurfaceTypeAndConfidence();

  StaticObject_SurfaceTypeAndConfidence(const StaticObject_SurfaceTypeAndConfidence& from);

  inline StaticObject_SurfaceTypeAndConfidence& operator=(const StaticObject_SurfaceTypeAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StaticObject_SurfaceTypeAndConfidence(StaticObject_SurfaceTypeAndConfidence&& from) noexcept
    : StaticObject_SurfaceTypeAndConfidence() {
    *this = ::std::move(from);
  }

  inline StaticObject_SurfaceTypeAndConfidence& operator=(StaticObject_SurfaceTypeAndConfidence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StaticObject_SurfaceTypeAndConfidence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StaticObject_SurfaceTypeAndConfidence* internal_default_instance() {
    return reinterpret_cast<const StaticObject_SurfaceTypeAndConfidence*>(
               &_StaticObject_SurfaceTypeAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(StaticObject_SurfaceTypeAndConfidence* other);
  void Swap(StaticObject_SurfaceTypeAndConfidence* other);
  friend void swap(StaticObject_SurfaceTypeAndConfidence& a, StaticObject_SurfaceTypeAndConfidence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StaticObject_SurfaceTypeAndConfidence* New() const final {
    return CreateMaybeMessage<StaticObject_SurfaceTypeAndConfidence>(NULL);
  }

  StaticObject_SurfaceTypeAndConfidence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StaticObject_SurfaceTypeAndConfidence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StaticObject_SurfaceTypeAndConfidence& from);
  void MergeFrom(const StaticObject_SurfaceTypeAndConfidence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaticObject_SurfaceTypeAndConfidence* other);
  protected:
  explicit StaticObject_SurfaceTypeAndConfidence(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StaticObject_SurfaceTypeAndConfidence_Type Type;
  static const Type UNKNOWN_TYPE =
    StaticObject_SurfaceTypeAndConfidence_Type_UNKNOWN_TYPE;
  static const Type FLAT =
    StaticObject_SurfaceTypeAndConfidence_Type_FLAT;
  static const Type ROUGH =
    StaticObject_SurfaceTypeAndConfidence_Type_ROUGH;
  static inline bool Type_IsValid(int value) {
    return StaticObject_SurfaceTypeAndConfidence_Type_IsValid(value);
  }
  static const Type Type_MIN =
    StaticObject_SurfaceTypeAndConfidence_Type_Type_MIN;
  static const Type Type_MAX =
    StaticObject_SurfaceTypeAndConfidence_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    StaticObject_SurfaceTypeAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return StaticObject_SurfaceTypeAndConfidence_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return StaticObject_SurfaceTypeAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return StaticObject_SurfaceTypeAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  public:
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  ::sensoris::protobuf::types::base::Confidence* release_confidence();
  ::sensoris::protobuf::types::base::Confidence* mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence);
  void unsafe_arena_set_allocated_confidence(
      ::sensoris::protobuf::types::base::Confidence* confidence);
  ::sensoris::protobuf::types::base::Confidence* unsafe_arena_release_confidence();

  // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence_Type value);

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::base::Confidence* confidence_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StaticObject_SurfaceMaterialAndConfidence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence) */ {
 public:
  StaticObject_SurfaceMaterialAndConfidence();
  virtual ~StaticObject_SurfaceMaterialAndConfidence();

  StaticObject_SurfaceMaterialAndConfidence(const StaticObject_SurfaceMaterialAndConfidence& from);

  inline StaticObject_SurfaceMaterialAndConfidence& operator=(const StaticObject_SurfaceMaterialAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StaticObject_SurfaceMaterialAndConfidence(StaticObject_SurfaceMaterialAndConfidence&& from) noexcept
    : StaticObject_SurfaceMaterialAndConfidence() {
    *this = ::std::move(from);
  }

  inline StaticObject_SurfaceMaterialAndConfidence& operator=(StaticObject_SurfaceMaterialAndConfidence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StaticObject_SurfaceMaterialAndConfidence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StaticObject_SurfaceMaterialAndConfidence* internal_default_instance() {
    return reinterpret_cast<const StaticObject_SurfaceMaterialAndConfidence*>(
               &_StaticObject_SurfaceMaterialAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(StaticObject_SurfaceMaterialAndConfidence* other);
  void Swap(StaticObject_SurfaceMaterialAndConfidence* other);
  friend void swap(StaticObject_SurfaceMaterialAndConfidence& a, StaticObject_SurfaceMaterialAndConfidence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StaticObject_SurfaceMaterialAndConfidence* New() const final {
    return CreateMaybeMessage<StaticObject_SurfaceMaterialAndConfidence>(NULL);
  }

  StaticObject_SurfaceMaterialAndConfidence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StaticObject_SurfaceMaterialAndConfidence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StaticObject_SurfaceMaterialAndConfidence& from);
  void MergeFrom(const StaticObject_SurfaceMaterialAndConfidence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaticObject_SurfaceMaterialAndConfidence* other);
  protected:
  explicit StaticObject_SurfaceMaterialAndConfidence(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StaticObject_SurfaceMaterialAndConfidence_Type Type;
  static const Type UNKNOWN_TYPE =
    StaticObject_SurfaceMaterialAndConfidence_Type_UNKNOWN_TYPE;
  static const Type METAL =
    StaticObject_SurfaceMaterialAndConfidence_Type_METAL;
  static const Type CONCRETE =
    StaticObject_SurfaceMaterialAndConfidence_Type_CONCRETE;
  static const Type STONE =
    StaticObject_SurfaceMaterialAndConfidence_Type_STONE;
  static const Type WOOD =
    StaticObject_SurfaceMaterialAndConfidence_Type_WOOD;
  static const Type PLASTIC =
    StaticObject_SurfaceMaterialAndConfidence_Type_PLASTIC;
  static const Type ASPHALT =
    StaticObject_SurfaceMaterialAndConfidence_Type_ASPHALT;
  static const Type ORGANIC =
    StaticObject_SurfaceMaterialAndConfidence_Type_ORGANIC;
  static inline bool Type_IsValid(int value) {
    return StaticObject_SurfaceMaterialAndConfidence_Type_IsValid(value);
  }
  static const Type Type_MIN =
    StaticObject_SurfaceMaterialAndConfidence_Type_Type_MIN;
  static const Type Type_MAX =
    StaticObject_SurfaceMaterialAndConfidence_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    StaticObject_SurfaceMaterialAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return StaticObject_SurfaceMaterialAndConfidence_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return StaticObject_SurfaceMaterialAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return StaticObject_SurfaceMaterialAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  public:
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  ::sensoris::protobuf::types::base::Confidence* release_confidence();
  ::sensoris::protobuf::types::base::Confidence* mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence);
  void unsafe_arena_set_allocated_confidence(
      ::sensoris::protobuf::types::base::Confidence* confidence);
  ::sensoris::protobuf::types::base::Confidence* unsafe_arena_release_confidence();

  // .sensoris.protobuf.types.base.Int64ValueAndAccuracy reflectivity_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  bool has_reflectivity_and_accuracy() const;
  void clear_reflectivity_and_accuracy();
  static const int kReflectivityAndAccuracyFieldNumber = 3;
  private:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& _internal_reflectivity_and_accuracy() const;
  public:
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& reflectivity_and_accuracy() const;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* release_reflectivity_and_accuracy();
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* mutable_reflectivity_and_accuracy();
  void set_allocated_reflectivity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* reflectivity_and_accuracy);
  void unsafe_arena_set_allocated_reflectivity_and_accuracy(
      ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* reflectivity_and_accuracy);
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* unsafe_arena_release_reflectivity_and_accuracy();

  // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence_Type value);

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::base::Confidence* confidence_;
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* reflectivity_and_accuracy_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StaticObject_SurfaceColorAndConfidence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence) */ {
 public:
  StaticObject_SurfaceColorAndConfidence();
  virtual ~StaticObject_SurfaceColorAndConfidence();

  StaticObject_SurfaceColorAndConfidence(const StaticObject_SurfaceColorAndConfidence& from);

  inline StaticObject_SurfaceColorAndConfidence& operator=(const StaticObject_SurfaceColorAndConfidence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StaticObject_SurfaceColorAndConfidence(StaticObject_SurfaceColorAndConfidence&& from) noexcept
    : StaticObject_SurfaceColorAndConfidence() {
    *this = ::std::move(from);
  }

  inline StaticObject_SurfaceColorAndConfidence& operator=(StaticObject_SurfaceColorAndConfidence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StaticObject_SurfaceColorAndConfidence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StaticObject_SurfaceColorAndConfidence* internal_default_instance() {
    return reinterpret_cast<const StaticObject_SurfaceColorAndConfidence*>(
               &_StaticObject_SurfaceColorAndConfidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(StaticObject_SurfaceColorAndConfidence* other);
  void Swap(StaticObject_SurfaceColorAndConfidence* other);
  friend void swap(StaticObject_SurfaceColorAndConfidence& a, StaticObject_SurfaceColorAndConfidence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StaticObject_SurfaceColorAndConfidence* New() const final {
    return CreateMaybeMessage<StaticObject_SurfaceColorAndConfidence>(NULL);
  }

  StaticObject_SurfaceColorAndConfidence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StaticObject_SurfaceColorAndConfidence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StaticObject_SurfaceColorAndConfidence& from);
  void MergeFrom(const StaticObject_SurfaceColorAndConfidence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaticObject_SurfaceColorAndConfidence* other);
  protected:
  explicit StaticObject_SurfaceColorAndConfidence(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StaticObject_SurfaceColorAndConfidence_Type Type;
  static const Type UNKOWN_TYPE =
    StaticObject_SurfaceColorAndConfidence_Type_UNKOWN_TYPE;
  static const Type OTHER =
    StaticObject_SurfaceColorAndConfidence_Type_OTHER;
  static const Type WHITE =
    StaticObject_SurfaceColorAndConfidence_Type_WHITE;
  static const Type GRAY =
    StaticObject_SurfaceColorAndConfidence_Type_GRAY;
  static const Type GRAY_LIGHT =
    StaticObject_SurfaceColorAndConfidence_Type_GRAY_LIGHT;
  static const Type GRAY_DARK =
    StaticObject_SurfaceColorAndConfidence_Type_GRAY_DARK;
  static const Type BLACK =
    StaticObject_SurfaceColorAndConfidence_Type_BLACK;
  static const Type RED =
    StaticObject_SurfaceColorAndConfidence_Type_RED;
  static const Type GREEN =
    StaticObject_SurfaceColorAndConfidence_Type_GREEN;
  static const Type BLUE =
    StaticObject_SurfaceColorAndConfidence_Type_BLUE;
  static inline bool Type_IsValid(int value) {
    return StaticObject_SurfaceColorAndConfidence_Type_IsValid(value);
  }
  static const Type Type_MIN =
    StaticObject_SurfaceColorAndConfidence_Type_Type_MIN;
  static const Type Type_MAX =
    StaticObject_SurfaceColorAndConfidence_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    StaticObject_SurfaceColorAndConfidence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return StaticObject_SurfaceColorAndConfidence_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return StaticObject_SurfaceColorAndConfidence_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return StaticObject_SurfaceColorAndConfidence_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.base.Confidence confidence = 2;
  bool has_confidence() const;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_confidence() const;
  public:
  const ::sensoris::protobuf::types::base::Confidence& confidence() const;
  ::sensoris::protobuf::types::base::Confidence* release_confidence();
  ::sensoris::protobuf::types::base::Confidence* mutable_confidence();
  void set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence);
  void unsafe_arena_set_allocated_confidence(
      ::sensoris::protobuf::types::base::Confidence* confidence);
  ::sensoris::protobuf::types::base::Confidence* unsafe_arena_release_confidence();

  // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence_Type type() const;
  void set_type(::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence_Type value);

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::base::Confidence* confidence_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StaticObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.objectdetection.StaticObject) */ {
 public:
  StaticObject();
  virtual ~StaticObject();

  StaticObject(const StaticObject& from);

  inline StaticObject& operator=(const StaticObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StaticObject(StaticObject&& from) noexcept
    : StaticObject() {
    *this = ::std::move(from);
  }

  inline StaticObject& operator=(StaticObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StaticObject& default_instance();

  enum GeometryCase {
    kRectangularBoxAndAccuracy = 6,
    kConeAndAccuracy = 7,
    GEOMETRY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StaticObject* internal_default_instance() {
    return reinterpret_cast<const StaticObject*>(
               &_StaticObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(StaticObject* other);
  void Swap(StaticObject* other);
  friend void swap(StaticObject& a, StaticObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StaticObject* New() const final {
    return CreateMaybeMessage<StaticObject>(NULL);
  }

  StaticObject* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StaticObject>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StaticObject& from);
  void MergeFrom(const StaticObject& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaticObject* other);
  protected:
  explicit StaticObject(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StaticObject_TypeAndConfidence TypeAndConfidence;
  typedef StaticObject_ConeAndAccuracy ConeAndAccuracy;
  typedef StaticObject_SurfaceTypeAndConfidence SurfaceTypeAndConfidence;
  typedef StaticObject_SurfaceMaterialAndConfidence SurfaceMaterialAndConfidence;
  typedef StaticObject_SurfaceColorAndConfidence SurfaceColorAndConfidence;

  // accessors -------------------------------------------------------

  // repeated .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence surface_color_and_confidence = 10;
  int surface_color_and_confidence_size() const;
  void clear_surface_color_and_confidence();
  static const int kSurfaceColorAndConfidenceFieldNumber = 10;
  ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence* mutable_surface_color_and_confidence(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence >*
      mutable_surface_color_and_confidence();
  const ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence& surface_color_and_confidence(int index) const;
  ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence* add_surface_color_and_confidence();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence >&
      surface_color_and_confidence() const;

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope();
  static const int kEnvelopeFieldNumber = 1;
  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  public:
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* envelope);
  void unsafe_arena_set_allocated_envelope(
      ::sensoris::protobuf::types::base::EventEnvelope* envelope);
  ::sensoris::protobuf::types::base::EventEnvelope* unsafe_arena_release_envelope();

  // .google.protobuf.Int64Value object_id = 2;
  bool has_object_id() const;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  private:
  const ::google::protobuf::Int64Value& _internal_object_id() const;
  public:
  const ::google::protobuf::Int64Value& object_id() const;
  ::google::protobuf::Int64Value* release_object_id();
  ::google::protobuf::Int64Value* mutable_object_id();
  void set_allocated_object_id(::google::protobuf::Int64Value* object_id);
  void unsafe_arena_set_allocated_object_id(
      ::google::protobuf::Int64Value* object_id);
  ::google::protobuf::Int64Value* unsafe_arena_release_object_id();

  // .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
  bool has_existence_confidence() const;
  void clear_existence_confidence();
  static const int kExistenceConfidenceFieldNumber = 3;
  private:
  const ::sensoris::protobuf::types::base::Confidence& _internal_existence_confidence() const;
  public:
  const ::sensoris::protobuf::types::base::Confidence& existence_confidence() const;
  ::sensoris::protobuf::types::base::Confidence* release_existence_confidence();
  ::sensoris::protobuf::types::base::Confidence* mutable_existence_confidence();
  void set_allocated_existence_confidence(::sensoris::protobuf::types::base::Confidence* existence_confidence);
  void unsafe_arena_set_allocated_existence_confidence(
      ::sensoris::protobuf::types::base::Confidence* existence_confidence);
  ::sensoris::protobuf::types::base::Confidence* unsafe_arena_release_existence_confidence();

  // .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
  bool has_detection_status() const;
  void clear_detection_status();
  static const int kDetectionStatusFieldNumber = 4;
  private:
  const ::sensoris::protobuf::types::base::EventDetectionStatus& _internal_detection_status() const;
  public:
  const ::sensoris::protobuf::types::base::EventDetectionStatus& detection_status() const;
  ::sensoris::protobuf::types::base::EventDetectionStatus* release_detection_status();
  ::sensoris::protobuf::types::base::EventDetectionStatus* mutable_detection_status();
  void set_allocated_detection_status(::sensoris::protobuf::types::base::EventDetectionStatus* detection_status);
  void unsafe_arena_set_allocated_detection_status(
      ::sensoris::protobuf::types::base::EventDetectionStatus* detection_status);
  ::sensoris::protobuf::types::base::EventDetectionStatus* unsafe_arena_release_detection_status();

  // .sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence type_and_confidence = 5;
  bool has_type_and_confidence() const;
  void clear_type_and_confidence();
  static const int kTypeAndConfidenceFieldNumber = 5;
  private:
  const ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence& _internal_type_and_confidence() const;
  public:
  const ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence& type_and_confidence() const;
  ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence* release_type_and_confidence();
  ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence* mutable_type_and_confidence();
  void set_allocated_type_and_confidence(::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence* type_and_confidence);
  void unsafe_arena_set_allocated_type_and_confidence(
      ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence* type_and_confidence);
  ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence* unsafe_arena_release_type_and_confidence();

  // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence surface_type_and_confidence = 8;
  bool has_surface_type_and_confidence() const;
  void clear_surface_type_and_confidence();
  static const int kSurfaceTypeAndConfidenceFieldNumber = 8;
  private:
  const ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence& _internal_surface_type_and_confidence() const;
  public:
  const ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence& surface_type_and_confidence() const;
  ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence* release_surface_type_and_confidence();
  ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence* mutable_surface_type_and_confidence();
  void set_allocated_surface_type_and_confidence(::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence* surface_type_and_confidence);
  void unsafe_arena_set_allocated_surface_type_and_confidence(
      ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence* surface_type_and_confidence);
  ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence* unsafe_arena_release_surface_type_and_confidence();

  // .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence surface_material_and_confidence = 9;
  bool has_surface_material_and_confidence() const;
  void clear_surface_material_and_confidence();
  static const int kSurfaceMaterialAndConfidenceFieldNumber = 9;
  private:
  const ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence& _internal_surface_material_and_confidence() const;
  public:
  const ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence& surface_material_and_confidence() const;
  ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence* release_surface_material_and_confidence();
  ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence* mutable_surface_material_and_confidence();
  void set_allocated_surface_material_and_confidence(::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence* surface_material_and_confidence);
  void unsafe_arena_set_allocated_surface_material_and_confidence(
      ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence* surface_material_and_confidence);
  ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence* unsafe_arena_release_surface_material_and_confidence();

  // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 6;
  bool has_rectangular_box_and_accuracy() const;
  void clear_rectangular_box_and_accuracy();
  static const int kRectangularBoxAndAccuracyFieldNumber = 6;
  private:
  const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy& _internal_rectangular_box_and_accuracy() const;
  public:
  const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy& rectangular_box_and_accuracy() const;
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* release_rectangular_box_and_accuracy();
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* mutable_rectangular_box_and_accuracy();
  void set_allocated_rectangular_box_and_accuracy(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* rectangular_box_and_accuracy);
  void unsafe_arena_set_allocated_rectangular_box_and_accuracy(
      ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* rectangular_box_and_accuracy);
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* unsafe_arena_release_rectangular_box_and_accuracy();

  // .sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy cone_and_accuracy = 7;
  bool has_cone_and_accuracy() const;
  void clear_cone_and_accuracy();
  static const int kConeAndAccuracyFieldNumber = 7;
  private:
  const ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy& _internal_cone_and_accuracy() const;
  public:
  const ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy& cone_and_accuracy() const;
  ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy* release_cone_and_accuracy();
  ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy* mutable_cone_and_accuracy();
  void set_allocated_cone_and_accuracy(::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy* cone_and_accuracy);
  void unsafe_arena_set_allocated_cone_and_accuracy(
      ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy* cone_and_accuracy);
  ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy* unsafe_arena_release_cone_and_accuracy();

  void clear_geometry();
  GeometryCase geometry_case() const;
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.objectdetection.StaticObject)
 private:
  void set_has_rectangular_box_and_accuracy();
  void set_has_cone_and_accuracy();

  inline bool has_geometry() const;
  inline void clear_has_geometry();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence > surface_color_and_confidence_;
  ::sensoris::protobuf::types::base::EventEnvelope* envelope_;
  ::google::protobuf::Int64Value* object_id_;
  ::sensoris::protobuf::types::base::Confidence* existence_confidence_;
  ::sensoris::protobuf::types::base::EventDetectionStatus* detection_status_;
  ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence* type_and_confidence_;
  ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence* surface_type_and_confidence_;
  ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence* surface_material_and_confidence_;
  union GeometryUnion {
    GeometryUnion() {}
    ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* rectangular_box_and_accuracy_;
    ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy* cone_and_accuracy_;
  } geometry_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObjectDetectionCategory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory) */ {
 public:
  ObjectDetectionCategory();
  virtual ~ObjectDetectionCategory();

  ObjectDetectionCategory(const ObjectDetectionCategory& from);

  inline ObjectDetectionCategory& operator=(const ObjectDetectionCategory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectDetectionCategory(ObjectDetectionCategory&& from) noexcept
    : ObjectDetectionCategory() {
    *this = ::std::move(from);
  }

  inline ObjectDetectionCategory& operator=(ObjectDetectionCategory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectDetectionCategory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectDetectionCategory* internal_default_instance() {
    return reinterpret_cast<const ObjectDetectionCategory*>(
               &_ObjectDetectionCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(ObjectDetectionCategory* other);
  void Swap(ObjectDetectionCategory* other);
  friend void swap(ObjectDetectionCategory& a, ObjectDetectionCategory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectDetectionCategory* New() const final {
    return CreateMaybeMessage<ObjectDetectionCategory>(NULL);
  }

  ObjectDetectionCategory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectDetectionCategory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectDetectionCategory& from);
  void MergeFrom(const ObjectDetectionCategory& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectDetectionCategory* other);
  protected:
  explicit ObjectDetectionCategory(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sensoris.protobuf.categories.objectdetection.MovableObject movable_object = 2;
  int movable_object_size() const;
  void clear_movable_object();
  static const int kMovableObjectFieldNumber = 2;
  ::sensoris::protobuf::categories::objectdetection::MovableObject* mutable_movable_object(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::objectdetection::MovableObject >*
      mutable_movable_object();
  const ::sensoris::protobuf::categories::objectdetection::MovableObject& movable_object(int index) const;
  ::sensoris::protobuf::categories::objectdetection::MovableObject* add_movable_object();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::objectdetection::MovableObject >&
      movable_object() const;

  // repeated .sensoris.protobuf.categories.objectdetection.StaticObject static_object = 3;
  int static_object_size() const;
  void clear_static_object();
  static const int kStaticObjectFieldNumber = 3;
  ::sensoris::protobuf::categories::objectdetection::StaticObject* mutable_static_object(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::objectdetection::StaticObject >*
      mutable_static_object();
  const ::sensoris::protobuf::categories::objectdetection::StaticObject& static_object(int index) const;
  ::sensoris::protobuf::categories::objectdetection::StaticObject* add_static_object();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::objectdetection::StaticObject >&
      static_object() const;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope();
  static const int kEnvelopeFieldNumber = 1;
  private:
  const ::sensoris::protobuf::types::base::CategoryEnvelope& _internal_envelope() const;
  public:
  const ::sensoris::protobuf::types::base::CategoryEnvelope& envelope() const;
  ::sensoris::protobuf::types::base::CategoryEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::CategoryEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* envelope);
  void unsafe_arena_set_allocated_envelope(
      ::sensoris::protobuf::types::base::CategoryEnvelope* envelope);
  ::sensoris::protobuf::types::base::CategoryEnvelope* unsafe_arena_release_envelope();

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::objectdetection::MovableObject > movable_object_;
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::objectdetection::StaticObject > static_object_;
  ::sensoris::protobuf::types::base::CategoryEnvelope* envelope_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MovableObject_TypeAndConfidence

// .sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence.Type type = 1;
inline void MovableObject_TypeAndConfidence::clear_type() {
  type_ = 0;
}
inline ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence_Type MovableObject_TypeAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence.type)
  return static_cast< ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence_Type >(type_);
}
inline void MovableObject_TypeAndConfidence::set_type(::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence.type)
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool MovableObject_TypeAndConfidence::has_confidence() const {
  return this != internal_default_instance() && confidence_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Confidence& MovableObject_TypeAndConfidence::_internal_confidence() const {
  return *confidence_;
}
inline const ::sensoris::protobuf::types::base::Confidence& MovableObject_TypeAndConfidence::confidence() const {
  const ::sensoris::protobuf::types::base::Confidence* p = confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence.confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence*>(
      &::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline ::sensoris::protobuf::types::base::Confidence* MovableObject_TypeAndConfidence::release_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* MovableObject_TypeAndConfidence::unsafe_arena_release_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* MovableObject_TypeAndConfidence::mutable_confidence() {
  
  if (confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(GetArenaNoVirtual());
    confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence.confidence)
  return confidence_;
}
inline void MovableObject_TypeAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(confidence_);
  }
  if (confidence) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(confidence)->GetArena();
    if (message_arena != submessage_arena) {
      confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, confidence, submessage_arena);
    }
    
  } else {
    
  }
  confidence_ = confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence.confidence)
}

// -------------------------------------------------------------------

// MovableObject

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool MovableObject::has_envelope() const {
  return this != internal_default_instance() && envelope_ != NULL;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& MovableObject::_internal_envelope() const {
  return *envelope_;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& MovableObject::envelope() const {
  const ::sensoris::protobuf::types::base::EventEnvelope* p = envelope_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.MovableObject.envelope)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope*>(
      &::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline ::sensoris::protobuf::types::base::EventEnvelope* MovableObject::release_envelope() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.MovableObject.envelope)
  
  ::sensoris::protobuf::types::base::EventEnvelope* temp = envelope_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* MovableObject::unsafe_arena_release_envelope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.MovableObject.envelope)
  
  ::sensoris::protobuf::types::base::EventEnvelope* temp = envelope_;
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* MovableObject::mutable_envelope() {
  
  if (envelope_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(GetArenaNoVirtual());
    envelope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.MovableObject.envelope)
  return envelope_;
}
inline void MovableObject::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(envelope_);
  }
  if (envelope) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(envelope)->GetArena();
    if (message_arena != submessage_arena) {
      envelope = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.MovableObject.envelope)
}

// .google.protobuf.Int64Value object_id = 2;
inline bool MovableObject::has_object_id() const {
  return this != internal_default_instance() && object_id_ != NULL;
}
inline const ::google::protobuf::Int64Value& MovableObject::_internal_object_id() const {
  return *object_id_;
}
inline const ::google::protobuf::Int64Value& MovableObject::object_id() const {
  const ::google::protobuf::Int64Value* p = object_id_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.MovableObject.object_id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Int64Value*>(
      &::google::protobuf::_Int64Value_default_instance_);
}
inline ::google::protobuf::Int64Value* MovableObject::release_object_id() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.MovableObject.object_id)
  
  ::google::protobuf::Int64Value* temp = object_id_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  object_id_ = NULL;
  return temp;
}
inline ::google::protobuf::Int64Value* MovableObject::unsafe_arena_release_object_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.MovableObject.object_id)
  
  ::google::protobuf::Int64Value* temp = object_id_;
  object_id_ = NULL;
  return temp;
}
inline ::google::protobuf::Int64Value* MovableObject::mutable_object_id() {
  
  if (object_id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArenaNoVirtual());
    object_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.MovableObject.object_id)
  return object_id_;
}
inline void MovableObject::set_allocated_object_id(::google::protobuf::Int64Value* object_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(object_id_);
  }
  if (object_id) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(object_id)->GetArena();
    if (message_arena != submessage_arena) {
      object_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, object_id, submessage_arena);
    }
    
  } else {
    
  }
  object_id_ = object_id;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.MovableObject.object_id)
}

// .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
inline bool MovableObject::has_existence_confidence() const {
  return this != internal_default_instance() && existence_confidence_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Confidence& MovableObject::_internal_existence_confidence() const {
  return *existence_confidence_;
}
inline const ::sensoris::protobuf::types::base::Confidence& MovableObject::existence_confidence() const {
  const ::sensoris::protobuf::types::base::Confidence* p = existence_confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.MovableObject.existence_confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence*>(
      &::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline ::sensoris::protobuf::types::base::Confidence* MovableObject::release_existence_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.MovableObject.existence_confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = existence_confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  existence_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* MovableObject::unsafe_arena_release_existence_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.MovableObject.existence_confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = existence_confidence_;
  existence_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* MovableObject::mutable_existence_confidence() {
  
  if (existence_confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(GetArenaNoVirtual());
    existence_confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.MovableObject.existence_confidence)
  return existence_confidence_;
}
inline void MovableObject::set_allocated_existence_confidence(::sensoris::protobuf::types::base::Confidence* existence_confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(existence_confidence_);
  }
  if (existence_confidence) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(existence_confidence)->GetArena();
    if (message_arena != submessage_arena) {
      existence_confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, existence_confidence, submessage_arena);
    }
    
  } else {
    
  }
  existence_confidence_ = existence_confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.MovableObject.existence_confidence)
}

// .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
inline bool MovableObject::has_detection_status() const {
  return this != internal_default_instance() && detection_status_ != NULL;
}
inline const ::sensoris::protobuf::types::base::EventDetectionStatus& MovableObject::_internal_detection_status() const {
  return *detection_status_;
}
inline const ::sensoris::protobuf::types::base::EventDetectionStatus& MovableObject::detection_status() const {
  const ::sensoris::protobuf::types::base::EventDetectionStatus* p = detection_status_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.MovableObject.detection_status)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::EventDetectionStatus*>(
      &::sensoris::protobuf::types::base::_EventDetectionStatus_default_instance_);
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* MovableObject::release_detection_status() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.MovableObject.detection_status)
  
  ::sensoris::protobuf::types::base::EventDetectionStatus* temp = detection_status_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  detection_status_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* MovableObject::unsafe_arena_release_detection_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.MovableObject.detection_status)
  
  ::sensoris::protobuf::types::base::EventDetectionStatus* temp = detection_status_;
  detection_status_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* MovableObject::mutable_detection_status() {
  
  if (detection_status_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventDetectionStatus>(GetArenaNoVirtual());
    detection_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.MovableObject.detection_status)
  return detection_status_;
}
inline void MovableObject::set_allocated_detection_status(::sensoris::protobuf::types::base::EventDetectionStatus* detection_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(detection_status_);
  }
  if (detection_status) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(detection_status)->GetArena();
    if (message_arena != submessage_arena) {
      detection_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, detection_status, submessage_arena);
    }
    
  } else {
    
  }
  detection_status_ = detection_status;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.MovableObject.detection_status)
}

// .sensoris.protobuf.categories.objectdetection.MovableObject.TypeAndConfidence type_and_confidence = 5;
inline bool MovableObject::has_type_and_confidence() const {
  return this != internal_default_instance() && type_and_confidence_ != NULL;
}
inline void MovableObject::clear_type_and_confidence() {
  if (GetArenaNoVirtual() == NULL && type_and_confidence_ != NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = NULL;
}
inline const ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence& MovableObject::_internal_type_and_confidence() const {
  return *type_and_confidence_;
}
inline const ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence& MovableObject::type_and_confidence() const {
  const ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence* p = type_and_confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.MovableObject.type_and_confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence*>(
      &::sensoris::protobuf::categories::objectdetection::_MovableObject_TypeAndConfidence_default_instance_);
}
inline ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence* MovableObject::release_type_and_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.MovableObject.type_and_confidence)
  
  ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence* temp = type_and_confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  type_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence* MovableObject::unsafe_arena_release_type_and_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.MovableObject.type_and_confidence)
  
  ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence* temp = type_and_confidence_;
  type_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence* MovableObject::mutable_type_and_confidence() {
  
  if (type_and_confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence>(GetArenaNoVirtual());
    type_and_confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.MovableObject.type_and_confidence)
  return type_and_confidence_;
}
inline void MovableObject::set_allocated_type_and_confidence(::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence* type_and_confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete type_and_confidence_;
  }
  if (type_and_confidence) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(type_and_confidence);
    if (message_arena != submessage_arena) {
      type_and_confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type_and_confidence, submessage_arena);
    }
    
  } else {
    
  }
  type_and_confidence_ = type_and_confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.MovableObject.type_and_confidence)
}

// .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 6;
inline bool MovableObject::has_rectangular_box_and_accuracy() const {
  return this != internal_default_instance() && rectangular_box_and_accuracy_ != NULL;
}
inline const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy& MovableObject::_internal_rectangular_box_and_accuracy() const {
  return *rectangular_box_and_accuracy_;
}
inline const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy& MovableObject::rectangular_box_and_accuracy() const {
  const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* p = rectangular_box_and_accuracy_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.MovableObject.rectangular_box_and_accuracy)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy*>(
      &::sensoris::protobuf::types::spatial::_RectangularBoxAndAccuracy_default_instance_);
}
inline ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* MovableObject::release_rectangular_box_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.MovableObject.rectangular_box_and_accuracy)
  
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* temp = rectangular_box_and_accuracy_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  rectangular_box_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* MovableObject::unsafe_arena_release_rectangular_box_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.MovableObject.rectangular_box_and_accuracy)
  
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* temp = rectangular_box_and_accuracy_;
  rectangular_box_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* MovableObject::mutable_rectangular_box_and_accuracy() {
  
  if (rectangular_box_and_accuracy_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy>(GetArenaNoVirtual());
    rectangular_box_and_accuracy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.MovableObject.rectangular_box_and_accuracy)
  return rectangular_box_and_accuracy_;
}
inline void MovableObject::set_allocated_rectangular_box_and_accuracy(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* rectangular_box_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rectangular_box_and_accuracy_);
  }
  if (rectangular_box_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(rectangular_box_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      rectangular_box_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rectangular_box_and_accuracy, submessage_arena);
    }
    
  } else {
    
  }
  rectangular_box_and_accuracy_ = rectangular_box_and_accuracy;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.MovableObject.rectangular_box_and_accuracy)
}

// .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy speed_and_accuracy = 7 [(.sensoris.protobuf.types.base.exponent) = 1];
inline bool MovableObject::has_speed_and_accuracy() const {
  return this != internal_default_instance() && speed_and_accuracy_ != NULL;
}
inline const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy& MovableObject::_internal_speed_and_accuracy() const {
  return *speed_and_accuracy_;
}
inline const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy& MovableObject::speed_and_accuracy() const {
  const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* p = speed_and_accuracy_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.MovableObject.speed_and_accuracy)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy*>(
      &::sensoris::protobuf::types::spatial::_XyzVectorAndAccuracy_default_instance_);
}
inline ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* MovableObject::release_speed_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.MovableObject.speed_and_accuracy)
  
  ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* temp = speed_and_accuracy_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  speed_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* MovableObject::unsafe_arena_release_speed_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.MovableObject.speed_and_accuracy)
  
  ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* temp = speed_and_accuracy_;
  speed_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* MovableObject::mutable_speed_and_accuracy() {
  
  if (speed_and_accuracy_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy>(GetArenaNoVirtual());
    speed_and_accuracy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.MovableObject.speed_and_accuracy)
  return speed_and_accuracy_;
}
inline void MovableObject::set_allocated_speed_and_accuracy(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* speed_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(speed_and_accuracy_);
  }
  if (speed_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(speed_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      speed_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, speed_and_accuracy, submessage_arena);
    }
    
  } else {
    
  }
  speed_and_accuracy_ = speed_and_accuracy;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.MovableObject.speed_and_accuracy)
}

// .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy acceleration_and_accuracy = 8 [(.sensoris.protobuf.types.base.exponent) = 1];
inline bool MovableObject::has_acceleration_and_accuracy() const {
  return this != internal_default_instance() && acceleration_and_accuracy_ != NULL;
}
inline const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy& MovableObject::_internal_acceleration_and_accuracy() const {
  return *acceleration_and_accuracy_;
}
inline const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy& MovableObject::acceleration_and_accuracy() const {
  const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* p = acceleration_and_accuracy_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.MovableObject.acceleration_and_accuracy)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy*>(
      &::sensoris::protobuf::types::spatial::_XyzVectorAndAccuracy_default_instance_);
}
inline ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* MovableObject::release_acceleration_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.MovableObject.acceleration_and_accuracy)
  
  ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* temp = acceleration_and_accuracy_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  acceleration_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* MovableObject::unsafe_arena_release_acceleration_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.MovableObject.acceleration_and_accuracy)
  
  ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* temp = acceleration_and_accuracy_;
  acceleration_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* MovableObject::mutable_acceleration_and_accuracy() {
  
  if (acceleration_and_accuracy_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy>(GetArenaNoVirtual());
    acceleration_and_accuracy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.MovableObject.acceleration_and_accuracy)
  return acceleration_and_accuracy_;
}
inline void MovableObject::set_allocated_acceleration_and_accuracy(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* acceleration_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(acceleration_and_accuracy_);
  }
  if (acceleration_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(acceleration_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      acceleration_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acceleration_and_accuracy, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_and_accuracy_ = acceleration_and_accuracy;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.MovableObject.acceleration_and_accuracy)
}

// -------------------------------------------------------------------

// StaticObject_TypeAndConfidence

// .sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence.Type type = 1;
inline void StaticObject_TypeAndConfidence::clear_type() {
  type_ = 0;
}
inline ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence_Type StaticObject_TypeAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence.type)
  return static_cast< ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence_Type >(type_);
}
inline void StaticObject_TypeAndConfidence::set_type(::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence.type)
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool StaticObject_TypeAndConfidence::has_confidence() const {
  return this != internal_default_instance() && confidence_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Confidence& StaticObject_TypeAndConfidence::_internal_confidence() const {
  return *confidence_;
}
inline const ::sensoris::protobuf::types::base::Confidence& StaticObject_TypeAndConfidence::confidence() const {
  const ::sensoris::protobuf::types::base::Confidence* p = confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence.confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence*>(
      &::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline ::sensoris::protobuf::types::base::Confidence* StaticObject_TypeAndConfidence::release_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* StaticObject_TypeAndConfidence::unsafe_arena_release_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* StaticObject_TypeAndConfidence::mutable_confidence() {
  
  if (confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(GetArenaNoVirtual());
    confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence.confidence)
  return confidence_;
}
inline void StaticObject_TypeAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(confidence_);
  }
  if (confidence) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(confidence)->GetArena();
    if (message_arena != submessage_arena) {
      confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, confidence, submessage_arena);
    }
    
  } else {
    
  }
  confidence_ = confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence.confidence)
}

// -------------------------------------------------------------------

// StaticObject_ConeAndAccuracy

// .sensoris.protobuf.types.spatial.PositionAndAccuracy lower_position_and_accuracy = 1;
inline bool StaticObject_ConeAndAccuracy::has_lower_position_and_accuracy() const {
  return this != internal_default_instance() && lower_position_and_accuracy_ != NULL;
}
inline const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& StaticObject_ConeAndAccuracy::_internal_lower_position_and_accuracy() const {
  return *lower_position_and_accuracy_;
}
inline const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& StaticObject_ConeAndAccuracy::lower_position_and_accuracy() const {
  const ::sensoris::protobuf::types::spatial::PositionAndAccuracy* p = lower_position_and_accuracy_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.lower_position_and_accuracy)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::spatial::PositionAndAccuracy*>(
      &::sensoris::protobuf::types::spatial::_PositionAndAccuracy_default_instance_);
}
inline ::sensoris::protobuf::types::spatial::PositionAndAccuracy* StaticObject_ConeAndAccuracy::release_lower_position_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.lower_position_and_accuracy)
  
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* temp = lower_position_and_accuracy_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  lower_position_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::PositionAndAccuracy* StaticObject_ConeAndAccuracy::unsafe_arena_release_lower_position_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.lower_position_and_accuracy)
  
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* temp = lower_position_and_accuracy_;
  lower_position_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::PositionAndAccuracy* StaticObject_ConeAndAccuracy::mutable_lower_position_and_accuracy() {
  
  if (lower_position_and_accuracy_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::spatial::PositionAndAccuracy>(GetArenaNoVirtual());
    lower_position_and_accuracy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.lower_position_and_accuracy)
  return lower_position_and_accuracy_;
}
inline void StaticObject_ConeAndAccuracy::set_allocated_lower_position_and_accuracy(::sensoris::protobuf::types::spatial::PositionAndAccuracy* lower_position_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lower_position_and_accuracy_);
  }
  if (lower_position_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(lower_position_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      lower_position_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lower_position_and_accuracy, submessage_arena);
    }
    
  } else {
    
  }
  lower_position_and_accuracy_ = lower_position_and_accuracy;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.lower_position_and_accuracy)
}

// .sensoris.protobuf.types.spatial.PositionAndAccuracy upper_position_and_accuracy = 2;
inline bool StaticObject_ConeAndAccuracy::has_upper_position_and_accuracy() const {
  return this != internal_default_instance() && upper_position_and_accuracy_ != NULL;
}
inline const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& StaticObject_ConeAndAccuracy::_internal_upper_position_and_accuracy() const {
  return *upper_position_and_accuracy_;
}
inline const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& StaticObject_ConeAndAccuracy::upper_position_and_accuracy() const {
  const ::sensoris::protobuf::types::spatial::PositionAndAccuracy* p = upper_position_and_accuracy_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.upper_position_and_accuracy)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::spatial::PositionAndAccuracy*>(
      &::sensoris::protobuf::types::spatial::_PositionAndAccuracy_default_instance_);
}
inline ::sensoris::protobuf::types::spatial::PositionAndAccuracy* StaticObject_ConeAndAccuracy::release_upper_position_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.upper_position_and_accuracy)
  
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* temp = upper_position_and_accuracy_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  upper_position_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::PositionAndAccuracy* StaticObject_ConeAndAccuracy::unsafe_arena_release_upper_position_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.upper_position_and_accuracy)
  
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* temp = upper_position_and_accuracy_;
  upper_position_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::PositionAndAccuracy* StaticObject_ConeAndAccuracy::mutable_upper_position_and_accuracy() {
  
  if (upper_position_and_accuracy_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::spatial::PositionAndAccuracy>(GetArenaNoVirtual());
    upper_position_and_accuracy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.upper_position_and_accuracy)
  return upper_position_and_accuracy_;
}
inline void StaticObject_ConeAndAccuracy::set_allocated_upper_position_and_accuracy(::sensoris::protobuf::types::spatial::PositionAndAccuracy* upper_position_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(upper_position_and_accuracy_);
  }
  if (upper_position_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(upper_position_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      upper_position_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upper_position_and_accuracy, submessage_arena);
    }
    
  } else {
    
  }
  upper_position_and_accuracy_ = upper_position_and_accuracy;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.upper_position_and_accuracy)
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy lower_diameter_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
inline bool StaticObject_ConeAndAccuracy::has_lower_diameter_and_accuracy() const {
  return this != internal_default_instance() && lower_diameter_and_accuracy_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& StaticObject_ConeAndAccuracy::_internal_lower_diameter_and_accuracy() const {
  return *lower_diameter_and_accuracy_;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& StaticObject_ConeAndAccuracy::lower_diameter_and_accuracy() const {
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* p = lower_diameter_and_accuracy_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.lower_diameter_and_accuracy)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      &::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* StaticObject_ConeAndAccuracy::release_lower_diameter_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.lower_diameter_and_accuracy)
  
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = lower_diameter_and_accuracy_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  lower_diameter_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* StaticObject_ConeAndAccuracy::unsafe_arena_release_lower_diameter_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.lower_diameter_and_accuracy)
  
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = lower_diameter_and_accuracy_;
  lower_diameter_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* StaticObject_ConeAndAccuracy::mutable_lower_diameter_and_accuracy() {
  
  if (lower_diameter_and_accuracy_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArenaNoVirtual());
    lower_diameter_and_accuracy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.lower_diameter_and_accuracy)
  return lower_diameter_and_accuracy_;
}
inline void StaticObject_ConeAndAccuracy::set_allocated_lower_diameter_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* lower_diameter_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lower_diameter_and_accuracy_);
  }
  if (lower_diameter_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(lower_diameter_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      lower_diameter_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lower_diameter_and_accuracy, submessage_arena);
    }
    
  } else {
    
  }
  lower_diameter_and_accuracy_ = lower_diameter_and_accuracy;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.lower_diameter_and_accuracy)
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy upper_diameter_and_accuracy = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
inline bool StaticObject_ConeAndAccuracy::has_upper_diameter_and_accuracy() const {
  return this != internal_default_instance() && upper_diameter_and_accuracy_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& StaticObject_ConeAndAccuracy::_internal_upper_diameter_and_accuracy() const {
  return *upper_diameter_and_accuracy_;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& StaticObject_ConeAndAccuracy::upper_diameter_and_accuracy() const {
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* p = upper_diameter_and_accuracy_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.upper_diameter_and_accuracy)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      &::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* StaticObject_ConeAndAccuracy::release_upper_diameter_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.upper_diameter_and_accuracy)
  
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = upper_diameter_and_accuracy_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  upper_diameter_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* StaticObject_ConeAndAccuracy::unsafe_arena_release_upper_diameter_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.upper_diameter_and_accuracy)
  
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = upper_diameter_and_accuracy_;
  upper_diameter_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* StaticObject_ConeAndAccuracy::mutable_upper_diameter_and_accuracy() {
  
  if (upper_diameter_and_accuracy_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArenaNoVirtual());
    upper_diameter_and_accuracy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.upper_diameter_and_accuracy)
  return upper_diameter_and_accuracy_;
}
inline void StaticObject_ConeAndAccuracy::set_allocated_upper_diameter_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* upper_diameter_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(upper_diameter_and_accuracy_);
  }
  if (upper_diameter_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(upper_diameter_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      upper_diameter_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upper_diameter_and_accuracy, submessage_arena);
    }
    
  } else {
    
  }
  upper_diameter_and_accuracy_ = upper_diameter_and_accuracy;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.upper_diameter_and_accuracy)
}

// repeated .google.protobuf.Any extension = 15;
inline int StaticObject_ConeAndAccuracy::extension_size() const {
  return extension_.size();
}
inline ::google::protobuf::Any* StaticObject_ConeAndAccuracy::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
StaticObject_ConeAndAccuracy::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.extension)
  return &extension_;
}
inline const ::google::protobuf::Any& StaticObject_ConeAndAccuracy::extension(int index) const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* StaticObject_ConeAndAccuracy::add_extension() {
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
StaticObject_ConeAndAccuracy::extension() const {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy.extension)
  return extension_;
}

// -------------------------------------------------------------------

// StaticObject_SurfaceTypeAndConfidence

// .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence.Type type = 1;
inline void StaticObject_SurfaceTypeAndConfidence::clear_type() {
  type_ = 0;
}
inline ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence_Type StaticObject_SurfaceTypeAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence.type)
  return static_cast< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence_Type >(type_);
}
inline void StaticObject_SurfaceTypeAndConfidence::set_type(::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence.type)
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool StaticObject_SurfaceTypeAndConfidence::has_confidence() const {
  return this != internal_default_instance() && confidence_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Confidence& StaticObject_SurfaceTypeAndConfidence::_internal_confidence() const {
  return *confidence_;
}
inline const ::sensoris::protobuf::types::base::Confidence& StaticObject_SurfaceTypeAndConfidence::confidence() const {
  const ::sensoris::protobuf::types::base::Confidence* p = confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence.confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence*>(
      &::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline ::sensoris::protobuf::types::base::Confidence* StaticObject_SurfaceTypeAndConfidence::release_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* StaticObject_SurfaceTypeAndConfidence::unsafe_arena_release_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* StaticObject_SurfaceTypeAndConfidence::mutable_confidence() {
  
  if (confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(GetArenaNoVirtual());
    confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence.confidence)
  return confidence_;
}
inline void StaticObject_SurfaceTypeAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(confidence_);
  }
  if (confidence) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(confidence)->GetArena();
    if (message_arena != submessage_arena) {
      confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, confidence, submessage_arena);
    }
    
  } else {
    
  }
  confidence_ = confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence.confidence)
}

// -------------------------------------------------------------------

// StaticObject_SurfaceMaterialAndConfidence

// .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence.Type type = 1;
inline void StaticObject_SurfaceMaterialAndConfidence::clear_type() {
  type_ = 0;
}
inline ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence_Type StaticObject_SurfaceMaterialAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence.type)
  return static_cast< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence_Type >(type_);
}
inline void StaticObject_SurfaceMaterialAndConfidence::set_type(::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence.type)
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool StaticObject_SurfaceMaterialAndConfidence::has_confidence() const {
  return this != internal_default_instance() && confidence_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Confidence& StaticObject_SurfaceMaterialAndConfidence::_internal_confidence() const {
  return *confidence_;
}
inline const ::sensoris::protobuf::types::base::Confidence& StaticObject_SurfaceMaterialAndConfidence::confidence() const {
  const ::sensoris::protobuf::types::base::Confidence* p = confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence.confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence*>(
      &::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline ::sensoris::protobuf::types::base::Confidence* StaticObject_SurfaceMaterialAndConfidence::release_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* StaticObject_SurfaceMaterialAndConfidence::unsafe_arena_release_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* StaticObject_SurfaceMaterialAndConfidence::mutable_confidence() {
  
  if (confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(GetArenaNoVirtual());
    confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence.confidence)
  return confidence_;
}
inline void StaticObject_SurfaceMaterialAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(confidence_);
  }
  if (confidence) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(confidence)->GetArena();
    if (message_arena != submessage_arena) {
      confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, confidence, submessage_arena);
    }
    
  } else {
    
  }
  confidence_ = confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence.confidence)
}

// .sensoris.protobuf.types.base.Int64ValueAndAccuracy reflectivity_and_accuracy = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
inline bool StaticObject_SurfaceMaterialAndConfidence::has_reflectivity_and_accuracy() const {
  return this != internal_default_instance() && reflectivity_and_accuracy_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& StaticObject_SurfaceMaterialAndConfidence::_internal_reflectivity_and_accuracy() const {
  return *reflectivity_and_accuracy_;
}
inline const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy& StaticObject_SurfaceMaterialAndConfidence::reflectivity_and_accuracy() const {
  const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* p = reflectivity_and_accuracy_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence.reflectivity_and_accuracy)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Int64ValueAndAccuracy*>(
      &::sensoris::protobuf::types::base::_Int64ValueAndAccuracy_default_instance_);
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* StaticObject_SurfaceMaterialAndConfidence::release_reflectivity_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence.reflectivity_and_accuracy)
  
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = reflectivity_and_accuracy_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  reflectivity_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* StaticObject_SurfaceMaterialAndConfidence::unsafe_arena_release_reflectivity_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence.reflectivity_and_accuracy)
  
  ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* temp = reflectivity_and_accuracy_;
  reflectivity_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64ValueAndAccuracy* StaticObject_SurfaceMaterialAndConfidence::mutable_reflectivity_and_accuracy() {
  
  if (reflectivity_and_accuracy_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64ValueAndAccuracy>(GetArenaNoVirtual());
    reflectivity_and_accuracy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence.reflectivity_and_accuracy)
  return reflectivity_and_accuracy_;
}
inline void StaticObject_SurfaceMaterialAndConfidence::set_allocated_reflectivity_and_accuracy(::sensoris::protobuf::types::base::Int64ValueAndAccuracy* reflectivity_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reflectivity_and_accuracy_);
  }
  if (reflectivity_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(reflectivity_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      reflectivity_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reflectivity_and_accuracy, submessage_arena);
    }
    
  } else {
    
  }
  reflectivity_and_accuracy_ = reflectivity_and_accuracy;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence.reflectivity_and_accuracy)
}

// -------------------------------------------------------------------

// StaticObject_SurfaceColorAndConfidence

// .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence.Type type = 1;
inline void StaticObject_SurfaceColorAndConfidence::clear_type() {
  type_ = 0;
}
inline ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence_Type StaticObject_SurfaceColorAndConfidence::type() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence.type)
  return static_cast< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence_Type >(type_);
}
inline void StaticObject_SurfaceColorAndConfidence::set_type(::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence.type)
}

// .sensoris.protobuf.types.base.Confidence confidence = 2;
inline bool StaticObject_SurfaceColorAndConfidence::has_confidence() const {
  return this != internal_default_instance() && confidence_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Confidence& StaticObject_SurfaceColorAndConfidence::_internal_confidence() const {
  return *confidence_;
}
inline const ::sensoris::protobuf::types::base::Confidence& StaticObject_SurfaceColorAndConfidence::confidence() const {
  const ::sensoris::protobuf::types::base::Confidence* p = confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence.confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence*>(
      &::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline ::sensoris::protobuf::types::base::Confidence* StaticObject_SurfaceColorAndConfidence::release_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* StaticObject_SurfaceColorAndConfidence::unsafe_arena_release_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence.confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = confidence_;
  confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* StaticObject_SurfaceColorAndConfidence::mutable_confidence() {
  
  if (confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(GetArenaNoVirtual());
    confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence.confidence)
  return confidence_;
}
inline void StaticObject_SurfaceColorAndConfidence::set_allocated_confidence(::sensoris::protobuf::types::base::Confidence* confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(confidence_);
  }
  if (confidence) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(confidence)->GetArena();
    if (message_arena != submessage_arena) {
      confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, confidence, submessage_arena);
    }
    
  } else {
    
  }
  confidence_ = confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence.confidence)
}

// -------------------------------------------------------------------

// StaticObject

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool StaticObject::has_envelope() const {
  return this != internal_default_instance() && envelope_ != NULL;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& StaticObject::_internal_envelope() const {
  return *envelope_;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& StaticObject::envelope() const {
  const ::sensoris::protobuf::types::base::EventEnvelope* p = envelope_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.envelope)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope*>(
      &::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline ::sensoris::protobuf::types::base::EventEnvelope* StaticObject::release_envelope() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.StaticObject.envelope)
  
  ::sensoris::protobuf::types::base::EventEnvelope* temp = envelope_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* StaticObject::unsafe_arena_release_envelope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.StaticObject.envelope)
  
  ::sensoris::protobuf::types::base::EventEnvelope* temp = envelope_;
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* StaticObject::mutable_envelope() {
  
  if (envelope_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(GetArenaNoVirtual());
    envelope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.StaticObject.envelope)
  return envelope_;
}
inline void StaticObject::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(envelope_);
  }
  if (envelope) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(envelope)->GetArena();
    if (message_arena != submessage_arena) {
      envelope = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.envelope)
}

// .google.protobuf.Int64Value object_id = 2;
inline bool StaticObject::has_object_id() const {
  return this != internal_default_instance() && object_id_ != NULL;
}
inline const ::google::protobuf::Int64Value& StaticObject::_internal_object_id() const {
  return *object_id_;
}
inline const ::google::protobuf::Int64Value& StaticObject::object_id() const {
  const ::google::protobuf::Int64Value* p = object_id_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.object_id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Int64Value*>(
      &::google::protobuf::_Int64Value_default_instance_);
}
inline ::google::protobuf::Int64Value* StaticObject::release_object_id() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.StaticObject.object_id)
  
  ::google::protobuf::Int64Value* temp = object_id_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  object_id_ = NULL;
  return temp;
}
inline ::google::protobuf::Int64Value* StaticObject::unsafe_arena_release_object_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.StaticObject.object_id)
  
  ::google::protobuf::Int64Value* temp = object_id_;
  object_id_ = NULL;
  return temp;
}
inline ::google::protobuf::Int64Value* StaticObject::mutable_object_id() {
  
  if (object_id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArenaNoVirtual());
    object_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.StaticObject.object_id)
  return object_id_;
}
inline void StaticObject::set_allocated_object_id(::google::protobuf::Int64Value* object_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(object_id_);
  }
  if (object_id) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(object_id)->GetArena();
    if (message_arena != submessage_arena) {
      object_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, object_id, submessage_arena);
    }
    
  } else {
    
  }
  object_id_ = object_id;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.object_id)
}

// .sensoris.protobuf.types.base.Confidence existence_confidence = 3;
inline bool StaticObject::has_existence_confidence() const {
  return this != internal_default_instance() && existence_confidence_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Confidence& StaticObject::_internal_existence_confidence() const {
  return *existence_confidence_;
}
inline const ::sensoris::protobuf::types::base::Confidence& StaticObject::existence_confidence() const {
  const ::sensoris::protobuf::types::base::Confidence* p = existence_confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.existence_confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Confidence*>(
      &::sensoris::protobuf::types::base::_Confidence_default_instance_);
}
inline ::sensoris::protobuf::types::base::Confidence* StaticObject::release_existence_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.StaticObject.existence_confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = existence_confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  existence_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* StaticObject::unsafe_arena_release_existence_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.StaticObject.existence_confidence)
  
  ::sensoris::protobuf::types::base::Confidence* temp = existence_confidence_;
  existence_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Confidence* StaticObject::mutable_existence_confidence() {
  
  if (existence_confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Confidence>(GetArenaNoVirtual());
    existence_confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.StaticObject.existence_confidence)
  return existence_confidence_;
}
inline void StaticObject::set_allocated_existence_confidence(::sensoris::protobuf::types::base::Confidence* existence_confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(existence_confidence_);
  }
  if (existence_confidence) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(existence_confidence)->GetArena();
    if (message_arena != submessage_arena) {
      existence_confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, existence_confidence, submessage_arena);
    }
    
  } else {
    
  }
  existence_confidence_ = existence_confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.existence_confidence)
}

// .sensoris.protobuf.types.base.EventDetectionStatus detection_status = 4;
inline bool StaticObject::has_detection_status() const {
  return this != internal_default_instance() && detection_status_ != NULL;
}
inline const ::sensoris::protobuf::types::base::EventDetectionStatus& StaticObject::_internal_detection_status() const {
  return *detection_status_;
}
inline const ::sensoris::protobuf::types::base::EventDetectionStatus& StaticObject::detection_status() const {
  const ::sensoris::protobuf::types::base::EventDetectionStatus* p = detection_status_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.detection_status)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::EventDetectionStatus*>(
      &::sensoris::protobuf::types::base::_EventDetectionStatus_default_instance_);
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* StaticObject::release_detection_status() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.StaticObject.detection_status)
  
  ::sensoris::protobuf::types::base::EventDetectionStatus* temp = detection_status_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  detection_status_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* StaticObject::unsafe_arena_release_detection_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.StaticObject.detection_status)
  
  ::sensoris::protobuf::types::base::EventDetectionStatus* temp = detection_status_;
  detection_status_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventDetectionStatus* StaticObject::mutable_detection_status() {
  
  if (detection_status_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventDetectionStatus>(GetArenaNoVirtual());
    detection_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.StaticObject.detection_status)
  return detection_status_;
}
inline void StaticObject::set_allocated_detection_status(::sensoris::protobuf::types::base::EventDetectionStatus* detection_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(detection_status_);
  }
  if (detection_status) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(detection_status)->GetArena();
    if (message_arena != submessage_arena) {
      detection_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, detection_status, submessage_arena);
    }
    
  } else {
    
  }
  detection_status_ = detection_status;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.detection_status)
}

// .sensoris.protobuf.categories.objectdetection.StaticObject.TypeAndConfidence type_and_confidence = 5;
inline bool StaticObject::has_type_and_confidence() const {
  return this != internal_default_instance() && type_and_confidence_ != NULL;
}
inline void StaticObject::clear_type_and_confidence() {
  if (GetArenaNoVirtual() == NULL && type_and_confidence_ != NULL) {
    delete type_and_confidence_;
  }
  type_and_confidence_ = NULL;
}
inline const ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence& StaticObject::_internal_type_and_confidence() const {
  return *type_and_confidence_;
}
inline const ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence& StaticObject::type_and_confidence() const {
  const ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence* p = type_and_confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.type_and_confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence*>(
      &::sensoris::protobuf::categories::objectdetection::_StaticObject_TypeAndConfidence_default_instance_);
}
inline ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence* StaticObject::release_type_and_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.StaticObject.type_and_confidence)
  
  ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence* temp = type_and_confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  type_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence* StaticObject::unsafe_arena_release_type_and_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.StaticObject.type_and_confidence)
  
  ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence* temp = type_and_confidence_;
  type_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence* StaticObject::mutable_type_and_confidence() {
  
  if (type_and_confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence>(GetArenaNoVirtual());
    type_and_confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.StaticObject.type_and_confidence)
  return type_and_confidence_;
}
inline void StaticObject::set_allocated_type_and_confidence(::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence* type_and_confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete type_and_confidence_;
  }
  if (type_and_confidence) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(type_and_confidence);
    if (message_arena != submessage_arena) {
      type_and_confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type_and_confidence, submessage_arena);
    }
    
  } else {
    
  }
  type_and_confidence_ = type_and_confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.type_and_confidence)
}

// .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy rectangular_box_and_accuracy = 6;
inline bool StaticObject::has_rectangular_box_and_accuracy() const {
  return geometry_case() == kRectangularBoxAndAccuracy;
}
inline void StaticObject::set_has_rectangular_box_and_accuracy() {
  _oneof_case_[0] = kRectangularBoxAndAccuracy;
}
inline const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy& StaticObject::_internal_rectangular_box_and_accuracy() const {
  return *geometry_.rectangular_box_and_accuracy_;
}
inline ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* StaticObject::release_rectangular_box_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.StaticObject.rectangular_box_and_accuracy)
  if (has_rectangular_box_and_accuracy()) {
    clear_has_geometry();
      ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* temp = geometry_.rectangular_box_and_accuracy_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    geometry_.rectangular_box_and_accuracy_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy& StaticObject::rectangular_box_and_accuracy() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.rectangular_box_and_accuracy)
  return has_rectangular_box_and_accuracy()
      ? *geometry_.rectangular_box_and_accuracy_
      : *reinterpret_cast< ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy*>(&::sensoris::protobuf::types::spatial::_RectangularBoxAndAccuracy_default_instance_);
}
inline ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* StaticObject::unsafe_arena_release_rectangular_box_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.StaticObject.rectangular_box_and_accuracy)
  if (has_rectangular_box_and_accuracy()) {
    clear_has_geometry();
    ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* temp = geometry_.rectangular_box_and_accuracy_;
    geometry_.rectangular_box_and_accuracy_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void StaticObject::unsafe_arena_set_allocated_rectangular_box_and_accuracy(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* rectangular_box_and_accuracy) {
  clear_geometry();
  if (rectangular_box_and_accuracy) {
    set_has_rectangular_box_and_accuracy();
    geometry_.rectangular_box_and_accuracy_ = rectangular_box_and_accuracy;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.rectangular_box_and_accuracy)
}
inline ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* StaticObject::mutable_rectangular_box_and_accuracy() {
  if (!has_rectangular_box_and_accuracy()) {
    clear_geometry();
    set_has_rectangular_box_and_accuracy();
    geometry_.rectangular_box_and_accuracy_ = CreateMaybeMessage< ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.StaticObject.rectangular_box_and_accuracy)
  return geometry_.rectangular_box_and_accuracy_;
}

// .sensoris.protobuf.categories.objectdetection.StaticObject.ConeAndAccuracy cone_and_accuracy = 7;
inline bool StaticObject::has_cone_and_accuracy() const {
  return geometry_case() == kConeAndAccuracy;
}
inline void StaticObject::set_has_cone_and_accuracy() {
  _oneof_case_[0] = kConeAndAccuracy;
}
inline void StaticObject::clear_cone_and_accuracy() {
  if (has_cone_and_accuracy()) {
    if (GetArenaNoVirtual() == NULL) {
      delete geometry_.cone_and_accuracy_;
    }
    clear_has_geometry();
  }
}
inline const ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy& StaticObject::_internal_cone_and_accuracy() const {
  return *geometry_.cone_and_accuracy_;
}
inline ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy* StaticObject::release_cone_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.StaticObject.cone_and_accuracy)
  if (has_cone_and_accuracy()) {
    clear_has_geometry();
      ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy* temp = geometry_.cone_and_accuracy_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    geometry_.cone_and_accuracy_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy& StaticObject::cone_and_accuracy() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.cone_and_accuracy)
  return has_cone_and_accuracy()
      ? *geometry_.cone_and_accuracy_
      : *reinterpret_cast< ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy*>(&::sensoris::protobuf::categories::objectdetection::_StaticObject_ConeAndAccuracy_default_instance_);
}
inline ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy* StaticObject::unsafe_arena_release_cone_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.StaticObject.cone_and_accuracy)
  if (has_cone_and_accuracy()) {
    clear_has_geometry();
    ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy* temp = geometry_.cone_and_accuracy_;
    geometry_.cone_and_accuracy_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void StaticObject::unsafe_arena_set_allocated_cone_and_accuracy(::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy* cone_and_accuracy) {
  clear_geometry();
  if (cone_and_accuracy) {
    set_has_cone_and_accuracy();
    geometry_.cone_and_accuracy_ = cone_and_accuracy;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.cone_and_accuracy)
}
inline ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy* StaticObject::mutable_cone_and_accuracy() {
  if (!has_cone_and_accuracy()) {
    clear_geometry();
    set_has_cone_and_accuracy();
    geometry_.cone_and_accuracy_ = CreateMaybeMessage< ::sensoris::protobuf::categories::objectdetection::StaticObject_ConeAndAccuracy >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.StaticObject.cone_and_accuracy)
  return geometry_.cone_and_accuracy_;
}

// .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceTypeAndConfidence surface_type_and_confidence = 8;
inline bool StaticObject::has_surface_type_and_confidence() const {
  return this != internal_default_instance() && surface_type_and_confidence_ != NULL;
}
inline void StaticObject::clear_surface_type_and_confidence() {
  if (GetArenaNoVirtual() == NULL && surface_type_and_confidence_ != NULL) {
    delete surface_type_and_confidence_;
  }
  surface_type_and_confidence_ = NULL;
}
inline const ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence& StaticObject::_internal_surface_type_and_confidence() const {
  return *surface_type_and_confidence_;
}
inline const ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence& StaticObject::surface_type_and_confidence() const {
  const ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence* p = surface_type_and_confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.surface_type_and_confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence*>(
      &::sensoris::protobuf::categories::objectdetection::_StaticObject_SurfaceTypeAndConfidence_default_instance_);
}
inline ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence* StaticObject::release_surface_type_and_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.StaticObject.surface_type_and_confidence)
  
  ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence* temp = surface_type_and_confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  surface_type_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence* StaticObject::unsafe_arena_release_surface_type_and_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.StaticObject.surface_type_and_confidence)
  
  ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence* temp = surface_type_and_confidence_;
  surface_type_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence* StaticObject::mutable_surface_type_and_confidence() {
  
  if (surface_type_and_confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence>(GetArenaNoVirtual());
    surface_type_and_confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.StaticObject.surface_type_and_confidence)
  return surface_type_and_confidence_;
}
inline void StaticObject::set_allocated_surface_type_and_confidence(::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence* surface_type_and_confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete surface_type_and_confidence_;
  }
  if (surface_type_and_confidence) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(surface_type_and_confidence);
    if (message_arena != submessage_arena) {
      surface_type_and_confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, surface_type_and_confidence, submessage_arena);
    }
    
  } else {
    
  }
  surface_type_and_confidence_ = surface_type_and_confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.surface_type_and_confidence)
}

// .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceMaterialAndConfidence surface_material_and_confidence = 9;
inline bool StaticObject::has_surface_material_and_confidence() const {
  return this != internal_default_instance() && surface_material_and_confidence_ != NULL;
}
inline void StaticObject::clear_surface_material_and_confidence() {
  if (GetArenaNoVirtual() == NULL && surface_material_and_confidence_ != NULL) {
    delete surface_material_and_confidence_;
  }
  surface_material_and_confidence_ = NULL;
}
inline const ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence& StaticObject::_internal_surface_material_and_confidence() const {
  return *surface_material_and_confidence_;
}
inline const ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence& StaticObject::surface_material_and_confidence() const {
  const ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence* p = surface_material_and_confidence_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.surface_material_and_confidence)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence*>(
      &::sensoris::protobuf::categories::objectdetection::_StaticObject_SurfaceMaterialAndConfidence_default_instance_);
}
inline ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence* StaticObject::release_surface_material_and_confidence() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.StaticObject.surface_material_and_confidence)
  
  ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence* temp = surface_material_and_confidence_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  surface_material_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence* StaticObject::unsafe_arena_release_surface_material_and_confidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.StaticObject.surface_material_and_confidence)
  
  ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence* temp = surface_material_and_confidence_;
  surface_material_and_confidence_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence* StaticObject::mutable_surface_material_and_confidence() {
  
  if (surface_material_and_confidence_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence>(GetArenaNoVirtual());
    surface_material_and_confidence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.StaticObject.surface_material_and_confidence)
  return surface_material_and_confidence_;
}
inline void StaticObject::set_allocated_surface_material_and_confidence(::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence* surface_material_and_confidence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete surface_material_and_confidence_;
  }
  if (surface_material_and_confidence) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(surface_material_and_confidence);
    if (message_arena != submessage_arena) {
      surface_material_and_confidence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, surface_material_and_confidence, submessage_arena);
    }
    
  } else {
    
  }
  surface_material_and_confidence_ = surface_material_and_confidence;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.StaticObject.surface_material_and_confidence)
}

// repeated .sensoris.protobuf.categories.objectdetection.StaticObject.SurfaceColorAndConfidence surface_color_and_confidence = 10;
inline int StaticObject::surface_color_and_confidence_size() const {
  return surface_color_and_confidence_.size();
}
inline void StaticObject::clear_surface_color_and_confidence() {
  surface_color_and_confidence_.Clear();
}
inline ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence* StaticObject::mutable_surface_color_and_confidence(int index) {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.StaticObject.surface_color_and_confidence)
  return surface_color_and_confidence_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence >*
StaticObject::mutable_surface_color_and_confidence() {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.objectdetection.StaticObject.surface_color_and_confidence)
  return &surface_color_and_confidence_;
}
inline const ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence& StaticObject::surface_color_and_confidence(int index) const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.StaticObject.surface_color_and_confidence)
  return surface_color_and_confidence_.Get(index);
}
inline ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence* StaticObject::add_surface_color_and_confidence() {
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.objectdetection.StaticObject.surface_color_and_confidence)
  return surface_color_and_confidence_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence >&
StaticObject::surface_color_and_confidence() const {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.objectdetection.StaticObject.surface_color_and_confidence)
  return surface_color_and_confidence_;
}

inline bool StaticObject::has_geometry() const {
  return geometry_case() != GEOMETRY_NOT_SET;
}
inline void StaticObject::clear_has_geometry() {
  _oneof_case_[0] = GEOMETRY_NOT_SET;
}
inline StaticObject::GeometryCase StaticObject::geometry_case() const {
  return StaticObject::GeometryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ObjectDetectionCategory

// .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
inline bool ObjectDetectionCategory::has_envelope() const {
  return this != internal_default_instance() && envelope_ != NULL;
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& ObjectDetectionCategory::_internal_envelope() const {
  return *envelope_;
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& ObjectDetectionCategory::envelope() const {
  const ::sensoris::protobuf::types::base::CategoryEnvelope* p = envelope_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory.envelope)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::CategoryEnvelope*>(
      &::sensoris::protobuf::types::base::_CategoryEnvelope_default_instance_);
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* ObjectDetectionCategory::release_envelope() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory.envelope)
  
  ::sensoris::protobuf::types::base::CategoryEnvelope* temp = envelope_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* ObjectDetectionCategory::unsafe_arena_release_envelope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory.envelope)
  
  ::sensoris::protobuf::types::base::CategoryEnvelope* temp = envelope_;
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* ObjectDetectionCategory::mutable_envelope() {
  
  if (envelope_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::CategoryEnvelope>(GetArenaNoVirtual());
    envelope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory.envelope)
  return envelope_;
}
inline void ObjectDetectionCategory::set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* envelope) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(envelope_);
  }
  if (envelope) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(envelope)->GetArena();
    if (message_arena != submessage_arena) {
      envelope = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory.envelope)
}

// repeated .sensoris.protobuf.categories.objectdetection.MovableObject movable_object = 2;
inline int ObjectDetectionCategory::movable_object_size() const {
  return movable_object_.size();
}
inline void ObjectDetectionCategory::clear_movable_object() {
  movable_object_.Clear();
}
inline ::sensoris::protobuf::categories::objectdetection::MovableObject* ObjectDetectionCategory::mutable_movable_object(int index) {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory.movable_object)
  return movable_object_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::objectdetection::MovableObject >*
ObjectDetectionCategory::mutable_movable_object() {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory.movable_object)
  return &movable_object_;
}
inline const ::sensoris::protobuf::categories::objectdetection::MovableObject& ObjectDetectionCategory::movable_object(int index) const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory.movable_object)
  return movable_object_.Get(index);
}
inline ::sensoris::protobuf::categories::objectdetection::MovableObject* ObjectDetectionCategory::add_movable_object() {
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory.movable_object)
  return movable_object_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::objectdetection::MovableObject >&
ObjectDetectionCategory::movable_object() const {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory.movable_object)
  return movable_object_;
}

// repeated .sensoris.protobuf.categories.objectdetection.StaticObject static_object = 3;
inline int ObjectDetectionCategory::static_object_size() const {
  return static_object_.size();
}
inline void ObjectDetectionCategory::clear_static_object() {
  static_object_.Clear();
}
inline ::sensoris::protobuf::categories::objectdetection::StaticObject* ObjectDetectionCategory::mutable_static_object(int index) {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory.static_object)
  return static_object_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::objectdetection::StaticObject >*
ObjectDetectionCategory::mutable_static_object() {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory.static_object)
  return &static_object_;
}
inline const ::sensoris::protobuf::categories::objectdetection::StaticObject& ObjectDetectionCategory::static_object(int index) const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory.static_object)
  return static_object_.Get(index);
}
inline ::sensoris::protobuf::categories::objectdetection::StaticObject* ObjectDetectionCategory::add_static_object() {
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory.static_object)
  return static_object_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::objectdetection::StaticObject >&
ObjectDetectionCategory::static_object() const {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.objectdetection.ObjectDetectionCategory.static_object)
  return static_object_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace objectdetection
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::objectdetection::MovableObject_TypeAndConfidence_Type_descriptor();
}
template <> struct is_proto_enum< ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::objectdetection::StaticObject_TypeAndConfidence_Type_descriptor();
}
template <> struct is_proto_enum< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceTypeAndConfidence_Type_descriptor();
}
template <> struct is_proto_enum< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceMaterialAndConfidence_Type_descriptor();
}
template <> struct is_proto_enum< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence_Type>() {
  return ::sensoris::protobuf::categories::objectdetection::StaticObject_SurfaceColorAndConfidence_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fobject_5fdetection_2eproto
