// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/categories/brake.proto

#ifndef PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto
#define PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "sensoris/protobuf/types/base.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto 

namespace protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto
namespace sensoris {
namespace protobuf {
namespace categories {
namespace brake {
class BrakeCategory;
class BrakeCategoryDefaultTypeInternal;
extern BrakeCategoryDefaultTypeInternal _BrakeCategory_default_instance_;
class BrakeSystemsStatus;
class BrakeSystemsStatusDefaultTypeInternal;
extern BrakeSystemsStatusDefaultTypeInternal _BrakeSystemsStatus_default_instance_;
}  // namespace brake
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
template<> ::sensoris::protobuf::categories::brake::BrakeCategory* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::brake::BrakeCategory>(Arena*);
template<> ::sensoris::protobuf::categories::brake::BrakeSystemsStatus* Arena::CreateMaybeMessage<::sensoris::protobuf::categories::brake::BrakeSystemsStatus>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sensoris {
namespace protobuf {
namespace categories {
namespace brake {

// ===================================================================

class BrakeSystemsStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.brake.BrakeSystemsStatus) */ {
 public:
  BrakeSystemsStatus();
  virtual ~BrakeSystemsStatus();

  BrakeSystemsStatus(const BrakeSystemsStatus& from);

  inline BrakeSystemsStatus& operator=(const BrakeSystemsStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrakeSystemsStatus(BrakeSystemsStatus&& from) noexcept
    : BrakeSystemsStatus() {
    *this = ::std::move(from);
  }

  inline BrakeSystemsStatus& operator=(BrakeSystemsStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrakeSystemsStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BrakeSystemsStatus* internal_default_instance() {
    return reinterpret_cast<const BrakeSystemsStatus*>(
               &_BrakeSystemsStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(BrakeSystemsStatus* other);
  void Swap(BrakeSystemsStatus* other);
  friend void swap(BrakeSystemsStatus& a, BrakeSystemsStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrakeSystemsStatus* New() const final {
    return CreateMaybeMessage<BrakeSystemsStatus>(NULL);
  }

  BrakeSystemsStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BrakeSystemsStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BrakeSystemsStatus& from);
  void MergeFrom(const BrakeSystemsStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrakeSystemsStatus* other);
  protected:
  explicit BrakeSystemsStatus(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope();
  static const int kEnvelopeFieldNumber = 1;
  private:
  const ::sensoris::protobuf::types::base::EventEnvelope& _internal_envelope() const;
  public:
  const ::sensoris::protobuf::types::base::EventEnvelope& envelope() const;
  ::sensoris::protobuf::types::base::EventEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::EventEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* envelope);
  void unsafe_arena_set_allocated_envelope(
      ::sensoris::protobuf::types::base::EventEnvelope* envelope);
  ::sensoris::protobuf::types::base::EventEnvelope* unsafe_arena_release_envelope();

  // .sensoris.protobuf.types.base.SystemStatus abs_status = 2;
  void clear_abs_status();
  static const int kAbsStatusFieldNumber = 2;
  ::sensoris::protobuf::types::base::SystemStatus abs_status() const;
  void set_abs_status(::sensoris::protobuf::types::base::SystemStatus value);

  // .sensoris.protobuf.types.base.SystemStatus esc_status = 3;
  void clear_esc_status();
  static const int kEscStatusFieldNumber = 3;
  ::sensoris::protobuf::types::base::SystemStatus esc_status() const;
  void set_esc_status(::sensoris::protobuf::types::base::SystemStatus value);

  // .sensoris.protobuf.types.base.SystemStatus tcs_status = 4;
  void clear_tcs_status();
  static const int kTcsStatusFieldNumber = 4;
  ::sensoris::protobuf::types::base::SystemStatus tcs_status() const;
  void set_tcs_status(::sensoris::protobuf::types::base::SystemStatus value);

  // .sensoris.protobuf.types.base.SystemStatus ebd_status = 5;
  void clear_ebd_status();
  static const int kEbdStatusFieldNumber = 5;
  ::sensoris::protobuf::types::base::SystemStatus ebd_status() const;
  void set_ebd_status(::sensoris::protobuf::types::base::SystemStatus value);

  // .sensoris.protobuf.types.base.SystemStatus eba_status = 6;
  void clear_eba_status();
  static const int kEbaStatusFieldNumber = 6;
  ::sensoris::protobuf::types::base::SystemStatus eba_status() const;
  void set_eba_status(::sensoris::protobuf::types::base::SystemStatus value);

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.brake.BrakeSystemsStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::base::EventEnvelope* envelope_;
  int abs_status_;
  int esc_status_;
  int tcs_status_;
  int ebd_status_;
  int eba_status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BrakeCategory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.categories.brake.BrakeCategory) */ {
 public:
  BrakeCategory();
  virtual ~BrakeCategory();

  BrakeCategory(const BrakeCategory& from);

  inline BrakeCategory& operator=(const BrakeCategory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrakeCategory(BrakeCategory&& from) noexcept
    : BrakeCategory() {
    *this = ::std::move(from);
  }

  inline BrakeCategory& operator=(BrakeCategory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrakeCategory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BrakeCategory* internal_default_instance() {
    return reinterpret_cast<const BrakeCategory*>(
               &_BrakeCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(BrakeCategory* other);
  void Swap(BrakeCategory* other);
  friend void swap(BrakeCategory& a, BrakeCategory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrakeCategory* New() const final {
    return CreateMaybeMessage<BrakeCategory>(NULL);
  }

  BrakeCategory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BrakeCategory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BrakeCategory& from);
  void MergeFrom(const BrakeCategory& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrakeCategory* other);
  protected:
  explicit BrakeCategory(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sensoris.protobuf.categories.brake.BrakeSystemsStatus brake_systems_status = 2;
  int brake_systems_status_size() const;
  void clear_brake_systems_status();
  static const int kBrakeSystemsStatusFieldNumber = 2;
  ::sensoris::protobuf::categories::brake::BrakeSystemsStatus* mutable_brake_systems_status(int index);
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::brake::BrakeSystemsStatus >*
      mutable_brake_systems_status();
  const ::sensoris::protobuf::categories::brake::BrakeSystemsStatus& brake_systems_status(int index) const;
  ::sensoris::protobuf::categories::brake::BrakeSystemsStatus* add_brake_systems_status();
  const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::brake::BrakeSystemsStatus >&
      brake_systems_status() const;

  // .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
  bool has_envelope() const;
  void clear_envelope();
  static const int kEnvelopeFieldNumber = 1;
  private:
  const ::sensoris::protobuf::types::base::CategoryEnvelope& _internal_envelope() const;
  public:
  const ::sensoris::protobuf::types::base::CategoryEnvelope& envelope() const;
  ::sensoris::protobuf::types::base::CategoryEnvelope* release_envelope();
  ::sensoris::protobuf::types::base::CategoryEnvelope* mutable_envelope();
  void set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* envelope);
  void unsafe_arena_set_allocated_envelope(
      ::sensoris::protobuf::types::base::CategoryEnvelope* envelope);
  ::sensoris::protobuf::types::base::CategoryEnvelope* unsafe_arena_release_envelope();

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.categories.brake.BrakeCategory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::brake::BrakeSystemsStatus > brake_systems_status_;
  ::sensoris::protobuf::types::base::CategoryEnvelope* envelope_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BrakeSystemsStatus

// .sensoris.protobuf.types.base.EventEnvelope envelope = 1;
inline bool BrakeSystemsStatus::has_envelope() const {
  return this != internal_default_instance() && envelope_ != NULL;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& BrakeSystemsStatus::_internal_envelope() const {
  return *envelope_;
}
inline const ::sensoris::protobuf::types::base::EventEnvelope& BrakeSystemsStatus::envelope() const {
  const ::sensoris::protobuf::types::base::EventEnvelope* p = envelope_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.brake.BrakeSystemsStatus.envelope)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::EventEnvelope*>(
      &::sensoris::protobuf::types::base::_EventEnvelope_default_instance_);
}
inline ::sensoris::protobuf::types::base::EventEnvelope* BrakeSystemsStatus::release_envelope() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.brake.BrakeSystemsStatus.envelope)
  
  ::sensoris::protobuf::types::base::EventEnvelope* temp = envelope_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* BrakeSystemsStatus::unsafe_arena_release_envelope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.brake.BrakeSystemsStatus.envelope)
  
  ::sensoris::protobuf::types::base::EventEnvelope* temp = envelope_;
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::EventEnvelope* BrakeSystemsStatus::mutable_envelope() {
  
  if (envelope_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::EventEnvelope>(GetArenaNoVirtual());
    envelope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.brake.BrakeSystemsStatus.envelope)
  return envelope_;
}
inline void BrakeSystemsStatus::set_allocated_envelope(::sensoris::protobuf::types::base::EventEnvelope* envelope) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(envelope_);
  }
  if (envelope) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(envelope)->GetArena();
    if (message_arena != submessage_arena) {
      envelope = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.brake.BrakeSystemsStatus.envelope)
}

// .sensoris.protobuf.types.base.SystemStatus abs_status = 2;
inline void BrakeSystemsStatus::clear_abs_status() {
  abs_status_ = 0;
}
inline ::sensoris::protobuf::types::base::SystemStatus BrakeSystemsStatus::abs_status() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.brake.BrakeSystemsStatus.abs_status)
  return static_cast< ::sensoris::protobuf::types::base::SystemStatus >(abs_status_);
}
inline void BrakeSystemsStatus::set_abs_status(::sensoris::protobuf::types::base::SystemStatus value) {
  
  abs_status_ = value;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.brake.BrakeSystemsStatus.abs_status)
}

// .sensoris.protobuf.types.base.SystemStatus esc_status = 3;
inline void BrakeSystemsStatus::clear_esc_status() {
  esc_status_ = 0;
}
inline ::sensoris::protobuf::types::base::SystemStatus BrakeSystemsStatus::esc_status() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.brake.BrakeSystemsStatus.esc_status)
  return static_cast< ::sensoris::protobuf::types::base::SystemStatus >(esc_status_);
}
inline void BrakeSystemsStatus::set_esc_status(::sensoris::protobuf::types::base::SystemStatus value) {
  
  esc_status_ = value;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.brake.BrakeSystemsStatus.esc_status)
}

// .sensoris.protobuf.types.base.SystemStatus tcs_status = 4;
inline void BrakeSystemsStatus::clear_tcs_status() {
  tcs_status_ = 0;
}
inline ::sensoris::protobuf::types::base::SystemStatus BrakeSystemsStatus::tcs_status() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.brake.BrakeSystemsStatus.tcs_status)
  return static_cast< ::sensoris::protobuf::types::base::SystemStatus >(tcs_status_);
}
inline void BrakeSystemsStatus::set_tcs_status(::sensoris::protobuf::types::base::SystemStatus value) {
  
  tcs_status_ = value;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.brake.BrakeSystemsStatus.tcs_status)
}

// .sensoris.protobuf.types.base.SystemStatus ebd_status = 5;
inline void BrakeSystemsStatus::clear_ebd_status() {
  ebd_status_ = 0;
}
inline ::sensoris::protobuf::types::base::SystemStatus BrakeSystemsStatus::ebd_status() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.brake.BrakeSystemsStatus.ebd_status)
  return static_cast< ::sensoris::protobuf::types::base::SystemStatus >(ebd_status_);
}
inline void BrakeSystemsStatus::set_ebd_status(::sensoris::protobuf::types::base::SystemStatus value) {
  
  ebd_status_ = value;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.brake.BrakeSystemsStatus.ebd_status)
}

// .sensoris.protobuf.types.base.SystemStatus eba_status = 6;
inline void BrakeSystemsStatus::clear_eba_status() {
  eba_status_ = 0;
}
inline ::sensoris::protobuf::types::base::SystemStatus BrakeSystemsStatus::eba_status() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.brake.BrakeSystemsStatus.eba_status)
  return static_cast< ::sensoris::protobuf::types::base::SystemStatus >(eba_status_);
}
inline void BrakeSystemsStatus::set_eba_status(::sensoris::protobuf::types::base::SystemStatus value) {
  
  eba_status_ = value;
  // @@protoc_insertion_point(field_set:sensoris.protobuf.categories.brake.BrakeSystemsStatus.eba_status)
}

// -------------------------------------------------------------------

// BrakeCategory

// .sensoris.protobuf.types.base.CategoryEnvelope envelope = 1;
inline bool BrakeCategory::has_envelope() const {
  return this != internal_default_instance() && envelope_ != NULL;
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& BrakeCategory::_internal_envelope() const {
  return *envelope_;
}
inline const ::sensoris::protobuf::types::base::CategoryEnvelope& BrakeCategory::envelope() const {
  const ::sensoris::protobuf::types::base::CategoryEnvelope* p = envelope_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.brake.BrakeCategory.envelope)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::CategoryEnvelope*>(
      &::sensoris::protobuf::types::base::_CategoryEnvelope_default_instance_);
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* BrakeCategory::release_envelope() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.categories.brake.BrakeCategory.envelope)
  
  ::sensoris::protobuf::types::base::CategoryEnvelope* temp = envelope_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* BrakeCategory::unsafe_arena_release_envelope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.categories.brake.BrakeCategory.envelope)
  
  ::sensoris::protobuf::types::base::CategoryEnvelope* temp = envelope_;
  envelope_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::CategoryEnvelope* BrakeCategory::mutable_envelope() {
  
  if (envelope_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::CategoryEnvelope>(GetArenaNoVirtual());
    envelope_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.brake.BrakeCategory.envelope)
  return envelope_;
}
inline void BrakeCategory::set_allocated_envelope(::sensoris::protobuf::types::base::CategoryEnvelope* envelope) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(envelope_);
  }
  if (envelope) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(envelope)->GetArena();
    if (message_arena != submessage_arena) {
      envelope = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, envelope, submessage_arena);
    }
    
  } else {
    
  }
  envelope_ = envelope;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.categories.brake.BrakeCategory.envelope)
}

// repeated .sensoris.protobuf.categories.brake.BrakeSystemsStatus brake_systems_status = 2;
inline int BrakeCategory::brake_systems_status_size() const {
  return brake_systems_status_.size();
}
inline void BrakeCategory::clear_brake_systems_status() {
  brake_systems_status_.Clear();
}
inline ::sensoris::protobuf::categories::brake::BrakeSystemsStatus* BrakeCategory::mutable_brake_systems_status(int index) {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.categories.brake.BrakeCategory.brake_systems_status)
  return brake_systems_status_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::brake::BrakeSystemsStatus >*
BrakeCategory::mutable_brake_systems_status() {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.categories.brake.BrakeCategory.brake_systems_status)
  return &brake_systems_status_;
}
inline const ::sensoris::protobuf::categories::brake::BrakeSystemsStatus& BrakeCategory::brake_systems_status(int index) const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.categories.brake.BrakeCategory.brake_systems_status)
  return brake_systems_status_.Get(index);
}
inline ::sensoris::protobuf::categories::brake::BrakeSystemsStatus* BrakeCategory::add_brake_systems_status() {
  // @@protoc_insertion_point(field_add:sensoris.protobuf.categories.brake.BrakeCategory.brake_systems_status)
  return brake_systems_status_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sensoris::protobuf::categories::brake::BrakeSystemsStatus >&
BrakeCategory::brake_systems_status() const {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.categories.brake.BrakeCategory.brake_systems_status)
  return brake_systems_status_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace brake
}  // namespace categories
}  // namespace protobuf
}  // namespace sensoris

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_sensoris_2fprotobuf_2fcategories_2fbrake_2eproto
