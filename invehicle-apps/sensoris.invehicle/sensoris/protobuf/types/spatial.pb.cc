// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/types/spatial.proto

#include "sensoris/protobuf/types/spatial.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fany_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fany_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Any;
}  // namespace protobuf_google_2fprotobuf_2fany_2eproto
namespace protobuf_google_2fprotobuf_2fwrappers_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Int64Value;
}  // namespace protobuf_google_2fprotobuf_2fwrappers_2eproto
namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Int64Matrix3x3;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Int64Value;
}  // namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto
namespace protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PositionAndAccuracy_Geographic;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PositionAndAccuracy_HorizontalVerticalStdDev;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PositionAndAccuracy_Metric;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RectangularBoxAndAccuracy_CornerVectors;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RotationAndAccuracy_Euler;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RotationAndAccuracy_Quaternion;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RotationAndAccuracy_StdDev;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RotationRateAndAccuracy_StdDev;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_XyzVectorAndAccuracy_Metric;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_XyzVectorAndAccuracy_StdDev;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MapLocationReference_TileIdLinkIdOffset;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MapLocationReference_TileIdObjectId;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_RectangularBoxAndAccuracy_CenterOrientationSize;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_XyzVectorAndAccuracy;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_RotationAndAccuracy;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_PositionAndAccuracy;
}  // namespace protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto
namespace sensoris {
namespace protobuf {
namespace types {
namespace spatial {
class PositionAndAccuracy_GeographicDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PositionAndAccuracy_Geographic>
      _instance;
} _PositionAndAccuracy_Geographic_default_instance_;
class PositionAndAccuracy_MetricDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PositionAndAccuracy_Metric>
      _instance;
} _PositionAndAccuracy_Metric_default_instance_;
class PositionAndAccuracy_HorizontalVerticalStdDevDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PositionAndAccuracy_HorizontalVerticalStdDev>
      _instance;
} _PositionAndAccuracy_HorizontalVerticalStdDev_default_instance_;
class PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDevDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev>
      _instance;
} _PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev_default_instance_;
class PositionAndAccuracyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PositionAndAccuracy>
      _instance;
  const ::sensoris::protobuf::types::spatial::PositionAndAccuracy_Geographic* geographic_wgs84_;
  const ::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric* metric_vehicle_;
  const ::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric* metric_event_group_;
  const ::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric* metric_ecef_;
  const ::google::protobuf::Int64Value* combined_std_dev_;
  const ::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalVerticalStdDev* std_dev_;
  const ::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev* horizontal_confidence_ellipse_vertical_std_dev_;
  const ::sensoris::protobuf::types::base::Int64Matrix3x3* covariance_;
} _PositionAndAccuracy_default_instance_;
class PolylineAndAccuracyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PolylineAndAccuracy>
      _instance;
} _PolylineAndAccuracy_default_instance_;
class XyzVectorAndAccuracy_StdDevDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XyzVectorAndAccuracy_StdDev>
      _instance;
} _XyzVectorAndAccuracy_StdDev_default_instance_;
class XyzVectorAndAccuracy_MetricDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XyzVectorAndAccuracy_Metric>
      _instance;
} _XyzVectorAndAccuracy_Metric_default_instance_;
class XyzVectorAndAccuracyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XyzVectorAndAccuracy>
      _instance;
  const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric* metric_vehicle_;
  const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric* metric_event_group_;
  const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric* metric_origin_;
  const ::google::protobuf::Int64Value* combined_std_dev_;
  const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_StdDev* std_dev_;
  const ::sensoris::protobuf::types::base::Int64Matrix3x3* covariance_;
} _XyzVectorAndAccuracy_default_instance_;
class RectangularBoxAndAccuracy_CornerVectorsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RectangularBoxAndAccuracy_CornerVectors>
      _instance;
} _RectangularBoxAndAccuracy_CornerVectors_default_instance_;
class RectangularBoxAndAccuracy_CenterOrientationSizeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RectangularBoxAndAccuracy_CenterOrientationSize>
      _instance;
} _RectangularBoxAndAccuracy_CenterOrientationSize_default_instance_;
class RectangularBoxAndAccuracyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RectangularBoxAndAccuracy>
      _instance;
  const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CornerVectors* corner_vectors_;
  const ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CenterOrientationSize* center_orientation_size_;
} _RectangularBoxAndAccuracy_default_instance_;
class RotationAndAccuracy_EulerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RotationAndAccuracy_Euler>
      _instance;
} _RotationAndAccuracy_Euler_default_instance_;
class RotationAndAccuracy_QuaternionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RotationAndAccuracy_Quaternion>
      _instance;
} _RotationAndAccuracy_Quaternion_default_instance_;
class RotationAndAccuracy_StdDevDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RotationAndAccuracy_StdDev>
      _instance;
} _RotationAndAccuracy_StdDev_default_instance_;
class RotationAndAccuracyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RotationAndAccuracy>
      _instance;
  const ::sensoris::protobuf::types::spatial::RotationAndAccuracy_Euler* euler_vehicle_;
  const ::sensoris::protobuf::types::spatial::RotationAndAccuracy_Euler* euler_event_group_;
  const ::sensoris::protobuf::types::spatial::RotationAndAccuracy_Quaternion* quaternion_vehicle_;
  const ::sensoris::protobuf::types::spatial::RotationAndAccuracy_Quaternion* quaternion_event_group_;
  const ::google::protobuf::Int64Value* combined_std_dev_;
  const ::sensoris::protobuf::types::spatial::RotationAndAccuracy_StdDev* std_dev_;
  const ::sensoris::protobuf::types::base::Int64Matrix3x3* covariance_;
} _RotationAndAccuracy_default_instance_;
class RotationRateAndAccuracy_StdDevDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RotationRateAndAccuracy_StdDev>
      _instance;
} _RotationRateAndAccuracy_StdDev_default_instance_;
class RotationRateAndAccuracyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RotationRateAndAccuracy>
      _instance;
  const ::google::protobuf::Int64Value* combined_std_dev_;
  const ::sensoris::protobuf::types::spatial::RotationRateAndAccuracy_StdDev* std_dev_;
  const ::sensoris::protobuf::types::base::Int64Matrix3x3* covariance_;
} _RotationRateAndAccuracy_default_instance_;
class MapLocationReference_TileIdLinkIdOffsetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapLocationReference_TileIdLinkIdOffset>
      _instance;
} _MapLocationReference_TileIdLinkIdOffset_default_instance_;
class MapLocationReference_TileIdObjectIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapLocationReference_TileIdObjectId>
      _instance;
} _MapLocationReference_TileIdObjectId_default_instance_;
class MapLocationReferenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapLocationReference>
      _instance;
  const ::sensoris::protobuf::types::spatial::MapLocationReference_TileIdLinkIdOffset* tile_link_offset_reference_;
  const ::sensoris::protobuf::types::spatial::MapLocationReference_TileIdObjectId* map_object_id_;
} _MapLocationReference_default_instance_;
}  // namespace spatial
}  // namespace types
}  // namespace protobuf
}  // namespace sensoris
namespace protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto {
static void InitDefaultsPositionAndAccuracy_Geographic() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::spatial::_PositionAndAccuracy_Geographic_default_instance_;
    new (ptr) ::sensoris::protobuf::types::spatial::PositionAndAccuracy_Geographic();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy_Geographic::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PositionAndAccuracy_Geographic =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPositionAndAccuracy_Geographic}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64Value.base,}};

static void InitDefaultsPositionAndAccuracy_Metric() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::spatial::_PositionAndAccuracy_Metric_default_instance_;
    new (ptr) ::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PositionAndAccuracy_Metric =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPositionAndAccuracy_Metric}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64Value.base,}};

static void InitDefaultsPositionAndAccuracy_HorizontalVerticalStdDev() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::spatial::_PositionAndAccuracy_HorizontalVerticalStdDev_default_instance_;
    new (ptr) ::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalVerticalStdDev();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalVerticalStdDev::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PositionAndAccuracy_HorizontalVerticalStdDev =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPositionAndAccuracy_HorizontalVerticalStdDev}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int64Value.base,}};

static void InitDefaultsPositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::spatial::_PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev_default_instance_;
    new (ptr) ::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int64Value.base,}};

static void InitDefaultsPositionAndAccuracy() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::spatial::_PositionAndAccuracy_default_instance_;
    new (ptr) ::sensoris::protobuf::types::spatial::PositionAndAccuracy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_PositionAndAccuracy =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsPositionAndAccuracy}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy_Geographic.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy_Metric.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int64Value.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy_HorizontalVerticalStdDev.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64Matrix3x3.base,
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsPolylineAndAccuracy() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::spatial::_PolylineAndAccuracy_default_instance_;
    new (ptr) ::sensoris::protobuf::types::spatial::PolylineAndAccuracy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::spatial::PolylineAndAccuracy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PolylineAndAccuracy =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPolylineAndAccuracy}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy.base,
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsXyzVectorAndAccuracy_StdDev() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::spatial::_XyzVectorAndAccuracy_StdDev_default_instance_;
    new (ptr) ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_StdDev();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_StdDev::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_XyzVectorAndAccuracy_StdDev =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsXyzVectorAndAccuracy_StdDev}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int64Value.base,}};

static void InitDefaultsXyzVectorAndAccuracy_Metric() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::spatial::_XyzVectorAndAccuracy_Metric_default_instance_;
    new (ptr) ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_XyzVectorAndAccuracy_Metric =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsXyzVectorAndAccuracy_Metric}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64Value.base,}};

static void InitDefaultsXyzVectorAndAccuracy() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::spatial::_XyzVectorAndAccuracy_default_instance_;
    new (ptr) ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_XyzVectorAndAccuracy =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsXyzVectorAndAccuracy}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_XyzVectorAndAccuracy_Metric.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int64Value.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_XyzVectorAndAccuracy_StdDev.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64Matrix3x3.base,
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsRectangularBoxAndAccuracy_CornerVectors() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::spatial::_RectangularBoxAndAccuracy_CornerVectors_default_instance_;
    new (ptr) ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CornerVectors();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CornerVectors::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RectangularBoxAndAccuracy_CornerVectors =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRectangularBoxAndAccuracy_CornerVectors}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_XyzVectorAndAccuracy.base,}};

static void InitDefaultsRectangularBoxAndAccuracy_CenterOrientationSize() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::spatial::_RectangularBoxAndAccuracy_CenterOrientationSize_default_instance_;
    new (ptr) ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CenterOrientationSize();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CenterOrientationSize::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_RectangularBoxAndAccuracy_CenterOrientationSize =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsRectangularBoxAndAccuracy_CenterOrientationSize}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationAndAccuracy.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_XyzVectorAndAccuracy.base,}};

static void InitDefaultsRectangularBoxAndAccuracy() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::spatial::_RectangularBoxAndAccuracy_default_instance_;
    new (ptr) ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_RectangularBoxAndAccuracy =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsRectangularBoxAndAccuracy}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RectangularBoxAndAccuracy_CornerVectors.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RectangularBoxAndAccuracy_CenterOrientationSize.base,
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsRotationAndAccuracy_Euler() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::spatial::_RotationAndAccuracy_Euler_default_instance_;
    new (ptr) ::sensoris::protobuf::types::spatial::RotationAndAccuracy_Euler();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::spatial::RotationAndAccuracy_Euler::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RotationAndAccuracy_Euler =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRotationAndAccuracy_Euler}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64Value.base,}};

static void InitDefaultsRotationAndAccuracy_Quaternion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::spatial::_RotationAndAccuracy_Quaternion_default_instance_;
    new (ptr) ::sensoris::protobuf::types::spatial::RotationAndAccuracy_Quaternion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::spatial::RotationAndAccuracy_Quaternion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RotationAndAccuracy_Quaternion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRotationAndAccuracy_Quaternion}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64Value.base,}};

static void InitDefaultsRotationAndAccuracy_StdDev() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::spatial::_RotationAndAccuracy_StdDev_default_instance_;
    new (ptr) ::sensoris::protobuf::types::spatial::RotationAndAccuracy_StdDev();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::spatial::RotationAndAccuracy_StdDev::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RotationAndAccuracy_StdDev =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRotationAndAccuracy_StdDev}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int64Value.base,}};

static void InitDefaultsRotationAndAccuracy() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::spatial::_RotationAndAccuracy_default_instance_;
    new (ptr) ::sensoris::protobuf::types::spatial::RotationAndAccuracy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::spatial::RotationAndAccuracy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_RotationAndAccuracy =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsRotationAndAccuracy}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationAndAccuracy_Euler.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationAndAccuracy_Quaternion.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int64Value.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationAndAccuracy_StdDev.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64Matrix3x3.base,
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsRotationRateAndAccuracy_StdDev() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::spatial::_RotationRateAndAccuracy_StdDev_default_instance_;
    new (ptr) ::sensoris::protobuf::types::spatial::RotationRateAndAccuracy_StdDev();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::spatial::RotationRateAndAccuracy_StdDev::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RotationRateAndAccuracy_StdDev =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRotationRateAndAccuracy_StdDev}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int64Value.base,}};

static void InitDefaultsRotationRateAndAccuracy() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::spatial::_RotationRateAndAccuracy_default_instance_;
    new (ptr) ::sensoris::protobuf::types::spatial::RotationRateAndAccuracy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::spatial::RotationRateAndAccuracy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_RotationRateAndAccuracy =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsRotationRateAndAccuracy}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64Value.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int64Value.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationRateAndAccuracy_StdDev.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64Matrix3x3.base,
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsMapLocationReference_TileIdLinkIdOffset() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::spatial::_MapLocationReference_TileIdLinkIdOffset_default_instance_;
    new (ptr) ::sensoris::protobuf::types::spatial::MapLocationReference_TileIdLinkIdOffset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::spatial::MapLocationReference_TileIdLinkIdOffset::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MapLocationReference_TileIdLinkIdOffset =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMapLocationReference_TileIdLinkIdOffset}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int64Value.base,
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsMapLocationReference_TileIdObjectId() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::spatial::_MapLocationReference_TileIdObjectId_default_instance_;
    new (ptr) ::sensoris::protobuf::types::spatial::MapLocationReference_TileIdObjectId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::spatial::MapLocationReference_TileIdObjectId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MapLocationReference_TileIdObjectId =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMapLocationReference_TileIdObjectId}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int64Value.base,
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsMapLocationReference() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::spatial::_MapLocationReference_default_instance_;
    new (ptr) ::sensoris::protobuf::types::spatial::MapLocationReference();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::spatial::MapLocationReference::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_MapLocationReference =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsMapLocationReference}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int64Value.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_MapLocationReference_TileIdLinkIdOffset.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_MapLocationReference_TileIdObjectId.base,
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PositionAndAccuracy_Geographic.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PositionAndAccuracy_Metric.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PositionAndAccuracy_HorizontalVerticalStdDev.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PositionAndAccuracy.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PolylineAndAccuracy.base);
  ::google::protobuf::internal::InitSCC(&scc_info_XyzVectorAndAccuracy_StdDev.base);
  ::google::protobuf::internal::InitSCC(&scc_info_XyzVectorAndAccuracy_Metric.base);
  ::google::protobuf::internal::InitSCC(&scc_info_XyzVectorAndAccuracy.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RectangularBoxAndAccuracy_CornerVectors.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RectangularBoxAndAccuracy_CenterOrientationSize.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RectangularBoxAndAccuracy.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RotationAndAccuracy_Euler.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RotationAndAccuracy_Quaternion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RotationAndAccuracy_StdDev.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RotationAndAccuracy.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RotationRateAndAccuracy_StdDev.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RotationRateAndAccuracy.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapLocationReference_TileIdLinkIdOffset.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapLocationReference_TileIdObjectId.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapLocationReference.base);
}

::google::protobuf::Metadata file_level_metadata[21];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PositionAndAccuracy_Geographic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PositionAndAccuracy_Geographic, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PositionAndAccuracy_Geographic, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PositionAndAccuracy_Geographic, altitude_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalVerticalStdDev, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalVerticalStdDev, horizontal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalVerticalStdDev, vertical_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev, horizontal_ellipse_major_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev, horizontal_ellipse_minor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev, horizontal_ellipse_major_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev, vertical_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PositionAndAccuracy, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PositionAndAccuracy, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::sensoris::protobuf::types::spatial::PositionAndAccuracyDefaultTypeInternal, geographic_wgs84_),
  offsetof(::sensoris::protobuf::types::spatial::PositionAndAccuracyDefaultTypeInternal, metric_vehicle_),
  offsetof(::sensoris::protobuf::types::spatial::PositionAndAccuracyDefaultTypeInternal, metric_event_group_),
  offsetof(::sensoris::protobuf::types::spatial::PositionAndAccuracyDefaultTypeInternal, metric_ecef_),
  offsetof(::sensoris::protobuf::types::spatial::PositionAndAccuracyDefaultTypeInternal, combined_std_dev_),
  offsetof(::sensoris::protobuf::types::spatial::PositionAndAccuracyDefaultTypeInternal, std_dev_),
  offsetof(::sensoris::protobuf::types::spatial::PositionAndAccuracyDefaultTypeInternal, horizontal_confidence_ellipse_vertical_std_dev_),
  offsetof(::sensoris::protobuf::types::spatial::PositionAndAccuracyDefaultTypeInternal, covariance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PositionAndAccuracy, extension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PositionAndAccuracy, geographic_metric_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PositionAndAccuracy, accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PolylineAndAccuracy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PolylineAndAccuracy, position_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::PolylineAndAccuracy, extension_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_StdDev, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_StdDev, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_StdDev, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_StdDev, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracyDefaultTypeInternal, metric_vehicle_),
  offsetof(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracyDefaultTypeInternal, metric_event_group_),
  offsetof(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracyDefaultTypeInternal, metric_origin_),
  offsetof(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracyDefaultTypeInternal, combined_std_dev_),
  offsetof(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracyDefaultTypeInternal, std_dev_),
  offsetof(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracyDefaultTypeInternal, covariance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy, extension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy, geometry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy, accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CornerVectors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CornerVectors, first_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CornerVectors, second_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CornerVectors, third_and_accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CenterOrientationSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CenterOrientationSize, center_position_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CenterOrientationSize, orientation_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CenterOrientationSize, size_and_accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracyDefaultTypeInternal, corner_vectors_),
  offsetof(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracyDefaultTypeInternal, center_orientation_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy, extension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy, geometry_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationAndAccuracy_Euler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationAndAccuracy_Euler, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationAndAccuracy_Euler, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationAndAccuracy_Euler, roll_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationAndAccuracy_Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationAndAccuracy_Quaternion, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationAndAccuracy_Quaternion, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationAndAccuracy_Quaternion, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationAndAccuracy_Quaternion, w_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationAndAccuracy_StdDev, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationAndAccuracy_StdDev, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationAndAccuracy_StdDev, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationAndAccuracy_StdDev, roll_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationAndAccuracy, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationAndAccuracy, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::sensoris::protobuf::types::spatial::RotationAndAccuracyDefaultTypeInternal, euler_vehicle_),
  offsetof(::sensoris::protobuf::types::spatial::RotationAndAccuracyDefaultTypeInternal, euler_event_group_),
  offsetof(::sensoris::protobuf::types::spatial::RotationAndAccuracyDefaultTypeInternal, quaternion_vehicle_),
  offsetof(::sensoris::protobuf::types::spatial::RotationAndAccuracyDefaultTypeInternal, quaternion_event_group_),
  offsetof(::sensoris::protobuf::types::spatial::RotationAndAccuracyDefaultTypeInternal, combined_std_dev_),
  offsetof(::sensoris::protobuf::types::spatial::RotationAndAccuracyDefaultTypeInternal, std_dev_),
  offsetof(::sensoris::protobuf::types::spatial::RotationAndAccuracyDefaultTypeInternal, covariance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationAndAccuracy, extension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationAndAccuracy, euler_quaternion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationAndAccuracy, accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationRateAndAccuracy_StdDev, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationRateAndAccuracy_StdDev, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationRateAndAccuracy_StdDev, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationRateAndAccuracy_StdDev, roll_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationRateAndAccuracy, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationRateAndAccuracy, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationRateAndAccuracy, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationRateAndAccuracy, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationRateAndAccuracy, roll_),
  offsetof(::sensoris::protobuf::types::spatial::RotationRateAndAccuracyDefaultTypeInternal, combined_std_dev_),
  offsetof(::sensoris::protobuf::types::spatial::RotationRateAndAccuracyDefaultTypeInternal, std_dev_),
  offsetof(::sensoris::protobuf::types::spatial::RotationRateAndAccuracyDefaultTypeInternal, covariance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationRateAndAccuracy, extension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::RotationRateAndAccuracy, accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::MapLocationReference_TileIdLinkIdOffset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::MapLocationReference_TileIdLinkIdOffset, tile_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::MapLocationReference_TileIdLinkIdOffset, link_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::MapLocationReference_TileIdLinkIdOffset, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::MapLocationReference_TileIdLinkIdOffset, extension_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::MapLocationReference_TileIdObjectId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::MapLocationReference_TileIdObjectId, tile_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::MapLocationReference_TileIdObjectId, object_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::MapLocationReference_TileIdObjectId, extension_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::MapLocationReference, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::MapLocationReference, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::MapLocationReference, position_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::MapLocationReference, z_level_),
  offsetof(::sensoris::protobuf::types::spatial::MapLocationReferenceDefaultTypeInternal, tile_link_offset_reference_),
  offsetof(::sensoris::protobuf::types::spatial::MapLocationReferenceDefaultTypeInternal, map_object_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::MapLocationReference, extension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::spatial::MapLocationReference, map_based_reference_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sensoris::protobuf::types::spatial::PositionAndAccuracy_Geographic)},
  { 8, -1, sizeof(::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric)},
  { 16, -1, sizeof(::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalVerticalStdDev)},
  { 23, -1, sizeof(::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev)},
  { 32, -1, sizeof(::sensoris::protobuf::types::spatial::PositionAndAccuracy)},
  { 48, -1, sizeof(::sensoris::protobuf::types::spatial::PolylineAndAccuracy)},
  { 55, -1, sizeof(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_StdDev)},
  { 63, -1, sizeof(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric)},
  { 71, -1, sizeof(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy)},
  { 85, -1, sizeof(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CornerVectors)},
  { 93, -1, sizeof(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CenterOrientationSize)},
  { 101, -1, sizeof(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy)},
  { 110, -1, sizeof(::sensoris::protobuf::types::spatial::RotationAndAccuracy_Euler)},
  { 118, -1, sizeof(::sensoris::protobuf::types::spatial::RotationAndAccuracy_Quaternion)},
  { 127, -1, sizeof(::sensoris::protobuf::types::spatial::RotationAndAccuracy_StdDev)},
  { 135, -1, sizeof(::sensoris::protobuf::types::spatial::RotationAndAccuracy)},
  { 150, -1, sizeof(::sensoris::protobuf::types::spatial::RotationRateAndAccuracy_StdDev)},
  { 158, -1, sizeof(::sensoris::protobuf::types::spatial::RotationRateAndAccuracy)},
  { 171, -1, sizeof(::sensoris::protobuf::types::spatial::MapLocationReference_TileIdLinkIdOffset)},
  { 180, -1, sizeof(::sensoris::protobuf::types::spatial::MapLocationReference_TileIdObjectId)},
  { 188, -1, sizeof(::sensoris::protobuf::types::spatial::MapLocationReference)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::spatial::_PositionAndAccuracy_Geographic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::spatial::_PositionAndAccuracy_Metric_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::spatial::_PositionAndAccuracy_HorizontalVerticalStdDev_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::spatial::_PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::spatial::_PositionAndAccuracy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::spatial::_PolylineAndAccuracy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::spatial::_XyzVectorAndAccuracy_StdDev_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::spatial::_XyzVectorAndAccuracy_Metric_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::spatial::_XyzVectorAndAccuracy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::spatial::_RectangularBoxAndAccuracy_CornerVectors_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::spatial::_RectangularBoxAndAccuracy_CenterOrientationSize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::spatial::_RectangularBoxAndAccuracy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::spatial::_RotationAndAccuracy_Euler_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::spatial::_RotationAndAccuracy_Quaternion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::spatial::_RotationAndAccuracy_StdDev_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::spatial::_RotationAndAccuracy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::spatial::_RotationRateAndAccuracy_StdDev_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::spatial::_RotationRateAndAccuracy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::spatial::_MapLocationReference_TileIdLinkIdOffset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::spatial::_MapLocationReference_TileIdObjectId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::spatial::_MapLocationReference_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "sensoris/protobuf/types/spatial.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 21);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n%sensoris/protobuf/types/spatial.proto\022"
      "\037sensoris.protobuf.types.spatial\032\031google"
      "/protobuf/any.proto\032\036google/protobuf/wra"
      "ppers.proto\032\"sensoris/protobuf/types/bas"
      "e.proto\"\235\r\n\023PositionAndAccuracy\022[\n\020geogr"
      "aphic_wgs84\030\001 \001(\0132\?.sensoris.protobuf.ty"
      "pes.spatial.PositionAndAccuracy.Geograph"
      "icH\000\022U\n\016metric_vehicle\030\002 \001(\0132;.sensoris."
      "protobuf.types.spatial.PositionAndAccura"
      "cy.MetricH\000\022Y\n\022metric_event_group\030\003 \001(\0132"
      ";.sensoris.protobuf.types.spatial.Positi"
      "onAndAccuracy.MetricH\000\022R\n\013metric_ecef\030\004 "
      "\001(\0132;.sensoris.protobuf.types.spatial.Po"
      "sitionAndAccuracy.MetricH\000\022=\n\020combined_s"
      "td_dev\030\005 \001(\0132\033.google.protobuf.Int64Valu"
      "eB\004\210\265\030\000H\001\022`\n\007std_dev\030\006 \001(\0132M.sensoris.pr"
      "otobuf.types.spatial.PositionAndAccuracy"
      ".HorizontalVerticalStdDevH\001\022\230\001\n.horizont"
      "al_confidence_ellipse_vertical_std_dev\030\007"
      " \001(\0132^.sensoris.protobuf.types.spatial.P"
      "ositionAndAccuracy.HorizontalConfidenceE"
      "llipseVerticalStdDevH\001\022H\n\ncovariance\030\010 \001"
      "(\0132,.sensoris.protobuf.types.base.Int64M"
      "atrix3x3B\004\210\265\030\000H\001\022\'\n\textension\030\017 \003(\0132\024.go"
      "ogle.protobuf.Any\032\323\001\n\nGeographic\022A\n\tlong"
      "itude\030\001 \001(\0132(.sensoris.protobuf.types.ba"
      "se.Int64ValueB\004\210\265\030\010\022@\n\010latitude\030\002 \001(\0132(."
      "sensoris.protobuf.types.base.Int64ValueB"
      "\004\210\265\030\010\022@\n\010altitude\030\003 \001(\0132(.sensoris.proto"
      "buf.types.base.Int64ValueB\004\210\265\030\003\032\271\001\n\006Metr"
      "ic\0229\n\001x\030\001 \001(\0132(.sensoris.protobuf.types."
      "base.Int64ValueB\004\210\265\030\000\0229\n\001y\030\002 \001(\0132(.senso"
      "ris.protobuf.types.base.Int64ValueB\004\210\265\030\000"
      "\0229\n\001z\030\003 \001(\0132(.sensoris.protobuf.types.ba"
      "se.Int64ValueB\004\210\265\030\000\032\206\001\n\030HorizontalVertic"
      "alStdDev\0225\n\nhorizontal\030\001 \001(\0132\033.google.pr"
      "otobuf.Int64ValueB\004\210\265\030\000\0223\n\010vertical\030\002 \001("
      "\0132\033.google.protobuf.Int64ValueB\004\210\265\030\000\032\267\002\n"
      ")HorizontalConfidenceEllipseVerticalStdD"
      "ev\022C\n\030horizontal_ellipse_major\030\001 \001(\0132\033.g"
      "oogle.protobuf.Int64ValueB\004\210\265\030\000\022C\n\030horiz"
      "ontal_ellipse_minor\030\002 \001(\0132\033.google.proto"
      "buf.Int64ValueB\004\210\265\030\000\022K\n horizontal_ellip"
      "se_major_heading\030\003 \001(\0132\033.google.protobuf"
      ".Int64ValueB\004\210\265\030\002\0223\n\010vertical\030\004 \001(\0132\033.go"
      "ogle.protobuf.Int64ValueB\004\210\265\030\000B\023\n\021geogra"
      "phic_metricB\n\n\010accuracy\"\223\001\n\023PolylineAndA"
      "ccuracy\022S\n\025position_and_accuracy\030\001 \003(\01324"
      ".sensoris.protobuf.types.spatial.Positio"
      "nAndAccuracy\022\'\n\textension\030\017 \003(\0132\024.google"
      ".protobuf.Any\"\215\007\n\024XyzVectorAndAccuracy\022V"
      "\n\016metric_vehicle\030\001 \001(\0132<.sensoris.protob"
      "uf.types.spatial.XyzVectorAndAccuracy.Me"
      "tricH\000\022Z\n\022metric_event_group\030\002 \001(\0132<.sen"
      "soris.protobuf.types.spatial.XyzVectorAn"
      "dAccuracy.MetricH\000\022U\n\rmetric_origin\030\003 \001("
      "\0132<.sensoris.protobuf.types.spatial.XyzV"
      "ectorAndAccuracy.MetricH\000\022=\n\020combined_st"
      "d_dev\030\004 \001(\0132\033.google.protobuf.Int64Value"
      "B\004\210\265\030\000H\001\022O\n\007std_dev\030\005 \001(\0132<.sensoris.pro"
      "tobuf.types.spatial.XyzVectorAndAccuracy"
      ".StdDevH\001\022H\n\ncovariance\030\006 \001(\0132,.sensoris"
      ".protobuf.types.base.Int64Matrix3x3B\004\210\265\030"
      "\000H\001\022\'\n\textension\030\017 \003(\0132\024.google.protobuf"
      ".Any\032\222\001\n\006StdDev\022,\n\001x\030\001 \001(\0132\033.google.prot"
      "obuf.Int64ValueB\004\210\265\030\000\022,\n\001y\030\002 \001(\0132\033.googl"
      "e.protobuf.Int64ValueB\004\210\265\030\000\022,\n\001z\030\003 \001(\0132\033"
      ".google.protobuf.Int64ValueB\004\210\265\030\000\032\271\001\n\006Me"
      "tric\0229\n\001x\030\001 \001(\0132(.sensoris.protobuf.type"
      "s.base.Int64ValueB\004\210\265\030\000\0229\n\001y\030\002 \001(\0132(.sen"
      "soris.protobuf.types.base.Int64ValueB\004\210\265"
      "\030\000\0229\n\001z\030\003 \001(\0132(.sensoris.protobuf.types."
      "base.Int64ValueB\004\210\265\030\000B\n\n\010geometryB\n\n\010acc"
      "uracy\"\325\006\n\031RectangularBoxAndAccuracy\022b\n\016c"
      "orner_vectors\030\001 \001(\0132H.sensoris.protobuf."
      "types.spatial.RectangularBoxAndAccuracy."
      "CornerVectorsH\000\022s\n\027center_orientation_si"
      "ze\030\002 \001(\0132P.sensoris.protobuf.types.spati"
      "al.RectangularBoxAndAccuracy.CenterOrien"
      "tationSizeH\000\022\'\n\textension\030\017 \003(\0132\024.google"
      ".protobuf.Any\032\211\002\n\rCornerVectors\022Q\n\022first"
      "_and_accuracy\030\001 \001(\01325.sensoris.protobuf."
      "types.spatial.XyzVectorAndAccuracy\022R\n\023se"
      "cond_and_accuracy\030\002 \001(\01325.sensoris.proto"
      "buf.types.spatial.XyzVectorAndAccuracy\022Q"
      "\n\022third_and_accuracy\030\003 \001(\01325.sensoris.pr"
      "otobuf.types.spatial.XyzVectorAndAccurac"
      "y\032\235\002\n\025CenterOrientationSize\022Z\n\034center_po"
      "sition_and_accuracy\030\001 \001(\01324.sensoris.pro"
      "tobuf.types.spatial.PositionAndAccuracy\022"
      "V\n\030orientation_and_accuracy\030\002 \001(\01324.sens"
      "oris.protobuf.types.spatial.RotationAndA"
      "ccuracy\022P\n\021size_and_accuracy\030\003 \001(\01325.sen"
      "soris.protobuf.types.spatial.XyzVectorAn"
      "dAccuracyB\n\n\010geometry\"\204\n\n\023RotationAndAcc"
      "uracy\022S\n\reuler_vehicle\030\001 \001(\0132:.sensoris."
      "protobuf.types.spatial.RotationAndAccura"
      "cy.EulerH\000\022W\n\021euler_event_group\030\002 \001(\0132:."
      "sensoris.protobuf.types.spatial.Rotation"
      "AndAccuracy.EulerH\000\022]\n\022quaternion_vehicl"
      "e\030\003 \001(\0132\?.sensoris.protobuf.types.spatia"
      "l.RotationAndAccuracy.QuaternionH\000\022a\n\026qu"
      "aternion_event_group\030\004 \001(\0132\?.sensoris.pr"
      "otobuf.types.spatial.RotationAndAccuracy"
      ".QuaternionH\000\022=\n\020combined_std_dev\030\005 \001(\0132"
      "\033.google.protobuf.Int64ValueB\004\210\265\030\002H\001\022N\n\007"
      "std_dev\030\006 \001(\0132;.sensoris.protobuf.types."
      "spatial.RotationAndAccuracy.StdDevH\001\022H\n\n"
      "covariance\030\007 \001(\0132,.sensoris.protobuf.typ"
      "es.base.Int64Matrix3x3B\004\210\265\030\002H\001\022\'\n\textens"
      "ion\030\017 \003(\0132\024.google.protobuf.Any\032\301\001\n\005Eule"
      "r\022;\n\003yaw\030\001 \001(\0132(.sensoris.protobuf.types"
      ".base.Int64ValueB\004\210\265\030\002\022=\n\005pitch\030\002 \001(\0132(."
      "sensoris.protobuf.types.base.Int64ValueB"
      "\004\210\265\030\002\022<\n\004roll\030\003 \001(\0132(.sensoris.protobuf."
      "types.base.Int64ValueB\004\210\265\030\002\032\370\001\n\nQuaterni"
      "on\0229\n\001x\030\001 \001(\0132(.sensoris.protobuf.types."
      "base.Int64ValueB\004\210\265\030\003\0229\n\001y\030\002 \001(\0132(.senso"
      "ris.protobuf.types.base.Int64ValueB\004\210\265\030\003"
      "\0229\n\001z\030\003 \001(\0132(.sensoris.protobuf.types.ba"
      "se.Int64ValueB\004\210\265\030\003\0229\n\001w\030\004 \001(\0132(.sensori"
      "s.protobuf.types.base.Int64ValueB\004\210\265\030\003\032\233"
      "\001\n\006StdDev\022.\n\003yaw\030\001 \001(\0132\033.google.protobuf"
      ".Int64ValueB\004\210\265\030\002\0220\n\005pitch\030\002 \001(\0132\033.googl"
      "e.protobuf.Int64ValueB\004\210\265\030\002\022/\n\004roll\030\003 \001("
      "\0132\033.google.protobuf.Int64ValueB\004\210\265\030\002B\022\n\020"
      "euler_quaternionB\n\n\010accuracy\"\203\005\n\027Rotatio"
      "nRateAndAccuracy\022;\n\003yaw\030\001 \001(\0132(.sensoris"
      ".protobuf.types.base.Int64ValueB\004\210\265\030\002\022=\n"
      "\005pitch\030\002 \001(\0132(.sensoris.protobuf.types.b"
      "ase.Int64ValueB\004\210\265\030\002\022<\n\004roll\030\003 \001(\0132(.sen"
      "soris.protobuf.types.base.Int64ValueB\004\210\265"
      "\030\002\022=\n\020combined_std_dev\030\004 \001(\0132\033.google.pr"
      "otobuf.Int64ValueB\004\210\265\030\002H\000\022R\n\007std_dev\030\005 \001"
      "(\0132\?.sensoris.protobuf.types.spatial.Rot"
      "ationRateAndAccuracy.StdDevH\000\022H\n\ncovaria"
      "nce\030\006 \001(\0132,.sensoris.protobuf.types.base"
      ".Int64Matrix3x3B\004\210\265\030\002H\000\022\'\n\textension\030\017 \003"
      "(\0132\024.google.protobuf.Any\032\233\001\n\006StdDev\022.\n\003y"
      "aw\030\001 \001(\0132\033.google.protobuf.Int64ValueB\004\210"
      "\265\030\002\0220\n\005pitch\030\002 \001(\0132\033.google.protobuf.Int"
      "64ValueB\004\210\265\030\002\022/\n\004roll\030\003 \001(\0132\033.google.pro"
      "tobuf.Int64ValueB\004\210\265\030\002B\n\n\010accuracy\"\221\006\n\024M"
      "apLocationReference\022S\n\025position_and_accu"
      "racy\030\001 \001(\01324.sensoris.protobuf.types.spa"
      "tial.PositionAndAccuracy\022,\n\007z_level\030\002 \001("
      "\0132\033.google.protobuf.Int64Value\022n\n\032tile_l"
      "ink_offset_reference\030\003 \001(\0132H.sensoris.pr"
      "otobuf.types.spatial.MapLocationReferenc"
      "e.TileIdLinkIdOffsetH\000\022]\n\rmap_object_id\030"
      "\004 \001(\0132D.sensoris.protobuf.types.spatial."
      "MapLocationReference.TileIdObjectIdH\000\022\'\n"
      "\textension\030\017 \003(\0132\024.google.protobuf.Any\032\314"
      "\001\n\022TileIdLinkIdOffset\022,\n\007tile_id\030\001 \001(\0132\033"
      ".google.protobuf.Int64Value\022,\n\007link_id\030\002"
      " \001(\0132\033.google.protobuf.Int64Value\0221\n\006off"
      "set\030\003 \001(\0132\033.google.protobuf.Int64ValueB\004"
      "\210\265\030\000\022\'\n\textension\030\017 \003(\0132\024.google.protobu"
      "f.Any\032\227\001\n\016TileIdObjectId\022,\n\007tile_id\030\001 \001("
      "\0132\033.google.protobuf.Int64Value\022.\n\tobject"
      "_id\030\002 \001(\0132\033.google.protobuf.Int64Value\022\'"
      "\n\textension\030\017 \003(\0132\024.google.protobuf.AnyB"
      "\025\n\023map_based_referenceB7\n\032org.sensoris.t"
      "ypes.spatialB\024SensorisSpatialTypesP\001\370\001\001b"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6567);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensoris/protobuf/types/spatial.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto
namespace sensoris {
namespace protobuf {
namespace types {
namespace spatial {

// ===================================================================

void PositionAndAccuracy_Geographic::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::spatial::_PositionAndAccuracy_Geographic_default_instance_._instance.get_mutable()->longitude_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_PositionAndAccuracy_Geographic_default_instance_._instance.get_mutable()->latitude_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_PositionAndAccuracy_Geographic_default_instance_._instance.get_mutable()->altitude_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
}
void PositionAndAccuracy_Geographic::unsafe_arena_set_allocated_longitude(
    ::sensoris::protobuf::types::base::Int64Value* longitude) {
  if (GetArenaNoVirtual() == NULL) {
    delete longitude_;
  }
  longitude_ = longitude;
  if (longitude) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic.longitude)
}
void PositionAndAccuracy_Geographic::clear_longitude() {
  if (GetArenaNoVirtual() == NULL && longitude_ != NULL) {
    delete longitude_;
  }
  longitude_ = NULL;
}
void PositionAndAccuracy_Geographic::unsafe_arena_set_allocated_latitude(
    ::sensoris::protobuf::types::base::Int64Value* latitude) {
  if (GetArenaNoVirtual() == NULL) {
    delete latitude_;
  }
  latitude_ = latitude;
  if (latitude) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic.latitude)
}
void PositionAndAccuracy_Geographic::clear_latitude() {
  if (GetArenaNoVirtual() == NULL && latitude_ != NULL) {
    delete latitude_;
  }
  latitude_ = NULL;
}
void PositionAndAccuracy_Geographic::unsafe_arena_set_allocated_altitude(
    ::sensoris::protobuf::types::base::Int64Value* altitude) {
  if (GetArenaNoVirtual() == NULL) {
    delete altitude_;
  }
  altitude_ = altitude;
  if (altitude) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic.altitude)
}
void PositionAndAccuracy_Geographic::clear_altitude() {
  if (GetArenaNoVirtual() == NULL && altitude_ != NULL) {
    delete altitude_;
  }
  altitude_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionAndAccuracy_Geographic::kLongitudeFieldNumber;
const int PositionAndAccuracy_Geographic::kLatitudeFieldNumber;
const int PositionAndAccuracy_Geographic::kAltitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionAndAccuracy_Geographic::PositionAndAccuracy_Geographic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy_Geographic.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic)
}
PositionAndAccuracy_Geographic::PositionAndAccuracy_Geographic(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy_Geographic.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic)
}
PositionAndAccuracy_Geographic::PositionAndAccuracy_Geographic(const PositionAndAccuracy_Geographic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_longitude()) {
    longitude_ = new ::sensoris::protobuf::types::base::Int64Value(*from.longitude_);
  } else {
    longitude_ = NULL;
  }
  if (from.has_latitude()) {
    latitude_ = new ::sensoris::protobuf::types::base::Int64Value(*from.latitude_);
  } else {
    latitude_ = NULL;
  }
  if (from.has_altitude()) {
    altitude_ = new ::sensoris::protobuf::types::base::Int64Value(*from.altitude_);
  } else {
    altitude_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic)
}

void PositionAndAccuracy_Geographic::SharedCtor() {
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(altitude_));
}

PositionAndAccuracy_Geographic::~PositionAndAccuracy_Geographic() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic)
  SharedDtor();
}

void PositionAndAccuracy_Geographic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete longitude_;
  if (this != internal_default_instance()) delete latitude_;
  if (this != internal_default_instance()) delete altitude_;
}

void PositionAndAccuracy_Geographic::ArenaDtor(void* object) {
  PositionAndAccuracy_Geographic* _this = reinterpret_cast< PositionAndAccuracy_Geographic* >(object);
  (void)_this;
}
void PositionAndAccuracy_Geographic::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PositionAndAccuracy_Geographic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PositionAndAccuracy_Geographic::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PositionAndAccuracy_Geographic& PositionAndAccuracy_Geographic::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy_Geographic.base);
  return *internal_default_instance();
}


void PositionAndAccuracy_Geographic::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && longitude_ != NULL) {
    delete longitude_;
  }
  longitude_ = NULL;
  if (GetArenaNoVirtual() == NULL && latitude_ != NULL) {
    delete latitude_;
  }
  latitude_ = NULL;
  if (GetArenaNoVirtual() == NULL && altitude_ != NULL) {
    delete altitude_;
  }
  altitude_ = NULL;
  _internal_metadata_.Clear();
}

bool PositionAndAccuracy_Geographic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.Int64Value longitude = 1 [(.sensoris.protobuf.types.base.exponent) = 8];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_longitude()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Value latitude = 2 [(.sensoris.protobuf.types.base.exponent) = 8];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_latitude()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Value altitude = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_altitude()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic)
  return false;
#undef DO_
}

void PositionAndAccuracy_Geographic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Int64Value longitude = 1 [(.sensoris.protobuf.types.base.exponent) = 8];
  if (this->has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_longitude(), output);
  }

  // .sensoris.protobuf.types.base.Int64Value latitude = 2 [(.sensoris.protobuf.types.base.exponent) = 8];
  if (this->has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_latitude(), output);
  }

  // .sensoris.protobuf.types.base.Int64Value altitude = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
  if (this->has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_altitude(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic)
}

::google::protobuf::uint8* PositionAndAccuracy_Geographic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Int64Value longitude = 1 [(.sensoris.protobuf.types.base.exponent) = 8];
  if (this->has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_longitude(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Value latitude = 2 [(.sensoris.protobuf.types.base.exponent) = 8];
  if (this->has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_latitude(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Value altitude = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
  if (this->has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_altitude(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic)
  return target;
}

size_t PositionAndAccuracy_Geographic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Int64Value longitude = 1 [(.sensoris.protobuf.types.base.exponent) = 8];
  if (this->has_longitude()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *longitude_);
  }

  // .sensoris.protobuf.types.base.Int64Value latitude = 2 [(.sensoris.protobuf.types.base.exponent) = 8];
  if (this->has_latitude()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *latitude_);
  }

  // .sensoris.protobuf.types.base.Int64Value altitude = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
  if (this->has_altitude()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *altitude_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionAndAccuracy_Geographic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionAndAccuracy_Geographic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PositionAndAccuracy_Geographic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic)
    MergeFrom(*source);
  }
}

void PositionAndAccuracy_Geographic::MergeFrom(const PositionAndAccuracy_Geographic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_longitude()) {
    mutable_longitude()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.longitude());
  }
  if (from.has_latitude()) {
    mutable_latitude()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.latitude());
  }
  if (from.has_altitude()) {
    mutable_altitude()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.altitude());
  }
}

void PositionAndAccuracy_Geographic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionAndAccuracy_Geographic::CopyFrom(const PositionAndAccuracy_Geographic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionAndAccuracy_Geographic::IsInitialized() const {
  return true;
}

void PositionAndAccuracy_Geographic::Swap(PositionAndAccuracy_Geographic* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PositionAndAccuracy_Geographic* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PositionAndAccuracy_Geographic::UnsafeArenaSwap(PositionAndAccuracy_Geographic* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PositionAndAccuracy_Geographic::InternalSwap(PositionAndAccuracy_Geographic* other) {
  using std::swap;
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(altitude_, other->altitude_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PositionAndAccuracy_Geographic::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PositionAndAccuracy_Metric::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::spatial::_PositionAndAccuracy_Metric_default_instance_._instance.get_mutable()->x_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_PositionAndAccuracy_Metric_default_instance_._instance.get_mutable()->y_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_PositionAndAccuracy_Metric_default_instance_._instance.get_mutable()->z_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
}
void PositionAndAccuracy_Metric::unsafe_arena_set_allocated_x(
    ::sensoris::protobuf::types::base::Int64Value* x) {
  if (GetArenaNoVirtual() == NULL) {
    delete x_;
  }
  x_ = x;
  if (x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric.x)
}
void PositionAndAccuracy_Metric::clear_x() {
  if (GetArenaNoVirtual() == NULL && x_ != NULL) {
    delete x_;
  }
  x_ = NULL;
}
void PositionAndAccuracy_Metric::unsafe_arena_set_allocated_y(
    ::sensoris::protobuf::types::base::Int64Value* y) {
  if (GetArenaNoVirtual() == NULL) {
    delete y_;
  }
  y_ = y;
  if (y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric.y)
}
void PositionAndAccuracy_Metric::clear_y() {
  if (GetArenaNoVirtual() == NULL && y_ != NULL) {
    delete y_;
  }
  y_ = NULL;
}
void PositionAndAccuracy_Metric::unsafe_arena_set_allocated_z(
    ::sensoris::protobuf::types::base::Int64Value* z) {
  if (GetArenaNoVirtual() == NULL) {
    delete z_;
  }
  z_ = z;
  if (z) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric.z)
}
void PositionAndAccuracy_Metric::clear_z() {
  if (GetArenaNoVirtual() == NULL && z_ != NULL) {
    delete z_;
  }
  z_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionAndAccuracy_Metric::kXFieldNumber;
const int PositionAndAccuracy_Metric::kYFieldNumber;
const int PositionAndAccuracy_Metric::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionAndAccuracy_Metric::PositionAndAccuracy_Metric()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy_Metric.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric)
}
PositionAndAccuracy_Metric::PositionAndAccuracy_Metric(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy_Metric.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric)
}
PositionAndAccuracy_Metric::PositionAndAccuracy_Metric(const PositionAndAccuracy_Metric& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_x()) {
    x_ = new ::sensoris::protobuf::types::base::Int64Value(*from.x_);
  } else {
    x_ = NULL;
  }
  if (from.has_y()) {
    y_ = new ::sensoris::protobuf::types::base::Int64Value(*from.y_);
  } else {
    y_ = NULL;
  }
  if (from.has_z()) {
    z_ = new ::sensoris::protobuf::types::base::Int64Value(*from.z_);
  } else {
    z_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric)
}

void PositionAndAccuracy_Metric::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

PositionAndAccuracy_Metric::~PositionAndAccuracy_Metric() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric)
  SharedDtor();
}

void PositionAndAccuracy_Metric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete x_;
  if (this != internal_default_instance()) delete y_;
  if (this != internal_default_instance()) delete z_;
}

void PositionAndAccuracy_Metric::ArenaDtor(void* object) {
  PositionAndAccuracy_Metric* _this = reinterpret_cast< PositionAndAccuracy_Metric* >(object);
  (void)_this;
}
void PositionAndAccuracy_Metric::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PositionAndAccuracy_Metric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PositionAndAccuracy_Metric::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PositionAndAccuracy_Metric& PositionAndAccuracy_Metric::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy_Metric.base);
  return *internal_default_instance();
}


void PositionAndAccuracy_Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && x_ != NULL) {
    delete x_;
  }
  x_ = NULL;
  if (GetArenaNoVirtual() == NULL && y_ != NULL) {
    delete y_;
  }
  y_ = NULL;
  if (GetArenaNoVirtual() == NULL && z_ != NULL) {
    delete z_;
  }
  z_ = NULL;
  _internal_metadata_.Clear();
}

bool PositionAndAccuracy_Metric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.Int64Value x = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Value y = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Value z = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_z()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric)
  return false;
#undef DO_
}

void PositionAndAccuracy_Metric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Int64Value x = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_x(), output);
  }

  // .sensoris.protobuf.types.base.Int64Value y = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_y(), output);
  }

  // .sensoris.protobuf.types.base.Int64Value z = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric)
}

::google::protobuf::uint8* PositionAndAccuracy_Metric::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Int64Value x = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_x(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Value y = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_y(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Value z = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_z(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric)
  return target;
}

size_t PositionAndAccuracy_Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Int64Value x = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_x()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *x_);
  }

  // .sensoris.protobuf.types.base.Int64Value y = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_y()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *y_);
  }

  // .sensoris.protobuf.types.base.Int64Value z = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_z()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *z_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionAndAccuracy_Metric::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionAndAccuracy_Metric* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PositionAndAccuracy_Metric>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric)
    MergeFrom(*source);
  }
}

void PositionAndAccuracy_Metric::MergeFrom(const PositionAndAccuracy_Metric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_x()) {
    mutable_x()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.x());
  }
  if (from.has_y()) {
    mutable_y()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.y());
  }
  if (from.has_z()) {
    mutable_z()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.z());
  }
}

void PositionAndAccuracy_Metric::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionAndAccuracy_Metric::CopyFrom(const PositionAndAccuracy_Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionAndAccuracy_Metric::IsInitialized() const {
  return true;
}

void PositionAndAccuracy_Metric::Swap(PositionAndAccuracy_Metric* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PositionAndAccuracy_Metric* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PositionAndAccuracy_Metric::UnsafeArenaSwap(PositionAndAccuracy_Metric* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PositionAndAccuracy_Metric::InternalSwap(PositionAndAccuracy_Metric* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PositionAndAccuracy_Metric::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PositionAndAccuracy_HorizontalVerticalStdDev::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::spatial::_PositionAndAccuracy_HorizontalVerticalStdDev_default_instance_._instance.get_mutable()->horizontal_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_PositionAndAccuracy_HorizontalVerticalStdDev_default_instance_._instance.get_mutable()->vertical_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
}
void PositionAndAccuracy_HorizontalVerticalStdDev::unsafe_arena_set_allocated_horizontal(
    ::google::protobuf::Int64Value* horizontal) {
  if (GetArenaNoVirtual() == NULL) {
    delete horizontal_;
  }
  horizontal_ = horizontal;
  if (horizontal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev.horizontal)
}
void PositionAndAccuracy_HorizontalVerticalStdDev::clear_horizontal() {
  if (GetArenaNoVirtual() == NULL && horizontal_ != NULL) {
    delete horizontal_;
  }
  horizontal_ = NULL;
}
void PositionAndAccuracy_HorizontalVerticalStdDev::unsafe_arena_set_allocated_vertical(
    ::google::protobuf::Int64Value* vertical) {
  if (GetArenaNoVirtual() == NULL) {
    delete vertical_;
  }
  vertical_ = vertical;
  if (vertical) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev.vertical)
}
void PositionAndAccuracy_HorizontalVerticalStdDev::clear_vertical() {
  if (GetArenaNoVirtual() == NULL && vertical_ != NULL) {
    delete vertical_;
  }
  vertical_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionAndAccuracy_HorizontalVerticalStdDev::kHorizontalFieldNumber;
const int PositionAndAccuracy_HorizontalVerticalStdDev::kVerticalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionAndAccuracy_HorizontalVerticalStdDev::PositionAndAccuracy_HorizontalVerticalStdDev()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy_HorizontalVerticalStdDev.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev)
}
PositionAndAccuracy_HorizontalVerticalStdDev::PositionAndAccuracy_HorizontalVerticalStdDev(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy_HorizontalVerticalStdDev.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev)
}
PositionAndAccuracy_HorizontalVerticalStdDev::PositionAndAccuracy_HorizontalVerticalStdDev(const PositionAndAccuracy_HorizontalVerticalStdDev& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_horizontal()) {
    horizontal_ = new ::google::protobuf::Int64Value(*from.horizontal_);
  } else {
    horizontal_ = NULL;
  }
  if (from.has_vertical()) {
    vertical_ = new ::google::protobuf::Int64Value(*from.vertical_);
  } else {
    vertical_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev)
}

void PositionAndAccuracy_HorizontalVerticalStdDev::SharedCtor() {
  ::memset(&horizontal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vertical_) -
      reinterpret_cast<char*>(&horizontal_)) + sizeof(vertical_));
}

PositionAndAccuracy_HorizontalVerticalStdDev::~PositionAndAccuracy_HorizontalVerticalStdDev() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev)
  SharedDtor();
}

void PositionAndAccuracy_HorizontalVerticalStdDev::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete horizontal_;
  if (this != internal_default_instance()) delete vertical_;
}

void PositionAndAccuracy_HorizontalVerticalStdDev::ArenaDtor(void* object) {
  PositionAndAccuracy_HorizontalVerticalStdDev* _this = reinterpret_cast< PositionAndAccuracy_HorizontalVerticalStdDev* >(object);
  (void)_this;
}
void PositionAndAccuracy_HorizontalVerticalStdDev::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PositionAndAccuracy_HorizontalVerticalStdDev::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PositionAndAccuracy_HorizontalVerticalStdDev::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PositionAndAccuracy_HorizontalVerticalStdDev& PositionAndAccuracy_HorizontalVerticalStdDev::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy_HorizontalVerticalStdDev.base);
  return *internal_default_instance();
}


void PositionAndAccuracy_HorizontalVerticalStdDev::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && horizontal_ != NULL) {
    delete horizontal_;
  }
  horizontal_ = NULL;
  if (GetArenaNoVirtual() == NULL && vertical_ != NULL) {
    delete vertical_;
  }
  vertical_ = NULL;
  _internal_metadata_.Clear();
}

bool PositionAndAccuracy_HorizontalVerticalStdDev::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Int64Value horizontal = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_horizontal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value vertical = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vertical()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev)
  return false;
#undef DO_
}

void PositionAndAccuracy_HorizontalVerticalStdDev::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int64Value horizontal = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_horizontal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_horizontal(), output);
  }

  // .google.protobuf.Int64Value vertical = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_vertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_vertical(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev)
}

::google::protobuf::uint8* PositionAndAccuracy_HorizontalVerticalStdDev::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int64Value horizontal = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_horizontal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_horizontal(), deterministic, target);
  }

  // .google.protobuf.Int64Value vertical = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_vertical()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_vertical(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev)
  return target;
}

size_t PositionAndAccuracy_HorizontalVerticalStdDev::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Int64Value horizontal = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_horizontal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *horizontal_);
  }

  // .google.protobuf.Int64Value vertical = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_vertical()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vertical_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionAndAccuracy_HorizontalVerticalStdDev::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionAndAccuracy_HorizontalVerticalStdDev* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PositionAndAccuracy_HorizontalVerticalStdDev>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev)
    MergeFrom(*source);
  }
}

void PositionAndAccuracy_HorizontalVerticalStdDev::MergeFrom(const PositionAndAccuracy_HorizontalVerticalStdDev& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_horizontal()) {
    mutable_horizontal()->::google::protobuf::Int64Value::MergeFrom(from.horizontal());
  }
  if (from.has_vertical()) {
    mutable_vertical()->::google::protobuf::Int64Value::MergeFrom(from.vertical());
  }
}

void PositionAndAccuracy_HorizontalVerticalStdDev::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionAndAccuracy_HorizontalVerticalStdDev::CopyFrom(const PositionAndAccuracy_HorizontalVerticalStdDev& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionAndAccuracy_HorizontalVerticalStdDev::IsInitialized() const {
  return true;
}

void PositionAndAccuracy_HorizontalVerticalStdDev::Swap(PositionAndAccuracy_HorizontalVerticalStdDev* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PositionAndAccuracy_HorizontalVerticalStdDev* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PositionAndAccuracy_HorizontalVerticalStdDev::UnsafeArenaSwap(PositionAndAccuracy_HorizontalVerticalStdDev* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PositionAndAccuracy_HorizontalVerticalStdDev::InternalSwap(PositionAndAccuracy_HorizontalVerticalStdDev* other) {
  using std::swap;
  swap(horizontal_, other->horizontal_);
  swap(vertical_, other->vertical_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PositionAndAccuracy_HorizontalVerticalStdDev::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::spatial::_PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev_default_instance_._instance.get_mutable()->horizontal_ellipse_major_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev_default_instance_._instance.get_mutable()->horizontal_ellipse_minor_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev_default_instance_._instance.get_mutable()->horizontal_ellipse_major_heading_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev_default_instance_._instance.get_mutable()->vertical_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
}
void PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::unsafe_arena_set_allocated_horizontal_ellipse_major(
    ::google::protobuf::Int64Value* horizontal_ellipse_major) {
  if (GetArenaNoVirtual() == NULL) {
    delete horizontal_ellipse_major_;
  }
  horizontal_ellipse_major_ = horizontal_ellipse_major;
  if (horizontal_ellipse_major) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev.horizontal_ellipse_major)
}
void PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::clear_horizontal_ellipse_major() {
  if (GetArenaNoVirtual() == NULL && horizontal_ellipse_major_ != NULL) {
    delete horizontal_ellipse_major_;
  }
  horizontal_ellipse_major_ = NULL;
}
void PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::unsafe_arena_set_allocated_horizontal_ellipse_minor(
    ::google::protobuf::Int64Value* horizontal_ellipse_minor) {
  if (GetArenaNoVirtual() == NULL) {
    delete horizontal_ellipse_minor_;
  }
  horizontal_ellipse_minor_ = horizontal_ellipse_minor;
  if (horizontal_ellipse_minor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev.horizontal_ellipse_minor)
}
void PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::clear_horizontal_ellipse_minor() {
  if (GetArenaNoVirtual() == NULL && horizontal_ellipse_minor_ != NULL) {
    delete horizontal_ellipse_minor_;
  }
  horizontal_ellipse_minor_ = NULL;
}
void PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::unsafe_arena_set_allocated_horizontal_ellipse_major_heading(
    ::google::protobuf::Int64Value* horizontal_ellipse_major_heading) {
  if (GetArenaNoVirtual() == NULL) {
    delete horizontal_ellipse_major_heading_;
  }
  horizontal_ellipse_major_heading_ = horizontal_ellipse_major_heading;
  if (horizontal_ellipse_major_heading) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev.horizontal_ellipse_major_heading)
}
void PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::clear_horizontal_ellipse_major_heading() {
  if (GetArenaNoVirtual() == NULL && horizontal_ellipse_major_heading_ != NULL) {
    delete horizontal_ellipse_major_heading_;
  }
  horizontal_ellipse_major_heading_ = NULL;
}
void PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::unsafe_arena_set_allocated_vertical(
    ::google::protobuf::Int64Value* vertical) {
  if (GetArenaNoVirtual() == NULL) {
    delete vertical_;
  }
  vertical_ = vertical;
  if (vertical) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev.vertical)
}
void PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::clear_vertical() {
  if (GetArenaNoVirtual() == NULL && vertical_ != NULL) {
    delete vertical_;
  }
  vertical_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::kHorizontalEllipseMajorFieldNumber;
const int PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::kHorizontalEllipseMinorFieldNumber;
const int PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::kHorizontalEllipseMajorHeadingFieldNumber;
const int PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::kVerticalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev)
}
PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev)
}
PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev(const PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_horizontal_ellipse_major()) {
    horizontal_ellipse_major_ = new ::google::protobuf::Int64Value(*from.horizontal_ellipse_major_);
  } else {
    horizontal_ellipse_major_ = NULL;
  }
  if (from.has_horizontal_ellipse_minor()) {
    horizontal_ellipse_minor_ = new ::google::protobuf::Int64Value(*from.horizontal_ellipse_minor_);
  } else {
    horizontal_ellipse_minor_ = NULL;
  }
  if (from.has_horizontal_ellipse_major_heading()) {
    horizontal_ellipse_major_heading_ = new ::google::protobuf::Int64Value(*from.horizontal_ellipse_major_heading_);
  } else {
    horizontal_ellipse_major_heading_ = NULL;
  }
  if (from.has_vertical()) {
    vertical_ = new ::google::protobuf::Int64Value(*from.vertical_);
  } else {
    vertical_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev)
}

void PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::SharedCtor() {
  ::memset(&horizontal_ellipse_major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vertical_) -
      reinterpret_cast<char*>(&horizontal_ellipse_major_)) + sizeof(vertical_));
}

PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::~PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev)
  SharedDtor();
}

void PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete horizontal_ellipse_major_;
  if (this != internal_default_instance()) delete horizontal_ellipse_minor_;
  if (this != internal_default_instance()) delete horizontal_ellipse_major_heading_;
  if (this != internal_default_instance()) delete vertical_;
}

void PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::ArenaDtor(void* object) {
  PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev* _this = reinterpret_cast< PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev* >(object);
  (void)_this;
}
void PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev& PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev.base);
  return *internal_default_instance();
}


void PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && horizontal_ellipse_major_ != NULL) {
    delete horizontal_ellipse_major_;
  }
  horizontal_ellipse_major_ = NULL;
  if (GetArenaNoVirtual() == NULL && horizontal_ellipse_minor_ != NULL) {
    delete horizontal_ellipse_minor_;
  }
  horizontal_ellipse_minor_ = NULL;
  if (GetArenaNoVirtual() == NULL && horizontal_ellipse_major_heading_ != NULL) {
    delete horizontal_ellipse_major_heading_;
  }
  horizontal_ellipse_major_heading_ = NULL;
  if (GetArenaNoVirtual() == NULL && vertical_ != NULL) {
    delete vertical_;
  }
  vertical_ = NULL;
  _internal_metadata_.Clear();
}

bool PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Int64Value horizontal_ellipse_major = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_horizontal_ellipse_major()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value horizontal_ellipse_minor = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_horizontal_ellipse_minor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value horizontal_ellipse_major_heading = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_horizontal_ellipse_major_heading()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value vertical = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vertical()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev)
  return false;
#undef DO_
}

void PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int64Value horizontal_ellipse_major = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_horizontal_ellipse_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_horizontal_ellipse_major(), output);
  }

  // .google.protobuf.Int64Value horizontal_ellipse_minor = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_horizontal_ellipse_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_horizontal_ellipse_minor(), output);
  }

  // .google.protobuf.Int64Value horizontal_ellipse_major_heading = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_horizontal_ellipse_major_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_horizontal_ellipse_major_heading(), output);
  }

  // .google.protobuf.Int64Value vertical = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_vertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_vertical(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev)
}

::google::protobuf::uint8* PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int64Value horizontal_ellipse_major = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_horizontal_ellipse_major()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_horizontal_ellipse_major(), deterministic, target);
  }

  // .google.protobuf.Int64Value horizontal_ellipse_minor = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_horizontal_ellipse_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_horizontal_ellipse_minor(), deterministic, target);
  }

  // .google.protobuf.Int64Value horizontal_ellipse_major_heading = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_horizontal_ellipse_major_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_horizontal_ellipse_major_heading(), deterministic, target);
  }

  // .google.protobuf.Int64Value vertical = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_vertical()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_vertical(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev)
  return target;
}

size_t PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Int64Value horizontal_ellipse_major = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_horizontal_ellipse_major()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *horizontal_ellipse_major_);
  }

  // .google.protobuf.Int64Value horizontal_ellipse_minor = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_horizontal_ellipse_minor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *horizontal_ellipse_minor_);
  }

  // .google.protobuf.Int64Value horizontal_ellipse_major_heading = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_horizontal_ellipse_major_heading()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *horizontal_ellipse_major_heading_);
  }

  // .google.protobuf.Int64Value vertical = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_vertical()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *vertical_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev)
    MergeFrom(*source);
  }
}

void PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::MergeFrom(const PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_horizontal_ellipse_major()) {
    mutable_horizontal_ellipse_major()->::google::protobuf::Int64Value::MergeFrom(from.horizontal_ellipse_major());
  }
  if (from.has_horizontal_ellipse_minor()) {
    mutable_horizontal_ellipse_minor()->::google::protobuf::Int64Value::MergeFrom(from.horizontal_ellipse_minor());
  }
  if (from.has_horizontal_ellipse_major_heading()) {
    mutable_horizontal_ellipse_major_heading()->::google::protobuf::Int64Value::MergeFrom(from.horizontal_ellipse_major_heading());
  }
  if (from.has_vertical()) {
    mutable_vertical()->::google::protobuf::Int64Value::MergeFrom(from.vertical());
  }
}

void PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::CopyFrom(const PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::IsInitialized() const {
  return true;
}

void PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::Swap(PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::UnsafeArenaSwap(PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::InternalSwap(PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev* other) {
  using std::swap;
  swap(horizontal_ellipse_major_, other->horizontal_ellipse_major_);
  swap(horizontal_ellipse_minor_, other->horizontal_ellipse_minor_);
  swap(horizontal_ellipse_major_heading_, other->horizontal_ellipse_major_heading_);
  swap(vertical_, other->vertical_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PositionAndAccuracy::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::spatial::_PositionAndAccuracy_default_instance_.geographic_wgs84_ = const_cast< ::sensoris::protobuf::types::spatial::PositionAndAccuracy_Geographic*>(
      ::sensoris::protobuf::types::spatial::PositionAndAccuracy_Geographic::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_PositionAndAccuracy_default_instance_.metric_vehicle_ = const_cast< ::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric*>(
      ::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_PositionAndAccuracy_default_instance_.metric_event_group_ = const_cast< ::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric*>(
      ::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_PositionAndAccuracy_default_instance_.metric_ecef_ = const_cast< ::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric*>(
      ::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_PositionAndAccuracy_default_instance_.combined_std_dev_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_PositionAndAccuracy_default_instance_.std_dev_ = const_cast< ::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalVerticalStdDev*>(
      ::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalVerticalStdDev::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_PositionAndAccuracy_default_instance_.horizontal_confidence_ellipse_vertical_std_dev_ = const_cast< ::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev*>(
      ::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_PositionAndAccuracy_default_instance_.covariance_ = const_cast< ::sensoris::protobuf::types::base::Int64Matrix3x3*>(
      ::sensoris::protobuf::types::base::Int64Matrix3x3::internal_default_instance());
}
void PositionAndAccuracy::set_allocated_geographic_wgs84(::sensoris::protobuf::types::spatial::PositionAndAccuracy_Geographic* geographic_wgs84) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_geographic_metric();
  if (geographic_wgs84) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(geographic_wgs84);
    if (message_arena != submessage_arena) {
      geographic_wgs84 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, geographic_wgs84, submessage_arena);
    }
    set_has_geographic_wgs84();
    geographic_metric_.geographic_wgs84_ = geographic_wgs84;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.PositionAndAccuracy.geographic_wgs84)
}
void PositionAndAccuracy::set_allocated_metric_vehicle(::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric* metric_vehicle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_geographic_metric();
  if (metric_vehicle) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(metric_vehicle);
    if (message_arena != submessage_arena) {
      metric_vehicle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metric_vehicle, submessage_arena);
    }
    set_has_metric_vehicle();
    geographic_metric_.metric_vehicle_ = metric_vehicle;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.PositionAndAccuracy.metric_vehicle)
}
void PositionAndAccuracy::set_allocated_metric_event_group(::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric* metric_event_group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_geographic_metric();
  if (metric_event_group) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(metric_event_group);
    if (message_arena != submessage_arena) {
      metric_event_group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metric_event_group, submessage_arena);
    }
    set_has_metric_event_group();
    geographic_metric_.metric_event_group_ = metric_event_group;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.PositionAndAccuracy.metric_event_group)
}
void PositionAndAccuracy::set_allocated_metric_ecef(::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric* metric_ecef) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_geographic_metric();
  if (metric_ecef) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(metric_ecef);
    if (message_arena != submessage_arena) {
      metric_ecef = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metric_ecef, submessage_arena);
    }
    set_has_metric_ecef();
    geographic_metric_.metric_ecef_ = metric_ecef;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.PositionAndAccuracy.metric_ecef)
}
void PositionAndAccuracy::set_allocated_combined_std_dev(::google::protobuf::Int64Value* combined_std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_accuracy();
  if (combined_std_dev) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(combined_std_dev)->GetArena();
    if (message_arena != submessage_arena) {
      combined_std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, combined_std_dev, submessage_arena);
    }
    set_has_combined_std_dev();
    accuracy_.combined_std_dev_ = combined_std_dev;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.PositionAndAccuracy.combined_std_dev)
}
void PositionAndAccuracy::clear_combined_std_dev() {
  if (has_combined_std_dev()) {
    if (GetArenaNoVirtual() == NULL) {
      delete accuracy_.combined_std_dev_;
    }
    clear_has_accuracy();
  }
}
void PositionAndAccuracy::set_allocated_std_dev(::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalVerticalStdDev* std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_accuracy();
  if (std_dev) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(std_dev);
    if (message_arena != submessage_arena) {
      std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, std_dev, submessage_arena);
    }
    set_has_std_dev();
    accuracy_.std_dev_ = std_dev;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.PositionAndAccuracy.std_dev)
}
void PositionAndAccuracy::set_allocated_horizontal_confidence_ellipse_vertical_std_dev(::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev* horizontal_confidence_ellipse_vertical_std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_accuracy();
  if (horizontal_confidence_ellipse_vertical_std_dev) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(horizontal_confidence_ellipse_vertical_std_dev);
    if (message_arena != submessage_arena) {
      horizontal_confidence_ellipse_vertical_std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, horizontal_confidence_ellipse_vertical_std_dev, submessage_arena);
    }
    set_has_horizontal_confidence_ellipse_vertical_std_dev();
    accuracy_.horizontal_confidence_ellipse_vertical_std_dev_ = horizontal_confidence_ellipse_vertical_std_dev;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.PositionAndAccuracy.horizontal_confidence_ellipse_vertical_std_dev)
}
void PositionAndAccuracy::set_allocated_covariance(::sensoris::protobuf::types::base::Int64Matrix3x3* covariance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_accuracy();
  if (covariance) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(covariance)->GetArena();
    if (message_arena != submessage_arena) {
      covariance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, covariance, submessage_arena);
    }
    set_has_covariance();
    accuracy_.covariance_ = covariance;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.PositionAndAccuracy.covariance)
}
void PositionAndAccuracy::clear_covariance() {
  if (has_covariance()) {
    if (GetArenaNoVirtual() == NULL) {
      delete accuracy_.covariance_;
    }
    clear_has_accuracy();
  }
}
void PositionAndAccuracy::clear_extension() {
  extension_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PositionAndAccuracy::kGeographicWgs84FieldNumber;
const int PositionAndAccuracy::kMetricVehicleFieldNumber;
const int PositionAndAccuracy::kMetricEventGroupFieldNumber;
const int PositionAndAccuracy::kMetricEcefFieldNumber;
const int PositionAndAccuracy::kCombinedStdDevFieldNumber;
const int PositionAndAccuracy::kStdDevFieldNumber;
const int PositionAndAccuracy::kHorizontalConfidenceEllipseVerticalStdDevFieldNumber;
const int PositionAndAccuracy::kCovarianceFieldNumber;
const int PositionAndAccuracy::kExtensionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PositionAndAccuracy::PositionAndAccuracy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.spatial.PositionAndAccuracy)
}
PositionAndAccuracy::PositionAndAccuracy(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  extension_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.spatial.PositionAndAccuracy)
}
PositionAndAccuracy::PositionAndAccuracy(const PositionAndAccuracy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_geographic_metric();
  switch (from.geographic_metric_case()) {
    case kGeographicWgs84: {
      mutable_geographic_wgs84()->::sensoris::protobuf::types::spatial::PositionAndAccuracy_Geographic::MergeFrom(from.geographic_wgs84());
      break;
    }
    case kMetricVehicle: {
      mutable_metric_vehicle()->::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric::MergeFrom(from.metric_vehicle());
      break;
    }
    case kMetricEventGroup: {
      mutable_metric_event_group()->::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric::MergeFrom(from.metric_event_group());
      break;
    }
    case kMetricEcef: {
      mutable_metric_ecef()->::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric::MergeFrom(from.metric_ecef());
      break;
    }
    case GEOGRAPHIC_METRIC_NOT_SET: {
      break;
    }
  }
  clear_has_accuracy();
  switch (from.accuracy_case()) {
    case kCombinedStdDev: {
      mutable_combined_std_dev()->::google::protobuf::Int64Value::MergeFrom(from.combined_std_dev());
      break;
    }
    case kStdDev: {
      mutable_std_dev()->::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalVerticalStdDev::MergeFrom(from.std_dev());
      break;
    }
    case kHorizontalConfidenceEllipseVerticalStdDev: {
      mutable_horizontal_confidence_ellipse_vertical_std_dev()->::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::MergeFrom(from.horizontal_confidence_ellipse_vertical_std_dev());
      break;
    }
    case kCovariance: {
      mutable_covariance()->::sensoris::protobuf::types::base::Int64Matrix3x3::MergeFrom(from.covariance());
      break;
    }
    case ACCURACY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.spatial.PositionAndAccuracy)
}

void PositionAndAccuracy::SharedCtor() {
  clear_has_geographic_metric();
  clear_has_accuracy();
}

PositionAndAccuracy::~PositionAndAccuracy() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.spatial.PositionAndAccuracy)
  SharedDtor();
}

void PositionAndAccuracy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_geographic_metric()) {
    clear_geographic_metric();
  }
  if (has_accuracy()) {
    clear_accuracy();
  }
}

void PositionAndAccuracy::ArenaDtor(void* object) {
  PositionAndAccuracy* _this = reinterpret_cast< PositionAndAccuracy* >(object);
  (void)_this;
}
void PositionAndAccuracy::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PositionAndAccuracy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PositionAndAccuracy::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PositionAndAccuracy& PositionAndAccuracy::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy.base);
  return *internal_default_instance();
}


void PositionAndAccuracy::clear_geographic_metric() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.types.spatial.PositionAndAccuracy)
  switch (geographic_metric_case()) {
    case kGeographicWgs84: {
      if (GetArenaNoVirtual() == NULL) {
        delete geographic_metric_.geographic_wgs84_;
      }
      break;
    }
    case kMetricVehicle: {
      if (GetArenaNoVirtual() == NULL) {
        delete geographic_metric_.metric_vehicle_;
      }
      break;
    }
    case kMetricEventGroup: {
      if (GetArenaNoVirtual() == NULL) {
        delete geographic_metric_.metric_event_group_;
      }
      break;
    }
    case kMetricEcef: {
      if (GetArenaNoVirtual() == NULL) {
        delete geographic_metric_.metric_ecef_;
      }
      break;
    }
    case GEOGRAPHIC_METRIC_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GEOGRAPHIC_METRIC_NOT_SET;
}

void PositionAndAccuracy::clear_accuracy() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.types.spatial.PositionAndAccuracy)
  switch (accuracy_case()) {
    case kCombinedStdDev: {
      if (GetArenaNoVirtual() == NULL) {
        delete accuracy_.combined_std_dev_;
      }
      break;
    }
    case kStdDev: {
      if (GetArenaNoVirtual() == NULL) {
        delete accuracy_.std_dev_;
      }
      break;
    }
    case kHorizontalConfidenceEllipseVerticalStdDev: {
      if (GetArenaNoVirtual() == NULL) {
        delete accuracy_.horizontal_confidence_ellipse_vertical_std_dev_;
      }
      break;
    }
    case kCovariance: {
      if (GetArenaNoVirtual() == NULL) {
        delete accuracy_.covariance_;
      }
      break;
    }
    case ACCURACY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = ACCURACY_NOT_SET;
}


void PositionAndAccuracy::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.spatial.PositionAndAccuracy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extension_.Clear();
  clear_geographic_metric();
  clear_accuracy();
  _internal_metadata_.Clear();
}

bool PositionAndAccuracy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.spatial.PositionAndAccuracy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic geographic_wgs84 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_geographic_wgs84()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric metric_vehicle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metric_vehicle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric metric_event_group = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metric_event_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric metric_ecef = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metric_ecef()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value combined_std_dev = 5 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_combined_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev std_dev = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev horizontal_confidence_ellipse_vertical_std_dev = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_horizontal_confidence_ellipse_vertical_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Matrix3x3 covariance = 8 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_covariance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any extension = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_extension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.spatial.PositionAndAccuracy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.spatial.PositionAndAccuracy)
  return false;
#undef DO_
}

void PositionAndAccuracy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.spatial.PositionAndAccuracy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic geographic_wgs84 = 1;
  if (has_geographic_wgs84()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_geographic_wgs84(), output);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric metric_vehicle = 2;
  if (has_metric_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_metric_vehicle(), output);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric metric_event_group = 3;
  if (has_metric_event_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_metric_event_group(), output);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric metric_ecef = 4;
  if (has_metric_ecef()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_metric_ecef(), output);
  }

  // .google.protobuf.Int64Value combined_std_dev = 5 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (has_combined_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_combined_std_dev(), output);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev std_dev = 6;
  if (has_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_std_dev(), output);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev horizontal_confidence_ellipse_vertical_std_dev = 7;
  if (has_horizontal_confidence_ellipse_vertical_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_horizontal_confidence_ellipse_vertical_std_dev(), output);
  }

  // .sensoris.protobuf.types.base.Int64Matrix3x3 covariance = 8 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (has_covariance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_covariance(), output);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->extension(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.spatial.PositionAndAccuracy)
}

::google::protobuf::uint8* PositionAndAccuracy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.spatial.PositionAndAccuracy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic geographic_wgs84 = 1;
  if (has_geographic_wgs84()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_geographic_wgs84(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric metric_vehicle = 2;
  if (has_metric_vehicle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_metric_vehicle(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric metric_event_group = 3;
  if (has_metric_event_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_metric_event_group(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric metric_ecef = 4;
  if (has_metric_ecef()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_metric_ecef(), deterministic, target);
  }

  // .google.protobuf.Int64Value combined_std_dev = 5 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (has_combined_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_combined_std_dev(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev std_dev = 6;
  if (has_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_std_dev(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev horizontal_confidence_ellipse_vertical_std_dev = 7;
  if (has_horizontal_confidence_ellipse_vertical_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_horizontal_confidence_ellipse_vertical_std_dev(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Matrix3x3 covariance = 8 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (has_covariance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_covariance(), deterministic, target);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->extension(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.spatial.PositionAndAccuracy)
  return target;
}

size_t PositionAndAccuracy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.spatial.PositionAndAccuracy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.protobuf.Any extension = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->extension_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->extension(static_cast<int>(i)));
    }
  }

  switch (geographic_metric_case()) {
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy.Geographic geographic_wgs84 = 1;
    case kGeographicWgs84: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *geographic_metric_.geographic_wgs84_);
      break;
    }
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric metric_vehicle = 2;
    case kMetricVehicle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *geographic_metric_.metric_vehicle_);
      break;
    }
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric metric_event_group = 3;
    case kMetricEventGroup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *geographic_metric_.metric_event_group_);
      break;
    }
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy.Metric metric_ecef = 4;
    case kMetricEcef: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *geographic_metric_.metric_ecef_);
      break;
    }
    case GEOGRAPHIC_METRIC_NOT_SET: {
      break;
    }
  }
  switch (accuracy_case()) {
    // .google.protobuf.Int64Value combined_std_dev = 5 [(.sensoris.protobuf.types.base.exponent) = 0];
    case kCombinedStdDev: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *accuracy_.combined_std_dev_);
      break;
    }
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalVerticalStdDev std_dev = 6;
    case kStdDev: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *accuracy_.std_dev_);
      break;
    }
    // .sensoris.protobuf.types.spatial.PositionAndAccuracy.HorizontalConfidenceEllipseVerticalStdDev horizontal_confidence_ellipse_vertical_std_dev = 7;
    case kHorizontalConfidenceEllipseVerticalStdDev: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *accuracy_.horizontal_confidence_ellipse_vertical_std_dev_);
      break;
    }
    // .sensoris.protobuf.types.base.Int64Matrix3x3 covariance = 8 [(.sensoris.protobuf.types.base.exponent) = 0];
    case kCovariance: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *accuracy_.covariance_);
      break;
    }
    case ACCURACY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionAndAccuracy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.spatial.PositionAndAccuracy)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionAndAccuracy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PositionAndAccuracy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.spatial.PositionAndAccuracy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.spatial.PositionAndAccuracy)
    MergeFrom(*source);
  }
}

void PositionAndAccuracy::MergeFrom(const PositionAndAccuracy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.spatial.PositionAndAccuracy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extension_.MergeFrom(from.extension_);
  switch (from.geographic_metric_case()) {
    case kGeographicWgs84: {
      mutable_geographic_wgs84()->::sensoris::protobuf::types::spatial::PositionAndAccuracy_Geographic::MergeFrom(from.geographic_wgs84());
      break;
    }
    case kMetricVehicle: {
      mutable_metric_vehicle()->::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric::MergeFrom(from.metric_vehicle());
      break;
    }
    case kMetricEventGroup: {
      mutable_metric_event_group()->::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric::MergeFrom(from.metric_event_group());
      break;
    }
    case kMetricEcef: {
      mutable_metric_ecef()->::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric::MergeFrom(from.metric_ecef());
      break;
    }
    case GEOGRAPHIC_METRIC_NOT_SET: {
      break;
    }
  }
  switch (from.accuracy_case()) {
    case kCombinedStdDev: {
      mutable_combined_std_dev()->::google::protobuf::Int64Value::MergeFrom(from.combined_std_dev());
      break;
    }
    case kStdDev: {
      mutable_std_dev()->::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalVerticalStdDev::MergeFrom(from.std_dev());
      break;
    }
    case kHorizontalConfidenceEllipseVerticalStdDev: {
      mutable_horizontal_confidence_ellipse_vertical_std_dev()->::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev::MergeFrom(from.horizontal_confidence_ellipse_vertical_std_dev());
      break;
    }
    case kCovariance: {
      mutable_covariance()->::sensoris::protobuf::types::base::Int64Matrix3x3::MergeFrom(from.covariance());
      break;
    }
    case ACCURACY_NOT_SET: {
      break;
    }
  }
}

void PositionAndAccuracy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.spatial.PositionAndAccuracy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionAndAccuracy::CopyFrom(const PositionAndAccuracy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.spatial.PositionAndAccuracy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionAndAccuracy::IsInitialized() const {
  return true;
}

void PositionAndAccuracy::Swap(PositionAndAccuracy* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PositionAndAccuracy* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PositionAndAccuracy::UnsafeArenaSwap(PositionAndAccuracy* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PositionAndAccuracy::InternalSwap(PositionAndAccuracy* other) {
  using std::swap;
  CastToBase(&extension_)->InternalSwap(CastToBase(&other->extension_));
  swap(geographic_metric_, other->geographic_metric_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(accuracy_, other->accuracy_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PositionAndAccuracy::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PolylineAndAccuracy::InitAsDefaultInstance() {
}
void PolylineAndAccuracy::clear_extension() {
  extension_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolylineAndAccuracy::kPositionAndAccuracyFieldNumber;
const int PolylineAndAccuracy::kExtensionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PolylineAndAccuracy::PolylineAndAccuracy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PolylineAndAccuracy.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.spatial.PolylineAndAccuracy)
}
PolylineAndAccuracy::PolylineAndAccuracy(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  position_and_accuracy_(arena),
  extension_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PolylineAndAccuracy.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.spatial.PolylineAndAccuracy)
}
PolylineAndAccuracy::PolylineAndAccuracy(const PolylineAndAccuracy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      position_and_accuracy_(from.position_and_accuracy_),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.spatial.PolylineAndAccuracy)
}

void PolylineAndAccuracy::SharedCtor() {
}

PolylineAndAccuracy::~PolylineAndAccuracy() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.spatial.PolylineAndAccuracy)
  SharedDtor();
}

void PolylineAndAccuracy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void PolylineAndAccuracy::ArenaDtor(void* object) {
  PolylineAndAccuracy* _this = reinterpret_cast< PolylineAndAccuracy* >(object);
  (void)_this;
}
void PolylineAndAccuracy::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PolylineAndAccuracy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PolylineAndAccuracy::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PolylineAndAccuracy& PolylineAndAccuracy::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PolylineAndAccuracy.base);
  return *internal_default_instance();
}


void PolylineAndAccuracy::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.spatial.PolylineAndAccuracy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_and_accuracy_.Clear();
  extension_.Clear();
  _internal_metadata_.Clear();
}

bool PolylineAndAccuracy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.spatial.PolylineAndAccuracy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_position_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any extension = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_extension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.spatial.PolylineAndAccuracy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.spatial.PolylineAndAccuracy)
  return false;
#undef DO_
}

void PolylineAndAccuracy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.spatial.PolylineAndAccuracy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->position_and_accuracy_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->position_and_accuracy(static_cast<int>(i)),
      output);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->extension(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.spatial.PolylineAndAccuracy)
}

::google::protobuf::uint8* PolylineAndAccuracy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.spatial.PolylineAndAccuracy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->position_and_accuracy_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->position_and_accuracy(static_cast<int>(i)), deterministic, target);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->extension(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.spatial.PolylineAndAccuracy)
  return target;
}

size_t PolylineAndAccuracy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.spatial.PolylineAndAccuracy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->position_and_accuracy_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->position_and_accuracy(static_cast<int>(i)));
    }
  }

  // repeated .google.protobuf.Any extension = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->extension_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->extension(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolylineAndAccuracy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.spatial.PolylineAndAccuracy)
  GOOGLE_DCHECK_NE(&from, this);
  const PolylineAndAccuracy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PolylineAndAccuracy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.spatial.PolylineAndAccuracy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.spatial.PolylineAndAccuracy)
    MergeFrom(*source);
  }
}

void PolylineAndAccuracy::MergeFrom(const PolylineAndAccuracy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.spatial.PolylineAndAccuracy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_and_accuracy_.MergeFrom(from.position_and_accuracy_);
  extension_.MergeFrom(from.extension_);
}

void PolylineAndAccuracy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.spatial.PolylineAndAccuracy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolylineAndAccuracy::CopyFrom(const PolylineAndAccuracy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.spatial.PolylineAndAccuracy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolylineAndAccuracy::IsInitialized() const {
  return true;
}

void PolylineAndAccuracy::Swap(PolylineAndAccuracy* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PolylineAndAccuracy* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PolylineAndAccuracy::UnsafeArenaSwap(PolylineAndAccuracy* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PolylineAndAccuracy::InternalSwap(PolylineAndAccuracy* other) {
  using std::swap;
  CastToBase(&position_and_accuracy_)->InternalSwap(CastToBase(&other->position_and_accuracy_));
  CastToBase(&extension_)->InternalSwap(CastToBase(&other->extension_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PolylineAndAccuracy::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XyzVectorAndAccuracy_StdDev::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::spatial::_XyzVectorAndAccuracy_StdDev_default_instance_._instance.get_mutable()->x_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_XyzVectorAndAccuracy_StdDev_default_instance_._instance.get_mutable()->y_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_XyzVectorAndAccuracy_StdDev_default_instance_._instance.get_mutable()->z_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
}
void XyzVectorAndAccuracy_StdDev::unsafe_arena_set_allocated_x(
    ::google::protobuf::Int64Value* x) {
  if (GetArenaNoVirtual() == NULL) {
    delete x_;
  }
  x_ = x;
  if (x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev.x)
}
void XyzVectorAndAccuracy_StdDev::clear_x() {
  if (GetArenaNoVirtual() == NULL && x_ != NULL) {
    delete x_;
  }
  x_ = NULL;
}
void XyzVectorAndAccuracy_StdDev::unsafe_arena_set_allocated_y(
    ::google::protobuf::Int64Value* y) {
  if (GetArenaNoVirtual() == NULL) {
    delete y_;
  }
  y_ = y;
  if (y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev.y)
}
void XyzVectorAndAccuracy_StdDev::clear_y() {
  if (GetArenaNoVirtual() == NULL && y_ != NULL) {
    delete y_;
  }
  y_ = NULL;
}
void XyzVectorAndAccuracy_StdDev::unsafe_arena_set_allocated_z(
    ::google::protobuf::Int64Value* z) {
  if (GetArenaNoVirtual() == NULL) {
    delete z_;
  }
  z_ = z;
  if (z) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev.z)
}
void XyzVectorAndAccuracy_StdDev::clear_z() {
  if (GetArenaNoVirtual() == NULL && z_ != NULL) {
    delete z_;
  }
  z_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XyzVectorAndAccuracy_StdDev::kXFieldNumber;
const int XyzVectorAndAccuracy_StdDev::kYFieldNumber;
const int XyzVectorAndAccuracy_StdDev::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XyzVectorAndAccuracy_StdDev::XyzVectorAndAccuracy_StdDev()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_XyzVectorAndAccuracy_StdDev.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev)
}
XyzVectorAndAccuracy_StdDev::XyzVectorAndAccuracy_StdDev(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_XyzVectorAndAccuracy_StdDev.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev)
}
XyzVectorAndAccuracy_StdDev::XyzVectorAndAccuracy_StdDev(const XyzVectorAndAccuracy_StdDev& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_x()) {
    x_ = new ::google::protobuf::Int64Value(*from.x_);
  } else {
    x_ = NULL;
  }
  if (from.has_y()) {
    y_ = new ::google::protobuf::Int64Value(*from.y_);
  } else {
    y_ = NULL;
  }
  if (from.has_z()) {
    z_ = new ::google::protobuf::Int64Value(*from.z_);
  } else {
    z_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev)
}

void XyzVectorAndAccuracy_StdDev::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

XyzVectorAndAccuracy_StdDev::~XyzVectorAndAccuracy_StdDev() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev)
  SharedDtor();
}

void XyzVectorAndAccuracy_StdDev::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete x_;
  if (this != internal_default_instance()) delete y_;
  if (this != internal_default_instance()) delete z_;
}

void XyzVectorAndAccuracy_StdDev::ArenaDtor(void* object) {
  XyzVectorAndAccuracy_StdDev* _this = reinterpret_cast< XyzVectorAndAccuracy_StdDev* >(object);
  (void)_this;
}
void XyzVectorAndAccuracy_StdDev::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void XyzVectorAndAccuracy_StdDev::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* XyzVectorAndAccuracy_StdDev::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XyzVectorAndAccuracy_StdDev& XyzVectorAndAccuracy_StdDev::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_XyzVectorAndAccuracy_StdDev.base);
  return *internal_default_instance();
}


void XyzVectorAndAccuracy_StdDev::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && x_ != NULL) {
    delete x_;
  }
  x_ = NULL;
  if (GetArenaNoVirtual() == NULL && y_ != NULL) {
    delete y_;
  }
  y_ = NULL;
  if (GetArenaNoVirtual() == NULL && z_ != NULL) {
    delete z_;
  }
  z_ = NULL;
  _internal_metadata_.Clear();
}

bool XyzVectorAndAccuracy_StdDev::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Int64Value x = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value y = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value z = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_z()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev)
  return false;
#undef DO_
}

void XyzVectorAndAccuracy_StdDev::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int64Value x = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_x(), output);
  }

  // .google.protobuf.Int64Value y = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_y(), output);
  }

  // .google.protobuf.Int64Value z = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev)
}

::google::protobuf::uint8* XyzVectorAndAccuracy_StdDev::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int64Value x = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_x(), deterministic, target);
  }

  // .google.protobuf.Int64Value y = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_y(), deterministic, target);
  }

  // .google.protobuf.Int64Value z = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_z(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev)
  return target;
}

size_t XyzVectorAndAccuracy_StdDev::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Int64Value x = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_x()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *x_);
  }

  // .google.protobuf.Int64Value y = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_y()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *y_);
  }

  // .google.protobuf.Int64Value z = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_z()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *z_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XyzVectorAndAccuracy_StdDev::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev)
  GOOGLE_DCHECK_NE(&from, this);
  const XyzVectorAndAccuracy_StdDev* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XyzVectorAndAccuracy_StdDev>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev)
    MergeFrom(*source);
  }
}

void XyzVectorAndAccuracy_StdDev::MergeFrom(const XyzVectorAndAccuracy_StdDev& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_x()) {
    mutable_x()->::google::protobuf::Int64Value::MergeFrom(from.x());
  }
  if (from.has_y()) {
    mutable_y()->::google::protobuf::Int64Value::MergeFrom(from.y());
  }
  if (from.has_z()) {
    mutable_z()->::google::protobuf::Int64Value::MergeFrom(from.z());
  }
}

void XyzVectorAndAccuracy_StdDev::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XyzVectorAndAccuracy_StdDev::CopyFrom(const XyzVectorAndAccuracy_StdDev& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XyzVectorAndAccuracy_StdDev::IsInitialized() const {
  return true;
}

void XyzVectorAndAccuracy_StdDev::Swap(XyzVectorAndAccuracy_StdDev* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    XyzVectorAndAccuracy_StdDev* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void XyzVectorAndAccuracy_StdDev::UnsafeArenaSwap(XyzVectorAndAccuracy_StdDev* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void XyzVectorAndAccuracy_StdDev::InternalSwap(XyzVectorAndAccuracy_StdDev* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata XyzVectorAndAccuracy_StdDev::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XyzVectorAndAccuracy_Metric::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::spatial::_XyzVectorAndAccuracy_Metric_default_instance_._instance.get_mutable()->x_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_XyzVectorAndAccuracy_Metric_default_instance_._instance.get_mutable()->y_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_XyzVectorAndAccuracy_Metric_default_instance_._instance.get_mutable()->z_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
}
void XyzVectorAndAccuracy_Metric::unsafe_arena_set_allocated_x(
    ::sensoris::protobuf::types::base::Int64Value* x) {
  if (GetArenaNoVirtual() == NULL) {
    delete x_;
  }
  x_ = x;
  if (x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric.x)
}
void XyzVectorAndAccuracy_Metric::clear_x() {
  if (GetArenaNoVirtual() == NULL && x_ != NULL) {
    delete x_;
  }
  x_ = NULL;
}
void XyzVectorAndAccuracy_Metric::unsafe_arena_set_allocated_y(
    ::sensoris::protobuf::types::base::Int64Value* y) {
  if (GetArenaNoVirtual() == NULL) {
    delete y_;
  }
  y_ = y;
  if (y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric.y)
}
void XyzVectorAndAccuracy_Metric::clear_y() {
  if (GetArenaNoVirtual() == NULL && y_ != NULL) {
    delete y_;
  }
  y_ = NULL;
}
void XyzVectorAndAccuracy_Metric::unsafe_arena_set_allocated_z(
    ::sensoris::protobuf::types::base::Int64Value* z) {
  if (GetArenaNoVirtual() == NULL) {
    delete z_;
  }
  z_ = z;
  if (z) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric.z)
}
void XyzVectorAndAccuracy_Metric::clear_z() {
  if (GetArenaNoVirtual() == NULL && z_ != NULL) {
    delete z_;
  }
  z_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XyzVectorAndAccuracy_Metric::kXFieldNumber;
const int XyzVectorAndAccuracy_Metric::kYFieldNumber;
const int XyzVectorAndAccuracy_Metric::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XyzVectorAndAccuracy_Metric::XyzVectorAndAccuracy_Metric()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_XyzVectorAndAccuracy_Metric.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric)
}
XyzVectorAndAccuracy_Metric::XyzVectorAndAccuracy_Metric(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_XyzVectorAndAccuracy_Metric.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric)
}
XyzVectorAndAccuracy_Metric::XyzVectorAndAccuracy_Metric(const XyzVectorAndAccuracy_Metric& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_x()) {
    x_ = new ::sensoris::protobuf::types::base::Int64Value(*from.x_);
  } else {
    x_ = NULL;
  }
  if (from.has_y()) {
    y_ = new ::sensoris::protobuf::types::base::Int64Value(*from.y_);
  } else {
    y_ = NULL;
  }
  if (from.has_z()) {
    z_ = new ::sensoris::protobuf::types::base::Int64Value(*from.z_);
  } else {
    z_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric)
}

void XyzVectorAndAccuracy_Metric::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

XyzVectorAndAccuracy_Metric::~XyzVectorAndAccuracy_Metric() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric)
  SharedDtor();
}

void XyzVectorAndAccuracy_Metric::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete x_;
  if (this != internal_default_instance()) delete y_;
  if (this != internal_default_instance()) delete z_;
}

void XyzVectorAndAccuracy_Metric::ArenaDtor(void* object) {
  XyzVectorAndAccuracy_Metric* _this = reinterpret_cast< XyzVectorAndAccuracy_Metric* >(object);
  (void)_this;
}
void XyzVectorAndAccuracy_Metric::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void XyzVectorAndAccuracy_Metric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* XyzVectorAndAccuracy_Metric::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XyzVectorAndAccuracy_Metric& XyzVectorAndAccuracy_Metric::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_XyzVectorAndAccuracy_Metric.base);
  return *internal_default_instance();
}


void XyzVectorAndAccuracy_Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && x_ != NULL) {
    delete x_;
  }
  x_ = NULL;
  if (GetArenaNoVirtual() == NULL && y_ != NULL) {
    delete y_;
  }
  y_ = NULL;
  if (GetArenaNoVirtual() == NULL && z_ != NULL) {
    delete z_;
  }
  z_ = NULL;
  _internal_metadata_.Clear();
}

bool XyzVectorAndAccuracy_Metric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.Int64Value x = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Value y = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Value z = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_z()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric)
  return false;
#undef DO_
}

void XyzVectorAndAccuracy_Metric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Int64Value x = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_x(), output);
  }

  // .sensoris.protobuf.types.base.Int64Value y = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_y(), output);
  }

  // .sensoris.protobuf.types.base.Int64Value z = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric)
}

::google::protobuf::uint8* XyzVectorAndAccuracy_Metric::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Int64Value x = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_x(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Value y = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_y(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Value z = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_z(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric)
  return target;
}

size_t XyzVectorAndAccuracy_Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Int64Value x = 1 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_x()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *x_);
  }

  // .sensoris.protobuf.types.base.Int64Value y = 2 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_y()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *y_);
  }

  // .sensoris.protobuf.types.base.Int64Value z = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_z()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *z_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XyzVectorAndAccuracy_Metric::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  const XyzVectorAndAccuracy_Metric* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XyzVectorAndAccuracy_Metric>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric)
    MergeFrom(*source);
  }
}

void XyzVectorAndAccuracy_Metric::MergeFrom(const XyzVectorAndAccuracy_Metric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_x()) {
    mutable_x()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.x());
  }
  if (from.has_y()) {
    mutable_y()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.y());
  }
  if (from.has_z()) {
    mutable_z()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.z());
  }
}

void XyzVectorAndAccuracy_Metric::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XyzVectorAndAccuracy_Metric::CopyFrom(const XyzVectorAndAccuracy_Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XyzVectorAndAccuracy_Metric::IsInitialized() const {
  return true;
}

void XyzVectorAndAccuracy_Metric::Swap(XyzVectorAndAccuracy_Metric* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    XyzVectorAndAccuracy_Metric* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void XyzVectorAndAccuracy_Metric::UnsafeArenaSwap(XyzVectorAndAccuracy_Metric* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void XyzVectorAndAccuracy_Metric::InternalSwap(XyzVectorAndAccuracy_Metric* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata XyzVectorAndAccuracy_Metric::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XyzVectorAndAccuracy::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::spatial::_XyzVectorAndAccuracy_default_instance_.metric_vehicle_ = const_cast< ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric*>(
      ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_XyzVectorAndAccuracy_default_instance_.metric_event_group_ = const_cast< ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric*>(
      ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_XyzVectorAndAccuracy_default_instance_.metric_origin_ = const_cast< ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric*>(
      ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_XyzVectorAndAccuracy_default_instance_.combined_std_dev_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_XyzVectorAndAccuracy_default_instance_.std_dev_ = const_cast< ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_StdDev*>(
      ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_StdDev::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_XyzVectorAndAccuracy_default_instance_.covariance_ = const_cast< ::sensoris::protobuf::types::base::Int64Matrix3x3*>(
      ::sensoris::protobuf::types::base::Int64Matrix3x3::internal_default_instance());
}
void XyzVectorAndAccuracy::set_allocated_metric_vehicle(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric* metric_vehicle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_geometry();
  if (metric_vehicle) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(metric_vehicle);
    if (message_arena != submessage_arena) {
      metric_vehicle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metric_vehicle, submessage_arena);
    }
    set_has_metric_vehicle();
    geometry_.metric_vehicle_ = metric_vehicle;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.metric_vehicle)
}
void XyzVectorAndAccuracy::set_allocated_metric_event_group(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric* metric_event_group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_geometry();
  if (metric_event_group) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(metric_event_group);
    if (message_arena != submessage_arena) {
      metric_event_group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metric_event_group, submessage_arena);
    }
    set_has_metric_event_group();
    geometry_.metric_event_group_ = metric_event_group;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.metric_event_group)
}
void XyzVectorAndAccuracy::set_allocated_metric_origin(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric* metric_origin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_geometry();
  if (metric_origin) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(metric_origin);
    if (message_arena != submessage_arena) {
      metric_origin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metric_origin, submessage_arena);
    }
    set_has_metric_origin();
    geometry_.metric_origin_ = metric_origin;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.metric_origin)
}
void XyzVectorAndAccuracy::set_allocated_combined_std_dev(::google::protobuf::Int64Value* combined_std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_accuracy();
  if (combined_std_dev) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(combined_std_dev)->GetArena();
    if (message_arena != submessage_arena) {
      combined_std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, combined_std_dev, submessage_arena);
    }
    set_has_combined_std_dev();
    accuracy_.combined_std_dev_ = combined_std_dev;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.combined_std_dev)
}
void XyzVectorAndAccuracy::clear_combined_std_dev() {
  if (has_combined_std_dev()) {
    if (GetArenaNoVirtual() == NULL) {
      delete accuracy_.combined_std_dev_;
    }
    clear_has_accuracy();
  }
}
void XyzVectorAndAccuracy::set_allocated_std_dev(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_StdDev* std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_accuracy();
  if (std_dev) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(std_dev);
    if (message_arena != submessage_arena) {
      std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, std_dev, submessage_arena);
    }
    set_has_std_dev();
    accuracy_.std_dev_ = std_dev;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.std_dev)
}
void XyzVectorAndAccuracy::set_allocated_covariance(::sensoris::protobuf::types::base::Int64Matrix3x3* covariance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_accuracy();
  if (covariance) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(covariance)->GetArena();
    if (message_arena != submessage_arena) {
      covariance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, covariance, submessage_arena);
    }
    set_has_covariance();
    accuracy_.covariance_ = covariance;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.covariance)
}
void XyzVectorAndAccuracy::clear_covariance() {
  if (has_covariance()) {
    if (GetArenaNoVirtual() == NULL) {
      delete accuracy_.covariance_;
    }
    clear_has_accuracy();
  }
}
void XyzVectorAndAccuracy::clear_extension() {
  extension_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XyzVectorAndAccuracy::kMetricVehicleFieldNumber;
const int XyzVectorAndAccuracy::kMetricEventGroupFieldNumber;
const int XyzVectorAndAccuracy::kMetricOriginFieldNumber;
const int XyzVectorAndAccuracy::kCombinedStdDevFieldNumber;
const int XyzVectorAndAccuracy::kStdDevFieldNumber;
const int XyzVectorAndAccuracy::kCovarianceFieldNumber;
const int XyzVectorAndAccuracy::kExtensionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XyzVectorAndAccuracy::XyzVectorAndAccuracy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_XyzVectorAndAccuracy.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy)
}
XyzVectorAndAccuracy::XyzVectorAndAccuracy(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  extension_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_XyzVectorAndAccuracy.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy)
}
XyzVectorAndAccuracy::XyzVectorAndAccuracy(const XyzVectorAndAccuracy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_geometry();
  switch (from.geometry_case()) {
    case kMetricVehicle: {
      mutable_metric_vehicle()->::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric::MergeFrom(from.metric_vehicle());
      break;
    }
    case kMetricEventGroup: {
      mutable_metric_event_group()->::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric::MergeFrom(from.metric_event_group());
      break;
    }
    case kMetricOrigin: {
      mutable_metric_origin()->::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric::MergeFrom(from.metric_origin());
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  clear_has_accuracy();
  switch (from.accuracy_case()) {
    case kCombinedStdDev: {
      mutable_combined_std_dev()->::google::protobuf::Int64Value::MergeFrom(from.combined_std_dev());
      break;
    }
    case kStdDev: {
      mutable_std_dev()->::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_StdDev::MergeFrom(from.std_dev());
      break;
    }
    case kCovariance: {
      mutable_covariance()->::sensoris::protobuf::types::base::Int64Matrix3x3::MergeFrom(from.covariance());
      break;
    }
    case ACCURACY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy)
}

void XyzVectorAndAccuracy::SharedCtor() {
  clear_has_geometry();
  clear_has_accuracy();
}

XyzVectorAndAccuracy::~XyzVectorAndAccuracy() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy)
  SharedDtor();
}

void XyzVectorAndAccuracy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_geometry()) {
    clear_geometry();
  }
  if (has_accuracy()) {
    clear_accuracy();
  }
}

void XyzVectorAndAccuracy::ArenaDtor(void* object) {
  XyzVectorAndAccuracy* _this = reinterpret_cast< XyzVectorAndAccuracy* >(object);
  (void)_this;
}
void XyzVectorAndAccuracy::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void XyzVectorAndAccuracy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* XyzVectorAndAccuracy::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XyzVectorAndAccuracy& XyzVectorAndAccuracy::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_XyzVectorAndAccuracy.base);
  return *internal_default_instance();
}


void XyzVectorAndAccuracy::clear_geometry() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy)
  switch (geometry_case()) {
    case kMetricVehicle: {
      if (GetArenaNoVirtual() == NULL) {
        delete geometry_.metric_vehicle_;
      }
      break;
    }
    case kMetricEventGroup: {
      if (GetArenaNoVirtual() == NULL) {
        delete geometry_.metric_event_group_;
      }
      break;
    }
    case kMetricOrigin: {
      if (GetArenaNoVirtual() == NULL) {
        delete geometry_.metric_origin_;
      }
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GEOMETRY_NOT_SET;
}

void XyzVectorAndAccuracy::clear_accuracy() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy)
  switch (accuracy_case()) {
    case kCombinedStdDev: {
      if (GetArenaNoVirtual() == NULL) {
        delete accuracy_.combined_std_dev_;
      }
      break;
    }
    case kStdDev: {
      if (GetArenaNoVirtual() == NULL) {
        delete accuracy_.std_dev_;
      }
      break;
    }
    case kCovariance: {
      if (GetArenaNoVirtual() == NULL) {
        delete accuracy_.covariance_;
      }
      break;
    }
    case ACCURACY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = ACCURACY_NOT_SET;
}


void XyzVectorAndAccuracy::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extension_.Clear();
  clear_geometry();
  clear_accuracy();
  _internal_metadata_.Clear();
}

bool XyzVectorAndAccuracy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric metric_vehicle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metric_vehicle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric metric_event_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metric_event_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric metric_origin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metric_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value combined_std_dev = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_combined_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev std_dev = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Matrix3x3 covariance = 6 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_covariance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any extension = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_extension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy)
  return false;
#undef DO_
}

void XyzVectorAndAccuracy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric metric_vehicle = 1;
  if (has_metric_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_metric_vehicle(), output);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric metric_event_group = 2;
  if (has_metric_event_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_metric_event_group(), output);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric metric_origin = 3;
  if (has_metric_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_metric_origin(), output);
  }

  // .google.protobuf.Int64Value combined_std_dev = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (has_combined_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_combined_std_dev(), output);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev std_dev = 5;
  if (has_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_std_dev(), output);
  }

  // .sensoris.protobuf.types.base.Int64Matrix3x3 covariance = 6 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (has_covariance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_covariance(), output);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->extension(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy)
}

::google::protobuf::uint8* XyzVectorAndAccuracy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric metric_vehicle = 1;
  if (has_metric_vehicle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_metric_vehicle(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric metric_event_group = 2;
  if (has_metric_event_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_metric_event_group(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric metric_origin = 3;
  if (has_metric_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_metric_origin(), deterministic, target);
  }

  // .google.protobuf.Int64Value combined_std_dev = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (has_combined_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_combined_std_dev(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev std_dev = 5;
  if (has_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_std_dev(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Matrix3x3 covariance = 6 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (has_covariance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_covariance(), deterministic, target);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->extension(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy)
  return target;
}

size_t XyzVectorAndAccuracy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.protobuf.Any extension = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->extension_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->extension(static_cast<int>(i)));
    }
  }

  switch (geometry_case()) {
    // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric metric_vehicle = 1;
    case kMetricVehicle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *geometry_.metric_vehicle_);
      break;
    }
    // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric metric_event_group = 2;
    case kMetricEventGroup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *geometry_.metric_event_group_);
      break;
    }
    // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.Metric metric_origin = 3;
    case kMetricOrigin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *geometry_.metric_origin_);
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  switch (accuracy_case()) {
    // .google.protobuf.Int64Value combined_std_dev = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
    case kCombinedStdDev: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *accuracy_.combined_std_dev_);
      break;
    }
    // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy.StdDev std_dev = 5;
    case kStdDev: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *accuracy_.std_dev_);
      break;
    }
    // .sensoris.protobuf.types.base.Int64Matrix3x3 covariance = 6 [(.sensoris.protobuf.types.base.exponent) = 0];
    case kCovariance: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *accuracy_.covariance_);
      break;
    }
    case ACCURACY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XyzVectorAndAccuracy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy)
  GOOGLE_DCHECK_NE(&from, this);
  const XyzVectorAndAccuracy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XyzVectorAndAccuracy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy)
    MergeFrom(*source);
  }
}

void XyzVectorAndAccuracy::MergeFrom(const XyzVectorAndAccuracy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extension_.MergeFrom(from.extension_);
  switch (from.geometry_case()) {
    case kMetricVehicle: {
      mutable_metric_vehicle()->::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric::MergeFrom(from.metric_vehicle());
      break;
    }
    case kMetricEventGroup: {
      mutable_metric_event_group()->::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric::MergeFrom(from.metric_event_group());
      break;
    }
    case kMetricOrigin: {
      mutable_metric_origin()->::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric::MergeFrom(from.metric_origin());
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  switch (from.accuracy_case()) {
    case kCombinedStdDev: {
      mutable_combined_std_dev()->::google::protobuf::Int64Value::MergeFrom(from.combined_std_dev());
      break;
    }
    case kStdDev: {
      mutable_std_dev()->::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_StdDev::MergeFrom(from.std_dev());
      break;
    }
    case kCovariance: {
      mutable_covariance()->::sensoris::protobuf::types::base::Int64Matrix3x3::MergeFrom(from.covariance());
      break;
    }
    case ACCURACY_NOT_SET: {
      break;
    }
  }
}

void XyzVectorAndAccuracy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XyzVectorAndAccuracy::CopyFrom(const XyzVectorAndAccuracy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.spatial.XyzVectorAndAccuracy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XyzVectorAndAccuracy::IsInitialized() const {
  return true;
}

void XyzVectorAndAccuracy::Swap(XyzVectorAndAccuracy* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    XyzVectorAndAccuracy* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void XyzVectorAndAccuracy::UnsafeArenaSwap(XyzVectorAndAccuracy* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void XyzVectorAndAccuracy::InternalSwap(XyzVectorAndAccuracy* other) {
  using std::swap;
  CastToBase(&extension_)->InternalSwap(CastToBase(&other->extension_));
  swap(geometry_, other->geometry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(accuracy_, other->accuracy_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata XyzVectorAndAccuracy::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RectangularBoxAndAccuracy_CornerVectors::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::spatial::_RectangularBoxAndAccuracy_CornerVectors_default_instance_._instance.get_mutable()->first_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RectangularBoxAndAccuracy_CornerVectors_default_instance_._instance.get_mutable()->second_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RectangularBoxAndAccuracy_CornerVectors_default_instance_._instance.get_mutable()->third_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy::internal_default_instance());
}
void RectangularBoxAndAccuracy_CornerVectors::unsafe_arena_set_allocated_first_and_accuracy(
    ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* first_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete first_and_accuracy_;
  }
  first_and_accuracy_ = first_and_accuracy;
  if (first_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors.first_and_accuracy)
}
void RectangularBoxAndAccuracy_CornerVectors::unsafe_arena_set_allocated_second_and_accuracy(
    ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* second_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete second_and_accuracy_;
  }
  second_and_accuracy_ = second_and_accuracy;
  if (second_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors.second_and_accuracy)
}
void RectangularBoxAndAccuracy_CornerVectors::unsafe_arena_set_allocated_third_and_accuracy(
    ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* third_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete third_and_accuracy_;
  }
  third_and_accuracy_ = third_and_accuracy;
  if (third_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors.third_and_accuracy)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RectangularBoxAndAccuracy_CornerVectors::kFirstAndAccuracyFieldNumber;
const int RectangularBoxAndAccuracy_CornerVectors::kSecondAndAccuracyFieldNumber;
const int RectangularBoxAndAccuracy_CornerVectors::kThirdAndAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RectangularBoxAndAccuracy_CornerVectors::RectangularBoxAndAccuracy_CornerVectors()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RectangularBoxAndAccuracy_CornerVectors.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors)
}
RectangularBoxAndAccuracy_CornerVectors::RectangularBoxAndAccuracy_CornerVectors(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RectangularBoxAndAccuracy_CornerVectors.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors)
}
RectangularBoxAndAccuracy_CornerVectors::RectangularBoxAndAccuracy_CornerVectors(const RectangularBoxAndAccuracy_CornerVectors& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_first_and_accuracy()) {
    first_and_accuracy_ = new ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy(*from.first_and_accuracy_);
  } else {
    first_and_accuracy_ = NULL;
  }
  if (from.has_second_and_accuracy()) {
    second_and_accuracy_ = new ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy(*from.second_and_accuracy_);
  } else {
    second_and_accuracy_ = NULL;
  }
  if (from.has_third_and_accuracy()) {
    third_and_accuracy_ = new ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy(*from.third_and_accuracy_);
  } else {
    third_and_accuracy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors)
}

void RectangularBoxAndAccuracy_CornerVectors::SharedCtor() {
  ::memset(&first_and_accuracy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&third_and_accuracy_) -
      reinterpret_cast<char*>(&first_and_accuracy_)) + sizeof(third_and_accuracy_));
}

RectangularBoxAndAccuracy_CornerVectors::~RectangularBoxAndAccuracy_CornerVectors() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors)
  SharedDtor();
}

void RectangularBoxAndAccuracy_CornerVectors::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete first_and_accuracy_;
  if (this != internal_default_instance()) delete second_and_accuracy_;
  if (this != internal_default_instance()) delete third_and_accuracy_;
}

void RectangularBoxAndAccuracy_CornerVectors::ArenaDtor(void* object) {
  RectangularBoxAndAccuracy_CornerVectors* _this = reinterpret_cast< RectangularBoxAndAccuracy_CornerVectors* >(object);
  (void)_this;
}
void RectangularBoxAndAccuracy_CornerVectors::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RectangularBoxAndAccuracy_CornerVectors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RectangularBoxAndAccuracy_CornerVectors::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RectangularBoxAndAccuracy_CornerVectors& RectangularBoxAndAccuracy_CornerVectors::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RectangularBoxAndAccuracy_CornerVectors.base);
  return *internal_default_instance();
}


void RectangularBoxAndAccuracy_CornerVectors::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && first_and_accuracy_ != NULL) {
    delete first_and_accuracy_;
  }
  first_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && second_and_accuracy_ != NULL) {
    delete second_and_accuracy_;
  }
  second_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && third_and_accuracy_ != NULL) {
    delete third_and_accuracy_;
  }
  third_and_accuracy_ = NULL;
  _internal_metadata_.Clear();
}

bool RectangularBoxAndAccuracy_CornerVectors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy first_and_accuracy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_first_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy second_and_accuracy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_second_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy third_and_accuracy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_third_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors)
  return false;
#undef DO_
}

void RectangularBoxAndAccuracy_CornerVectors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy first_and_accuracy = 1;
  if (this->has_first_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_first_and_accuracy(), output);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy second_and_accuracy = 2;
  if (this->has_second_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_second_and_accuracy(), output);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy third_and_accuracy = 3;
  if (this->has_third_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_third_and_accuracy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors)
}

::google::protobuf::uint8* RectangularBoxAndAccuracy_CornerVectors::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy first_and_accuracy = 1;
  if (this->has_first_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_first_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy second_and_accuracy = 2;
  if (this->has_second_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_second_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy third_and_accuracy = 3;
  if (this->has_third_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_third_and_accuracy(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors)
  return target;
}

size_t RectangularBoxAndAccuracy_CornerVectors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy first_and_accuracy = 1;
  if (this->has_first_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *first_and_accuracy_);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy second_and_accuracy = 2;
  if (this->has_second_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *second_and_accuracy_);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy third_and_accuracy = 3;
  if (this->has_third_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *third_and_accuracy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RectangularBoxAndAccuracy_CornerVectors::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors)
  GOOGLE_DCHECK_NE(&from, this);
  const RectangularBoxAndAccuracy_CornerVectors* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RectangularBoxAndAccuracy_CornerVectors>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors)
    MergeFrom(*source);
  }
}

void RectangularBoxAndAccuracy_CornerVectors::MergeFrom(const RectangularBoxAndAccuracy_CornerVectors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_first_and_accuracy()) {
    mutable_first_and_accuracy()->::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy::MergeFrom(from.first_and_accuracy());
  }
  if (from.has_second_and_accuracy()) {
    mutable_second_and_accuracy()->::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy::MergeFrom(from.second_and_accuracy());
  }
  if (from.has_third_and_accuracy()) {
    mutable_third_and_accuracy()->::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy::MergeFrom(from.third_and_accuracy());
  }
}

void RectangularBoxAndAccuracy_CornerVectors::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RectangularBoxAndAccuracy_CornerVectors::CopyFrom(const RectangularBoxAndAccuracy_CornerVectors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectangularBoxAndAccuracy_CornerVectors::IsInitialized() const {
  return true;
}

void RectangularBoxAndAccuracy_CornerVectors::Swap(RectangularBoxAndAccuracy_CornerVectors* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RectangularBoxAndAccuracy_CornerVectors* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RectangularBoxAndAccuracy_CornerVectors::UnsafeArenaSwap(RectangularBoxAndAccuracy_CornerVectors* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RectangularBoxAndAccuracy_CornerVectors::InternalSwap(RectangularBoxAndAccuracy_CornerVectors* other) {
  using std::swap;
  swap(first_and_accuracy_, other->first_and_accuracy_);
  swap(second_and_accuracy_, other->second_and_accuracy_);
  swap(third_and_accuracy_, other->third_and_accuracy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RectangularBoxAndAccuracy_CornerVectors::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RectangularBoxAndAccuracy_CenterOrientationSize::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::spatial::_RectangularBoxAndAccuracy_CenterOrientationSize_default_instance_._instance.get_mutable()->center_position_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::PositionAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::PositionAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RectangularBoxAndAccuracy_CenterOrientationSize_default_instance_._instance.get_mutable()->orientation_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::RotationAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::RotationAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RectangularBoxAndAccuracy_CenterOrientationSize_default_instance_._instance.get_mutable()->size_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy::internal_default_instance());
}
void RectangularBoxAndAccuracy_CenterOrientationSize::unsafe_arena_set_allocated_center_position_and_accuracy(
    ::sensoris::protobuf::types::spatial::PositionAndAccuracy* center_position_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete center_position_and_accuracy_;
  }
  center_position_and_accuracy_ = center_position_and_accuracy;
  if (center_position_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize.center_position_and_accuracy)
}
void RectangularBoxAndAccuracy_CenterOrientationSize::unsafe_arena_set_allocated_orientation_and_accuracy(
    ::sensoris::protobuf::types::spatial::RotationAndAccuracy* orientation_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete orientation_and_accuracy_;
  }
  orientation_and_accuracy_ = orientation_and_accuracy;
  if (orientation_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize.orientation_and_accuracy)
}
void RectangularBoxAndAccuracy_CenterOrientationSize::unsafe_arena_set_allocated_size_and_accuracy(
    ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* size_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete size_and_accuracy_;
  }
  size_and_accuracy_ = size_and_accuracy;
  if (size_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize.size_and_accuracy)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RectangularBoxAndAccuracy_CenterOrientationSize::kCenterPositionAndAccuracyFieldNumber;
const int RectangularBoxAndAccuracy_CenterOrientationSize::kOrientationAndAccuracyFieldNumber;
const int RectangularBoxAndAccuracy_CenterOrientationSize::kSizeAndAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RectangularBoxAndAccuracy_CenterOrientationSize::RectangularBoxAndAccuracy_CenterOrientationSize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RectangularBoxAndAccuracy_CenterOrientationSize.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize)
}
RectangularBoxAndAccuracy_CenterOrientationSize::RectangularBoxAndAccuracy_CenterOrientationSize(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RectangularBoxAndAccuracy_CenterOrientationSize.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize)
}
RectangularBoxAndAccuracy_CenterOrientationSize::RectangularBoxAndAccuracy_CenterOrientationSize(const RectangularBoxAndAccuracy_CenterOrientationSize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_center_position_and_accuracy()) {
    center_position_and_accuracy_ = new ::sensoris::protobuf::types::spatial::PositionAndAccuracy(*from.center_position_and_accuracy_);
  } else {
    center_position_and_accuracy_ = NULL;
  }
  if (from.has_orientation_and_accuracy()) {
    orientation_and_accuracy_ = new ::sensoris::protobuf::types::spatial::RotationAndAccuracy(*from.orientation_and_accuracy_);
  } else {
    orientation_and_accuracy_ = NULL;
  }
  if (from.has_size_and_accuracy()) {
    size_and_accuracy_ = new ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy(*from.size_and_accuracy_);
  } else {
    size_and_accuracy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize)
}

void RectangularBoxAndAccuracy_CenterOrientationSize::SharedCtor() {
  ::memset(&center_position_and_accuracy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_and_accuracy_) -
      reinterpret_cast<char*>(&center_position_and_accuracy_)) + sizeof(size_and_accuracy_));
}

RectangularBoxAndAccuracy_CenterOrientationSize::~RectangularBoxAndAccuracy_CenterOrientationSize() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize)
  SharedDtor();
}

void RectangularBoxAndAccuracy_CenterOrientationSize::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete center_position_and_accuracy_;
  if (this != internal_default_instance()) delete orientation_and_accuracy_;
  if (this != internal_default_instance()) delete size_and_accuracy_;
}

void RectangularBoxAndAccuracy_CenterOrientationSize::ArenaDtor(void* object) {
  RectangularBoxAndAccuracy_CenterOrientationSize* _this = reinterpret_cast< RectangularBoxAndAccuracy_CenterOrientationSize* >(object);
  (void)_this;
}
void RectangularBoxAndAccuracy_CenterOrientationSize::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RectangularBoxAndAccuracy_CenterOrientationSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RectangularBoxAndAccuracy_CenterOrientationSize::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RectangularBoxAndAccuracy_CenterOrientationSize& RectangularBoxAndAccuracy_CenterOrientationSize::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RectangularBoxAndAccuracy_CenterOrientationSize.base);
  return *internal_default_instance();
}


void RectangularBoxAndAccuracy_CenterOrientationSize::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && center_position_and_accuracy_ != NULL) {
    delete center_position_and_accuracy_;
  }
  center_position_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientation_and_accuracy_ != NULL) {
    delete orientation_and_accuracy_;
  }
  orientation_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && size_and_accuracy_ != NULL) {
    delete size_and_accuracy_;
  }
  size_and_accuracy_ = NULL;
  _internal_metadata_.Clear();
}

bool RectangularBoxAndAccuracy_CenterOrientationSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.spatial.PositionAndAccuracy center_position_and_accuracy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_center_position_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.RotationAndAccuracy orientation_and_accuracy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy size_and_accuracy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_size_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize)
  return false;
#undef DO_
}

void RectangularBoxAndAccuracy_CenterOrientationSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy center_position_and_accuracy = 1;
  if (this->has_center_position_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_center_position_and_accuracy(), output);
  }

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy orientation_and_accuracy = 2;
  if (this->has_orientation_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_orientation_and_accuracy(), output);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy size_and_accuracy = 3;
  if (this->has_size_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_size_and_accuracy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize)
}

::google::protobuf::uint8* RectangularBoxAndAccuracy_CenterOrientationSize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy center_position_and_accuracy = 1;
  if (this->has_center_position_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_center_position_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy orientation_and_accuracy = 2;
  if (this->has_orientation_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_orientation_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy size_and_accuracy = 3;
  if (this->has_size_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_size_and_accuracy(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize)
  return target;
}

size_t RectangularBoxAndAccuracy_CenterOrientationSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.spatial.PositionAndAccuracy center_position_and_accuracy = 1;
  if (this->has_center_position_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *center_position_and_accuracy_);
  }

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy orientation_and_accuracy = 2;
  if (this->has_orientation_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *orientation_and_accuracy_);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy size_and_accuracy = 3;
  if (this->has_size_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *size_and_accuracy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RectangularBoxAndAccuracy_CenterOrientationSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize)
  GOOGLE_DCHECK_NE(&from, this);
  const RectangularBoxAndAccuracy_CenterOrientationSize* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RectangularBoxAndAccuracy_CenterOrientationSize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize)
    MergeFrom(*source);
  }
}

void RectangularBoxAndAccuracy_CenterOrientationSize::MergeFrom(const RectangularBoxAndAccuracy_CenterOrientationSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center_position_and_accuracy()) {
    mutable_center_position_and_accuracy()->::sensoris::protobuf::types::spatial::PositionAndAccuracy::MergeFrom(from.center_position_and_accuracy());
  }
  if (from.has_orientation_and_accuracy()) {
    mutable_orientation_and_accuracy()->::sensoris::protobuf::types::spatial::RotationAndAccuracy::MergeFrom(from.orientation_and_accuracy());
  }
  if (from.has_size_and_accuracy()) {
    mutable_size_and_accuracy()->::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy::MergeFrom(from.size_and_accuracy());
  }
}

void RectangularBoxAndAccuracy_CenterOrientationSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RectangularBoxAndAccuracy_CenterOrientationSize::CopyFrom(const RectangularBoxAndAccuracy_CenterOrientationSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectangularBoxAndAccuracy_CenterOrientationSize::IsInitialized() const {
  return true;
}

void RectangularBoxAndAccuracy_CenterOrientationSize::Swap(RectangularBoxAndAccuracy_CenterOrientationSize* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RectangularBoxAndAccuracy_CenterOrientationSize* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RectangularBoxAndAccuracy_CenterOrientationSize::UnsafeArenaSwap(RectangularBoxAndAccuracy_CenterOrientationSize* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RectangularBoxAndAccuracy_CenterOrientationSize::InternalSwap(RectangularBoxAndAccuracy_CenterOrientationSize* other) {
  using std::swap;
  swap(center_position_and_accuracy_, other->center_position_and_accuracy_);
  swap(orientation_and_accuracy_, other->orientation_and_accuracy_);
  swap(size_and_accuracy_, other->size_and_accuracy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RectangularBoxAndAccuracy_CenterOrientationSize::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RectangularBoxAndAccuracy::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::spatial::_RectangularBoxAndAccuracy_default_instance_.corner_vectors_ = const_cast< ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CornerVectors*>(
      ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CornerVectors::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RectangularBoxAndAccuracy_default_instance_.center_orientation_size_ = const_cast< ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CenterOrientationSize*>(
      ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CenterOrientationSize::internal_default_instance());
}
void RectangularBoxAndAccuracy::set_allocated_corner_vectors(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CornerVectors* corner_vectors) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_geometry();
  if (corner_vectors) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(corner_vectors);
    if (message_arena != submessage_arena) {
      corner_vectors = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, corner_vectors, submessage_arena);
    }
    set_has_corner_vectors();
    geometry_.corner_vectors_ = corner_vectors;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.corner_vectors)
}
void RectangularBoxAndAccuracy::set_allocated_center_orientation_size(::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CenterOrientationSize* center_orientation_size) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_geometry();
  if (center_orientation_size) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(center_orientation_size);
    if (message_arena != submessage_arena) {
      center_orientation_size = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, center_orientation_size, submessage_arena);
    }
    set_has_center_orientation_size();
    geometry_.center_orientation_size_ = center_orientation_size;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.center_orientation_size)
}
void RectangularBoxAndAccuracy::clear_extension() {
  extension_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RectangularBoxAndAccuracy::kCornerVectorsFieldNumber;
const int RectangularBoxAndAccuracy::kCenterOrientationSizeFieldNumber;
const int RectangularBoxAndAccuracy::kExtensionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RectangularBoxAndAccuracy::RectangularBoxAndAccuracy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RectangularBoxAndAccuracy.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy)
}
RectangularBoxAndAccuracy::RectangularBoxAndAccuracy(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  extension_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RectangularBoxAndAccuracy.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy)
}
RectangularBoxAndAccuracy::RectangularBoxAndAccuracy(const RectangularBoxAndAccuracy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_geometry();
  switch (from.geometry_case()) {
    case kCornerVectors: {
      mutable_corner_vectors()->::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CornerVectors::MergeFrom(from.corner_vectors());
      break;
    }
    case kCenterOrientationSize: {
      mutable_center_orientation_size()->::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CenterOrientationSize::MergeFrom(from.center_orientation_size());
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy)
}

void RectangularBoxAndAccuracy::SharedCtor() {
  clear_has_geometry();
}

RectangularBoxAndAccuracy::~RectangularBoxAndAccuracy() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy)
  SharedDtor();
}

void RectangularBoxAndAccuracy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_geometry()) {
    clear_geometry();
  }
}

void RectangularBoxAndAccuracy::ArenaDtor(void* object) {
  RectangularBoxAndAccuracy* _this = reinterpret_cast< RectangularBoxAndAccuracy* >(object);
  (void)_this;
}
void RectangularBoxAndAccuracy::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RectangularBoxAndAccuracy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RectangularBoxAndAccuracy::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RectangularBoxAndAccuracy& RectangularBoxAndAccuracy::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RectangularBoxAndAccuracy.base);
  return *internal_default_instance();
}


void RectangularBoxAndAccuracy::clear_geometry() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy)
  switch (geometry_case()) {
    case kCornerVectors: {
      if (GetArenaNoVirtual() == NULL) {
        delete geometry_.corner_vectors_;
      }
      break;
    }
    case kCenterOrientationSize: {
      if (GetArenaNoVirtual() == NULL) {
        delete geometry_.center_orientation_size_;
      }
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GEOMETRY_NOT_SET;
}


void RectangularBoxAndAccuracy::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extension_.Clear();
  clear_geometry();
  _internal_metadata_.Clear();
}

bool RectangularBoxAndAccuracy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors corner_vectors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_corner_vectors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize center_orientation_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_center_orientation_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any extension = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_extension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy)
  return false;
#undef DO_
}

void RectangularBoxAndAccuracy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors corner_vectors = 1;
  if (has_corner_vectors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_corner_vectors(), output);
  }

  // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize center_orientation_size = 2;
  if (has_center_orientation_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_center_orientation_size(), output);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->extension(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy)
}

::google::protobuf::uint8* RectangularBoxAndAccuracy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors corner_vectors = 1;
  if (has_corner_vectors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_corner_vectors(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize center_orientation_size = 2;
  if (has_center_orientation_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_center_orientation_size(), deterministic, target);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->extension(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy)
  return target;
}

size_t RectangularBoxAndAccuracy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.protobuf.Any extension = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->extension_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->extension(static_cast<int>(i)));
    }
  }

  switch (geometry_case()) {
    // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CornerVectors corner_vectors = 1;
    case kCornerVectors: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *geometry_.corner_vectors_);
      break;
    }
    // .sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy.CenterOrientationSize center_orientation_size = 2;
    case kCenterOrientationSize: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *geometry_.center_orientation_size_);
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RectangularBoxAndAccuracy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy)
  GOOGLE_DCHECK_NE(&from, this);
  const RectangularBoxAndAccuracy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RectangularBoxAndAccuracy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy)
    MergeFrom(*source);
  }
}

void RectangularBoxAndAccuracy::MergeFrom(const RectangularBoxAndAccuracy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extension_.MergeFrom(from.extension_);
  switch (from.geometry_case()) {
    case kCornerVectors: {
      mutable_corner_vectors()->::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CornerVectors::MergeFrom(from.corner_vectors());
      break;
    }
    case kCenterOrientationSize: {
      mutable_center_orientation_size()->::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CenterOrientationSize::MergeFrom(from.center_orientation_size());
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
}

void RectangularBoxAndAccuracy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RectangularBoxAndAccuracy::CopyFrom(const RectangularBoxAndAccuracy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.spatial.RectangularBoxAndAccuracy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectangularBoxAndAccuracy::IsInitialized() const {
  return true;
}

void RectangularBoxAndAccuracy::Swap(RectangularBoxAndAccuracy* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RectangularBoxAndAccuracy* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RectangularBoxAndAccuracy::UnsafeArenaSwap(RectangularBoxAndAccuracy* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RectangularBoxAndAccuracy::InternalSwap(RectangularBoxAndAccuracy* other) {
  using std::swap;
  CastToBase(&extension_)->InternalSwap(CastToBase(&other->extension_));
  swap(geometry_, other->geometry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RectangularBoxAndAccuracy::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RotationAndAccuracy_Euler::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::spatial::_RotationAndAccuracy_Euler_default_instance_._instance.get_mutable()->yaw_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RotationAndAccuracy_Euler_default_instance_._instance.get_mutable()->pitch_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RotationAndAccuracy_Euler_default_instance_._instance.get_mutable()->roll_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
}
void RotationAndAccuracy_Euler::unsafe_arena_set_allocated_yaw(
    ::sensoris::protobuf::types::base::Int64Value* yaw) {
  if (GetArenaNoVirtual() == NULL) {
    delete yaw_;
  }
  yaw_ = yaw;
  if (yaw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler.yaw)
}
void RotationAndAccuracy_Euler::clear_yaw() {
  if (GetArenaNoVirtual() == NULL && yaw_ != NULL) {
    delete yaw_;
  }
  yaw_ = NULL;
}
void RotationAndAccuracy_Euler::unsafe_arena_set_allocated_pitch(
    ::sensoris::protobuf::types::base::Int64Value* pitch) {
  if (GetArenaNoVirtual() == NULL) {
    delete pitch_;
  }
  pitch_ = pitch;
  if (pitch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler.pitch)
}
void RotationAndAccuracy_Euler::clear_pitch() {
  if (GetArenaNoVirtual() == NULL && pitch_ != NULL) {
    delete pitch_;
  }
  pitch_ = NULL;
}
void RotationAndAccuracy_Euler::unsafe_arena_set_allocated_roll(
    ::sensoris::protobuf::types::base::Int64Value* roll) {
  if (GetArenaNoVirtual() == NULL) {
    delete roll_;
  }
  roll_ = roll;
  if (roll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler.roll)
}
void RotationAndAccuracy_Euler::clear_roll() {
  if (GetArenaNoVirtual() == NULL && roll_ != NULL) {
    delete roll_;
  }
  roll_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RotationAndAccuracy_Euler::kYawFieldNumber;
const int RotationAndAccuracy_Euler::kPitchFieldNumber;
const int RotationAndAccuracy_Euler::kRollFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RotationAndAccuracy_Euler::RotationAndAccuracy_Euler()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationAndAccuracy_Euler.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler)
}
RotationAndAccuracy_Euler::RotationAndAccuracy_Euler(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationAndAccuracy_Euler.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler)
}
RotationAndAccuracy_Euler::RotationAndAccuracy_Euler(const RotationAndAccuracy_Euler& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_yaw()) {
    yaw_ = new ::sensoris::protobuf::types::base::Int64Value(*from.yaw_);
  } else {
    yaw_ = NULL;
  }
  if (from.has_pitch()) {
    pitch_ = new ::sensoris::protobuf::types::base::Int64Value(*from.pitch_);
  } else {
    pitch_ = NULL;
  }
  if (from.has_roll()) {
    roll_ = new ::sensoris::protobuf::types::base::Int64Value(*from.roll_);
  } else {
    roll_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler)
}

void RotationAndAccuracy_Euler::SharedCtor() {
  ::memset(&yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&yaw_)) + sizeof(roll_));
}

RotationAndAccuracy_Euler::~RotationAndAccuracy_Euler() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler)
  SharedDtor();
}

void RotationAndAccuracy_Euler::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete yaw_;
  if (this != internal_default_instance()) delete pitch_;
  if (this != internal_default_instance()) delete roll_;
}

void RotationAndAccuracy_Euler::ArenaDtor(void* object) {
  RotationAndAccuracy_Euler* _this = reinterpret_cast< RotationAndAccuracy_Euler* >(object);
  (void)_this;
}
void RotationAndAccuracy_Euler::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RotationAndAccuracy_Euler::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RotationAndAccuracy_Euler::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RotationAndAccuracy_Euler& RotationAndAccuracy_Euler::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationAndAccuracy_Euler.base);
  return *internal_default_instance();
}


void RotationAndAccuracy_Euler::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && yaw_ != NULL) {
    delete yaw_;
  }
  yaw_ = NULL;
  if (GetArenaNoVirtual() == NULL && pitch_ != NULL) {
    delete pitch_;
  }
  pitch_ = NULL;
  if (GetArenaNoVirtual() == NULL && roll_ != NULL) {
    delete roll_;
  }
  roll_ = NULL;
  _internal_metadata_.Clear();
}

bool RotationAndAccuracy_Euler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.Int64Value yaw = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yaw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Value pitch = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pitch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Value roll = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roll()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler)
  return false;
#undef DO_
}

void RotationAndAccuracy_Euler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Int64Value yaw = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_yaw(), output);
  }

  // .sensoris.protobuf.types.base.Int64Value pitch = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_pitch(), output);
  }

  // .sensoris.protobuf.types.base.Int64Value roll = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_roll(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler)
}

::google::protobuf::uint8* RotationAndAccuracy_Euler::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Int64Value yaw = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_yaw(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Value pitch = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_pitch(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Value roll = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_roll(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler)
  return target;
}

size_t RotationAndAccuracy_Euler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Int64Value yaw = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_yaw()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *yaw_);
  }

  // .sensoris.protobuf.types.base.Int64Value pitch = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_pitch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pitch_);
  }

  // .sensoris.protobuf.types.base.Int64Value roll = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_roll()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *roll_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RotationAndAccuracy_Euler::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler)
  GOOGLE_DCHECK_NE(&from, this);
  const RotationAndAccuracy_Euler* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RotationAndAccuracy_Euler>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler)
    MergeFrom(*source);
  }
}

void RotationAndAccuracy_Euler::MergeFrom(const RotationAndAccuracy_Euler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_yaw()) {
    mutable_yaw()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.yaw());
  }
  if (from.has_pitch()) {
    mutable_pitch()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.pitch());
  }
  if (from.has_roll()) {
    mutable_roll()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.roll());
  }
}

void RotationAndAccuracy_Euler::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotationAndAccuracy_Euler::CopyFrom(const RotationAndAccuracy_Euler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotationAndAccuracy_Euler::IsInitialized() const {
  return true;
}

void RotationAndAccuracy_Euler::Swap(RotationAndAccuracy_Euler* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RotationAndAccuracy_Euler* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RotationAndAccuracy_Euler::UnsafeArenaSwap(RotationAndAccuracy_Euler* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RotationAndAccuracy_Euler::InternalSwap(RotationAndAccuracy_Euler* other) {
  using std::swap;
  swap(yaw_, other->yaw_);
  swap(pitch_, other->pitch_);
  swap(roll_, other->roll_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RotationAndAccuracy_Euler::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RotationAndAccuracy_Quaternion::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::spatial::_RotationAndAccuracy_Quaternion_default_instance_._instance.get_mutable()->x_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RotationAndAccuracy_Quaternion_default_instance_._instance.get_mutable()->y_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RotationAndAccuracy_Quaternion_default_instance_._instance.get_mutable()->z_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RotationAndAccuracy_Quaternion_default_instance_._instance.get_mutable()->w_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
}
void RotationAndAccuracy_Quaternion::unsafe_arena_set_allocated_x(
    ::sensoris::protobuf::types::base::Int64Value* x) {
  if (GetArenaNoVirtual() == NULL) {
    delete x_;
  }
  x_ = x;
  if (x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion.x)
}
void RotationAndAccuracy_Quaternion::clear_x() {
  if (GetArenaNoVirtual() == NULL && x_ != NULL) {
    delete x_;
  }
  x_ = NULL;
}
void RotationAndAccuracy_Quaternion::unsafe_arena_set_allocated_y(
    ::sensoris::protobuf::types::base::Int64Value* y) {
  if (GetArenaNoVirtual() == NULL) {
    delete y_;
  }
  y_ = y;
  if (y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion.y)
}
void RotationAndAccuracy_Quaternion::clear_y() {
  if (GetArenaNoVirtual() == NULL && y_ != NULL) {
    delete y_;
  }
  y_ = NULL;
}
void RotationAndAccuracy_Quaternion::unsafe_arena_set_allocated_z(
    ::sensoris::protobuf::types::base::Int64Value* z) {
  if (GetArenaNoVirtual() == NULL) {
    delete z_;
  }
  z_ = z;
  if (z) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion.z)
}
void RotationAndAccuracy_Quaternion::clear_z() {
  if (GetArenaNoVirtual() == NULL && z_ != NULL) {
    delete z_;
  }
  z_ = NULL;
}
void RotationAndAccuracy_Quaternion::unsafe_arena_set_allocated_w(
    ::sensoris::protobuf::types::base::Int64Value* w) {
  if (GetArenaNoVirtual() == NULL) {
    delete w_;
  }
  w_ = w;
  if (w) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion.w)
}
void RotationAndAccuracy_Quaternion::clear_w() {
  if (GetArenaNoVirtual() == NULL && w_ != NULL) {
    delete w_;
  }
  w_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RotationAndAccuracy_Quaternion::kXFieldNumber;
const int RotationAndAccuracy_Quaternion::kYFieldNumber;
const int RotationAndAccuracy_Quaternion::kZFieldNumber;
const int RotationAndAccuracy_Quaternion::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RotationAndAccuracy_Quaternion::RotationAndAccuracy_Quaternion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationAndAccuracy_Quaternion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion)
}
RotationAndAccuracy_Quaternion::RotationAndAccuracy_Quaternion(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationAndAccuracy_Quaternion.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion)
}
RotationAndAccuracy_Quaternion::RotationAndAccuracy_Quaternion(const RotationAndAccuracy_Quaternion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_x()) {
    x_ = new ::sensoris::protobuf::types::base::Int64Value(*from.x_);
  } else {
    x_ = NULL;
  }
  if (from.has_y()) {
    y_ = new ::sensoris::protobuf::types::base::Int64Value(*from.y_);
  } else {
    y_ = NULL;
  }
  if (from.has_z()) {
    z_ = new ::sensoris::protobuf::types::base::Int64Value(*from.z_);
  } else {
    z_ = NULL;
  }
  if (from.has_w()) {
    w_ = new ::sensoris::protobuf::types::base::Int64Value(*from.w_);
  } else {
    w_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion)
}

void RotationAndAccuracy_Quaternion::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
}

RotationAndAccuracy_Quaternion::~RotationAndAccuracy_Quaternion() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion)
  SharedDtor();
}

void RotationAndAccuracy_Quaternion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete x_;
  if (this != internal_default_instance()) delete y_;
  if (this != internal_default_instance()) delete z_;
  if (this != internal_default_instance()) delete w_;
}

void RotationAndAccuracy_Quaternion::ArenaDtor(void* object) {
  RotationAndAccuracy_Quaternion* _this = reinterpret_cast< RotationAndAccuracy_Quaternion* >(object);
  (void)_this;
}
void RotationAndAccuracy_Quaternion::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RotationAndAccuracy_Quaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RotationAndAccuracy_Quaternion::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RotationAndAccuracy_Quaternion& RotationAndAccuracy_Quaternion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationAndAccuracy_Quaternion.base);
  return *internal_default_instance();
}


void RotationAndAccuracy_Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && x_ != NULL) {
    delete x_;
  }
  x_ = NULL;
  if (GetArenaNoVirtual() == NULL && y_ != NULL) {
    delete y_;
  }
  y_ = NULL;
  if (GetArenaNoVirtual() == NULL && z_ != NULL) {
    delete z_;
  }
  z_ = NULL;
  if (GetArenaNoVirtual() == NULL && w_ != NULL) {
    delete w_;
  }
  w_ = NULL;
  _internal_metadata_.Clear();
}

bool RotationAndAccuracy_Quaternion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.Int64Value x = 1 [(.sensoris.protobuf.types.base.exponent) = 3];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Value y = 2 [(.sensoris.protobuf.types.base.exponent) = 3];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Value z = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_z()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Value w = 4 [(.sensoris.protobuf.types.base.exponent) = 3];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_w()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion)
  return false;
#undef DO_
}

void RotationAndAccuracy_Quaternion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Int64Value x = 1 [(.sensoris.protobuf.types.base.exponent) = 3];
  if (this->has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_x(), output);
  }

  // .sensoris.protobuf.types.base.Int64Value y = 2 [(.sensoris.protobuf.types.base.exponent) = 3];
  if (this->has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_y(), output);
  }

  // .sensoris.protobuf.types.base.Int64Value z = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
  if (this->has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_z(), output);
  }

  // .sensoris.protobuf.types.base.Int64Value w = 4 [(.sensoris.protobuf.types.base.exponent) = 3];
  if (this->has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_w(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion)
}

::google::protobuf::uint8* RotationAndAccuracy_Quaternion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Int64Value x = 1 [(.sensoris.protobuf.types.base.exponent) = 3];
  if (this->has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_x(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Value y = 2 [(.sensoris.protobuf.types.base.exponent) = 3];
  if (this->has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_y(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Value z = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
  if (this->has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_z(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Value w = 4 [(.sensoris.protobuf.types.base.exponent) = 3];
  if (this->has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_w(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion)
  return target;
}

size_t RotationAndAccuracy_Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.base.Int64Value x = 1 [(.sensoris.protobuf.types.base.exponent) = 3];
  if (this->has_x()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *x_);
  }

  // .sensoris.protobuf.types.base.Int64Value y = 2 [(.sensoris.protobuf.types.base.exponent) = 3];
  if (this->has_y()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *y_);
  }

  // .sensoris.protobuf.types.base.Int64Value z = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
  if (this->has_z()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *z_);
  }

  // .sensoris.protobuf.types.base.Int64Value w = 4 [(.sensoris.protobuf.types.base.exponent) = 3];
  if (this->has_w()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *w_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RotationAndAccuracy_Quaternion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const RotationAndAccuracy_Quaternion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RotationAndAccuracy_Quaternion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion)
    MergeFrom(*source);
  }
}

void RotationAndAccuracy_Quaternion::MergeFrom(const RotationAndAccuracy_Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_x()) {
    mutable_x()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.x());
  }
  if (from.has_y()) {
    mutable_y()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.y());
  }
  if (from.has_z()) {
    mutable_z()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.z());
  }
  if (from.has_w()) {
    mutable_w()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.w());
  }
}

void RotationAndAccuracy_Quaternion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotationAndAccuracy_Quaternion::CopyFrom(const RotationAndAccuracy_Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotationAndAccuracy_Quaternion::IsInitialized() const {
  return true;
}

void RotationAndAccuracy_Quaternion::Swap(RotationAndAccuracy_Quaternion* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RotationAndAccuracy_Quaternion* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RotationAndAccuracy_Quaternion::UnsafeArenaSwap(RotationAndAccuracy_Quaternion* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RotationAndAccuracy_Quaternion::InternalSwap(RotationAndAccuracy_Quaternion* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(w_, other->w_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RotationAndAccuracy_Quaternion::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RotationAndAccuracy_StdDev::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::spatial::_RotationAndAccuracy_StdDev_default_instance_._instance.get_mutable()->yaw_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RotationAndAccuracy_StdDev_default_instance_._instance.get_mutable()->pitch_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RotationAndAccuracy_StdDev_default_instance_._instance.get_mutable()->roll_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
}
void RotationAndAccuracy_StdDev::unsafe_arena_set_allocated_yaw(
    ::google::protobuf::Int64Value* yaw) {
  if (GetArenaNoVirtual() == NULL) {
    delete yaw_;
  }
  yaw_ = yaw;
  if (yaw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev.yaw)
}
void RotationAndAccuracy_StdDev::clear_yaw() {
  if (GetArenaNoVirtual() == NULL && yaw_ != NULL) {
    delete yaw_;
  }
  yaw_ = NULL;
}
void RotationAndAccuracy_StdDev::unsafe_arena_set_allocated_pitch(
    ::google::protobuf::Int64Value* pitch) {
  if (GetArenaNoVirtual() == NULL) {
    delete pitch_;
  }
  pitch_ = pitch;
  if (pitch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev.pitch)
}
void RotationAndAccuracy_StdDev::clear_pitch() {
  if (GetArenaNoVirtual() == NULL && pitch_ != NULL) {
    delete pitch_;
  }
  pitch_ = NULL;
}
void RotationAndAccuracy_StdDev::unsafe_arena_set_allocated_roll(
    ::google::protobuf::Int64Value* roll) {
  if (GetArenaNoVirtual() == NULL) {
    delete roll_;
  }
  roll_ = roll;
  if (roll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev.roll)
}
void RotationAndAccuracy_StdDev::clear_roll() {
  if (GetArenaNoVirtual() == NULL && roll_ != NULL) {
    delete roll_;
  }
  roll_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RotationAndAccuracy_StdDev::kYawFieldNumber;
const int RotationAndAccuracy_StdDev::kPitchFieldNumber;
const int RotationAndAccuracy_StdDev::kRollFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RotationAndAccuracy_StdDev::RotationAndAccuracy_StdDev()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationAndAccuracy_StdDev.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev)
}
RotationAndAccuracy_StdDev::RotationAndAccuracy_StdDev(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationAndAccuracy_StdDev.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev)
}
RotationAndAccuracy_StdDev::RotationAndAccuracy_StdDev(const RotationAndAccuracy_StdDev& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_yaw()) {
    yaw_ = new ::google::protobuf::Int64Value(*from.yaw_);
  } else {
    yaw_ = NULL;
  }
  if (from.has_pitch()) {
    pitch_ = new ::google::protobuf::Int64Value(*from.pitch_);
  } else {
    pitch_ = NULL;
  }
  if (from.has_roll()) {
    roll_ = new ::google::protobuf::Int64Value(*from.roll_);
  } else {
    roll_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev)
}

void RotationAndAccuracy_StdDev::SharedCtor() {
  ::memset(&yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&yaw_)) + sizeof(roll_));
}

RotationAndAccuracy_StdDev::~RotationAndAccuracy_StdDev() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev)
  SharedDtor();
}

void RotationAndAccuracy_StdDev::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete yaw_;
  if (this != internal_default_instance()) delete pitch_;
  if (this != internal_default_instance()) delete roll_;
}

void RotationAndAccuracy_StdDev::ArenaDtor(void* object) {
  RotationAndAccuracy_StdDev* _this = reinterpret_cast< RotationAndAccuracy_StdDev* >(object);
  (void)_this;
}
void RotationAndAccuracy_StdDev::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RotationAndAccuracy_StdDev::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RotationAndAccuracy_StdDev::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RotationAndAccuracy_StdDev& RotationAndAccuracy_StdDev::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationAndAccuracy_StdDev.base);
  return *internal_default_instance();
}


void RotationAndAccuracy_StdDev::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && yaw_ != NULL) {
    delete yaw_;
  }
  yaw_ = NULL;
  if (GetArenaNoVirtual() == NULL && pitch_ != NULL) {
    delete pitch_;
  }
  pitch_ = NULL;
  if (GetArenaNoVirtual() == NULL && roll_ != NULL) {
    delete roll_;
  }
  roll_ = NULL;
  _internal_metadata_.Clear();
}

bool RotationAndAccuracy_StdDev::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Int64Value yaw = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yaw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value pitch = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pitch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value roll = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roll()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev)
  return false;
#undef DO_
}

void RotationAndAccuracy_StdDev::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int64Value yaw = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_yaw(), output);
  }

  // .google.protobuf.Int64Value pitch = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_pitch(), output);
  }

  // .google.protobuf.Int64Value roll = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_roll(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev)
}

::google::protobuf::uint8* RotationAndAccuracy_StdDev::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int64Value yaw = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_yaw(), deterministic, target);
  }

  // .google.protobuf.Int64Value pitch = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_pitch(), deterministic, target);
  }

  // .google.protobuf.Int64Value roll = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_roll(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev)
  return target;
}

size_t RotationAndAccuracy_StdDev::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Int64Value yaw = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_yaw()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *yaw_);
  }

  // .google.protobuf.Int64Value pitch = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_pitch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pitch_);
  }

  // .google.protobuf.Int64Value roll = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_roll()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *roll_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RotationAndAccuracy_StdDev::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev)
  GOOGLE_DCHECK_NE(&from, this);
  const RotationAndAccuracy_StdDev* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RotationAndAccuracy_StdDev>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev)
    MergeFrom(*source);
  }
}

void RotationAndAccuracy_StdDev::MergeFrom(const RotationAndAccuracy_StdDev& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_yaw()) {
    mutable_yaw()->::google::protobuf::Int64Value::MergeFrom(from.yaw());
  }
  if (from.has_pitch()) {
    mutable_pitch()->::google::protobuf::Int64Value::MergeFrom(from.pitch());
  }
  if (from.has_roll()) {
    mutable_roll()->::google::protobuf::Int64Value::MergeFrom(from.roll());
  }
}

void RotationAndAccuracy_StdDev::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotationAndAccuracy_StdDev::CopyFrom(const RotationAndAccuracy_StdDev& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotationAndAccuracy_StdDev::IsInitialized() const {
  return true;
}

void RotationAndAccuracy_StdDev::Swap(RotationAndAccuracy_StdDev* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RotationAndAccuracy_StdDev* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RotationAndAccuracy_StdDev::UnsafeArenaSwap(RotationAndAccuracy_StdDev* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RotationAndAccuracy_StdDev::InternalSwap(RotationAndAccuracy_StdDev* other) {
  using std::swap;
  swap(yaw_, other->yaw_);
  swap(pitch_, other->pitch_);
  swap(roll_, other->roll_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RotationAndAccuracy_StdDev::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RotationAndAccuracy::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::spatial::_RotationAndAccuracy_default_instance_.euler_vehicle_ = const_cast< ::sensoris::protobuf::types::spatial::RotationAndAccuracy_Euler*>(
      ::sensoris::protobuf::types::spatial::RotationAndAccuracy_Euler::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RotationAndAccuracy_default_instance_.euler_event_group_ = const_cast< ::sensoris::protobuf::types::spatial::RotationAndAccuracy_Euler*>(
      ::sensoris::protobuf::types::spatial::RotationAndAccuracy_Euler::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RotationAndAccuracy_default_instance_.quaternion_vehicle_ = const_cast< ::sensoris::protobuf::types::spatial::RotationAndAccuracy_Quaternion*>(
      ::sensoris::protobuf::types::spatial::RotationAndAccuracy_Quaternion::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RotationAndAccuracy_default_instance_.quaternion_event_group_ = const_cast< ::sensoris::protobuf::types::spatial::RotationAndAccuracy_Quaternion*>(
      ::sensoris::protobuf::types::spatial::RotationAndAccuracy_Quaternion::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RotationAndAccuracy_default_instance_.combined_std_dev_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RotationAndAccuracy_default_instance_.std_dev_ = const_cast< ::sensoris::protobuf::types::spatial::RotationAndAccuracy_StdDev*>(
      ::sensoris::protobuf::types::spatial::RotationAndAccuracy_StdDev::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RotationAndAccuracy_default_instance_.covariance_ = const_cast< ::sensoris::protobuf::types::base::Int64Matrix3x3*>(
      ::sensoris::protobuf::types::base::Int64Matrix3x3::internal_default_instance());
}
void RotationAndAccuracy::set_allocated_euler_vehicle(::sensoris::protobuf::types::spatial::RotationAndAccuracy_Euler* euler_vehicle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_euler_quaternion();
  if (euler_vehicle) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(euler_vehicle);
    if (message_arena != submessage_arena) {
      euler_vehicle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, euler_vehicle, submessage_arena);
    }
    set_has_euler_vehicle();
    euler_quaternion_.euler_vehicle_ = euler_vehicle;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.RotationAndAccuracy.euler_vehicle)
}
void RotationAndAccuracy::set_allocated_euler_event_group(::sensoris::protobuf::types::spatial::RotationAndAccuracy_Euler* euler_event_group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_euler_quaternion();
  if (euler_event_group) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(euler_event_group);
    if (message_arena != submessage_arena) {
      euler_event_group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, euler_event_group, submessage_arena);
    }
    set_has_euler_event_group();
    euler_quaternion_.euler_event_group_ = euler_event_group;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.RotationAndAccuracy.euler_event_group)
}
void RotationAndAccuracy::set_allocated_quaternion_vehicle(::sensoris::protobuf::types::spatial::RotationAndAccuracy_Quaternion* quaternion_vehicle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_euler_quaternion();
  if (quaternion_vehicle) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(quaternion_vehicle);
    if (message_arena != submessage_arena) {
      quaternion_vehicle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quaternion_vehicle, submessage_arena);
    }
    set_has_quaternion_vehicle();
    euler_quaternion_.quaternion_vehicle_ = quaternion_vehicle;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.RotationAndAccuracy.quaternion_vehicle)
}
void RotationAndAccuracy::set_allocated_quaternion_event_group(::sensoris::protobuf::types::spatial::RotationAndAccuracy_Quaternion* quaternion_event_group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_euler_quaternion();
  if (quaternion_event_group) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(quaternion_event_group);
    if (message_arena != submessage_arena) {
      quaternion_event_group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quaternion_event_group, submessage_arena);
    }
    set_has_quaternion_event_group();
    euler_quaternion_.quaternion_event_group_ = quaternion_event_group;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.RotationAndAccuracy.quaternion_event_group)
}
void RotationAndAccuracy::set_allocated_combined_std_dev(::google::protobuf::Int64Value* combined_std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_accuracy();
  if (combined_std_dev) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(combined_std_dev)->GetArena();
    if (message_arena != submessage_arena) {
      combined_std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, combined_std_dev, submessage_arena);
    }
    set_has_combined_std_dev();
    accuracy_.combined_std_dev_ = combined_std_dev;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.RotationAndAccuracy.combined_std_dev)
}
void RotationAndAccuracy::clear_combined_std_dev() {
  if (has_combined_std_dev()) {
    if (GetArenaNoVirtual() == NULL) {
      delete accuracy_.combined_std_dev_;
    }
    clear_has_accuracy();
  }
}
void RotationAndAccuracy::set_allocated_std_dev(::sensoris::protobuf::types::spatial::RotationAndAccuracy_StdDev* std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_accuracy();
  if (std_dev) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(std_dev);
    if (message_arena != submessage_arena) {
      std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, std_dev, submessage_arena);
    }
    set_has_std_dev();
    accuracy_.std_dev_ = std_dev;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.RotationAndAccuracy.std_dev)
}
void RotationAndAccuracy::set_allocated_covariance(::sensoris::protobuf::types::base::Int64Matrix3x3* covariance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_accuracy();
  if (covariance) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(covariance)->GetArena();
    if (message_arena != submessage_arena) {
      covariance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, covariance, submessage_arena);
    }
    set_has_covariance();
    accuracy_.covariance_ = covariance;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.RotationAndAccuracy.covariance)
}
void RotationAndAccuracy::clear_covariance() {
  if (has_covariance()) {
    if (GetArenaNoVirtual() == NULL) {
      delete accuracy_.covariance_;
    }
    clear_has_accuracy();
  }
}
void RotationAndAccuracy::clear_extension() {
  extension_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RotationAndAccuracy::kEulerVehicleFieldNumber;
const int RotationAndAccuracy::kEulerEventGroupFieldNumber;
const int RotationAndAccuracy::kQuaternionVehicleFieldNumber;
const int RotationAndAccuracy::kQuaternionEventGroupFieldNumber;
const int RotationAndAccuracy::kCombinedStdDevFieldNumber;
const int RotationAndAccuracy::kStdDevFieldNumber;
const int RotationAndAccuracy::kCovarianceFieldNumber;
const int RotationAndAccuracy::kExtensionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RotationAndAccuracy::RotationAndAccuracy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationAndAccuracy.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.spatial.RotationAndAccuracy)
}
RotationAndAccuracy::RotationAndAccuracy(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  extension_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationAndAccuracy.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.spatial.RotationAndAccuracy)
}
RotationAndAccuracy::RotationAndAccuracy(const RotationAndAccuracy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_euler_quaternion();
  switch (from.euler_quaternion_case()) {
    case kEulerVehicle: {
      mutable_euler_vehicle()->::sensoris::protobuf::types::spatial::RotationAndAccuracy_Euler::MergeFrom(from.euler_vehicle());
      break;
    }
    case kEulerEventGroup: {
      mutable_euler_event_group()->::sensoris::protobuf::types::spatial::RotationAndAccuracy_Euler::MergeFrom(from.euler_event_group());
      break;
    }
    case kQuaternionVehicle: {
      mutable_quaternion_vehicle()->::sensoris::protobuf::types::spatial::RotationAndAccuracy_Quaternion::MergeFrom(from.quaternion_vehicle());
      break;
    }
    case kQuaternionEventGroup: {
      mutable_quaternion_event_group()->::sensoris::protobuf::types::spatial::RotationAndAccuracy_Quaternion::MergeFrom(from.quaternion_event_group());
      break;
    }
    case EULER_QUATERNION_NOT_SET: {
      break;
    }
  }
  clear_has_accuracy();
  switch (from.accuracy_case()) {
    case kCombinedStdDev: {
      mutable_combined_std_dev()->::google::protobuf::Int64Value::MergeFrom(from.combined_std_dev());
      break;
    }
    case kStdDev: {
      mutable_std_dev()->::sensoris::protobuf::types::spatial::RotationAndAccuracy_StdDev::MergeFrom(from.std_dev());
      break;
    }
    case kCovariance: {
      mutable_covariance()->::sensoris::protobuf::types::base::Int64Matrix3x3::MergeFrom(from.covariance());
      break;
    }
    case ACCURACY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.spatial.RotationAndAccuracy)
}

void RotationAndAccuracy::SharedCtor() {
  clear_has_euler_quaternion();
  clear_has_accuracy();
}

RotationAndAccuracy::~RotationAndAccuracy() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.spatial.RotationAndAccuracy)
  SharedDtor();
}

void RotationAndAccuracy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (has_euler_quaternion()) {
    clear_euler_quaternion();
  }
  if (has_accuracy()) {
    clear_accuracy();
  }
}

void RotationAndAccuracy::ArenaDtor(void* object) {
  RotationAndAccuracy* _this = reinterpret_cast< RotationAndAccuracy* >(object);
  (void)_this;
}
void RotationAndAccuracy::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RotationAndAccuracy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RotationAndAccuracy::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RotationAndAccuracy& RotationAndAccuracy::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationAndAccuracy.base);
  return *internal_default_instance();
}


void RotationAndAccuracy::clear_euler_quaternion() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.types.spatial.RotationAndAccuracy)
  switch (euler_quaternion_case()) {
    case kEulerVehicle: {
      if (GetArenaNoVirtual() == NULL) {
        delete euler_quaternion_.euler_vehicle_;
      }
      break;
    }
    case kEulerEventGroup: {
      if (GetArenaNoVirtual() == NULL) {
        delete euler_quaternion_.euler_event_group_;
      }
      break;
    }
    case kQuaternionVehicle: {
      if (GetArenaNoVirtual() == NULL) {
        delete euler_quaternion_.quaternion_vehicle_;
      }
      break;
    }
    case kQuaternionEventGroup: {
      if (GetArenaNoVirtual() == NULL) {
        delete euler_quaternion_.quaternion_event_group_;
      }
      break;
    }
    case EULER_QUATERNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EULER_QUATERNION_NOT_SET;
}

void RotationAndAccuracy::clear_accuracy() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.types.spatial.RotationAndAccuracy)
  switch (accuracy_case()) {
    case kCombinedStdDev: {
      if (GetArenaNoVirtual() == NULL) {
        delete accuracy_.combined_std_dev_;
      }
      break;
    }
    case kStdDev: {
      if (GetArenaNoVirtual() == NULL) {
        delete accuracy_.std_dev_;
      }
      break;
    }
    case kCovariance: {
      if (GetArenaNoVirtual() == NULL) {
        delete accuracy_.covariance_;
      }
      break;
    }
    case ACCURACY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = ACCURACY_NOT_SET;
}


void RotationAndAccuracy::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.spatial.RotationAndAccuracy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extension_.Clear();
  clear_euler_quaternion();
  clear_accuracy();
  _internal_metadata_.Clear();
}

bool RotationAndAccuracy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.spatial.RotationAndAccuracy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler euler_vehicle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_euler_vehicle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler euler_event_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_euler_event_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion quaternion_vehicle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quaternion_vehicle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion quaternion_event_group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quaternion_event_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value combined_std_dev = 5 [(.sensoris.protobuf.types.base.exponent) = 2];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_combined_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev std_dev = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Matrix3x3 covariance = 7 [(.sensoris.protobuf.types.base.exponent) = 2];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_covariance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any extension = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_extension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.spatial.RotationAndAccuracy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.spatial.RotationAndAccuracy)
  return false;
#undef DO_
}

void RotationAndAccuracy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.spatial.RotationAndAccuracy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler euler_vehicle = 1;
  if (has_euler_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_euler_vehicle(), output);
  }

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler euler_event_group = 2;
  if (has_euler_event_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_euler_event_group(), output);
  }

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion quaternion_vehicle = 3;
  if (has_quaternion_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_quaternion_vehicle(), output);
  }

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion quaternion_event_group = 4;
  if (has_quaternion_event_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_quaternion_event_group(), output);
  }

  // .google.protobuf.Int64Value combined_std_dev = 5 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (has_combined_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_combined_std_dev(), output);
  }

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev std_dev = 6;
  if (has_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_std_dev(), output);
  }

  // .sensoris.protobuf.types.base.Int64Matrix3x3 covariance = 7 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (has_covariance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_covariance(), output);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->extension(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.spatial.RotationAndAccuracy)
}

::google::protobuf::uint8* RotationAndAccuracy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.spatial.RotationAndAccuracy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler euler_vehicle = 1;
  if (has_euler_vehicle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_euler_vehicle(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler euler_event_group = 2;
  if (has_euler_event_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_euler_event_group(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion quaternion_vehicle = 3;
  if (has_quaternion_vehicle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_quaternion_vehicle(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion quaternion_event_group = 4;
  if (has_quaternion_event_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_quaternion_event_group(), deterministic, target);
  }

  // .google.protobuf.Int64Value combined_std_dev = 5 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (has_combined_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_combined_std_dev(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev std_dev = 6;
  if (has_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_std_dev(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Matrix3x3 covariance = 7 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (has_covariance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_covariance(), deterministic, target);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->extension(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.spatial.RotationAndAccuracy)
  return target;
}

size_t RotationAndAccuracy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.spatial.RotationAndAccuracy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.protobuf.Any extension = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->extension_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->extension(static_cast<int>(i)));
    }
  }

  switch (euler_quaternion_case()) {
    // .sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler euler_vehicle = 1;
    case kEulerVehicle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *euler_quaternion_.euler_vehicle_);
      break;
    }
    // .sensoris.protobuf.types.spatial.RotationAndAccuracy.Euler euler_event_group = 2;
    case kEulerEventGroup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *euler_quaternion_.euler_event_group_);
      break;
    }
    // .sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion quaternion_vehicle = 3;
    case kQuaternionVehicle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *euler_quaternion_.quaternion_vehicle_);
      break;
    }
    // .sensoris.protobuf.types.spatial.RotationAndAccuracy.Quaternion quaternion_event_group = 4;
    case kQuaternionEventGroup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *euler_quaternion_.quaternion_event_group_);
      break;
    }
    case EULER_QUATERNION_NOT_SET: {
      break;
    }
  }
  switch (accuracy_case()) {
    // .google.protobuf.Int64Value combined_std_dev = 5 [(.sensoris.protobuf.types.base.exponent) = 2];
    case kCombinedStdDev: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *accuracy_.combined_std_dev_);
      break;
    }
    // .sensoris.protobuf.types.spatial.RotationAndAccuracy.StdDev std_dev = 6;
    case kStdDev: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *accuracy_.std_dev_);
      break;
    }
    // .sensoris.protobuf.types.base.Int64Matrix3x3 covariance = 7 [(.sensoris.protobuf.types.base.exponent) = 2];
    case kCovariance: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *accuracy_.covariance_);
      break;
    }
    case ACCURACY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RotationAndAccuracy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.spatial.RotationAndAccuracy)
  GOOGLE_DCHECK_NE(&from, this);
  const RotationAndAccuracy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RotationAndAccuracy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.spatial.RotationAndAccuracy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.spatial.RotationAndAccuracy)
    MergeFrom(*source);
  }
}

void RotationAndAccuracy::MergeFrom(const RotationAndAccuracy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.spatial.RotationAndAccuracy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extension_.MergeFrom(from.extension_);
  switch (from.euler_quaternion_case()) {
    case kEulerVehicle: {
      mutable_euler_vehicle()->::sensoris::protobuf::types::spatial::RotationAndAccuracy_Euler::MergeFrom(from.euler_vehicle());
      break;
    }
    case kEulerEventGroup: {
      mutable_euler_event_group()->::sensoris::protobuf::types::spatial::RotationAndAccuracy_Euler::MergeFrom(from.euler_event_group());
      break;
    }
    case kQuaternionVehicle: {
      mutable_quaternion_vehicle()->::sensoris::protobuf::types::spatial::RotationAndAccuracy_Quaternion::MergeFrom(from.quaternion_vehicle());
      break;
    }
    case kQuaternionEventGroup: {
      mutable_quaternion_event_group()->::sensoris::protobuf::types::spatial::RotationAndAccuracy_Quaternion::MergeFrom(from.quaternion_event_group());
      break;
    }
    case EULER_QUATERNION_NOT_SET: {
      break;
    }
  }
  switch (from.accuracy_case()) {
    case kCombinedStdDev: {
      mutable_combined_std_dev()->::google::protobuf::Int64Value::MergeFrom(from.combined_std_dev());
      break;
    }
    case kStdDev: {
      mutable_std_dev()->::sensoris::protobuf::types::spatial::RotationAndAccuracy_StdDev::MergeFrom(from.std_dev());
      break;
    }
    case kCovariance: {
      mutable_covariance()->::sensoris::protobuf::types::base::Int64Matrix3x3::MergeFrom(from.covariance());
      break;
    }
    case ACCURACY_NOT_SET: {
      break;
    }
  }
}

void RotationAndAccuracy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.spatial.RotationAndAccuracy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotationAndAccuracy::CopyFrom(const RotationAndAccuracy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.spatial.RotationAndAccuracy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotationAndAccuracy::IsInitialized() const {
  return true;
}

void RotationAndAccuracy::Swap(RotationAndAccuracy* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RotationAndAccuracy* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RotationAndAccuracy::UnsafeArenaSwap(RotationAndAccuracy* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RotationAndAccuracy::InternalSwap(RotationAndAccuracy* other) {
  using std::swap;
  CastToBase(&extension_)->InternalSwap(CastToBase(&other->extension_));
  swap(euler_quaternion_, other->euler_quaternion_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(accuracy_, other->accuracy_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RotationAndAccuracy::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RotationRateAndAccuracy_StdDev::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::spatial::_RotationRateAndAccuracy_StdDev_default_instance_._instance.get_mutable()->yaw_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RotationRateAndAccuracy_StdDev_default_instance_._instance.get_mutable()->pitch_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RotationRateAndAccuracy_StdDev_default_instance_._instance.get_mutable()->roll_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
}
void RotationRateAndAccuracy_StdDev::unsafe_arena_set_allocated_yaw(
    ::google::protobuf::Int64Value* yaw) {
  if (GetArenaNoVirtual() == NULL) {
    delete yaw_;
  }
  yaw_ = yaw;
  if (yaw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev.yaw)
}
void RotationRateAndAccuracy_StdDev::clear_yaw() {
  if (GetArenaNoVirtual() == NULL && yaw_ != NULL) {
    delete yaw_;
  }
  yaw_ = NULL;
}
void RotationRateAndAccuracy_StdDev::unsafe_arena_set_allocated_pitch(
    ::google::protobuf::Int64Value* pitch) {
  if (GetArenaNoVirtual() == NULL) {
    delete pitch_;
  }
  pitch_ = pitch;
  if (pitch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev.pitch)
}
void RotationRateAndAccuracy_StdDev::clear_pitch() {
  if (GetArenaNoVirtual() == NULL && pitch_ != NULL) {
    delete pitch_;
  }
  pitch_ = NULL;
}
void RotationRateAndAccuracy_StdDev::unsafe_arena_set_allocated_roll(
    ::google::protobuf::Int64Value* roll) {
  if (GetArenaNoVirtual() == NULL) {
    delete roll_;
  }
  roll_ = roll;
  if (roll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev.roll)
}
void RotationRateAndAccuracy_StdDev::clear_roll() {
  if (GetArenaNoVirtual() == NULL && roll_ != NULL) {
    delete roll_;
  }
  roll_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RotationRateAndAccuracy_StdDev::kYawFieldNumber;
const int RotationRateAndAccuracy_StdDev::kPitchFieldNumber;
const int RotationRateAndAccuracy_StdDev::kRollFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RotationRateAndAccuracy_StdDev::RotationRateAndAccuracy_StdDev()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationRateAndAccuracy_StdDev.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev)
}
RotationRateAndAccuracy_StdDev::RotationRateAndAccuracy_StdDev(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationRateAndAccuracy_StdDev.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev)
}
RotationRateAndAccuracy_StdDev::RotationRateAndAccuracy_StdDev(const RotationRateAndAccuracy_StdDev& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_yaw()) {
    yaw_ = new ::google::protobuf::Int64Value(*from.yaw_);
  } else {
    yaw_ = NULL;
  }
  if (from.has_pitch()) {
    pitch_ = new ::google::protobuf::Int64Value(*from.pitch_);
  } else {
    pitch_ = NULL;
  }
  if (from.has_roll()) {
    roll_ = new ::google::protobuf::Int64Value(*from.roll_);
  } else {
    roll_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev)
}

void RotationRateAndAccuracy_StdDev::SharedCtor() {
  ::memset(&yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&yaw_)) + sizeof(roll_));
}

RotationRateAndAccuracy_StdDev::~RotationRateAndAccuracy_StdDev() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev)
  SharedDtor();
}

void RotationRateAndAccuracy_StdDev::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete yaw_;
  if (this != internal_default_instance()) delete pitch_;
  if (this != internal_default_instance()) delete roll_;
}

void RotationRateAndAccuracy_StdDev::ArenaDtor(void* object) {
  RotationRateAndAccuracy_StdDev* _this = reinterpret_cast< RotationRateAndAccuracy_StdDev* >(object);
  (void)_this;
}
void RotationRateAndAccuracy_StdDev::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RotationRateAndAccuracy_StdDev::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RotationRateAndAccuracy_StdDev::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RotationRateAndAccuracy_StdDev& RotationRateAndAccuracy_StdDev::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationRateAndAccuracy_StdDev.base);
  return *internal_default_instance();
}


void RotationRateAndAccuracy_StdDev::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && yaw_ != NULL) {
    delete yaw_;
  }
  yaw_ = NULL;
  if (GetArenaNoVirtual() == NULL && pitch_ != NULL) {
    delete pitch_;
  }
  pitch_ = NULL;
  if (GetArenaNoVirtual() == NULL && roll_ != NULL) {
    delete roll_;
  }
  roll_ = NULL;
  _internal_metadata_.Clear();
}

bool RotationRateAndAccuracy_StdDev::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Int64Value yaw = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yaw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value pitch = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pitch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value roll = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roll()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev)
  return false;
#undef DO_
}

void RotationRateAndAccuracy_StdDev::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int64Value yaw = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_yaw(), output);
  }

  // .google.protobuf.Int64Value pitch = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_pitch(), output);
  }

  // .google.protobuf.Int64Value roll = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_roll(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev)
}

::google::protobuf::uint8* RotationRateAndAccuracy_StdDev::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int64Value yaw = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_yaw(), deterministic, target);
  }

  // .google.protobuf.Int64Value pitch = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_pitch(), deterministic, target);
  }

  // .google.protobuf.Int64Value roll = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_roll(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev)
  return target;
}

size_t RotationRateAndAccuracy_StdDev::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Int64Value yaw = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_yaw()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *yaw_);
  }

  // .google.protobuf.Int64Value pitch = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_pitch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pitch_);
  }

  // .google.protobuf.Int64Value roll = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_roll()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *roll_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RotationRateAndAccuracy_StdDev::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev)
  GOOGLE_DCHECK_NE(&from, this);
  const RotationRateAndAccuracy_StdDev* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RotationRateAndAccuracy_StdDev>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev)
    MergeFrom(*source);
  }
}

void RotationRateAndAccuracy_StdDev::MergeFrom(const RotationRateAndAccuracy_StdDev& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_yaw()) {
    mutable_yaw()->::google::protobuf::Int64Value::MergeFrom(from.yaw());
  }
  if (from.has_pitch()) {
    mutable_pitch()->::google::protobuf::Int64Value::MergeFrom(from.pitch());
  }
  if (from.has_roll()) {
    mutable_roll()->::google::protobuf::Int64Value::MergeFrom(from.roll());
  }
}

void RotationRateAndAccuracy_StdDev::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotationRateAndAccuracy_StdDev::CopyFrom(const RotationRateAndAccuracy_StdDev& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotationRateAndAccuracy_StdDev::IsInitialized() const {
  return true;
}

void RotationRateAndAccuracy_StdDev::Swap(RotationRateAndAccuracy_StdDev* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RotationRateAndAccuracy_StdDev* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RotationRateAndAccuracy_StdDev::UnsafeArenaSwap(RotationRateAndAccuracy_StdDev* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RotationRateAndAccuracy_StdDev::InternalSwap(RotationRateAndAccuracy_StdDev* other) {
  using std::swap;
  swap(yaw_, other->yaw_);
  swap(pitch_, other->pitch_);
  swap(roll_, other->roll_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RotationRateAndAccuracy_StdDev::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RotationRateAndAccuracy::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::spatial::_RotationRateAndAccuracy_default_instance_._instance.get_mutable()->yaw_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RotationRateAndAccuracy_default_instance_._instance.get_mutable()->pitch_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RotationRateAndAccuracy_default_instance_._instance.get_mutable()->roll_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RotationRateAndAccuracy_default_instance_.combined_std_dev_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RotationRateAndAccuracy_default_instance_.std_dev_ = const_cast< ::sensoris::protobuf::types::spatial::RotationRateAndAccuracy_StdDev*>(
      ::sensoris::protobuf::types::spatial::RotationRateAndAccuracy_StdDev::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_RotationRateAndAccuracy_default_instance_.covariance_ = const_cast< ::sensoris::protobuf::types::base::Int64Matrix3x3*>(
      ::sensoris::protobuf::types::base::Int64Matrix3x3::internal_default_instance());
}
void RotationRateAndAccuracy::unsafe_arena_set_allocated_yaw(
    ::sensoris::protobuf::types::base::Int64Value* yaw) {
  if (GetArenaNoVirtual() == NULL) {
    delete yaw_;
  }
  yaw_ = yaw;
  if (yaw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.yaw)
}
void RotationRateAndAccuracy::clear_yaw() {
  if (GetArenaNoVirtual() == NULL && yaw_ != NULL) {
    delete yaw_;
  }
  yaw_ = NULL;
}
void RotationRateAndAccuracy::unsafe_arena_set_allocated_pitch(
    ::sensoris::protobuf::types::base::Int64Value* pitch) {
  if (GetArenaNoVirtual() == NULL) {
    delete pitch_;
  }
  pitch_ = pitch;
  if (pitch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.pitch)
}
void RotationRateAndAccuracy::clear_pitch() {
  if (GetArenaNoVirtual() == NULL && pitch_ != NULL) {
    delete pitch_;
  }
  pitch_ = NULL;
}
void RotationRateAndAccuracy::unsafe_arena_set_allocated_roll(
    ::sensoris::protobuf::types::base::Int64Value* roll) {
  if (GetArenaNoVirtual() == NULL) {
    delete roll_;
  }
  roll_ = roll;
  if (roll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.roll)
}
void RotationRateAndAccuracy::clear_roll() {
  if (GetArenaNoVirtual() == NULL && roll_ != NULL) {
    delete roll_;
  }
  roll_ = NULL;
}
void RotationRateAndAccuracy::set_allocated_combined_std_dev(::google::protobuf::Int64Value* combined_std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_accuracy();
  if (combined_std_dev) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(combined_std_dev)->GetArena();
    if (message_arena != submessage_arena) {
      combined_std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, combined_std_dev, submessage_arena);
    }
    set_has_combined_std_dev();
    accuracy_.combined_std_dev_ = combined_std_dev;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.combined_std_dev)
}
void RotationRateAndAccuracy::clear_combined_std_dev() {
  if (has_combined_std_dev()) {
    if (GetArenaNoVirtual() == NULL) {
      delete accuracy_.combined_std_dev_;
    }
    clear_has_accuracy();
  }
}
void RotationRateAndAccuracy::set_allocated_std_dev(::sensoris::protobuf::types::spatial::RotationRateAndAccuracy_StdDev* std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_accuracy();
  if (std_dev) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(std_dev);
    if (message_arena != submessage_arena) {
      std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, std_dev, submessage_arena);
    }
    set_has_std_dev();
    accuracy_.std_dev_ = std_dev;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.std_dev)
}
void RotationRateAndAccuracy::set_allocated_covariance(::sensoris::protobuf::types::base::Int64Matrix3x3* covariance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_accuracy();
  if (covariance) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(covariance)->GetArena();
    if (message_arena != submessage_arena) {
      covariance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, covariance, submessage_arena);
    }
    set_has_covariance();
    accuracy_.covariance_ = covariance;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.RotationRateAndAccuracy.covariance)
}
void RotationRateAndAccuracy::clear_covariance() {
  if (has_covariance()) {
    if (GetArenaNoVirtual() == NULL) {
      delete accuracy_.covariance_;
    }
    clear_has_accuracy();
  }
}
void RotationRateAndAccuracy::clear_extension() {
  extension_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RotationRateAndAccuracy::kYawFieldNumber;
const int RotationRateAndAccuracy::kPitchFieldNumber;
const int RotationRateAndAccuracy::kRollFieldNumber;
const int RotationRateAndAccuracy::kCombinedStdDevFieldNumber;
const int RotationRateAndAccuracy::kStdDevFieldNumber;
const int RotationRateAndAccuracy::kCovarianceFieldNumber;
const int RotationRateAndAccuracy::kExtensionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RotationRateAndAccuracy::RotationRateAndAccuracy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationRateAndAccuracy.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.spatial.RotationRateAndAccuracy)
}
RotationRateAndAccuracy::RotationRateAndAccuracy(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  extension_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationRateAndAccuracy.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.spatial.RotationRateAndAccuracy)
}
RotationRateAndAccuracy::RotationRateAndAccuracy(const RotationRateAndAccuracy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_yaw()) {
    yaw_ = new ::sensoris::protobuf::types::base::Int64Value(*from.yaw_);
  } else {
    yaw_ = NULL;
  }
  if (from.has_pitch()) {
    pitch_ = new ::sensoris::protobuf::types::base::Int64Value(*from.pitch_);
  } else {
    pitch_ = NULL;
  }
  if (from.has_roll()) {
    roll_ = new ::sensoris::protobuf::types::base::Int64Value(*from.roll_);
  } else {
    roll_ = NULL;
  }
  clear_has_accuracy();
  switch (from.accuracy_case()) {
    case kCombinedStdDev: {
      mutable_combined_std_dev()->::google::protobuf::Int64Value::MergeFrom(from.combined_std_dev());
      break;
    }
    case kStdDev: {
      mutable_std_dev()->::sensoris::protobuf::types::spatial::RotationRateAndAccuracy_StdDev::MergeFrom(from.std_dev());
      break;
    }
    case kCovariance: {
      mutable_covariance()->::sensoris::protobuf::types::base::Int64Matrix3x3::MergeFrom(from.covariance());
      break;
    }
    case ACCURACY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.spatial.RotationRateAndAccuracy)
}

void RotationRateAndAccuracy::SharedCtor() {
  ::memset(&yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&yaw_)) + sizeof(roll_));
  clear_has_accuracy();
}

RotationRateAndAccuracy::~RotationRateAndAccuracy() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.spatial.RotationRateAndAccuracy)
  SharedDtor();
}

void RotationRateAndAccuracy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete yaw_;
  if (this != internal_default_instance()) delete pitch_;
  if (this != internal_default_instance()) delete roll_;
  if (has_accuracy()) {
    clear_accuracy();
  }
}

void RotationRateAndAccuracy::ArenaDtor(void* object) {
  RotationRateAndAccuracy* _this = reinterpret_cast< RotationRateAndAccuracy* >(object);
  (void)_this;
}
void RotationRateAndAccuracy::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RotationRateAndAccuracy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RotationRateAndAccuracy::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RotationRateAndAccuracy& RotationRateAndAccuracy::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationRateAndAccuracy.base);
  return *internal_default_instance();
}


void RotationRateAndAccuracy::clear_accuracy() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.types.spatial.RotationRateAndAccuracy)
  switch (accuracy_case()) {
    case kCombinedStdDev: {
      if (GetArenaNoVirtual() == NULL) {
        delete accuracy_.combined_std_dev_;
      }
      break;
    }
    case kStdDev: {
      if (GetArenaNoVirtual() == NULL) {
        delete accuracy_.std_dev_;
      }
      break;
    }
    case kCovariance: {
      if (GetArenaNoVirtual() == NULL) {
        delete accuracy_.covariance_;
      }
      break;
    }
    case ACCURACY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACCURACY_NOT_SET;
}


void RotationRateAndAccuracy::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.spatial.RotationRateAndAccuracy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extension_.Clear();
  if (GetArenaNoVirtual() == NULL && yaw_ != NULL) {
    delete yaw_;
  }
  yaw_ = NULL;
  if (GetArenaNoVirtual() == NULL && pitch_ != NULL) {
    delete pitch_;
  }
  pitch_ = NULL;
  if (GetArenaNoVirtual() == NULL && roll_ != NULL) {
    delete roll_;
  }
  roll_ = NULL;
  clear_accuracy();
  _internal_metadata_.Clear();
}

bool RotationRateAndAccuracy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.spatial.RotationRateAndAccuracy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.base.Int64Value yaw = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yaw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Value pitch = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pitch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Value roll = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roll()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value combined_std_dev = 4 [(.sensoris.protobuf.types.base.exponent) = 2];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_combined_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev std_dev = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Matrix3x3 covariance = 6 [(.sensoris.protobuf.types.base.exponent) = 2];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_covariance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any extension = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_extension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.spatial.RotationRateAndAccuracy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.spatial.RotationRateAndAccuracy)
  return false;
#undef DO_
}

void RotationRateAndAccuracy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.spatial.RotationRateAndAccuracy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Int64Value yaw = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_yaw(), output);
  }

  // .sensoris.protobuf.types.base.Int64Value pitch = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_pitch(), output);
  }

  // .sensoris.protobuf.types.base.Int64Value roll = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_roll(), output);
  }

  // .google.protobuf.Int64Value combined_std_dev = 4 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (has_combined_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_combined_std_dev(), output);
  }

  // .sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev std_dev = 5;
  if (has_std_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_std_dev(), output);
  }

  // .sensoris.protobuf.types.base.Int64Matrix3x3 covariance = 6 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (has_covariance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_covariance(), output);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->extension(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.spatial.RotationRateAndAccuracy)
}

::google::protobuf::uint8* RotationRateAndAccuracy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.spatial.RotationRateAndAccuracy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.base.Int64Value yaw = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_yaw(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Value pitch = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_pitch(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Value roll = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_roll(), deterministic, target);
  }

  // .google.protobuf.Int64Value combined_std_dev = 4 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (has_combined_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_combined_std_dev(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev std_dev = 5;
  if (has_std_dev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_std_dev(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Matrix3x3 covariance = 6 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (has_covariance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_covariance(), deterministic, target);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->extension(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.spatial.RotationRateAndAccuracy)
  return target;
}

size_t RotationRateAndAccuracy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.spatial.RotationRateAndAccuracy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.protobuf.Any extension = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->extension_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->extension(static_cast<int>(i)));
    }
  }

  // .sensoris.protobuf.types.base.Int64Value yaw = 1 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_yaw()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *yaw_);
  }

  // .sensoris.protobuf.types.base.Int64Value pitch = 2 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_pitch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pitch_);
  }

  // .sensoris.protobuf.types.base.Int64Value roll = 3 [(.sensoris.protobuf.types.base.exponent) = 2];
  if (this->has_roll()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *roll_);
  }

  switch (accuracy_case()) {
    // .google.protobuf.Int64Value combined_std_dev = 4 [(.sensoris.protobuf.types.base.exponent) = 2];
    case kCombinedStdDev: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *accuracy_.combined_std_dev_);
      break;
    }
    // .sensoris.protobuf.types.spatial.RotationRateAndAccuracy.StdDev std_dev = 5;
    case kStdDev: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *accuracy_.std_dev_);
      break;
    }
    // .sensoris.protobuf.types.base.Int64Matrix3x3 covariance = 6 [(.sensoris.protobuf.types.base.exponent) = 2];
    case kCovariance: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *accuracy_.covariance_);
      break;
    }
    case ACCURACY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RotationRateAndAccuracy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.spatial.RotationRateAndAccuracy)
  GOOGLE_DCHECK_NE(&from, this);
  const RotationRateAndAccuracy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RotationRateAndAccuracy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.spatial.RotationRateAndAccuracy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.spatial.RotationRateAndAccuracy)
    MergeFrom(*source);
  }
}

void RotationRateAndAccuracy::MergeFrom(const RotationRateAndAccuracy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.spatial.RotationRateAndAccuracy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extension_.MergeFrom(from.extension_);
  if (from.has_yaw()) {
    mutable_yaw()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.yaw());
  }
  if (from.has_pitch()) {
    mutable_pitch()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.pitch());
  }
  if (from.has_roll()) {
    mutable_roll()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.roll());
  }
  switch (from.accuracy_case()) {
    case kCombinedStdDev: {
      mutable_combined_std_dev()->::google::protobuf::Int64Value::MergeFrom(from.combined_std_dev());
      break;
    }
    case kStdDev: {
      mutable_std_dev()->::sensoris::protobuf::types::spatial::RotationRateAndAccuracy_StdDev::MergeFrom(from.std_dev());
      break;
    }
    case kCovariance: {
      mutable_covariance()->::sensoris::protobuf::types::base::Int64Matrix3x3::MergeFrom(from.covariance());
      break;
    }
    case ACCURACY_NOT_SET: {
      break;
    }
  }
}

void RotationRateAndAccuracy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.spatial.RotationRateAndAccuracy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotationRateAndAccuracy::CopyFrom(const RotationRateAndAccuracy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.spatial.RotationRateAndAccuracy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotationRateAndAccuracy::IsInitialized() const {
  return true;
}

void RotationRateAndAccuracy::Swap(RotationRateAndAccuracy* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RotationRateAndAccuracy* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RotationRateAndAccuracy::UnsafeArenaSwap(RotationRateAndAccuracy* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RotationRateAndAccuracy::InternalSwap(RotationRateAndAccuracy* other) {
  using std::swap;
  CastToBase(&extension_)->InternalSwap(CastToBase(&other->extension_));
  swap(yaw_, other->yaw_);
  swap(pitch_, other->pitch_);
  swap(roll_, other->roll_);
  swap(accuracy_, other->accuracy_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RotationRateAndAccuracy::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapLocationReference_TileIdLinkIdOffset::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::spatial::_MapLocationReference_TileIdLinkIdOffset_default_instance_._instance.get_mutable()->tile_id_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_MapLocationReference_TileIdLinkIdOffset_default_instance_._instance.get_mutable()->link_id_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_MapLocationReference_TileIdLinkIdOffset_default_instance_._instance.get_mutable()->offset_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
}
void MapLocationReference_TileIdLinkIdOffset::unsafe_arena_set_allocated_tile_id(
    ::google::protobuf::Int64Value* tile_id) {
  if (GetArenaNoVirtual() == NULL) {
    delete tile_id_;
  }
  tile_id_ = tile_id;
  if (tile_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset.tile_id)
}
void MapLocationReference_TileIdLinkIdOffset::clear_tile_id() {
  if (GetArenaNoVirtual() == NULL && tile_id_ != NULL) {
    delete tile_id_;
  }
  tile_id_ = NULL;
}
void MapLocationReference_TileIdLinkIdOffset::unsafe_arena_set_allocated_link_id(
    ::google::protobuf::Int64Value* link_id) {
  if (GetArenaNoVirtual() == NULL) {
    delete link_id_;
  }
  link_id_ = link_id;
  if (link_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset.link_id)
}
void MapLocationReference_TileIdLinkIdOffset::clear_link_id() {
  if (GetArenaNoVirtual() == NULL && link_id_ != NULL) {
    delete link_id_;
  }
  link_id_ = NULL;
}
void MapLocationReference_TileIdLinkIdOffset::unsafe_arena_set_allocated_offset(
    ::google::protobuf::Int64Value* offset) {
  if (GetArenaNoVirtual() == NULL) {
    delete offset_;
  }
  offset_ = offset;
  if (offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset.offset)
}
void MapLocationReference_TileIdLinkIdOffset::clear_offset() {
  if (GetArenaNoVirtual() == NULL && offset_ != NULL) {
    delete offset_;
  }
  offset_ = NULL;
}
void MapLocationReference_TileIdLinkIdOffset::clear_extension() {
  extension_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapLocationReference_TileIdLinkIdOffset::kTileIdFieldNumber;
const int MapLocationReference_TileIdLinkIdOffset::kLinkIdFieldNumber;
const int MapLocationReference_TileIdLinkIdOffset::kOffsetFieldNumber;
const int MapLocationReference_TileIdLinkIdOffset::kExtensionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapLocationReference_TileIdLinkIdOffset::MapLocationReference_TileIdLinkIdOffset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_MapLocationReference_TileIdLinkIdOffset.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset)
}
MapLocationReference_TileIdLinkIdOffset::MapLocationReference_TileIdLinkIdOffset(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  extension_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_MapLocationReference_TileIdLinkIdOffset.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset)
}
MapLocationReference_TileIdLinkIdOffset::MapLocationReference_TileIdLinkIdOffset(const MapLocationReference_TileIdLinkIdOffset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tile_id()) {
    tile_id_ = new ::google::protobuf::Int64Value(*from.tile_id_);
  } else {
    tile_id_ = NULL;
  }
  if (from.has_link_id()) {
    link_id_ = new ::google::protobuf::Int64Value(*from.link_id_);
  } else {
    link_id_ = NULL;
  }
  if (from.has_offset()) {
    offset_ = new ::google::protobuf::Int64Value(*from.offset_);
  } else {
    offset_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset)
}

void MapLocationReference_TileIdLinkIdOffset::SharedCtor() {
  ::memset(&tile_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&tile_id_)) + sizeof(offset_));
}

MapLocationReference_TileIdLinkIdOffset::~MapLocationReference_TileIdLinkIdOffset() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset)
  SharedDtor();
}

void MapLocationReference_TileIdLinkIdOffset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete tile_id_;
  if (this != internal_default_instance()) delete link_id_;
  if (this != internal_default_instance()) delete offset_;
}

void MapLocationReference_TileIdLinkIdOffset::ArenaDtor(void* object) {
  MapLocationReference_TileIdLinkIdOffset* _this = reinterpret_cast< MapLocationReference_TileIdLinkIdOffset* >(object);
  (void)_this;
}
void MapLocationReference_TileIdLinkIdOffset::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MapLocationReference_TileIdLinkIdOffset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapLocationReference_TileIdLinkIdOffset::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapLocationReference_TileIdLinkIdOffset& MapLocationReference_TileIdLinkIdOffset::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_MapLocationReference_TileIdLinkIdOffset.base);
  return *internal_default_instance();
}


void MapLocationReference_TileIdLinkIdOffset::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extension_.Clear();
  if (GetArenaNoVirtual() == NULL && tile_id_ != NULL) {
    delete tile_id_;
  }
  tile_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && link_id_ != NULL) {
    delete link_id_;
  }
  link_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && offset_ != NULL) {
    delete offset_;
  }
  offset_ = NULL;
  _internal_metadata_.Clear();
}

bool MapLocationReference_TileIdLinkIdOffset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Int64Value tile_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tile_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value link_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_link_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value offset = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any extension = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_extension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset)
  return false;
#undef DO_
}

void MapLocationReference_TileIdLinkIdOffset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int64Value tile_id = 1;
  if (this->has_tile_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_tile_id(), output);
  }

  // .google.protobuf.Int64Value link_id = 2;
  if (this->has_link_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_link_id(), output);
  }

  // .google.protobuf.Int64Value offset = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_offset(), output);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->extension(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset)
}

::google::protobuf::uint8* MapLocationReference_TileIdLinkIdOffset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int64Value tile_id = 1;
  if (this->has_tile_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_tile_id(), deterministic, target);
  }

  // .google.protobuf.Int64Value link_id = 2;
  if (this->has_link_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_link_id(), deterministic, target);
  }

  // .google.protobuf.Int64Value offset = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_offset(), deterministic, target);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->extension(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset)
  return target;
}

size_t MapLocationReference_TileIdLinkIdOffset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.protobuf.Any extension = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->extension_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->extension(static_cast<int>(i)));
    }
  }

  // .google.protobuf.Int64Value tile_id = 1;
  if (this->has_tile_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tile_id_);
  }

  // .google.protobuf.Int64Value link_id = 2;
  if (this->has_link_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *link_id_);
  }

  // .google.protobuf.Int64Value offset = 3 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *offset_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapLocationReference_TileIdLinkIdOffset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset)
  GOOGLE_DCHECK_NE(&from, this);
  const MapLocationReference_TileIdLinkIdOffset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapLocationReference_TileIdLinkIdOffset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset)
    MergeFrom(*source);
  }
}

void MapLocationReference_TileIdLinkIdOffset::MergeFrom(const MapLocationReference_TileIdLinkIdOffset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extension_.MergeFrom(from.extension_);
  if (from.has_tile_id()) {
    mutable_tile_id()->::google::protobuf::Int64Value::MergeFrom(from.tile_id());
  }
  if (from.has_link_id()) {
    mutable_link_id()->::google::protobuf::Int64Value::MergeFrom(from.link_id());
  }
  if (from.has_offset()) {
    mutable_offset()->::google::protobuf::Int64Value::MergeFrom(from.offset());
  }
}

void MapLocationReference_TileIdLinkIdOffset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapLocationReference_TileIdLinkIdOffset::CopyFrom(const MapLocationReference_TileIdLinkIdOffset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapLocationReference_TileIdLinkIdOffset::IsInitialized() const {
  return true;
}

void MapLocationReference_TileIdLinkIdOffset::Swap(MapLocationReference_TileIdLinkIdOffset* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MapLocationReference_TileIdLinkIdOffset* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MapLocationReference_TileIdLinkIdOffset::UnsafeArenaSwap(MapLocationReference_TileIdLinkIdOffset* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MapLocationReference_TileIdLinkIdOffset::InternalSwap(MapLocationReference_TileIdLinkIdOffset* other) {
  using std::swap;
  CastToBase(&extension_)->InternalSwap(CastToBase(&other->extension_));
  swap(tile_id_, other->tile_id_);
  swap(link_id_, other->link_id_);
  swap(offset_, other->offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapLocationReference_TileIdLinkIdOffset::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapLocationReference_TileIdObjectId::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::spatial::_MapLocationReference_TileIdObjectId_default_instance_._instance.get_mutable()->tile_id_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_MapLocationReference_TileIdObjectId_default_instance_._instance.get_mutable()->object_id_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
}
void MapLocationReference_TileIdObjectId::unsafe_arena_set_allocated_tile_id(
    ::google::protobuf::Int64Value* tile_id) {
  if (GetArenaNoVirtual() == NULL) {
    delete tile_id_;
  }
  tile_id_ = tile_id;
  if (tile_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId.tile_id)
}
void MapLocationReference_TileIdObjectId::clear_tile_id() {
  if (GetArenaNoVirtual() == NULL && tile_id_ != NULL) {
    delete tile_id_;
  }
  tile_id_ = NULL;
}
void MapLocationReference_TileIdObjectId::unsafe_arena_set_allocated_object_id(
    ::google::protobuf::Int64Value* object_id) {
  if (GetArenaNoVirtual() == NULL) {
    delete object_id_;
  }
  object_id_ = object_id;
  if (object_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId.object_id)
}
void MapLocationReference_TileIdObjectId::clear_object_id() {
  if (GetArenaNoVirtual() == NULL && object_id_ != NULL) {
    delete object_id_;
  }
  object_id_ = NULL;
}
void MapLocationReference_TileIdObjectId::clear_extension() {
  extension_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapLocationReference_TileIdObjectId::kTileIdFieldNumber;
const int MapLocationReference_TileIdObjectId::kObjectIdFieldNumber;
const int MapLocationReference_TileIdObjectId::kExtensionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapLocationReference_TileIdObjectId::MapLocationReference_TileIdObjectId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_MapLocationReference_TileIdObjectId.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId)
}
MapLocationReference_TileIdObjectId::MapLocationReference_TileIdObjectId(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  extension_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_MapLocationReference_TileIdObjectId.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId)
}
MapLocationReference_TileIdObjectId::MapLocationReference_TileIdObjectId(const MapLocationReference_TileIdObjectId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tile_id()) {
    tile_id_ = new ::google::protobuf::Int64Value(*from.tile_id_);
  } else {
    tile_id_ = NULL;
  }
  if (from.has_object_id()) {
    object_id_ = new ::google::protobuf::Int64Value(*from.object_id_);
  } else {
    object_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId)
}

void MapLocationReference_TileIdObjectId::SharedCtor() {
  ::memset(&tile_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_id_) -
      reinterpret_cast<char*>(&tile_id_)) + sizeof(object_id_));
}

MapLocationReference_TileIdObjectId::~MapLocationReference_TileIdObjectId() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId)
  SharedDtor();
}

void MapLocationReference_TileIdObjectId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete tile_id_;
  if (this != internal_default_instance()) delete object_id_;
}

void MapLocationReference_TileIdObjectId::ArenaDtor(void* object) {
  MapLocationReference_TileIdObjectId* _this = reinterpret_cast< MapLocationReference_TileIdObjectId* >(object);
  (void)_this;
}
void MapLocationReference_TileIdObjectId::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MapLocationReference_TileIdObjectId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapLocationReference_TileIdObjectId::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapLocationReference_TileIdObjectId& MapLocationReference_TileIdObjectId::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_MapLocationReference_TileIdObjectId.base);
  return *internal_default_instance();
}


void MapLocationReference_TileIdObjectId::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extension_.Clear();
  if (GetArenaNoVirtual() == NULL && tile_id_ != NULL) {
    delete tile_id_;
  }
  tile_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && object_id_ != NULL) {
    delete object_id_;
  }
  object_id_ = NULL;
  _internal_metadata_.Clear();
}

bool MapLocationReference_TileIdObjectId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Int64Value tile_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tile_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value object_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_object_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any extension = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_extension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId)
  return false;
#undef DO_
}

void MapLocationReference_TileIdObjectId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int64Value tile_id = 1;
  if (this->has_tile_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_tile_id(), output);
  }

  // .google.protobuf.Int64Value object_id = 2;
  if (this->has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_object_id(), output);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->extension(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId)
}

::google::protobuf::uint8* MapLocationReference_TileIdObjectId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int64Value tile_id = 1;
  if (this->has_tile_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_tile_id(), deterministic, target);
  }

  // .google.protobuf.Int64Value object_id = 2;
  if (this->has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_object_id(), deterministic, target);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->extension(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId)
  return target;
}

size_t MapLocationReference_TileIdObjectId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.protobuf.Any extension = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->extension_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->extension(static_cast<int>(i)));
    }
  }

  // .google.protobuf.Int64Value tile_id = 1;
  if (this->has_tile_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tile_id_);
  }

  // .google.protobuf.Int64Value object_id = 2;
  if (this->has_object_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *object_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapLocationReference_TileIdObjectId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId)
  GOOGLE_DCHECK_NE(&from, this);
  const MapLocationReference_TileIdObjectId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapLocationReference_TileIdObjectId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId)
    MergeFrom(*source);
  }
}

void MapLocationReference_TileIdObjectId::MergeFrom(const MapLocationReference_TileIdObjectId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extension_.MergeFrom(from.extension_);
  if (from.has_tile_id()) {
    mutable_tile_id()->::google::protobuf::Int64Value::MergeFrom(from.tile_id());
  }
  if (from.has_object_id()) {
    mutable_object_id()->::google::protobuf::Int64Value::MergeFrom(from.object_id());
  }
}

void MapLocationReference_TileIdObjectId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapLocationReference_TileIdObjectId::CopyFrom(const MapLocationReference_TileIdObjectId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapLocationReference_TileIdObjectId::IsInitialized() const {
  return true;
}

void MapLocationReference_TileIdObjectId::Swap(MapLocationReference_TileIdObjectId* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MapLocationReference_TileIdObjectId* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MapLocationReference_TileIdObjectId::UnsafeArenaSwap(MapLocationReference_TileIdObjectId* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MapLocationReference_TileIdObjectId::InternalSwap(MapLocationReference_TileIdObjectId* other) {
  using std::swap;
  CastToBase(&extension_)->InternalSwap(CastToBase(&other->extension_));
  swap(tile_id_, other->tile_id_);
  swap(object_id_, other->object_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapLocationReference_TileIdObjectId::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapLocationReference::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::spatial::_MapLocationReference_default_instance_._instance.get_mutable()->position_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::PositionAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::PositionAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_MapLocationReference_default_instance_._instance.get_mutable()->z_level_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_MapLocationReference_default_instance_.tile_link_offset_reference_ = const_cast< ::sensoris::protobuf::types::spatial::MapLocationReference_TileIdLinkIdOffset*>(
      ::sensoris::protobuf::types::spatial::MapLocationReference_TileIdLinkIdOffset::internal_default_instance());
  ::sensoris::protobuf::types::spatial::_MapLocationReference_default_instance_.map_object_id_ = const_cast< ::sensoris::protobuf::types::spatial::MapLocationReference_TileIdObjectId*>(
      ::sensoris::protobuf::types::spatial::MapLocationReference_TileIdObjectId::internal_default_instance());
}
void MapLocationReference::unsafe_arena_set_allocated_position_and_accuracy(
    ::sensoris::protobuf::types::spatial::PositionAndAccuracy* position_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete position_and_accuracy_;
  }
  position_and_accuracy_ = position_and_accuracy;
  if (position_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.MapLocationReference.position_and_accuracy)
}
void MapLocationReference::unsafe_arena_set_allocated_z_level(
    ::google::protobuf::Int64Value* z_level) {
  if (GetArenaNoVirtual() == NULL) {
    delete z_level_;
  }
  z_level_ = z_level;
  if (z_level) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.spatial.MapLocationReference.z_level)
}
void MapLocationReference::clear_z_level() {
  if (GetArenaNoVirtual() == NULL && z_level_ != NULL) {
    delete z_level_;
  }
  z_level_ = NULL;
}
void MapLocationReference::set_allocated_tile_link_offset_reference(::sensoris::protobuf::types::spatial::MapLocationReference_TileIdLinkIdOffset* tile_link_offset_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_map_based_reference();
  if (tile_link_offset_reference) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(tile_link_offset_reference);
    if (message_arena != submessage_arena) {
      tile_link_offset_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tile_link_offset_reference, submessage_arena);
    }
    set_has_tile_link_offset_reference();
    map_based_reference_.tile_link_offset_reference_ = tile_link_offset_reference;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.MapLocationReference.tile_link_offset_reference)
}
void MapLocationReference::set_allocated_map_object_id(::sensoris::protobuf::types::spatial::MapLocationReference_TileIdObjectId* map_object_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_map_based_reference();
  if (map_object_id) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(map_object_id);
    if (message_arena != submessage_arena) {
      map_object_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, map_object_id, submessage_arena);
    }
    set_has_map_object_id();
    map_based_reference_.map_object_id_ = map_object_id;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.spatial.MapLocationReference.map_object_id)
}
void MapLocationReference::clear_extension() {
  extension_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapLocationReference::kPositionAndAccuracyFieldNumber;
const int MapLocationReference::kZLevelFieldNumber;
const int MapLocationReference::kTileLinkOffsetReferenceFieldNumber;
const int MapLocationReference::kMapObjectIdFieldNumber;
const int MapLocationReference::kExtensionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapLocationReference::MapLocationReference()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_MapLocationReference.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.spatial.MapLocationReference)
}
MapLocationReference::MapLocationReference(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  extension_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_MapLocationReference.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.spatial.MapLocationReference)
}
MapLocationReference::MapLocationReference(const MapLocationReference& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position_and_accuracy()) {
    position_and_accuracy_ = new ::sensoris::protobuf::types::spatial::PositionAndAccuracy(*from.position_and_accuracy_);
  } else {
    position_and_accuracy_ = NULL;
  }
  if (from.has_z_level()) {
    z_level_ = new ::google::protobuf::Int64Value(*from.z_level_);
  } else {
    z_level_ = NULL;
  }
  clear_has_map_based_reference();
  switch (from.map_based_reference_case()) {
    case kTileLinkOffsetReference: {
      mutable_tile_link_offset_reference()->::sensoris::protobuf::types::spatial::MapLocationReference_TileIdLinkIdOffset::MergeFrom(from.tile_link_offset_reference());
      break;
    }
    case kMapObjectId: {
      mutable_map_object_id()->::sensoris::protobuf::types::spatial::MapLocationReference_TileIdObjectId::MergeFrom(from.map_object_id());
      break;
    }
    case MAP_BASED_REFERENCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.spatial.MapLocationReference)
}

void MapLocationReference::SharedCtor() {
  ::memset(&position_and_accuracy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_level_) -
      reinterpret_cast<char*>(&position_and_accuracy_)) + sizeof(z_level_));
  clear_has_map_based_reference();
}

MapLocationReference::~MapLocationReference() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.spatial.MapLocationReference)
  SharedDtor();
}

void MapLocationReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete position_and_accuracy_;
  if (this != internal_default_instance()) delete z_level_;
  if (has_map_based_reference()) {
    clear_map_based_reference();
  }
}

void MapLocationReference::ArenaDtor(void* object) {
  MapLocationReference* _this = reinterpret_cast< MapLocationReference* >(object);
  (void)_this;
}
void MapLocationReference::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MapLocationReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapLocationReference::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapLocationReference& MapLocationReference::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_MapLocationReference.base);
  return *internal_default_instance();
}


void MapLocationReference::clear_map_based_reference() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.types.spatial.MapLocationReference)
  switch (map_based_reference_case()) {
    case kTileLinkOffsetReference: {
      if (GetArenaNoVirtual() == NULL) {
        delete map_based_reference_.tile_link_offset_reference_;
      }
      break;
    }
    case kMapObjectId: {
      if (GetArenaNoVirtual() == NULL) {
        delete map_based_reference_.map_object_id_;
      }
      break;
    }
    case MAP_BASED_REFERENCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MAP_BASED_REFERENCE_NOT_SET;
}


void MapLocationReference::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.spatial.MapLocationReference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extension_.Clear();
  if (GetArenaNoVirtual() == NULL && position_and_accuracy_ != NULL) {
    delete position_and_accuracy_;
  }
  position_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && z_level_ != NULL) {
    delete z_level_;
  }
  z_level_ = NULL;
  clear_map_based_reference();
  _internal_metadata_.Clear();
}

bool MapLocationReference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.spatial.MapLocationReference)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value z_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_z_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset tile_link_offset_reference = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tile_link_offset_reference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId map_object_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_object_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any extension = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_extension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.spatial.MapLocationReference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.spatial.MapLocationReference)
  return false;
#undef DO_
}

void MapLocationReference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.spatial.MapLocationReference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 1;
  if (this->has_position_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_position_and_accuracy(), output);
  }

  // .google.protobuf.Int64Value z_level = 2;
  if (this->has_z_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_z_level(), output);
  }

  // .sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset tile_link_offset_reference = 3;
  if (has_tile_link_offset_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_tile_link_offset_reference(), output);
  }

  // .sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId map_object_id = 4;
  if (has_map_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_map_object_id(), output);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->extension(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.spatial.MapLocationReference)
}

::google::protobuf::uint8* MapLocationReference::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.spatial.MapLocationReference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 1;
  if (this->has_position_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_position_and_accuracy(), deterministic, target);
  }

  // .google.protobuf.Int64Value z_level = 2;
  if (this->has_z_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_z_level(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset tile_link_offset_reference = 3;
  if (has_tile_link_offset_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_tile_link_offset_reference(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId map_object_id = 4;
  if (has_map_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_map_object_id(), deterministic, target);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->extension(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.spatial.MapLocationReference)
  return target;
}

size_t MapLocationReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.spatial.MapLocationReference)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.protobuf.Any extension = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->extension_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->extension(static_cast<int>(i)));
    }
  }

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy position_and_accuracy = 1;
  if (this->has_position_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_and_accuracy_);
  }

  // .google.protobuf.Int64Value z_level = 2;
  if (this->has_z_level()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *z_level_);
  }

  switch (map_based_reference_case()) {
    // .sensoris.protobuf.types.spatial.MapLocationReference.TileIdLinkIdOffset tile_link_offset_reference = 3;
    case kTileLinkOffsetReference: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *map_based_reference_.tile_link_offset_reference_);
      break;
    }
    // .sensoris.protobuf.types.spatial.MapLocationReference.TileIdObjectId map_object_id = 4;
    case kMapObjectId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *map_based_reference_.map_object_id_);
      break;
    }
    case MAP_BASED_REFERENCE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapLocationReference::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.spatial.MapLocationReference)
  GOOGLE_DCHECK_NE(&from, this);
  const MapLocationReference* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapLocationReference>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.spatial.MapLocationReference)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.spatial.MapLocationReference)
    MergeFrom(*source);
  }
}

void MapLocationReference::MergeFrom(const MapLocationReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.spatial.MapLocationReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extension_.MergeFrom(from.extension_);
  if (from.has_position_and_accuracy()) {
    mutable_position_and_accuracy()->::sensoris::protobuf::types::spatial::PositionAndAccuracy::MergeFrom(from.position_and_accuracy());
  }
  if (from.has_z_level()) {
    mutable_z_level()->::google::protobuf::Int64Value::MergeFrom(from.z_level());
  }
  switch (from.map_based_reference_case()) {
    case kTileLinkOffsetReference: {
      mutable_tile_link_offset_reference()->::sensoris::protobuf::types::spatial::MapLocationReference_TileIdLinkIdOffset::MergeFrom(from.tile_link_offset_reference());
      break;
    }
    case kMapObjectId: {
      mutable_map_object_id()->::sensoris::protobuf::types::spatial::MapLocationReference_TileIdObjectId::MergeFrom(from.map_object_id());
      break;
    }
    case MAP_BASED_REFERENCE_NOT_SET: {
      break;
    }
  }
}

void MapLocationReference::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.spatial.MapLocationReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapLocationReference::CopyFrom(const MapLocationReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.spatial.MapLocationReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapLocationReference::IsInitialized() const {
  return true;
}

void MapLocationReference::Swap(MapLocationReference* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MapLocationReference* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MapLocationReference::UnsafeArenaSwap(MapLocationReference* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MapLocationReference::InternalSwap(MapLocationReference* other) {
  using std::swap;
  CastToBase(&extension_)->InternalSwap(CastToBase(&other->extension_));
  swap(position_and_accuracy_, other->position_and_accuracy_);
  swap(z_level_, other->z_level_);
  swap(map_based_reference_, other->map_based_reference_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapLocationReference::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spatial
}  // namespace types
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::spatial::PositionAndAccuracy_Geographic* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::spatial::PositionAndAccuracy_Geographic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::spatial::PositionAndAccuracy_Geographic >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::spatial::PositionAndAccuracy_Metric >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalVerticalStdDev* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalVerticalStdDev >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalVerticalStdDev >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::spatial::PositionAndAccuracy_HorizontalConfidenceEllipseVerticalStdDev >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::spatial::PositionAndAccuracy* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::spatial::PositionAndAccuracy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::spatial::PositionAndAccuracy >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::spatial::PolylineAndAccuracy* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::spatial::PolylineAndAccuracy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::spatial::PolylineAndAccuracy >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_StdDev* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_StdDev >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_StdDev >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy_Metric >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CornerVectors* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CornerVectors >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CornerVectors >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CenterOrientationSize* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CenterOrientationSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy_CenterOrientationSize >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::spatial::RectangularBoxAndAccuracy >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::spatial::RotationAndAccuracy_Euler* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::spatial::RotationAndAccuracy_Euler >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::spatial::RotationAndAccuracy_Euler >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::spatial::RotationAndAccuracy_Quaternion* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::spatial::RotationAndAccuracy_Quaternion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::spatial::RotationAndAccuracy_Quaternion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::spatial::RotationAndAccuracy_StdDev* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::spatial::RotationAndAccuracy_StdDev >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::spatial::RotationAndAccuracy_StdDev >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::spatial::RotationAndAccuracy* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::spatial::RotationAndAccuracy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::spatial::RotationAndAccuracy >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::spatial::RotationRateAndAccuracy_StdDev* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::spatial::RotationRateAndAccuracy_StdDev >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::spatial::RotationRateAndAccuracy_StdDev >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::spatial::RotationRateAndAccuracy* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::spatial::RotationRateAndAccuracy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::spatial::RotationRateAndAccuracy >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::spatial::MapLocationReference_TileIdLinkIdOffset* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::spatial::MapLocationReference_TileIdLinkIdOffset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::spatial::MapLocationReference_TileIdLinkIdOffset >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::spatial::MapLocationReference_TileIdObjectId* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::spatial::MapLocationReference_TileIdObjectId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::spatial::MapLocationReference_TileIdObjectId >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::spatial::MapLocationReference* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::spatial::MapLocationReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::spatial::MapLocationReference >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
