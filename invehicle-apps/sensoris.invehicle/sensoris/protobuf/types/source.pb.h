// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/types/source.proto

#ifndef PROTOBUF_INCLUDED_sensoris_2fprotobuf_2ftypes_2fsource_2eproto
#define PROTOBUF_INCLUDED_sensoris_2fprotobuf_2ftypes_2fsource_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "sensoris/protobuf/types/base.pb.h"
#include "sensoris/protobuf/types/spatial.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto 

namespace protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto
namespace sensoris {
namespace protobuf {
namespace types {
namespace source {
class NavigationSatelliteSystem;
class NavigationSatelliteSystemDefaultTypeInternal;
extern NavigationSatelliteSystemDefaultTypeInternal _NavigationSatelliteSystem_default_instance_;
class Sensor;
class SensorDefaultTypeInternal;
extern SensorDefaultTypeInternal _Sensor_default_instance_;
class SensorFusion;
class SensorFusionDefaultTypeInternal;
extern SensorFusionDefaultTypeInternal _SensorFusion_default_instance_;
class Sensor_MountingPositionAndOrientation;
class Sensor_MountingPositionAndOrientationDefaultTypeInternal;
extern Sensor_MountingPositionAndOrientationDefaultTypeInternal _Sensor_MountingPositionAndOrientation_default_instance_;
class Source;
class SourceDefaultTypeInternal;
extern SourceDefaultTypeInternal _Source_default_instance_;
}  // namespace source
}  // namespace types
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
template<> ::sensoris::protobuf::types::source::NavigationSatelliteSystem* Arena::CreateMaybeMessage<::sensoris::protobuf::types::source::NavigationSatelliteSystem>(Arena*);
template<> ::sensoris::protobuf::types::source::Sensor* Arena::CreateMaybeMessage<::sensoris::protobuf::types::source::Sensor>(Arena*);
template<> ::sensoris::protobuf::types::source::SensorFusion* Arena::CreateMaybeMessage<::sensoris::protobuf::types::source::SensorFusion>(Arena*);
template<> ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation* Arena::CreateMaybeMessage<::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation>(Arena*);
template<> ::sensoris::protobuf::types::source::Source* Arena::CreateMaybeMessage<::sensoris::protobuf::types::source::Source>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sensoris {
namespace protobuf {
namespace types {
namespace source {

enum NavigationSatelliteSystem_SatelliteSystem {
  NavigationSatelliteSystem_SatelliteSystem_UNKNOWN_SATELLITE_SYSTEM = 0,
  NavigationSatelliteSystem_SatelliteSystem_GPS = 1,
  NavigationSatelliteSystem_SatelliteSystem_GLONASS = 2,
  NavigationSatelliteSystem_SatelliteSystem_GALILEO = 3,
  NavigationSatelliteSystem_SatelliteSystem_BEIDOU_1 = 4,
  NavigationSatelliteSystem_SatelliteSystem_BEIDOU_2 = 5,
  NavigationSatelliteSystem_SatelliteSystem_NAVIC = 6,
  NavigationSatelliteSystem_SatelliteSystem_QZSS = 7,
  NavigationSatelliteSystem_SatelliteSystem_NavigationSatelliteSystem_SatelliteSystem_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NavigationSatelliteSystem_SatelliteSystem_NavigationSatelliteSystem_SatelliteSystem_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NavigationSatelliteSystem_SatelliteSystem_IsValid(int value);
const NavigationSatelliteSystem_SatelliteSystem NavigationSatelliteSystem_SatelliteSystem_SatelliteSystem_MIN = NavigationSatelliteSystem_SatelliteSystem_UNKNOWN_SATELLITE_SYSTEM;
const NavigationSatelliteSystem_SatelliteSystem NavigationSatelliteSystem_SatelliteSystem_SatelliteSystem_MAX = NavigationSatelliteSystem_SatelliteSystem_QZSS;
const int NavigationSatelliteSystem_SatelliteSystem_SatelliteSystem_ARRAYSIZE = NavigationSatelliteSystem_SatelliteSystem_SatelliteSystem_MAX + 1;

const ::google::protobuf::EnumDescriptor* NavigationSatelliteSystem_SatelliteSystem_descriptor();
inline const ::std::string& NavigationSatelliteSystem_SatelliteSystem_Name(NavigationSatelliteSystem_SatelliteSystem value) {
  return ::google::protobuf::internal::NameOfEnum(
    NavigationSatelliteSystem_SatelliteSystem_descriptor(), value);
}
inline bool NavigationSatelliteSystem_SatelliteSystem_Parse(
    const ::std::string& name, NavigationSatelliteSystem_SatelliteSystem* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NavigationSatelliteSystem_SatelliteSystem>(
    NavigationSatelliteSystem_SatelliteSystem_descriptor(), name, value);
}
enum NavigationSatelliteSystem_SatelliteBasedAugmentationSystem {
  NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_UNKNOWN_SATELLITE_BASED = 0,
  NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_SATELLITE_BASED = 1,
  NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_WAAS = 2,
  NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_EGNOS = 3,
  NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_MSAS = 4,
  NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_QZSS_SATELLITE_BASED = 5,
  NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_GAGAN = 6,
  NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_SDCM = 7,
  NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_SNAS = 8,
  NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_WAGE = 9,
  NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_STAR_FIRE = 10,
  NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_STAR_FIX = 11,
  NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_OMNI_STAR = 12,
  NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_IsValid(int value);
const NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_SatelliteBasedAugmentationSystem_MIN = NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_UNKNOWN_SATELLITE_BASED;
const NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_SatelliteBasedAugmentationSystem_MAX = NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_OMNI_STAR;
const int NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_SatelliteBasedAugmentationSystem_ARRAYSIZE = NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_SatelliteBasedAugmentationSystem_MAX + 1;

const ::google::protobuf::EnumDescriptor* NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_descriptor();
inline const ::std::string& NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_Name(NavigationSatelliteSystem_SatelliteBasedAugmentationSystem value) {
  return ::google::protobuf::internal::NameOfEnum(
    NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_descriptor(), value);
}
inline bool NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_Parse(
    const ::std::string& name, NavigationSatelliteSystem_SatelliteBasedAugmentationSystem* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NavigationSatelliteSystem_SatelliteBasedAugmentationSystem>(
    NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_descriptor(), name, value);
}
enum NavigationSatelliteSystem_GroundBasedAugmentationSystem {
  NavigationSatelliteSystem_GroundBasedAugmentationSystem_UNKNOWN_GROUND_BASED = 0,
  NavigationSatelliteSystem_GroundBasedAugmentationSystem_GROUND_BASED = 1,
  NavigationSatelliteSystem_GroundBasedAugmentationSystem_GBAS = 2,
  NavigationSatelliteSystem_GroundBasedAugmentationSystem_NDGPS = 3,
  NavigationSatelliteSystem_GroundBasedAugmentationSystem_SAPOS = 4,
  NavigationSatelliteSystem_GroundBasedAugmentationSystem_ALF = 5,
  NavigationSatelliteSystem_GroundBasedAugmentationSystem_AXIO_NET = 6,
  NavigationSatelliteSystem_GroundBasedAugmentationSystem_VRS_NOW = 7,
  NavigationSatelliteSystem_GroundBasedAugmentationSystem_SMART_NET = 8,
  NavigationSatelliteSystem_GroundBasedAugmentationSystem_NavigationSatelliteSystem_GroundBasedAugmentationSystem_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NavigationSatelliteSystem_GroundBasedAugmentationSystem_NavigationSatelliteSystem_GroundBasedAugmentationSystem_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NavigationSatelliteSystem_GroundBasedAugmentationSystem_IsValid(int value);
const NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem_GroundBasedAugmentationSystem_GroundBasedAugmentationSystem_MIN = NavigationSatelliteSystem_GroundBasedAugmentationSystem_UNKNOWN_GROUND_BASED;
const NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem_GroundBasedAugmentationSystem_GroundBasedAugmentationSystem_MAX = NavigationSatelliteSystem_GroundBasedAugmentationSystem_SMART_NET;
const int NavigationSatelliteSystem_GroundBasedAugmentationSystem_GroundBasedAugmentationSystem_ARRAYSIZE = NavigationSatelliteSystem_GroundBasedAugmentationSystem_GroundBasedAugmentationSystem_MAX + 1;

const ::google::protobuf::EnumDescriptor* NavigationSatelliteSystem_GroundBasedAugmentationSystem_descriptor();
inline const ::std::string& NavigationSatelliteSystem_GroundBasedAugmentationSystem_Name(NavigationSatelliteSystem_GroundBasedAugmentationSystem value) {
  return ::google::protobuf::internal::NameOfEnum(
    NavigationSatelliteSystem_GroundBasedAugmentationSystem_descriptor(), value);
}
inline bool NavigationSatelliteSystem_GroundBasedAugmentationSystem_Parse(
    const ::std::string& name, NavigationSatelliteSystem_GroundBasedAugmentationSystem* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NavigationSatelliteSystem_GroundBasedAugmentationSystem>(
    NavigationSatelliteSystem_GroundBasedAugmentationSystem_descriptor(), name, value);
}
// ===================================================================

class NavigationSatelliteSystem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.source.NavigationSatelliteSystem) */ {
 public:
  NavigationSatelliteSystem();
  virtual ~NavigationSatelliteSystem();

  NavigationSatelliteSystem(const NavigationSatelliteSystem& from);

  inline NavigationSatelliteSystem& operator=(const NavigationSatelliteSystem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NavigationSatelliteSystem(NavigationSatelliteSystem&& from) noexcept
    : NavigationSatelliteSystem() {
    *this = ::std::move(from);
  }

  inline NavigationSatelliteSystem& operator=(NavigationSatelliteSystem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NavigationSatelliteSystem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigationSatelliteSystem* internal_default_instance() {
    return reinterpret_cast<const NavigationSatelliteSystem*>(
               &_NavigationSatelliteSystem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(NavigationSatelliteSystem* other);
  void Swap(NavigationSatelliteSystem* other);
  friend void swap(NavigationSatelliteSystem& a, NavigationSatelliteSystem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NavigationSatelliteSystem* New() const final {
    return CreateMaybeMessage<NavigationSatelliteSystem>(NULL);
  }

  NavigationSatelliteSystem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NavigationSatelliteSystem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NavigationSatelliteSystem& from);
  void MergeFrom(const NavigationSatelliteSystem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigationSatelliteSystem* other);
  protected:
  explicit NavigationSatelliteSystem(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NavigationSatelliteSystem_SatelliteSystem SatelliteSystem;
  static const SatelliteSystem UNKNOWN_SATELLITE_SYSTEM =
    NavigationSatelliteSystem_SatelliteSystem_UNKNOWN_SATELLITE_SYSTEM;
  static const SatelliteSystem GPS =
    NavigationSatelliteSystem_SatelliteSystem_GPS;
  static const SatelliteSystem GLONASS =
    NavigationSatelliteSystem_SatelliteSystem_GLONASS;
  static const SatelliteSystem GALILEO =
    NavigationSatelliteSystem_SatelliteSystem_GALILEO;
  static const SatelliteSystem BEIDOU_1 =
    NavigationSatelliteSystem_SatelliteSystem_BEIDOU_1;
  static const SatelliteSystem BEIDOU_2 =
    NavigationSatelliteSystem_SatelliteSystem_BEIDOU_2;
  static const SatelliteSystem NAVIC =
    NavigationSatelliteSystem_SatelliteSystem_NAVIC;
  static const SatelliteSystem QZSS =
    NavigationSatelliteSystem_SatelliteSystem_QZSS;
  static inline bool SatelliteSystem_IsValid(int value) {
    return NavigationSatelliteSystem_SatelliteSystem_IsValid(value);
  }
  static const SatelliteSystem SatelliteSystem_MIN =
    NavigationSatelliteSystem_SatelliteSystem_SatelliteSystem_MIN;
  static const SatelliteSystem SatelliteSystem_MAX =
    NavigationSatelliteSystem_SatelliteSystem_SatelliteSystem_MAX;
  static const int SatelliteSystem_ARRAYSIZE =
    NavigationSatelliteSystem_SatelliteSystem_SatelliteSystem_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SatelliteSystem_descriptor() {
    return NavigationSatelliteSystem_SatelliteSystem_descriptor();
  }
  static inline const ::std::string& SatelliteSystem_Name(SatelliteSystem value) {
    return NavigationSatelliteSystem_SatelliteSystem_Name(value);
  }
  static inline bool SatelliteSystem_Parse(const ::std::string& name,
      SatelliteSystem* value) {
    return NavigationSatelliteSystem_SatelliteSystem_Parse(name, value);
  }

  typedef NavigationSatelliteSystem_SatelliteBasedAugmentationSystem SatelliteBasedAugmentationSystem;
  static const SatelliteBasedAugmentationSystem UNKNOWN_SATELLITE_BASED =
    NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_UNKNOWN_SATELLITE_BASED;
  static const SatelliteBasedAugmentationSystem SATELLITE_BASED =
    NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_SATELLITE_BASED;
  static const SatelliteBasedAugmentationSystem WAAS =
    NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_WAAS;
  static const SatelliteBasedAugmentationSystem EGNOS =
    NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_EGNOS;
  static const SatelliteBasedAugmentationSystem MSAS =
    NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_MSAS;
  static const SatelliteBasedAugmentationSystem QZSS_SATELLITE_BASED =
    NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_QZSS_SATELLITE_BASED;
  static const SatelliteBasedAugmentationSystem GAGAN =
    NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_GAGAN;
  static const SatelliteBasedAugmentationSystem SDCM =
    NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_SDCM;
  static const SatelliteBasedAugmentationSystem SNAS =
    NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_SNAS;
  static const SatelliteBasedAugmentationSystem WAGE =
    NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_WAGE;
  static const SatelliteBasedAugmentationSystem STAR_FIRE =
    NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_STAR_FIRE;
  static const SatelliteBasedAugmentationSystem STAR_FIX =
    NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_STAR_FIX;
  static const SatelliteBasedAugmentationSystem OMNI_STAR =
    NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_OMNI_STAR;
  static inline bool SatelliteBasedAugmentationSystem_IsValid(int value) {
    return NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_IsValid(value);
  }
  static const SatelliteBasedAugmentationSystem SatelliteBasedAugmentationSystem_MIN =
    NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_SatelliteBasedAugmentationSystem_MIN;
  static const SatelliteBasedAugmentationSystem SatelliteBasedAugmentationSystem_MAX =
    NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_SatelliteBasedAugmentationSystem_MAX;
  static const int SatelliteBasedAugmentationSystem_ARRAYSIZE =
    NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_SatelliteBasedAugmentationSystem_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SatelliteBasedAugmentationSystem_descriptor() {
    return NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_descriptor();
  }
  static inline const ::std::string& SatelliteBasedAugmentationSystem_Name(SatelliteBasedAugmentationSystem value) {
    return NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_Name(value);
  }
  static inline bool SatelliteBasedAugmentationSystem_Parse(const ::std::string& name,
      SatelliteBasedAugmentationSystem* value) {
    return NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_Parse(name, value);
  }

  typedef NavigationSatelliteSystem_GroundBasedAugmentationSystem GroundBasedAugmentationSystem;
  static const GroundBasedAugmentationSystem UNKNOWN_GROUND_BASED =
    NavigationSatelliteSystem_GroundBasedAugmentationSystem_UNKNOWN_GROUND_BASED;
  static const GroundBasedAugmentationSystem GROUND_BASED =
    NavigationSatelliteSystem_GroundBasedAugmentationSystem_GROUND_BASED;
  static const GroundBasedAugmentationSystem GBAS =
    NavigationSatelliteSystem_GroundBasedAugmentationSystem_GBAS;
  static const GroundBasedAugmentationSystem NDGPS =
    NavigationSatelliteSystem_GroundBasedAugmentationSystem_NDGPS;
  static const GroundBasedAugmentationSystem SAPOS =
    NavigationSatelliteSystem_GroundBasedAugmentationSystem_SAPOS;
  static const GroundBasedAugmentationSystem ALF =
    NavigationSatelliteSystem_GroundBasedAugmentationSystem_ALF;
  static const GroundBasedAugmentationSystem AXIO_NET =
    NavigationSatelliteSystem_GroundBasedAugmentationSystem_AXIO_NET;
  static const GroundBasedAugmentationSystem VRS_NOW =
    NavigationSatelliteSystem_GroundBasedAugmentationSystem_VRS_NOW;
  static const GroundBasedAugmentationSystem SMART_NET =
    NavigationSatelliteSystem_GroundBasedAugmentationSystem_SMART_NET;
  static inline bool GroundBasedAugmentationSystem_IsValid(int value) {
    return NavigationSatelliteSystem_GroundBasedAugmentationSystem_IsValid(value);
  }
  static const GroundBasedAugmentationSystem GroundBasedAugmentationSystem_MIN =
    NavigationSatelliteSystem_GroundBasedAugmentationSystem_GroundBasedAugmentationSystem_MIN;
  static const GroundBasedAugmentationSystem GroundBasedAugmentationSystem_MAX =
    NavigationSatelliteSystem_GroundBasedAugmentationSystem_GroundBasedAugmentationSystem_MAX;
  static const int GroundBasedAugmentationSystem_ARRAYSIZE =
    NavigationSatelliteSystem_GroundBasedAugmentationSystem_GroundBasedAugmentationSystem_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GroundBasedAugmentationSystem_descriptor() {
    return NavigationSatelliteSystem_GroundBasedAugmentationSystem_descriptor();
  }
  static inline const ::std::string& GroundBasedAugmentationSystem_Name(GroundBasedAugmentationSystem value) {
    return NavigationSatelliteSystem_GroundBasedAugmentationSystem_Name(value);
  }
  static inline bool GroundBasedAugmentationSystem_Parse(const ::std::string& name,
      GroundBasedAugmentationSystem* value) {
    return NavigationSatelliteSystem_GroundBasedAugmentationSystem_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.SatelliteSystem satellite_system = 1;
  int satellite_system_size() const;
  void clear_satellite_system();
  static const int kSatelliteSystemFieldNumber = 1;
  ::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteSystem satellite_system(int index) const;
  void set_satellite_system(int index, ::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteSystem value);
  void add_satellite_system(::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteSystem value);
  const ::google::protobuf::RepeatedField<int>& satellite_system() const;
  ::google::protobuf::RepeatedField<int>* mutable_satellite_system();

  // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.SatelliteBasedAugmentationSystem satellite_based_augmentation_system = 2;
  int satellite_based_augmentation_system_size() const;
  void clear_satellite_based_augmentation_system();
  static const int kSatelliteBasedAugmentationSystemFieldNumber = 2;
  ::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteBasedAugmentationSystem satellite_based_augmentation_system(int index) const;
  void set_satellite_based_augmentation_system(int index, ::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteBasedAugmentationSystem value);
  void add_satellite_based_augmentation_system(::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteBasedAugmentationSystem value);
  const ::google::protobuf::RepeatedField<int>& satellite_based_augmentation_system() const;
  ::google::protobuf::RepeatedField<int>* mutable_satellite_based_augmentation_system();

  // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.GroundBasedAugmentationSystem ground_based_augmentation_system = 3;
  int ground_based_augmentation_system_size() const;
  void clear_ground_based_augmentation_system();
  static const int kGroundBasedAugmentationSystemFieldNumber = 3;
  ::sensoris::protobuf::types::source::NavigationSatelliteSystem_GroundBasedAugmentationSystem ground_based_augmentation_system(int index) const;
  void set_ground_based_augmentation_system(int index, ::sensoris::protobuf::types::source::NavigationSatelliteSystem_GroundBasedAugmentationSystem value);
  void add_ground_based_augmentation_system(::sensoris::protobuf::types::source::NavigationSatelliteSystem_GroundBasedAugmentationSystem value);
  const ::google::protobuf::RepeatedField<int>& ground_based_augmentation_system() const;
  ::google::protobuf::RepeatedField<int>* mutable_ground_based_augmentation_system();

  // repeated .google.protobuf.Any extension = 15;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 15;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // .google.protobuf.Int64Value elevation_mask = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  bool has_elevation_mask() const;
  void clear_elevation_mask();
  static const int kElevationMaskFieldNumber = 4;
  private:
  const ::google::protobuf::Int64Value& _internal_elevation_mask() const;
  public:
  const ::google::protobuf::Int64Value& elevation_mask() const;
  ::google::protobuf::Int64Value* release_elevation_mask();
  ::google::protobuf::Int64Value* mutable_elevation_mask();
  void set_allocated_elevation_mask(::google::protobuf::Int64Value* elevation_mask);
  void unsafe_arena_set_allocated_elevation_mask(
      ::google::protobuf::Int64Value* elevation_mask);
  ::google::protobuf::Int64Value* unsafe_arena_release_elevation_mask();

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy antenna_offset_and_accuracy = 5;
  bool has_antenna_offset_and_accuracy() const;
  void clear_antenna_offset_and_accuracy();
  static const int kAntennaOffsetAndAccuracyFieldNumber = 5;
  private:
  const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy& _internal_antenna_offset_and_accuracy() const;
  public:
  const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy& antenna_offset_and_accuracy() const;
  ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* release_antenna_offset_and_accuracy();
  ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* mutable_antenna_offset_and_accuracy();
  void set_allocated_antenna_offset_and_accuracy(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* antenna_offset_and_accuracy);
  void unsafe_arena_set_allocated_antenna_offset_and_accuracy(
      ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* antenna_offset_and_accuracy);
  ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* unsafe_arena_release_antenna_offset_and_accuracy();

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.source.NavigationSatelliteSystem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField<int> satellite_system_;
  mutable int _satellite_system_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> satellite_based_augmentation_system_;
  mutable int _satellite_based_augmentation_system_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> ground_based_augmentation_system_;
  mutable int _ground_based_augmentation_system_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::Int64Value* elevation_mask_;
  ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* antenna_offset_and_accuracy_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Sensor_MountingPositionAndOrientation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation) */ {
 public:
  Sensor_MountingPositionAndOrientation();
  virtual ~Sensor_MountingPositionAndOrientation();

  Sensor_MountingPositionAndOrientation(const Sensor_MountingPositionAndOrientation& from);

  inline Sensor_MountingPositionAndOrientation& operator=(const Sensor_MountingPositionAndOrientation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Sensor_MountingPositionAndOrientation(Sensor_MountingPositionAndOrientation&& from) noexcept
    : Sensor_MountingPositionAndOrientation() {
    *this = ::std::move(from);
  }

  inline Sensor_MountingPositionAndOrientation& operator=(Sensor_MountingPositionAndOrientation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Sensor_MountingPositionAndOrientation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sensor_MountingPositionAndOrientation* internal_default_instance() {
    return reinterpret_cast<const Sensor_MountingPositionAndOrientation*>(
               &_Sensor_MountingPositionAndOrientation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(Sensor_MountingPositionAndOrientation* other);
  void Swap(Sensor_MountingPositionAndOrientation* other);
  friend void swap(Sensor_MountingPositionAndOrientation& a, Sensor_MountingPositionAndOrientation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Sensor_MountingPositionAndOrientation* New() const final {
    return CreateMaybeMessage<Sensor_MountingPositionAndOrientation>(NULL);
  }

  Sensor_MountingPositionAndOrientation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Sensor_MountingPositionAndOrientation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Sensor_MountingPositionAndOrientation& from);
  void MergeFrom(const Sensor_MountingPositionAndOrientation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sensor_MountingPositionAndOrientation* other);
  protected:
  explicit Sensor_MountingPositionAndOrientation(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy translation_and_accuracy = 1;
  bool has_translation_and_accuracy() const;
  void clear_translation_and_accuracy();
  static const int kTranslationAndAccuracyFieldNumber = 1;
  private:
  const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& _internal_translation_and_accuracy() const;
  public:
  const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& translation_and_accuracy() const;
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* release_translation_and_accuracy();
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* mutable_translation_and_accuracy();
  void set_allocated_translation_and_accuracy(::sensoris::protobuf::types::spatial::PositionAndAccuracy* translation_and_accuracy);
  void unsafe_arena_set_allocated_translation_and_accuracy(
      ::sensoris::protobuf::types::spatial::PositionAndAccuracy* translation_and_accuracy);
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* unsafe_arena_release_translation_and_accuracy();

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy orientation_and_accuracy = 2;
  bool has_orientation_and_accuracy() const;
  void clear_orientation_and_accuracy();
  static const int kOrientationAndAccuracyFieldNumber = 2;
  private:
  const ::sensoris::protobuf::types::spatial::RotationAndAccuracy& _internal_orientation_and_accuracy() const;
  public:
  const ::sensoris::protobuf::types::spatial::RotationAndAccuracy& orientation_and_accuracy() const;
  ::sensoris::protobuf::types::spatial::RotationAndAccuracy* release_orientation_and_accuracy();
  ::sensoris::protobuf::types::spatial::RotationAndAccuracy* mutable_orientation_and_accuracy();
  void set_allocated_orientation_and_accuracy(::sensoris::protobuf::types::spatial::RotationAndAccuracy* orientation_and_accuracy);
  void unsafe_arena_set_allocated_orientation_and_accuracy(
      ::sensoris::protobuf::types::spatial::RotationAndAccuracy* orientation_and_accuracy);
  ::sensoris::protobuf::types::spatial::RotationAndAccuracy* unsafe_arena_release_orientation_and_accuracy();

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* translation_and_accuracy_;
  ::sensoris::protobuf::types::spatial::RotationAndAccuracy* orientation_and_accuracy_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Sensor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.source.Sensor) */ {
 public:
  Sensor();
  virtual ~Sensor();

  Sensor(const Sensor& from);

  inline Sensor& operator=(const Sensor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Sensor(Sensor&& from) noexcept
    : Sensor() {
    *this = ::std::move(from);
  }

  inline Sensor& operator=(Sensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Sensor& default_instance();

  enum SpecificCase {
    kNavigationSatelliteSystem = 2,
    SPECIFIC_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sensor* internal_default_instance() {
    return reinterpret_cast<const Sensor*>(
               &_Sensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(Sensor* other);
  void Swap(Sensor* other);
  friend void swap(Sensor& a, Sensor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Sensor* New() const final {
    return CreateMaybeMessage<Sensor>(NULL);
  }

  Sensor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Sensor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Sensor& from);
  void MergeFrom(const Sensor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sensor* other);
  protected:
  explicit Sensor(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Sensor_MountingPositionAndOrientation MountingPositionAndOrientation;

  // accessors -------------------------------------------------------

  // .sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation mounting_position_and_orientation = 1;
  bool has_mounting_position_and_orientation() const;
  void clear_mounting_position_and_orientation();
  static const int kMountingPositionAndOrientationFieldNumber = 1;
  private:
  const ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation& _internal_mounting_position_and_orientation() const;
  public:
  const ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation& mounting_position_and_orientation() const;
  ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation* release_mounting_position_and_orientation();
  ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation* mutable_mounting_position_and_orientation();
  void set_allocated_mounting_position_and_orientation(::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation* mounting_position_and_orientation);
  void unsafe_arena_set_allocated_mounting_position_and_orientation(
      ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation* mounting_position_and_orientation);
  ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation* unsafe_arena_release_mounting_position_and_orientation();

  // .sensoris.protobuf.types.source.NavigationSatelliteSystem navigation_satellite_system = 2;
  bool has_navigation_satellite_system() const;
  void clear_navigation_satellite_system();
  static const int kNavigationSatelliteSystemFieldNumber = 2;
  private:
  const ::sensoris::protobuf::types::source::NavigationSatelliteSystem& _internal_navigation_satellite_system() const;
  public:
  const ::sensoris::protobuf::types::source::NavigationSatelliteSystem& navigation_satellite_system() const;
  ::sensoris::protobuf::types::source::NavigationSatelliteSystem* release_navigation_satellite_system();
  ::sensoris::protobuf::types::source::NavigationSatelliteSystem* mutable_navigation_satellite_system();
  void set_allocated_navigation_satellite_system(::sensoris::protobuf::types::source::NavigationSatelliteSystem* navigation_satellite_system);
  void unsafe_arena_set_allocated_navigation_satellite_system(
      ::sensoris::protobuf::types::source::NavigationSatelliteSystem* navigation_satellite_system);
  ::sensoris::protobuf::types::source::NavigationSatelliteSystem* unsafe_arena_release_navigation_satellite_system();

  void clear_specific();
  SpecificCase specific_case() const;
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.source.Sensor)
 private:
  void set_has_navigation_satellite_system();

  inline bool has_specific() const;
  inline void clear_has_specific();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation* mounting_position_and_orientation_;
  union SpecificUnion {
    SpecificUnion() {}
    ::sensoris::protobuf::types::source::NavigationSatelliteSystem* navigation_satellite_system_;
  } specific_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SensorFusion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.source.SensorFusion) */ {
 public:
  SensorFusion();
  virtual ~SensorFusion();

  SensorFusion(const SensorFusion& from);

  inline SensorFusion& operator=(const SensorFusion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorFusion(SensorFusion&& from) noexcept
    : SensorFusion() {
    *this = ::std::move(from);
  }

  inline SensorFusion& operator=(SensorFusion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorFusion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorFusion* internal_default_instance() {
    return reinterpret_cast<const SensorFusion*>(
               &_SensorFusion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(SensorFusion* other);
  void Swap(SensorFusion* other);
  friend void swap(SensorFusion& a, SensorFusion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorFusion* New() const final {
    return CreateMaybeMessage<SensorFusion>(NULL);
  }

  SensorFusion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorFusion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorFusion& from);
  void MergeFrom(const SensorFusion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorFusion* other);
  protected:
  explicit SensorFusion(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Int64Value sensor_id = 1;
  int sensor_id_size() const;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 1;
  ::google::protobuf::Int64Value* mutable_sensor_id(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Int64Value >*
      mutable_sensor_id();
  const ::google::protobuf::Int64Value& sensor_id(int index) const;
  ::google::protobuf::Int64Value* add_sensor_id();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Int64Value >&
      sensor_id() const;

  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.source.SensorFusion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Int64Value > sensor_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Source : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensoris.protobuf.types.source.Source) */ {
 public:
  Source();
  virtual ~Source();

  Source(const Source& from);

  inline Source& operator=(const Source& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Source(Source&& from) noexcept
    : Source() {
    *this = ::std::move(from);
  }

  inline Source& operator=(Source&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Source& default_instance();

  enum SourceCase {
    kSensor = 4,
    kSensorFusion = 5,
    SOURCE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Source* internal_default_instance() {
    return reinterpret_cast<const Source*>(
               &_Source_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(Source* other);
  void Swap(Source* other);
  friend void swap(Source& a, Source& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Source* New() const final {
    return CreateMaybeMessage<Source>(NULL);
  }

  Source* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Source>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Source& from);
  void MergeFrom(const Source& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Source* other);
  protected:
  explicit Source(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.protobuf.Any extension = 15;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 15;
  ::google::protobuf::Any* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extension();
  const ::google::protobuf::Any& extension(int index) const;
  ::google::protobuf::Any* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extension() const;

  // .google.protobuf.Int64Value id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::protobuf::Int64Value& _internal_id() const;
  public:
  const ::google::protobuf::Int64Value& id() const;
  ::google::protobuf::Int64Value* release_id();
  ::google::protobuf::Int64Value* mutable_id();
  void set_allocated_id(::google::protobuf::Int64Value* id);
  void unsafe_arena_set_allocated_id(
      ::google::protobuf::Int64Value* id);
  ::google::protobuf::Int64Value* unsafe_arena_release_id();

  // .sensoris.protobuf.types.base.Entity entity = 2;
  bool has_entity() const;
  void clear_entity();
  static const int kEntityFieldNumber = 2;
  private:
  const ::sensoris::protobuf::types::base::Entity& _internal_entity() const;
  public:
  const ::sensoris::protobuf::types::base::Entity& entity() const;
  ::sensoris::protobuf::types::base::Entity* release_entity();
  ::sensoris::protobuf::types::base::Entity* mutable_entity();
  void set_allocated_entity(::sensoris::protobuf::types::base::Entity* entity);
  void unsafe_arena_set_allocated_entity(
      ::sensoris::protobuf::types::base::Entity* entity);
  ::sensoris::protobuf::types::base::Entity* unsafe_arena_release_entity();

  // .sensoris.protobuf.types.base.Int64Value sampling_frequency = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
  bool has_sampling_frequency() const;
  void clear_sampling_frequency();
  static const int kSamplingFrequencyFieldNumber = 3;
  private:
  const ::sensoris::protobuf::types::base::Int64Value& _internal_sampling_frequency() const;
  public:
  const ::sensoris::protobuf::types::base::Int64Value& sampling_frequency() const;
  ::sensoris::protobuf::types::base::Int64Value* release_sampling_frequency();
  ::sensoris::protobuf::types::base::Int64Value* mutable_sampling_frequency();
  void set_allocated_sampling_frequency(::sensoris::protobuf::types::base::Int64Value* sampling_frequency);
  void unsafe_arena_set_allocated_sampling_frequency(
      ::sensoris::protobuf::types::base::Int64Value* sampling_frequency);
  ::sensoris::protobuf::types::base::Int64Value* unsafe_arena_release_sampling_frequency();

  // .sensoris.protobuf.types.source.Sensor sensor = 4;
  bool has_sensor() const;
  void clear_sensor();
  static const int kSensorFieldNumber = 4;
  private:
  const ::sensoris::protobuf::types::source::Sensor& _internal_sensor() const;
  public:
  const ::sensoris::protobuf::types::source::Sensor& sensor() const;
  ::sensoris::protobuf::types::source::Sensor* release_sensor();
  ::sensoris::protobuf::types::source::Sensor* mutable_sensor();
  void set_allocated_sensor(::sensoris::protobuf::types::source::Sensor* sensor);
  void unsafe_arena_set_allocated_sensor(
      ::sensoris::protobuf::types::source::Sensor* sensor);
  ::sensoris::protobuf::types::source::Sensor* unsafe_arena_release_sensor();

  // .sensoris.protobuf.types.source.SensorFusion sensor_fusion = 5;
  bool has_sensor_fusion() const;
  void clear_sensor_fusion();
  static const int kSensorFusionFieldNumber = 5;
  private:
  const ::sensoris::protobuf::types::source::SensorFusion& _internal_sensor_fusion() const;
  public:
  const ::sensoris::protobuf::types::source::SensorFusion& sensor_fusion() const;
  ::sensoris::protobuf::types::source::SensorFusion* release_sensor_fusion();
  ::sensoris::protobuf::types::source::SensorFusion* mutable_sensor_fusion();
  void set_allocated_sensor_fusion(::sensoris::protobuf::types::source::SensorFusion* sensor_fusion);
  void unsafe_arena_set_allocated_sensor_fusion(
      ::sensoris::protobuf::types::source::SensorFusion* sensor_fusion);
  ::sensoris::protobuf::types::source::SensorFusion* unsafe_arena_release_sensor_fusion();

  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:sensoris.protobuf.types.source.Source)
 private:
  void set_has_sensor();
  void set_has_sensor_fusion();

  inline bool has_source() const;
  inline void clear_has_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extension_;
  ::google::protobuf::Int64Value* id_;
  ::sensoris::protobuf::types::base::Entity* entity_;
  ::sensoris::protobuf::types::base::Int64Value* sampling_frequency_;
  union SourceUnion {
    SourceUnion() {}
    ::sensoris::protobuf::types::source::Sensor* sensor_;
    ::sensoris::protobuf::types::source::SensorFusion* sensor_fusion_;
  } source_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NavigationSatelliteSystem

// repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.SatelliteSystem satellite_system = 1;
inline int NavigationSatelliteSystem::satellite_system_size() const {
  return satellite_system_.size();
}
inline void NavigationSatelliteSystem::clear_satellite_system() {
  satellite_system_.Clear();
}
inline ::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteSystem NavigationSatelliteSystem::satellite_system(int index) const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.source.NavigationSatelliteSystem.satellite_system)
  return static_cast< ::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteSystem >(satellite_system_.Get(index));
}
inline void NavigationSatelliteSystem::set_satellite_system(int index, ::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteSystem value) {
  satellite_system_.Set(index, value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.types.source.NavigationSatelliteSystem.satellite_system)
}
inline void NavigationSatelliteSystem::add_satellite_system(::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteSystem value) {
  satellite_system_.Add(value);
  // @@protoc_insertion_point(field_add:sensoris.protobuf.types.source.NavigationSatelliteSystem.satellite_system)
}
inline const ::google::protobuf::RepeatedField<int>&
NavigationSatelliteSystem::satellite_system() const {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.types.source.NavigationSatelliteSystem.satellite_system)
  return satellite_system_;
}
inline ::google::protobuf::RepeatedField<int>*
NavigationSatelliteSystem::mutable_satellite_system() {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.types.source.NavigationSatelliteSystem.satellite_system)
  return &satellite_system_;
}

// repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.SatelliteBasedAugmentationSystem satellite_based_augmentation_system = 2;
inline int NavigationSatelliteSystem::satellite_based_augmentation_system_size() const {
  return satellite_based_augmentation_system_.size();
}
inline void NavigationSatelliteSystem::clear_satellite_based_augmentation_system() {
  satellite_based_augmentation_system_.Clear();
}
inline ::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::satellite_based_augmentation_system(int index) const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.source.NavigationSatelliteSystem.satellite_based_augmentation_system)
  return static_cast< ::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteBasedAugmentationSystem >(satellite_based_augmentation_system_.Get(index));
}
inline void NavigationSatelliteSystem::set_satellite_based_augmentation_system(int index, ::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteBasedAugmentationSystem value) {
  satellite_based_augmentation_system_.Set(index, value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.types.source.NavigationSatelliteSystem.satellite_based_augmentation_system)
}
inline void NavigationSatelliteSystem::add_satellite_based_augmentation_system(::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteBasedAugmentationSystem value) {
  satellite_based_augmentation_system_.Add(value);
  // @@protoc_insertion_point(field_add:sensoris.protobuf.types.source.NavigationSatelliteSystem.satellite_based_augmentation_system)
}
inline const ::google::protobuf::RepeatedField<int>&
NavigationSatelliteSystem::satellite_based_augmentation_system() const {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.types.source.NavigationSatelliteSystem.satellite_based_augmentation_system)
  return satellite_based_augmentation_system_;
}
inline ::google::protobuf::RepeatedField<int>*
NavigationSatelliteSystem::mutable_satellite_based_augmentation_system() {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.types.source.NavigationSatelliteSystem.satellite_based_augmentation_system)
  return &satellite_based_augmentation_system_;
}

// repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.GroundBasedAugmentationSystem ground_based_augmentation_system = 3;
inline int NavigationSatelliteSystem::ground_based_augmentation_system_size() const {
  return ground_based_augmentation_system_.size();
}
inline void NavigationSatelliteSystem::clear_ground_based_augmentation_system() {
  ground_based_augmentation_system_.Clear();
}
inline ::sensoris::protobuf::types::source::NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem::ground_based_augmentation_system(int index) const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.source.NavigationSatelliteSystem.ground_based_augmentation_system)
  return static_cast< ::sensoris::protobuf::types::source::NavigationSatelliteSystem_GroundBasedAugmentationSystem >(ground_based_augmentation_system_.Get(index));
}
inline void NavigationSatelliteSystem::set_ground_based_augmentation_system(int index, ::sensoris::protobuf::types::source::NavigationSatelliteSystem_GroundBasedAugmentationSystem value) {
  ground_based_augmentation_system_.Set(index, value);
  // @@protoc_insertion_point(field_set:sensoris.protobuf.types.source.NavigationSatelliteSystem.ground_based_augmentation_system)
}
inline void NavigationSatelliteSystem::add_ground_based_augmentation_system(::sensoris::protobuf::types::source::NavigationSatelliteSystem_GroundBasedAugmentationSystem value) {
  ground_based_augmentation_system_.Add(value);
  // @@protoc_insertion_point(field_add:sensoris.protobuf.types.source.NavigationSatelliteSystem.ground_based_augmentation_system)
}
inline const ::google::protobuf::RepeatedField<int>&
NavigationSatelliteSystem::ground_based_augmentation_system() const {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.types.source.NavigationSatelliteSystem.ground_based_augmentation_system)
  return ground_based_augmentation_system_;
}
inline ::google::protobuf::RepeatedField<int>*
NavigationSatelliteSystem::mutable_ground_based_augmentation_system() {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.types.source.NavigationSatelliteSystem.ground_based_augmentation_system)
  return &ground_based_augmentation_system_;
}

// .google.protobuf.Int64Value elevation_mask = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
inline bool NavigationSatelliteSystem::has_elevation_mask() const {
  return this != internal_default_instance() && elevation_mask_ != NULL;
}
inline const ::google::protobuf::Int64Value& NavigationSatelliteSystem::_internal_elevation_mask() const {
  return *elevation_mask_;
}
inline const ::google::protobuf::Int64Value& NavigationSatelliteSystem::elevation_mask() const {
  const ::google::protobuf::Int64Value* p = elevation_mask_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.source.NavigationSatelliteSystem.elevation_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Int64Value*>(
      &::google::protobuf::_Int64Value_default_instance_);
}
inline ::google::protobuf::Int64Value* NavigationSatelliteSystem::release_elevation_mask() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.source.NavigationSatelliteSystem.elevation_mask)
  
  ::google::protobuf::Int64Value* temp = elevation_mask_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  elevation_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::Int64Value* NavigationSatelliteSystem::unsafe_arena_release_elevation_mask() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.source.NavigationSatelliteSystem.elevation_mask)
  
  ::google::protobuf::Int64Value* temp = elevation_mask_;
  elevation_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::Int64Value* NavigationSatelliteSystem::mutable_elevation_mask() {
  
  if (elevation_mask_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArenaNoVirtual());
    elevation_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.source.NavigationSatelliteSystem.elevation_mask)
  return elevation_mask_;
}
inline void NavigationSatelliteSystem::set_allocated_elevation_mask(::google::protobuf::Int64Value* elevation_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(elevation_mask_);
  }
  if (elevation_mask) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(elevation_mask)->GetArena();
    if (message_arena != submessage_arena) {
      elevation_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, elevation_mask, submessage_arena);
    }
    
  } else {
    
  }
  elevation_mask_ = elevation_mask;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.source.NavigationSatelliteSystem.elevation_mask)
}

// .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy antenna_offset_and_accuracy = 5;
inline bool NavigationSatelliteSystem::has_antenna_offset_and_accuracy() const {
  return this != internal_default_instance() && antenna_offset_and_accuracy_ != NULL;
}
inline const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy& NavigationSatelliteSystem::_internal_antenna_offset_and_accuracy() const {
  return *antenna_offset_and_accuracy_;
}
inline const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy& NavigationSatelliteSystem::antenna_offset_and_accuracy() const {
  const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* p = antenna_offset_and_accuracy_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.source.NavigationSatelliteSystem.antenna_offset_and_accuracy)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy*>(
      &::sensoris::protobuf::types::spatial::_XyzVectorAndAccuracy_default_instance_);
}
inline ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* NavigationSatelliteSystem::release_antenna_offset_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.source.NavigationSatelliteSystem.antenna_offset_and_accuracy)
  
  ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* temp = antenna_offset_and_accuracy_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  antenna_offset_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* NavigationSatelliteSystem::unsafe_arena_release_antenna_offset_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.source.NavigationSatelliteSystem.antenna_offset_and_accuracy)
  
  ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* temp = antenna_offset_and_accuracy_;
  antenna_offset_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* NavigationSatelliteSystem::mutable_antenna_offset_and_accuracy() {
  
  if (antenna_offset_and_accuracy_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy>(GetArenaNoVirtual());
    antenna_offset_and_accuracy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.source.NavigationSatelliteSystem.antenna_offset_and_accuracy)
  return antenna_offset_and_accuracy_;
}
inline void NavigationSatelliteSystem::set_allocated_antenna_offset_and_accuracy(::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* antenna_offset_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(antenna_offset_and_accuracy_);
  }
  if (antenna_offset_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(antenna_offset_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      antenna_offset_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, antenna_offset_and_accuracy, submessage_arena);
    }
    
  } else {
    
  }
  antenna_offset_and_accuracy_ = antenna_offset_and_accuracy;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.source.NavigationSatelliteSystem.antenna_offset_and_accuracy)
}

// repeated .google.protobuf.Any extension = 15;
inline int NavigationSatelliteSystem::extension_size() const {
  return extension_.size();
}
inline ::google::protobuf::Any* NavigationSatelliteSystem::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.source.NavigationSatelliteSystem.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
NavigationSatelliteSystem::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.types.source.NavigationSatelliteSystem.extension)
  return &extension_;
}
inline const ::google::protobuf::Any& NavigationSatelliteSystem::extension(int index) const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.source.NavigationSatelliteSystem.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* NavigationSatelliteSystem::add_extension() {
  // @@protoc_insertion_point(field_add:sensoris.protobuf.types.source.NavigationSatelliteSystem.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
NavigationSatelliteSystem::extension() const {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.types.source.NavigationSatelliteSystem.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Sensor_MountingPositionAndOrientation

// .sensoris.protobuf.types.spatial.PositionAndAccuracy translation_and_accuracy = 1;
inline bool Sensor_MountingPositionAndOrientation::has_translation_and_accuracy() const {
  return this != internal_default_instance() && translation_and_accuracy_ != NULL;
}
inline const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& Sensor_MountingPositionAndOrientation::_internal_translation_and_accuracy() const {
  return *translation_and_accuracy_;
}
inline const ::sensoris::protobuf::types::spatial::PositionAndAccuracy& Sensor_MountingPositionAndOrientation::translation_and_accuracy() const {
  const ::sensoris::protobuf::types::spatial::PositionAndAccuracy* p = translation_and_accuracy_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation.translation_and_accuracy)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::spatial::PositionAndAccuracy*>(
      &::sensoris::protobuf::types::spatial::_PositionAndAccuracy_default_instance_);
}
inline ::sensoris::protobuf::types::spatial::PositionAndAccuracy* Sensor_MountingPositionAndOrientation::release_translation_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation.translation_and_accuracy)
  
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* temp = translation_and_accuracy_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  translation_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::PositionAndAccuracy* Sensor_MountingPositionAndOrientation::unsafe_arena_release_translation_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation.translation_and_accuracy)
  
  ::sensoris::protobuf::types::spatial::PositionAndAccuracy* temp = translation_and_accuracy_;
  translation_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::PositionAndAccuracy* Sensor_MountingPositionAndOrientation::mutable_translation_and_accuracy() {
  
  if (translation_and_accuracy_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::spatial::PositionAndAccuracy>(GetArenaNoVirtual());
    translation_and_accuracy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation.translation_and_accuracy)
  return translation_and_accuracy_;
}
inline void Sensor_MountingPositionAndOrientation::set_allocated_translation_and_accuracy(::sensoris::protobuf::types::spatial::PositionAndAccuracy* translation_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(translation_and_accuracy_);
  }
  if (translation_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(translation_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      translation_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, translation_and_accuracy, submessage_arena);
    }
    
  } else {
    
  }
  translation_and_accuracy_ = translation_and_accuracy;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation.translation_and_accuracy)
}

// .sensoris.protobuf.types.spatial.RotationAndAccuracy orientation_and_accuracy = 2;
inline bool Sensor_MountingPositionAndOrientation::has_orientation_and_accuracy() const {
  return this != internal_default_instance() && orientation_and_accuracy_ != NULL;
}
inline const ::sensoris::protobuf::types::spatial::RotationAndAccuracy& Sensor_MountingPositionAndOrientation::_internal_orientation_and_accuracy() const {
  return *orientation_and_accuracy_;
}
inline const ::sensoris::protobuf::types::spatial::RotationAndAccuracy& Sensor_MountingPositionAndOrientation::orientation_and_accuracy() const {
  const ::sensoris::protobuf::types::spatial::RotationAndAccuracy* p = orientation_and_accuracy_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation.orientation_and_accuracy)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::spatial::RotationAndAccuracy*>(
      &::sensoris::protobuf::types::spatial::_RotationAndAccuracy_default_instance_);
}
inline ::sensoris::protobuf::types::spatial::RotationAndAccuracy* Sensor_MountingPositionAndOrientation::release_orientation_and_accuracy() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation.orientation_and_accuracy)
  
  ::sensoris::protobuf::types::spatial::RotationAndAccuracy* temp = orientation_and_accuracy_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  orientation_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::RotationAndAccuracy* Sensor_MountingPositionAndOrientation::unsafe_arena_release_orientation_and_accuracy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation.orientation_and_accuracy)
  
  ::sensoris::protobuf::types::spatial::RotationAndAccuracy* temp = orientation_and_accuracy_;
  orientation_and_accuracy_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::spatial::RotationAndAccuracy* Sensor_MountingPositionAndOrientation::mutable_orientation_and_accuracy() {
  
  if (orientation_and_accuracy_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::spatial::RotationAndAccuracy>(GetArenaNoVirtual());
    orientation_and_accuracy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation.orientation_and_accuracy)
  return orientation_and_accuracy_;
}
inline void Sensor_MountingPositionAndOrientation::set_allocated_orientation_and_accuracy(::sensoris::protobuf::types::spatial::RotationAndAccuracy* orientation_and_accuracy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(orientation_and_accuracy_);
  }
  if (orientation_and_accuracy) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(orientation_and_accuracy)->GetArena();
    if (message_arena != submessage_arena) {
      orientation_and_accuracy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orientation_and_accuracy, submessage_arena);
    }
    
  } else {
    
  }
  orientation_and_accuracy_ = orientation_and_accuracy;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation.orientation_and_accuracy)
}

// -------------------------------------------------------------------

// Sensor

// .sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation mounting_position_and_orientation = 1;
inline bool Sensor::has_mounting_position_and_orientation() const {
  return this != internal_default_instance() && mounting_position_and_orientation_ != NULL;
}
inline void Sensor::clear_mounting_position_and_orientation() {
  if (GetArenaNoVirtual() == NULL && mounting_position_and_orientation_ != NULL) {
    delete mounting_position_and_orientation_;
  }
  mounting_position_and_orientation_ = NULL;
}
inline const ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation& Sensor::_internal_mounting_position_and_orientation() const {
  return *mounting_position_and_orientation_;
}
inline const ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation& Sensor::mounting_position_and_orientation() const {
  const ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation* p = mounting_position_and_orientation_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.source.Sensor.mounting_position_and_orientation)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation*>(
      &::sensoris::protobuf::types::source::_Sensor_MountingPositionAndOrientation_default_instance_);
}
inline ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation* Sensor::release_mounting_position_and_orientation() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.source.Sensor.mounting_position_and_orientation)
  
  ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation* temp = mounting_position_and_orientation_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  mounting_position_and_orientation_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation* Sensor::unsafe_arena_release_mounting_position_and_orientation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.source.Sensor.mounting_position_and_orientation)
  
  ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation* temp = mounting_position_and_orientation_;
  mounting_position_and_orientation_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation* Sensor::mutable_mounting_position_and_orientation() {
  
  if (mounting_position_and_orientation_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation>(GetArenaNoVirtual());
    mounting_position_and_orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.source.Sensor.mounting_position_and_orientation)
  return mounting_position_and_orientation_;
}
inline void Sensor::set_allocated_mounting_position_and_orientation(::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation* mounting_position_and_orientation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mounting_position_and_orientation_;
  }
  if (mounting_position_and_orientation) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(mounting_position_and_orientation);
    if (message_arena != submessage_arena) {
      mounting_position_and_orientation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mounting_position_and_orientation, submessage_arena);
    }
    
  } else {
    
  }
  mounting_position_and_orientation_ = mounting_position_and_orientation;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.source.Sensor.mounting_position_and_orientation)
}

// .sensoris.protobuf.types.source.NavigationSatelliteSystem navigation_satellite_system = 2;
inline bool Sensor::has_navigation_satellite_system() const {
  return specific_case() == kNavigationSatelliteSystem;
}
inline void Sensor::set_has_navigation_satellite_system() {
  _oneof_case_[0] = kNavigationSatelliteSystem;
}
inline void Sensor::clear_navigation_satellite_system() {
  if (has_navigation_satellite_system()) {
    if (GetArenaNoVirtual() == NULL) {
      delete specific_.navigation_satellite_system_;
    }
    clear_has_specific();
  }
}
inline const ::sensoris::protobuf::types::source::NavigationSatelliteSystem& Sensor::_internal_navigation_satellite_system() const {
  return *specific_.navigation_satellite_system_;
}
inline ::sensoris::protobuf::types::source::NavigationSatelliteSystem* Sensor::release_navigation_satellite_system() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.source.Sensor.navigation_satellite_system)
  if (has_navigation_satellite_system()) {
    clear_has_specific();
      ::sensoris::protobuf::types::source::NavigationSatelliteSystem* temp = specific_.navigation_satellite_system_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    specific_.navigation_satellite_system_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::sensoris::protobuf::types::source::NavigationSatelliteSystem& Sensor::navigation_satellite_system() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.source.Sensor.navigation_satellite_system)
  return has_navigation_satellite_system()
      ? *specific_.navigation_satellite_system_
      : *reinterpret_cast< ::sensoris::protobuf::types::source::NavigationSatelliteSystem*>(&::sensoris::protobuf::types::source::_NavigationSatelliteSystem_default_instance_);
}
inline ::sensoris::protobuf::types::source::NavigationSatelliteSystem* Sensor::unsafe_arena_release_navigation_satellite_system() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.source.Sensor.navigation_satellite_system)
  if (has_navigation_satellite_system()) {
    clear_has_specific();
    ::sensoris::protobuf::types::source::NavigationSatelliteSystem* temp = specific_.navigation_satellite_system_;
    specific_.navigation_satellite_system_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Sensor::unsafe_arena_set_allocated_navigation_satellite_system(::sensoris::protobuf::types::source::NavigationSatelliteSystem* navigation_satellite_system) {
  clear_specific();
  if (navigation_satellite_system) {
    set_has_navigation_satellite_system();
    specific_.navigation_satellite_system_ = navigation_satellite_system;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.source.Sensor.navigation_satellite_system)
}
inline ::sensoris::protobuf::types::source::NavigationSatelliteSystem* Sensor::mutable_navigation_satellite_system() {
  if (!has_navigation_satellite_system()) {
    clear_specific();
    set_has_navigation_satellite_system();
    specific_.navigation_satellite_system_ = CreateMaybeMessage< ::sensoris::protobuf::types::source::NavigationSatelliteSystem >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.source.Sensor.navigation_satellite_system)
  return specific_.navigation_satellite_system_;
}

inline bool Sensor::has_specific() const {
  return specific_case() != SPECIFIC_NOT_SET;
}
inline void Sensor::clear_has_specific() {
  _oneof_case_[0] = SPECIFIC_NOT_SET;
}
inline Sensor::SpecificCase Sensor::specific_case() const {
  return Sensor::SpecificCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SensorFusion

// repeated .google.protobuf.Int64Value sensor_id = 1;
inline int SensorFusion::sensor_id_size() const {
  return sensor_id_.size();
}
inline ::google::protobuf::Int64Value* SensorFusion::mutable_sensor_id(int index) {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.source.SensorFusion.sensor_id)
  return sensor_id_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Int64Value >*
SensorFusion::mutable_sensor_id() {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.types.source.SensorFusion.sensor_id)
  return &sensor_id_;
}
inline const ::google::protobuf::Int64Value& SensorFusion::sensor_id(int index) const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.source.SensorFusion.sensor_id)
  return sensor_id_.Get(index);
}
inline ::google::protobuf::Int64Value* SensorFusion::add_sensor_id() {
  // @@protoc_insertion_point(field_add:sensoris.protobuf.types.source.SensorFusion.sensor_id)
  return sensor_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Int64Value >&
SensorFusion::sensor_id() const {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.types.source.SensorFusion.sensor_id)
  return sensor_id_;
}

// -------------------------------------------------------------------

// Source

// .google.protobuf.Int64Value id = 1;
inline bool Source::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::protobuf::Int64Value& Source::_internal_id() const {
  return *id_;
}
inline const ::google::protobuf::Int64Value& Source::id() const {
  const ::google::protobuf::Int64Value* p = id_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.source.Source.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Int64Value*>(
      &::google::protobuf::_Int64Value_default_instance_);
}
inline ::google::protobuf::Int64Value* Source::release_id() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.source.Source.id)
  
  ::google::protobuf::Int64Value* temp = id_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  id_ = NULL;
  return temp;
}
inline ::google::protobuf::Int64Value* Source::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.source.Source.id)
  
  ::google::protobuf::Int64Value* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::protobuf::Int64Value* Source::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Int64Value>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.source.Source.id)
  return id_;
}
inline void Source::set_allocated_id(::google::protobuf::Int64Value* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.source.Source.id)
}

// .sensoris.protobuf.types.base.Entity entity = 2;
inline bool Source::has_entity() const {
  return this != internal_default_instance() && entity_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Entity& Source::_internal_entity() const {
  return *entity_;
}
inline const ::sensoris::protobuf::types::base::Entity& Source::entity() const {
  const ::sensoris::protobuf::types::base::Entity* p = entity_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.source.Source.entity)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Entity*>(
      &::sensoris::protobuf::types::base::_Entity_default_instance_);
}
inline ::sensoris::protobuf::types::base::Entity* Source::release_entity() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.source.Source.entity)
  
  ::sensoris::protobuf::types::base::Entity* temp = entity_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  entity_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Entity* Source::unsafe_arena_release_entity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.source.Source.entity)
  
  ::sensoris::protobuf::types::base::Entity* temp = entity_;
  entity_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Entity* Source::mutable_entity() {
  
  if (entity_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Entity>(GetArenaNoVirtual());
    entity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.source.Source.entity)
  return entity_;
}
inline void Source::set_allocated_entity(::sensoris::protobuf::types::base::Entity* entity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(entity_);
  }
  if (entity) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(entity)->GetArena();
    if (message_arena != submessage_arena) {
      entity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, entity, submessage_arena);
    }
    
  } else {
    
  }
  entity_ = entity;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.source.Source.entity)
}

// .sensoris.protobuf.types.base.Int64Value sampling_frequency = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
inline bool Source::has_sampling_frequency() const {
  return this != internal_default_instance() && sampling_frequency_ != NULL;
}
inline const ::sensoris::protobuf::types::base::Int64Value& Source::_internal_sampling_frequency() const {
  return *sampling_frequency_;
}
inline const ::sensoris::protobuf::types::base::Int64Value& Source::sampling_frequency() const {
  const ::sensoris::protobuf::types::base::Int64Value* p = sampling_frequency_;
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.source.Source.sampling_frequency)
  return p != NULL ? *p : *reinterpret_cast<const ::sensoris::protobuf::types::base::Int64Value*>(
      &::sensoris::protobuf::types::base::_Int64Value_default_instance_);
}
inline ::sensoris::protobuf::types::base::Int64Value* Source::release_sampling_frequency() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.source.Source.sampling_frequency)
  
  ::sensoris::protobuf::types::base::Int64Value* temp = sampling_frequency_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  sampling_frequency_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64Value* Source::unsafe_arena_release_sampling_frequency() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.source.Source.sampling_frequency)
  
  ::sensoris::protobuf::types::base::Int64Value* temp = sampling_frequency_;
  sampling_frequency_ = NULL;
  return temp;
}
inline ::sensoris::protobuf::types::base::Int64Value* Source::mutable_sampling_frequency() {
  
  if (sampling_frequency_ == NULL) {
    auto* p = CreateMaybeMessage<::sensoris::protobuf::types::base::Int64Value>(GetArenaNoVirtual());
    sampling_frequency_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.source.Source.sampling_frequency)
  return sampling_frequency_;
}
inline void Source::set_allocated_sampling_frequency(::sensoris::protobuf::types::base::Int64Value* sampling_frequency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sampling_frequency_);
  }
  if (sampling_frequency) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(sampling_frequency)->GetArena();
    if (message_arena != submessage_arena) {
      sampling_frequency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sampling_frequency, submessage_arena);
    }
    
  } else {
    
  }
  sampling_frequency_ = sampling_frequency;
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.source.Source.sampling_frequency)
}

// .sensoris.protobuf.types.source.Sensor sensor = 4;
inline bool Source::has_sensor() const {
  return source_case() == kSensor;
}
inline void Source::set_has_sensor() {
  _oneof_case_[0] = kSensor;
}
inline void Source::clear_sensor() {
  if (has_sensor()) {
    if (GetArenaNoVirtual() == NULL) {
      delete source_.sensor_;
    }
    clear_has_source();
  }
}
inline const ::sensoris::protobuf::types::source::Sensor& Source::_internal_sensor() const {
  return *source_.sensor_;
}
inline ::sensoris::protobuf::types::source::Sensor* Source::release_sensor() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.source.Source.sensor)
  if (has_sensor()) {
    clear_has_source();
      ::sensoris::protobuf::types::source::Sensor* temp = source_.sensor_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    source_.sensor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::sensoris::protobuf::types::source::Sensor& Source::sensor() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.source.Source.sensor)
  return has_sensor()
      ? *source_.sensor_
      : *reinterpret_cast< ::sensoris::protobuf::types::source::Sensor*>(&::sensoris::protobuf::types::source::_Sensor_default_instance_);
}
inline ::sensoris::protobuf::types::source::Sensor* Source::unsafe_arena_release_sensor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.source.Source.sensor)
  if (has_sensor()) {
    clear_has_source();
    ::sensoris::protobuf::types::source::Sensor* temp = source_.sensor_;
    source_.sensor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Source::unsafe_arena_set_allocated_sensor(::sensoris::protobuf::types::source::Sensor* sensor) {
  clear_source();
  if (sensor) {
    set_has_sensor();
    source_.sensor_ = sensor;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.source.Source.sensor)
}
inline ::sensoris::protobuf::types::source::Sensor* Source::mutable_sensor() {
  if (!has_sensor()) {
    clear_source();
    set_has_sensor();
    source_.sensor_ = CreateMaybeMessage< ::sensoris::protobuf::types::source::Sensor >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.source.Source.sensor)
  return source_.sensor_;
}

// .sensoris.protobuf.types.source.SensorFusion sensor_fusion = 5;
inline bool Source::has_sensor_fusion() const {
  return source_case() == kSensorFusion;
}
inline void Source::set_has_sensor_fusion() {
  _oneof_case_[0] = kSensorFusion;
}
inline void Source::clear_sensor_fusion() {
  if (has_sensor_fusion()) {
    if (GetArenaNoVirtual() == NULL) {
      delete source_.sensor_fusion_;
    }
    clear_has_source();
  }
}
inline const ::sensoris::protobuf::types::source::SensorFusion& Source::_internal_sensor_fusion() const {
  return *source_.sensor_fusion_;
}
inline ::sensoris::protobuf::types::source::SensorFusion* Source::release_sensor_fusion() {
  // @@protoc_insertion_point(field_release:sensoris.protobuf.types.source.Source.sensor_fusion)
  if (has_sensor_fusion()) {
    clear_has_source();
      ::sensoris::protobuf::types::source::SensorFusion* temp = source_.sensor_fusion_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    source_.sensor_fusion_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::sensoris::protobuf::types::source::SensorFusion& Source::sensor_fusion() const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.source.Source.sensor_fusion)
  return has_sensor_fusion()
      ? *source_.sensor_fusion_
      : *reinterpret_cast< ::sensoris::protobuf::types::source::SensorFusion*>(&::sensoris::protobuf::types::source::_SensorFusion_default_instance_);
}
inline ::sensoris::protobuf::types::source::SensorFusion* Source::unsafe_arena_release_sensor_fusion() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sensoris.protobuf.types.source.Source.sensor_fusion)
  if (has_sensor_fusion()) {
    clear_has_source();
    ::sensoris::protobuf::types::source::SensorFusion* temp = source_.sensor_fusion_;
    source_.sensor_fusion_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Source::unsafe_arena_set_allocated_sensor_fusion(::sensoris::protobuf::types::source::SensorFusion* sensor_fusion) {
  clear_source();
  if (sensor_fusion) {
    set_has_sensor_fusion();
    source_.sensor_fusion_ = sensor_fusion;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.source.Source.sensor_fusion)
}
inline ::sensoris::protobuf::types::source::SensorFusion* Source::mutable_sensor_fusion() {
  if (!has_sensor_fusion()) {
    clear_source();
    set_has_sensor_fusion();
    source_.sensor_fusion_ = CreateMaybeMessage< ::sensoris::protobuf::types::source::SensorFusion >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.source.Source.sensor_fusion)
  return source_.sensor_fusion_;
}

// repeated .google.protobuf.Any extension = 15;
inline int Source::extension_size() const {
  return extension_.size();
}
inline ::google::protobuf::Any* Source::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:sensoris.protobuf.types.source.Source.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
Source::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:sensoris.protobuf.types.source.Source.extension)
  return &extension_;
}
inline const ::google::protobuf::Any& Source::extension(int index) const {
  // @@protoc_insertion_point(field_get:sensoris.protobuf.types.source.Source.extension)
  return extension_.Get(index);
}
inline ::google::protobuf::Any* Source::add_extension() {
  // @@protoc_insertion_point(field_add:sensoris.protobuf.types.source.Source.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
Source::extension() const {
  // @@protoc_insertion_point(field_list:sensoris.protobuf.types.source.Source.extension)
  return extension_;
}

inline bool Source::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void Source::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
inline Source::SourceCase Source::source_case() const {
  return Source::SourceCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace source
}  // namespace types
}  // namespace protobuf
}  // namespace sensoris

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteSystem> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteSystem>() {
  return ::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteSystem_descriptor();
}
template <> struct is_proto_enum< ::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteBasedAugmentationSystem> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteBasedAugmentationSystem>() {
  return ::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_descriptor();
}
template <> struct is_proto_enum< ::sensoris::protobuf::types::source::NavigationSatelliteSystem_GroundBasedAugmentationSystem> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sensoris::protobuf::types::source::NavigationSatelliteSystem_GroundBasedAugmentationSystem>() {
  return ::sensoris::protobuf::types::source::NavigationSatelliteSystem_GroundBasedAugmentationSystem_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_sensoris_2fprotobuf_2ftypes_2fsource_2eproto
