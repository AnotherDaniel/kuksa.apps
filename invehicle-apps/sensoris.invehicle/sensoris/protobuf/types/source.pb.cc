// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensoris/protobuf/types/source.proto

#include "sensoris/protobuf/types/source.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fany_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fany_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Any;
}  // namespace protobuf_google_2fprotobuf_2fany_2eproto
namespace protobuf_google_2fprotobuf_2fwrappers_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Int64Value;
}  // namespace protobuf_google_2fprotobuf_2fwrappers_2eproto
namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Entity;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Int64Value;
}  // namespace protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto
namespace protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SensorFusion;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Sensor;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Sensor_MountingPositionAndOrientation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_NavigationSatelliteSystem;
}  // namespace protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto
namespace protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_XyzVectorAndAccuracy;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_RotationAndAccuracy;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_PositionAndAccuracy;
}  // namespace protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto
namespace sensoris {
namespace protobuf {
namespace types {
namespace source {
class NavigationSatelliteSystemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NavigationSatelliteSystem>
      _instance;
} _NavigationSatelliteSystem_default_instance_;
class Sensor_MountingPositionAndOrientationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sensor_MountingPositionAndOrientation>
      _instance;
} _Sensor_MountingPositionAndOrientation_default_instance_;
class SensorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sensor>
      _instance;
  const ::sensoris::protobuf::types::source::NavigationSatelliteSystem* navigation_satellite_system_;
} _Sensor_default_instance_;
class SensorFusionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorFusion>
      _instance;
} _SensorFusion_default_instance_;
class SourceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Source>
      _instance;
  const ::sensoris::protobuf::types::source::Sensor* sensor_;
  const ::sensoris::protobuf::types::source::SensorFusion* sensor_fusion_;
} _Source_default_instance_;
}  // namespace source
}  // namespace types
}  // namespace protobuf
}  // namespace sensoris
namespace protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto {
static void InitDefaultsNavigationSatelliteSystem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::source::_NavigationSatelliteSystem_default_instance_;
    new (ptr) ::sensoris::protobuf::types::source::NavigationSatelliteSystem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::source::NavigationSatelliteSystem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_NavigationSatelliteSystem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsNavigationSatelliteSystem}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int64Value.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_XyzVectorAndAccuracy.base,
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsSensor_MountingPositionAndOrientation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::source::_Sensor_MountingPositionAndOrientation_default_instance_;
    new (ptr) ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Sensor_MountingPositionAndOrientation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSensor_MountingPositionAndOrientation}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_PositionAndAccuracy.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::scc_info_RotationAndAccuracy.base,}};

static void InitDefaultsSensor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::source::_Sensor_default_instance_;
    new (ptr) ::sensoris::protobuf::types::source::Sensor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::source::Sensor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Sensor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSensor}, {
      &protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::scc_info_Sensor_MountingPositionAndOrientation.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::scc_info_NavigationSatelliteSystem.base,}};

static void InitDefaultsSensorFusion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::source::_SensorFusion_default_instance_;
    new (ptr) ::sensoris::protobuf::types::source::SensorFusion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::source::SensorFusion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SensorFusion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSensorFusion}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int64Value.base,}};

static void InitDefaultsSource() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sensoris::protobuf::types::source::_Source_default_instance_;
    new (ptr) ::sensoris::protobuf::types::source::Source();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensoris::protobuf::types::source::Source::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_Source =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsSource}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int64Value.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Entity.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::scc_info_Int64Value.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::scc_info_Sensor.base,
      &protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::scc_info_SensorFusion.base,
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_NavigationSatelliteSystem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sensor_MountingPositionAndOrientation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sensor.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SensorFusion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Source.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::source::NavigationSatelliteSystem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::source::NavigationSatelliteSystem, satellite_system_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::source::NavigationSatelliteSystem, satellite_based_augmentation_system_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::source::NavigationSatelliteSystem, ground_based_augmentation_system_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::source::NavigationSatelliteSystem, elevation_mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::source::NavigationSatelliteSystem, antenna_offset_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::source::NavigationSatelliteSystem, extension_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation, translation_and_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation, orientation_and_accuracy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::source::Sensor, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::source::Sensor, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::source::Sensor, mounting_position_and_orientation_),
  offsetof(::sensoris::protobuf::types::source::SensorDefaultTypeInternal, navigation_satellite_system_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::source::Sensor, specific_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::source::SensorFusion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::source::SensorFusion, sensor_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::source::Source, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::source::Source, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::source::Source, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::source::Source, entity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::source::Source, sampling_frequency_),
  offsetof(::sensoris::protobuf::types::source::SourceDefaultTypeInternal, sensor_),
  offsetof(::sensoris::protobuf::types::source::SourceDefaultTypeInternal, sensor_fusion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::source::Source, extension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensoris::protobuf::types::source::Source, source_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sensoris::protobuf::types::source::NavigationSatelliteSystem)},
  { 11, -1, sizeof(::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation)},
  { 18, -1, sizeof(::sensoris::protobuf::types::source::Sensor)},
  { 26, -1, sizeof(::sensoris::protobuf::types::source::SensorFusion)},
  { 32, -1, sizeof(::sensoris::protobuf::types::source::Source)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::source::_NavigationSatelliteSystem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::source::_Sensor_MountingPositionAndOrientation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::source::_Sensor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::source::_SensorFusion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensoris::protobuf::types::source::_Source_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "sensoris/protobuf/types/source.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n$sensoris/protobuf/types/source.proto\022\036"
      "sensoris.protobuf.types.source\032\031google/p"
      "rotobuf/any.proto\032\036google/protobuf/wrapp"
      "ers.proto\032\"sensoris/protobuf/types/base."
      "proto\032%sensoris/protobuf/types/spatial.p"
      "roto\"\332\010\n\031NavigationSatelliteSystem\022c\n\020sa"
      "tellite_system\030\001 \003(\0162I.sensoris.protobuf"
      ".types.source.NavigationSatelliteSystem."
      "SatelliteSystem\022\207\001\n#satellite_based_augm"
      "entation_system\030\002 \003(\0162Z.sensoris.protobu"
      "f.types.source.NavigationSatelliteSystem"
      ".SatelliteBasedAugmentationSystem\022\201\001\n gr"
      "ound_based_augmentation_system\030\003 \003(\0162W.s"
      "ensoris.protobuf.types.source.Navigation"
      "SatelliteSystem.GroundBasedAugmentationS"
      "ystem\0229\n\016elevation_mask\030\004 \001(\0132\033.google.p"
      "rotobuf.Int64ValueB\004\210\265\030\000\022Z\n\033antenna_offs"
      "et_and_accuracy\030\005 \001(\01325.sensoris.protobu"
      "f.types.spatial.XyzVectorAndAccuracy\022\'\n\t"
      "extension\030\017 \003(\0132\024.google.protobuf.Any\"\203\001"
      "\n\017SatelliteSystem\022\034\n\030UNKNOWN_SATELLITE_S"
      "YSTEM\020\000\022\007\n\003GPS\020\001\022\013\n\007GLONASS\020\002\022\013\n\007GALILEO"
      "\020\003\022\014\n\010BEIDOU_1\020\004\022\014\n\010BEIDOU_2\020\005\022\t\n\005NAVIC\020"
      "\006\022\010\n\004QZSS\020\007\"\342\001\n SatelliteBasedAugmentati"
      "onSystem\022\033\n\027UNKNOWN_SATELLITE_BASED\020\000\022\023\n"
      "\017SATELLITE_BASED\020\001\022\010\n\004WAAS\020\002\022\t\n\005EGNOS\020\003\022"
      "\010\n\004MSAS\020\004\022\030\n\024QZSS_SATELLITE_BASED\020\005\022\t\n\005G"
      "AGAN\020\006\022\010\n\004SDCM\020\007\022\010\n\004SNAS\020\010\022\010\n\004WAGE\020\t\022\r\n\t"
      "STAR_FIRE\020\n\022\014\n\010STAR_FIX\020\013\022\r\n\tOMNI_STAR\020\014"
      "\"\236\001\n\035GroundBasedAugmentationSystem\022\030\n\024UN"
      "KNOWN_GROUND_BASED\020\000\022\020\n\014GROUND_BASED\020\001\022\010"
      "\n\004GBAS\020\002\022\t\n\005NDGPS\020\003\022\t\n\005SAPOS\020\004\022\007\n\003ALF\020\005\022"
      "\014\n\010AXIO_NET\020\006\022\013\n\007VRS_NOW\020\007\022\r\n\tSMART_NET\020"
      "\010\"\273\003\n\006Sensor\022p\n!mounting_position_and_or"
      "ientation\030\001 \001(\0132E.sensoris.protobuf.type"
      "s.source.Sensor.MountingPositionAndOrien"
      "tation\022`\n\033navigation_satellite_system\030\002 "
      "\001(\01329.sensoris.protobuf.types.source.Nav"
      "igationSatelliteSystemH\000\032\320\001\n\036MountingPos"
      "itionAndOrientation\022V\n\030translation_and_a"
      "ccuracy\030\001 \001(\01324.sensoris.protobuf.types."
      "spatial.PositionAndAccuracy\022V\n\030orientati"
      "on_and_accuracy\030\002 \001(\01324.sensoris.protobu"
      "f.types.spatial.RotationAndAccuracyB\n\n\010s"
      "pecific\">\n\014SensorFusion\022.\n\tsensor_id\030\001 \003"
      "(\0132\033.google.protobuf.Int64Value\"\347\002\n\006Sour"
      "ce\022\'\n\002id\030\001 \001(\0132\033.google.protobuf.Int64Va"
      "lue\0224\n\006entity\030\002 \001(\0132$.sensoris.protobuf."
      "types.base.Entity\022J\n\022sampling_frequency\030"
      "\003 \001(\0132(.sensoris.protobuf.types.base.Int"
      "64ValueB\004\210\265\030\003\0228\n\006sensor\030\004 \001(\0132&.sensoris"
      ".protobuf.types.source.SensorH\000\022E\n\rsenso"
      "r_fusion\030\005 \001(\0132,.sensoris.protobuf.types"
      ".source.SensorFusionH\000\022\'\n\textension\030\017 \003("
      "\0132\024.google.protobuf.AnyB\010\n\006sourceB5\n\031org"
      ".sensoris.types.sourceB\023SensorisSourceTy"
      "pesP\001\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2256);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensoris/protobuf/types/source.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fbase_2eproto::AddDescriptors();
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fspatial_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto
namespace sensoris {
namespace protobuf {
namespace types {
namespace source {
const ::google::protobuf::EnumDescriptor* NavigationSatelliteSystem_SatelliteSystem_descriptor() {
  protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::file_level_enum_descriptors[0];
}
bool NavigationSatelliteSystem_SatelliteSystem_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NavigationSatelliteSystem_SatelliteSystem NavigationSatelliteSystem::UNKNOWN_SATELLITE_SYSTEM;
const NavigationSatelliteSystem_SatelliteSystem NavigationSatelliteSystem::GPS;
const NavigationSatelliteSystem_SatelliteSystem NavigationSatelliteSystem::GLONASS;
const NavigationSatelliteSystem_SatelliteSystem NavigationSatelliteSystem::GALILEO;
const NavigationSatelliteSystem_SatelliteSystem NavigationSatelliteSystem::BEIDOU_1;
const NavigationSatelliteSystem_SatelliteSystem NavigationSatelliteSystem::BEIDOU_2;
const NavigationSatelliteSystem_SatelliteSystem NavigationSatelliteSystem::NAVIC;
const NavigationSatelliteSystem_SatelliteSystem NavigationSatelliteSystem::QZSS;
const NavigationSatelliteSystem_SatelliteSystem NavigationSatelliteSystem::SatelliteSystem_MIN;
const NavigationSatelliteSystem_SatelliteSystem NavigationSatelliteSystem::SatelliteSystem_MAX;
const int NavigationSatelliteSystem::SatelliteSystem_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_descriptor() {
  protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::file_level_enum_descriptors[1];
}
bool NavigationSatelliteSystem_SatelliteBasedAugmentationSystem_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::UNKNOWN_SATELLITE_BASED;
const NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::SATELLITE_BASED;
const NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::WAAS;
const NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::EGNOS;
const NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::MSAS;
const NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::QZSS_SATELLITE_BASED;
const NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::GAGAN;
const NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::SDCM;
const NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::SNAS;
const NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::WAGE;
const NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::STAR_FIRE;
const NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::STAR_FIX;
const NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::OMNI_STAR;
const NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::SatelliteBasedAugmentationSystem_MIN;
const NavigationSatelliteSystem_SatelliteBasedAugmentationSystem NavigationSatelliteSystem::SatelliteBasedAugmentationSystem_MAX;
const int NavigationSatelliteSystem::SatelliteBasedAugmentationSystem_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NavigationSatelliteSystem_GroundBasedAugmentationSystem_descriptor() {
  protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::file_level_enum_descriptors[2];
}
bool NavigationSatelliteSystem_GroundBasedAugmentationSystem_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem::UNKNOWN_GROUND_BASED;
const NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem::GROUND_BASED;
const NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem::GBAS;
const NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem::NDGPS;
const NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem::SAPOS;
const NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem::ALF;
const NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem::AXIO_NET;
const NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem::VRS_NOW;
const NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem::SMART_NET;
const NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem::GroundBasedAugmentationSystem_MIN;
const NavigationSatelliteSystem_GroundBasedAugmentationSystem NavigationSatelliteSystem::GroundBasedAugmentationSystem_MAX;
const int NavigationSatelliteSystem::GroundBasedAugmentationSystem_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void NavigationSatelliteSystem::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::source::_NavigationSatelliteSystem_default_instance_._instance.get_mutable()->elevation_mask_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::source::_NavigationSatelliteSystem_default_instance_._instance.get_mutable()->antenna_offset_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy::internal_default_instance());
}
void NavigationSatelliteSystem::unsafe_arena_set_allocated_elevation_mask(
    ::google::protobuf::Int64Value* elevation_mask) {
  if (GetArenaNoVirtual() == NULL) {
    delete elevation_mask_;
  }
  elevation_mask_ = elevation_mask;
  if (elevation_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.source.NavigationSatelliteSystem.elevation_mask)
}
void NavigationSatelliteSystem::clear_elevation_mask() {
  if (GetArenaNoVirtual() == NULL && elevation_mask_ != NULL) {
    delete elevation_mask_;
  }
  elevation_mask_ = NULL;
}
void NavigationSatelliteSystem::unsafe_arena_set_allocated_antenna_offset_and_accuracy(
    ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy* antenna_offset_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete antenna_offset_and_accuracy_;
  }
  antenna_offset_and_accuracy_ = antenna_offset_and_accuracy;
  if (antenna_offset_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.source.NavigationSatelliteSystem.antenna_offset_and_accuracy)
}
void NavigationSatelliteSystem::clear_antenna_offset_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && antenna_offset_and_accuracy_ != NULL) {
    delete antenna_offset_and_accuracy_;
  }
  antenna_offset_and_accuracy_ = NULL;
}
void NavigationSatelliteSystem::clear_extension() {
  extension_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigationSatelliteSystem::kSatelliteSystemFieldNumber;
const int NavigationSatelliteSystem::kSatelliteBasedAugmentationSystemFieldNumber;
const int NavigationSatelliteSystem::kGroundBasedAugmentationSystemFieldNumber;
const int NavigationSatelliteSystem::kElevationMaskFieldNumber;
const int NavigationSatelliteSystem::kAntennaOffsetAndAccuracyFieldNumber;
const int NavigationSatelliteSystem::kExtensionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigationSatelliteSystem::NavigationSatelliteSystem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::scc_info_NavigationSatelliteSystem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.source.NavigationSatelliteSystem)
}
NavigationSatelliteSystem::NavigationSatelliteSystem(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  satellite_system_(arena),
  satellite_based_augmentation_system_(arena),
  ground_based_augmentation_system_(arena),
  extension_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::scc_info_NavigationSatelliteSystem.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.source.NavigationSatelliteSystem)
}
NavigationSatelliteSystem::NavigationSatelliteSystem(const NavigationSatelliteSystem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      satellite_system_(from.satellite_system_),
      satellite_based_augmentation_system_(from.satellite_based_augmentation_system_),
      ground_based_augmentation_system_(from.ground_based_augmentation_system_),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_elevation_mask()) {
    elevation_mask_ = new ::google::protobuf::Int64Value(*from.elevation_mask_);
  } else {
    elevation_mask_ = NULL;
  }
  if (from.has_antenna_offset_and_accuracy()) {
    antenna_offset_and_accuracy_ = new ::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy(*from.antenna_offset_and_accuracy_);
  } else {
    antenna_offset_and_accuracy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.source.NavigationSatelliteSystem)
}

void NavigationSatelliteSystem::SharedCtor() {
  ::memset(&elevation_mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&antenna_offset_and_accuracy_) -
      reinterpret_cast<char*>(&elevation_mask_)) + sizeof(antenna_offset_and_accuracy_));
}

NavigationSatelliteSystem::~NavigationSatelliteSystem() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.source.NavigationSatelliteSystem)
  SharedDtor();
}

void NavigationSatelliteSystem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete elevation_mask_;
  if (this != internal_default_instance()) delete antenna_offset_and_accuracy_;
}

void NavigationSatelliteSystem::ArenaDtor(void* object) {
  NavigationSatelliteSystem* _this = reinterpret_cast< NavigationSatelliteSystem* >(object);
  (void)_this;
}
void NavigationSatelliteSystem::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NavigationSatelliteSystem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NavigationSatelliteSystem::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavigationSatelliteSystem& NavigationSatelliteSystem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::scc_info_NavigationSatelliteSystem.base);
  return *internal_default_instance();
}


void NavigationSatelliteSystem::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.source.NavigationSatelliteSystem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  satellite_system_.Clear();
  satellite_based_augmentation_system_.Clear();
  ground_based_augmentation_system_.Clear();
  extension_.Clear();
  if (GetArenaNoVirtual() == NULL && elevation_mask_ != NULL) {
    delete elevation_mask_;
  }
  elevation_mask_ = NULL;
  if (GetArenaNoVirtual() == NULL && antenna_offset_and_accuracy_ != NULL) {
    delete antenna_offset_and_accuracy_;
  }
  antenna_offset_and_accuracy_ = NULL;
  _internal_metadata_.Clear();
}

bool NavigationSatelliteSystem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.source.NavigationSatelliteSystem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.SatelliteSystem satellite_system = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_satellite_system(static_cast< ::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteSystem >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_satellite_system(static_cast< ::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteSystem >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.SatelliteBasedAugmentationSystem satellite_based_augmentation_system = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_satellite_based_augmentation_system(static_cast< ::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteBasedAugmentationSystem >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_satellite_based_augmentation_system(static_cast< ::sensoris::protobuf::types::source::NavigationSatelliteSystem_SatelliteBasedAugmentationSystem >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.GroundBasedAugmentationSystem ground_based_augmentation_system = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_ground_based_augmentation_system(static_cast< ::sensoris::protobuf::types::source::NavigationSatelliteSystem_GroundBasedAugmentationSystem >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_ground_based_augmentation_system(static_cast< ::sensoris::protobuf::types::source::NavigationSatelliteSystem_GroundBasedAugmentationSystem >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value elevation_mask = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_elevation_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy antenna_offset_and_accuracy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_antenna_offset_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any extension = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_extension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.source.NavigationSatelliteSystem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.source.NavigationSatelliteSystem)
  return false;
#undef DO_
}

void NavigationSatelliteSystem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.source.NavigationSatelliteSystem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.SatelliteSystem satellite_system = 1;
  if (this->satellite_system_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_satellite_system_cached_byte_size_));
  }
  for (int i = 0, n = this->satellite_system_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->satellite_system(i), output);
  }

  // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.SatelliteBasedAugmentationSystem satellite_based_augmentation_system = 2;
  if (this->satellite_based_augmentation_system_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_satellite_based_augmentation_system_cached_byte_size_));
  }
  for (int i = 0, n = this->satellite_based_augmentation_system_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->satellite_based_augmentation_system(i), output);
  }

  // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.GroundBasedAugmentationSystem ground_based_augmentation_system = 3;
  if (this->ground_based_augmentation_system_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_ground_based_augmentation_system_cached_byte_size_));
  }
  for (int i = 0, n = this->ground_based_augmentation_system_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->ground_based_augmentation_system(i), output);
  }

  // .google.protobuf.Int64Value elevation_mask = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_elevation_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_elevation_mask(), output);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy antenna_offset_and_accuracy = 5;
  if (this->has_antenna_offset_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_antenna_offset_and_accuracy(), output);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->extension(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.source.NavigationSatelliteSystem)
}

::google::protobuf::uint8* NavigationSatelliteSystem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.source.NavigationSatelliteSystem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.SatelliteSystem satellite_system = 1;
  if (this->satellite_system_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _satellite_system_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->satellite_system_, target);
  }

  // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.SatelliteBasedAugmentationSystem satellite_based_augmentation_system = 2;
  if (this->satellite_based_augmentation_system_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _satellite_based_augmentation_system_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->satellite_based_augmentation_system_, target);
  }

  // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.GroundBasedAugmentationSystem ground_based_augmentation_system = 3;
  if (this->ground_based_augmentation_system_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _ground_based_augmentation_system_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->ground_based_augmentation_system_, target);
  }

  // .google.protobuf.Int64Value elevation_mask = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_elevation_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_elevation_mask(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy antenna_offset_and_accuracy = 5;
  if (this->has_antenna_offset_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_antenna_offset_and_accuracy(), deterministic, target);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->extension(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.source.NavigationSatelliteSystem)
  return target;
}

size_t NavigationSatelliteSystem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.source.NavigationSatelliteSystem)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.SatelliteSystem satellite_system = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->satellite_system_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->satellite_system(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _satellite_system_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.SatelliteBasedAugmentationSystem satellite_based_augmentation_system = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->satellite_based_augmentation_system_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->satellite_based_augmentation_system(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _satellite_based_augmentation_system_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .sensoris.protobuf.types.source.NavigationSatelliteSystem.GroundBasedAugmentationSystem ground_based_augmentation_system = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->ground_based_augmentation_system_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->ground_based_augmentation_system(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ground_based_augmentation_system_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .google.protobuf.Any extension = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->extension_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->extension(static_cast<int>(i)));
    }
  }

  // .google.protobuf.Int64Value elevation_mask = 4 [(.sensoris.protobuf.types.base.exponent) = 0];
  if (this->has_elevation_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *elevation_mask_);
  }

  // .sensoris.protobuf.types.spatial.XyzVectorAndAccuracy antenna_offset_and_accuracy = 5;
  if (this->has_antenna_offset_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *antenna_offset_and_accuracy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationSatelliteSystem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.source.NavigationSatelliteSystem)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationSatelliteSystem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavigationSatelliteSystem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.source.NavigationSatelliteSystem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.source.NavigationSatelliteSystem)
    MergeFrom(*source);
  }
}

void NavigationSatelliteSystem::MergeFrom(const NavigationSatelliteSystem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.source.NavigationSatelliteSystem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  satellite_system_.MergeFrom(from.satellite_system_);
  satellite_based_augmentation_system_.MergeFrom(from.satellite_based_augmentation_system_);
  ground_based_augmentation_system_.MergeFrom(from.ground_based_augmentation_system_);
  extension_.MergeFrom(from.extension_);
  if (from.has_elevation_mask()) {
    mutable_elevation_mask()->::google::protobuf::Int64Value::MergeFrom(from.elevation_mask());
  }
  if (from.has_antenna_offset_and_accuracy()) {
    mutable_antenna_offset_and_accuracy()->::sensoris::protobuf::types::spatial::XyzVectorAndAccuracy::MergeFrom(from.antenna_offset_and_accuracy());
  }
}

void NavigationSatelliteSystem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.source.NavigationSatelliteSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationSatelliteSystem::CopyFrom(const NavigationSatelliteSystem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.source.NavigationSatelliteSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationSatelliteSystem::IsInitialized() const {
  return true;
}

void NavigationSatelliteSystem::Swap(NavigationSatelliteSystem* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NavigationSatelliteSystem* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NavigationSatelliteSystem::UnsafeArenaSwap(NavigationSatelliteSystem* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NavigationSatelliteSystem::InternalSwap(NavigationSatelliteSystem* other) {
  using std::swap;
  satellite_system_.InternalSwap(&other->satellite_system_);
  satellite_based_augmentation_system_.InternalSwap(&other->satellite_based_augmentation_system_);
  ground_based_augmentation_system_.InternalSwap(&other->ground_based_augmentation_system_);
  CastToBase(&extension_)->InternalSwap(CastToBase(&other->extension_));
  swap(elevation_mask_, other->elevation_mask_);
  swap(antenna_offset_and_accuracy_, other->antenna_offset_and_accuracy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NavigationSatelliteSystem::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Sensor_MountingPositionAndOrientation::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::source::_Sensor_MountingPositionAndOrientation_default_instance_._instance.get_mutable()->translation_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::PositionAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::PositionAndAccuracy::internal_default_instance());
  ::sensoris::protobuf::types::source::_Sensor_MountingPositionAndOrientation_default_instance_._instance.get_mutable()->orientation_and_accuracy_ = const_cast< ::sensoris::protobuf::types::spatial::RotationAndAccuracy*>(
      ::sensoris::protobuf::types::spatial::RotationAndAccuracy::internal_default_instance());
}
void Sensor_MountingPositionAndOrientation::unsafe_arena_set_allocated_translation_and_accuracy(
    ::sensoris::protobuf::types::spatial::PositionAndAccuracy* translation_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete translation_and_accuracy_;
  }
  translation_and_accuracy_ = translation_and_accuracy;
  if (translation_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation.translation_and_accuracy)
}
void Sensor_MountingPositionAndOrientation::clear_translation_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && translation_and_accuracy_ != NULL) {
    delete translation_and_accuracy_;
  }
  translation_and_accuracy_ = NULL;
}
void Sensor_MountingPositionAndOrientation::unsafe_arena_set_allocated_orientation_and_accuracy(
    ::sensoris::protobuf::types::spatial::RotationAndAccuracy* orientation_and_accuracy) {
  if (GetArenaNoVirtual() == NULL) {
    delete orientation_and_accuracy_;
  }
  orientation_and_accuracy_ = orientation_and_accuracy;
  if (orientation_and_accuracy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation.orientation_and_accuracy)
}
void Sensor_MountingPositionAndOrientation::clear_orientation_and_accuracy() {
  if (GetArenaNoVirtual() == NULL && orientation_and_accuracy_ != NULL) {
    delete orientation_and_accuracy_;
  }
  orientation_and_accuracy_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sensor_MountingPositionAndOrientation::kTranslationAndAccuracyFieldNumber;
const int Sensor_MountingPositionAndOrientation::kOrientationAndAccuracyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sensor_MountingPositionAndOrientation::Sensor_MountingPositionAndOrientation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::scc_info_Sensor_MountingPositionAndOrientation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
}
Sensor_MountingPositionAndOrientation::Sensor_MountingPositionAndOrientation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::scc_info_Sensor_MountingPositionAndOrientation.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
}
Sensor_MountingPositionAndOrientation::Sensor_MountingPositionAndOrientation(const Sensor_MountingPositionAndOrientation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_translation_and_accuracy()) {
    translation_and_accuracy_ = new ::sensoris::protobuf::types::spatial::PositionAndAccuracy(*from.translation_and_accuracy_);
  } else {
    translation_and_accuracy_ = NULL;
  }
  if (from.has_orientation_and_accuracy()) {
    orientation_and_accuracy_ = new ::sensoris::protobuf::types::spatial::RotationAndAccuracy(*from.orientation_and_accuracy_);
  } else {
    orientation_and_accuracy_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
}

void Sensor_MountingPositionAndOrientation::SharedCtor() {
  ::memset(&translation_and_accuracy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_and_accuracy_) -
      reinterpret_cast<char*>(&translation_and_accuracy_)) + sizeof(orientation_and_accuracy_));
}

Sensor_MountingPositionAndOrientation::~Sensor_MountingPositionAndOrientation() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
  SharedDtor();
}

void Sensor_MountingPositionAndOrientation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete translation_and_accuracy_;
  if (this != internal_default_instance()) delete orientation_and_accuracy_;
}

void Sensor_MountingPositionAndOrientation::ArenaDtor(void* object) {
  Sensor_MountingPositionAndOrientation* _this = reinterpret_cast< Sensor_MountingPositionAndOrientation* >(object);
  (void)_this;
}
void Sensor_MountingPositionAndOrientation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Sensor_MountingPositionAndOrientation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Sensor_MountingPositionAndOrientation::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sensor_MountingPositionAndOrientation& Sensor_MountingPositionAndOrientation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::scc_info_Sensor_MountingPositionAndOrientation.base);
  return *internal_default_instance();
}


void Sensor_MountingPositionAndOrientation::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && translation_and_accuracy_ != NULL) {
    delete translation_and_accuracy_;
  }
  translation_and_accuracy_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientation_and_accuracy_ != NULL) {
    delete orientation_and_accuracy_;
  }
  orientation_and_accuracy_ = NULL;
  _internal_metadata_.Clear();
}

bool Sensor_MountingPositionAndOrientation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.spatial.PositionAndAccuracy translation_and_accuracy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_translation_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.spatial.RotationAndAccuracy orientation_and_accuracy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation_and_accuracy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
  return false;
#undef DO_
}

void Sensor_MountingPositionAndOrientation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy translation_and_accuracy = 1;
  if (this->has_translation_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_translation_and_accuracy(), output);
  }

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy orientation_and_accuracy = 2;
  if (this->has_orientation_and_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_orientation_and_accuracy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
}

::google::protobuf::uint8* Sensor_MountingPositionAndOrientation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.spatial.PositionAndAccuracy translation_and_accuracy = 1;
  if (this->has_translation_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_translation_and_accuracy(), deterministic, target);
  }

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy orientation_and_accuracy = 2;
  if (this->has_orientation_and_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_orientation_and_accuracy(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
  return target;
}

size_t Sensor_MountingPositionAndOrientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.spatial.PositionAndAccuracy translation_and_accuracy = 1;
  if (this->has_translation_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *translation_and_accuracy_);
  }

  // .sensoris.protobuf.types.spatial.RotationAndAccuracy orientation_and_accuracy = 2;
  if (this->has_orientation_and_accuracy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *orientation_and_accuracy_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sensor_MountingPositionAndOrientation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
  GOOGLE_DCHECK_NE(&from, this);
  const Sensor_MountingPositionAndOrientation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sensor_MountingPositionAndOrientation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
    MergeFrom(*source);
  }
}

void Sensor_MountingPositionAndOrientation::MergeFrom(const Sensor_MountingPositionAndOrientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_translation_and_accuracy()) {
    mutable_translation_and_accuracy()->::sensoris::protobuf::types::spatial::PositionAndAccuracy::MergeFrom(from.translation_and_accuracy());
  }
  if (from.has_orientation_and_accuracy()) {
    mutable_orientation_and_accuracy()->::sensoris::protobuf::types::spatial::RotationAndAccuracy::MergeFrom(from.orientation_and_accuracy());
  }
}

void Sensor_MountingPositionAndOrientation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sensor_MountingPositionAndOrientation::CopyFrom(const Sensor_MountingPositionAndOrientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sensor_MountingPositionAndOrientation::IsInitialized() const {
  return true;
}

void Sensor_MountingPositionAndOrientation::Swap(Sensor_MountingPositionAndOrientation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Sensor_MountingPositionAndOrientation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Sensor_MountingPositionAndOrientation::UnsafeArenaSwap(Sensor_MountingPositionAndOrientation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Sensor_MountingPositionAndOrientation::InternalSwap(Sensor_MountingPositionAndOrientation* other) {
  using std::swap;
  swap(translation_and_accuracy_, other->translation_and_accuracy_);
  swap(orientation_and_accuracy_, other->orientation_and_accuracy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Sensor_MountingPositionAndOrientation::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Sensor::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::source::_Sensor_default_instance_._instance.get_mutable()->mounting_position_and_orientation_ = const_cast< ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation*>(
      ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation::internal_default_instance());
  ::sensoris::protobuf::types::source::_Sensor_default_instance_.navigation_satellite_system_ = const_cast< ::sensoris::protobuf::types::source::NavigationSatelliteSystem*>(
      ::sensoris::protobuf::types::source::NavigationSatelliteSystem::internal_default_instance());
}
void Sensor::unsafe_arena_set_allocated_mounting_position_and_orientation(
    ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation* mounting_position_and_orientation) {
  if (GetArenaNoVirtual() == NULL) {
    delete mounting_position_and_orientation_;
  }
  mounting_position_and_orientation_ = mounting_position_and_orientation;
  if (mounting_position_and_orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.source.Sensor.mounting_position_and_orientation)
}
void Sensor::set_allocated_navigation_satellite_system(::sensoris::protobuf::types::source::NavigationSatelliteSystem* navigation_satellite_system) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_specific();
  if (navigation_satellite_system) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(navigation_satellite_system);
    if (message_arena != submessage_arena) {
      navigation_satellite_system = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, navigation_satellite_system, submessage_arena);
    }
    set_has_navigation_satellite_system();
    specific_.navigation_satellite_system_ = navigation_satellite_system;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.source.Sensor.navigation_satellite_system)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sensor::kMountingPositionAndOrientationFieldNumber;
const int Sensor::kNavigationSatelliteSystemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sensor::Sensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::scc_info_Sensor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.source.Sensor)
}
Sensor::Sensor(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::scc_info_Sensor.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.source.Sensor)
}
Sensor::Sensor(const Sensor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mounting_position_and_orientation()) {
    mounting_position_and_orientation_ = new ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation(*from.mounting_position_and_orientation_);
  } else {
    mounting_position_and_orientation_ = NULL;
  }
  clear_has_specific();
  switch (from.specific_case()) {
    case kNavigationSatelliteSystem: {
      mutable_navigation_satellite_system()->::sensoris::protobuf::types::source::NavigationSatelliteSystem::MergeFrom(from.navigation_satellite_system());
      break;
    }
    case SPECIFIC_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.source.Sensor)
}

void Sensor::SharedCtor() {
  mounting_position_and_orientation_ = NULL;
  clear_has_specific();
}

Sensor::~Sensor() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.source.Sensor)
  SharedDtor();
}

void Sensor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete mounting_position_and_orientation_;
  if (has_specific()) {
    clear_specific();
  }
}

void Sensor::ArenaDtor(void* object) {
  Sensor* _this = reinterpret_cast< Sensor* >(object);
  (void)_this;
}
void Sensor::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Sensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Sensor::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sensor& Sensor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::scc_info_Sensor.base);
  return *internal_default_instance();
}


void Sensor::clear_specific() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.types.source.Sensor)
  switch (specific_case()) {
    case kNavigationSatelliteSystem: {
      if (GetArenaNoVirtual() == NULL) {
        delete specific_.navigation_satellite_system_;
      }
      break;
    }
    case SPECIFIC_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SPECIFIC_NOT_SET;
}


void Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.source.Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && mounting_position_and_orientation_ != NULL) {
    delete mounting_position_and_orientation_;
  }
  mounting_position_and_orientation_ = NULL;
  clear_specific();
  _internal_metadata_.Clear();
}

bool Sensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.source.Sensor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation mounting_position_and_orientation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mounting_position_and_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.source.NavigationSatelliteSystem navigation_satellite_system = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_navigation_satellite_system()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.source.Sensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.source.Sensor)
  return false;
#undef DO_
}

void Sensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.source.Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation mounting_position_and_orientation = 1;
  if (this->has_mounting_position_and_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_mounting_position_and_orientation(), output);
  }

  // .sensoris.protobuf.types.source.NavigationSatelliteSystem navigation_satellite_system = 2;
  if (has_navigation_satellite_system()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_navigation_satellite_system(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.source.Sensor)
}

::google::protobuf::uint8* Sensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.source.Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation mounting_position_and_orientation = 1;
  if (this->has_mounting_position_and_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_mounting_position_and_orientation(), deterministic, target);
  }

  // .sensoris.protobuf.types.source.NavigationSatelliteSystem navigation_satellite_system = 2;
  if (has_navigation_satellite_system()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_navigation_satellite_system(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.source.Sensor)
  return target;
}

size_t Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.source.Sensor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sensoris.protobuf.types.source.Sensor.MountingPositionAndOrientation mounting_position_and_orientation = 1;
  if (this->has_mounting_position_and_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mounting_position_and_orientation_);
  }

  switch (specific_case()) {
    // .sensoris.protobuf.types.source.NavigationSatelliteSystem navigation_satellite_system = 2;
    case kNavigationSatelliteSystem: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *specific_.navigation_satellite_system_);
      break;
    }
    case SPECIFIC_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.source.Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  const Sensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.source.Sensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.source.Sensor)
    MergeFrom(*source);
  }
}

void Sensor::MergeFrom(const Sensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.source.Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mounting_position_and_orientation()) {
    mutable_mounting_position_and_orientation()->::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation::MergeFrom(from.mounting_position_and_orientation());
  }
  switch (from.specific_case()) {
    case kNavigationSatelliteSystem: {
      mutable_navigation_satellite_system()->::sensoris::protobuf::types::source::NavigationSatelliteSystem::MergeFrom(from.navigation_satellite_system());
      break;
    }
    case SPECIFIC_NOT_SET: {
      break;
    }
  }
}

void Sensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.source.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sensor::CopyFrom(const Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.source.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sensor::IsInitialized() const {
  return true;
}

void Sensor::Swap(Sensor* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Sensor* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Sensor::UnsafeArenaSwap(Sensor* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Sensor::InternalSwap(Sensor* other) {
  using std::swap;
  swap(mounting_position_and_orientation_, other->mounting_position_and_orientation_);
  swap(specific_, other->specific_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Sensor::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SensorFusion::InitAsDefaultInstance() {
}
void SensorFusion::clear_sensor_id() {
  sensor_id_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorFusion::kSensorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorFusion::SensorFusion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::scc_info_SensorFusion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.source.SensorFusion)
}
SensorFusion::SensorFusion(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  sensor_id_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::scc_info_SensorFusion.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.source.SensorFusion)
}
SensorFusion::SensorFusion(const SensorFusion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sensor_id_(from.sensor_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.source.SensorFusion)
}

void SensorFusion::SharedCtor() {
}

SensorFusion::~SensorFusion() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.source.SensorFusion)
  SharedDtor();
}

void SensorFusion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void SensorFusion::ArenaDtor(void* object) {
  SensorFusion* _this = reinterpret_cast< SensorFusion* >(object);
  (void)_this;
}
void SensorFusion::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SensorFusion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SensorFusion::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorFusion& SensorFusion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::scc_info_SensorFusion.base);
  return *internal_default_instance();
}


void SensorFusion::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.source.SensorFusion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_id_.Clear();
  _internal_metadata_.Clear();
}

bool SensorFusion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.source.SensorFusion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.protobuf.Int64Value sensor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sensor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.source.SensorFusion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.source.SensorFusion)
  return false;
#undef DO_
}

void SensorFusion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.source.SensorFusion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Int64Value sensor_id = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->sensor_id(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.source.SensorFusion)
}

::google::protobuf::uint8* SensorFusion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.source.SensorFusion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Int64Value sensor_id = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->sensor_id(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.source.SensorFusion)
  return target;
}

size_t SensorFusion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.source.SensorFusion)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.protobuf.Int64Value sensor_id = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sensor_id(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorFusion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.source.SensorFusion)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorFusion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorFusion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.source.SensorFusion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.source.SensorFusion)
    MergeFrom(*source);
  }
}

void SensorFusion::MergeFrom(const SensorFusion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.source.SensorFusion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_id_.MergeFrom(from.sensor_id_);
}

void SensorFusion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.source.SensorFusion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorFusion::CopyFrom(const SensorFusion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.source.SensorFusion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorFusion::IsInitialized() const {
  return true;
}

void SensorFusion::Swap(SensorFusion* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SensorFusion* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SensorFusion::UnsafeArenaSwap(SensorFusion* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SensorFusion::InternalSwap(SensorFusion* other) {
  using std::swap;
  CastToBase(&sensor_id_)->InternalSwap(CastToBase(&other->sensor_id_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SensorFusion::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Source::InitAsDefaultInstance() {
  ::sensoris::protobuf::types::source::_Source_default_instance_._instance.get_mutable()->id_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::source::_Source_default_instance_._instance.get_mutable()->entity_ = const_cast< ::sensoris::protobuf::types::base::Entity*>(
      ::sensoris::protobuf::types::base::Entity::internal_default_instance());
  ::sensoris::protobuf::types::source::_Source_default_instance_._instance.get_mutable()->sampling_frequency_ = const_cast< ::sensoris::protobuf::types::base::Int64Value*>(
      ::sensoris::protobuf::types::base::Int64Value::internal_default_instance());
  ::sensoris::protobuf::types::source::_Source_default_instance_.sensor_ = const_cast< ::sensoris::protobuf::types::source::Sensor*>(
      ::sensoris::protobuf::types::source::Sensor::internal_default_instance());
  ::sensoris::protobuf::types::source::_Source_default_instance_.sensor_fusion_ = const_cast< ::sensoris::protobuf::types::source::SensorFusion*>(
      ::sensoris::protobuf::types::source::SensorFusion::internal_default_instance());
}
void Source::unsafe_arena_set_allocated_id(
    ::google::protobuf::Int64Value* id) {
  if (GetArenaNoVirtual() == NULL) {
    delete id_;
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.source.Source.id)
}
void Source::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
void Source::unsafe_arena_set_allocated_entity(
    ::sensoris::protobuf::types::base::Entity* entity) {
  if (GetArenaNoVirtual() == NULL) {
    delete entity_;
  }
  entity_ = entity;
  if (entity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.source.Source.entity)
}
void Source::clear_entity() {
  if (GetArenaNoVirtual() == NULL && entity_ != NULL) {
    delete entity_;
  }
  entity_ = NULL;
}
void Source::unsafe_arena_set_allocated_sampling_frequency(
    ::sensoris::protobuf::types::base::Int64Value* sampling_frequency) {
  if (GetArenaNoVirtual() == NULL) {
    delete sampling_frequency_;
  }
  sampling_frequency_ = sampling_frequency;
  if (sampling_frequency) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sensoris.protobuf.types.source.Source.sampling_frequency)
}
void Source::clear_sampling_frequency() {
  if (GetArenaNoVirtual() == NULL && sampling_frequency_ != NULL) {
    delete sampling_frequency_;
  }
  sampling_frequency_ = NULL;
}
void Source::set_allocated_sensor(::sensoris::protobuf::types::source::Sensor* sensor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_source();
  if (sensor) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(sensor);
    if (message_arena != submessage_arena) {
      sensor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sensor, submessage_arena);
    }
    set_has_sensor();
    source_.sensor_ = sensor;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.source.Source.sensor)
}
void Source::set_allocated_sensor_fusion(::sensoris::protobuf::types::source::SensorFusion* sensor_fusion) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_source();
  if (sensor_fusion) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(sensor_fusion);
    if (message_arena != submessage_arena) {
      sensor_fusion = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sensor_fusion, submessage_arena);
    }
    set_has_sensor_fusion();
    source_.sensor_fusion_ = sensor_fusion;
  }
  // @@protoc_insertion_point(field_set_allocated:sensoris.protobuf.types.source.Source.sensor_fusion)
}
void Source::clear_extension() {
  extension_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Source::kIdFieldNumber;
const int Source::kEntityFieldNumber;
const int Source::kSamplingFrequencyFieldNumber;
const int Source::kSensorFieldNumber;
const int Source::kSensorFusionFieldNumber;
const int Source::kExtensionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Source::Source()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::scc_info_Source.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensoris.protobuf.types.source.Source)
}
Source::Source(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  extension_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::scc_info_Source.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensoris.protobuf.types.source.Source)
}
Source::Source(const Source& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::google::protobuf::Int64Value(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_entity()) {
    entity_ = new ::sensoris::protobuf::types::base::Entity(*from.entity_);
  } else {
    entity_ = NULL;
  }
  if (from.has_sampling_frequency()) {
    sampling_frequency_ = new ::sensoris::protobuf::types::base::Int64Value(*from.sampling_frequency_);
  } else {
    sampling_frequency_ = NULL;
  }
  clear_has_source();
  switch (from.source_case()) {
    case kSensor: {
      mutable_sensor()->::sensoris::protobuf::types::source::Sensor::MergeFrom(from.sensor());
      break;
    }
    case kSensorFusion: {
      mutable_sensor_fusion()->::sensoris::protobuf::types::source::SensorFusion::MergeFrom(from.sensor_fusion());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensoris.protobuf.types.source.Source)
}

void Source::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sampling_frequency_) -
      reinterpret_cast<char*>(&id_)) + sizeof(sampling_frequency_));
  clear_has_source();
}

Source::~Source() {
  // @@protoc_insertion_point(destructor:sensoris.protobuf.types.source.Source)
  SharedDtor();
}

void Source::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete entity_;
  if (this != internal_default_instance()) delete sampling_frequency_;
  if (has_source()) {
    clear_source();
  }
}

void Source::ArenaDtor(void* object) {
  Source* _this = reinterpret_cast< Source* >(object);
  (void)_this;
}
void Source::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Source::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Source::descriptor() {
  ::protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Source& Source::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::scc_info_Source.base);
  return *internal_default_instance();
}


void Source::clear_source() {
// @@protoc_insertion_point(one_of_clear_start:sensoris.protobuf.types.source.Source)
  switch (source_case()) {
    case kSensor: {
      if (GetArenaNoVirtual() == NULL) {
        delete source_.sensor_;
      }
      break;
    }
    case kSensorFusion: {
      if (GetArenaNoVirtual() == NULL) {
        delete source_.sensor_fusion_;
      }
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SOURCE_NOT_SET;
}


void Source::Clear() {
// @@protoc_insertion_point(message_clear_start:sensoris.protobuf.types.source.Source)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extension_.Clear();
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && entity_ != NULL) {
    delete entity_;
  }
  entity_ = NULL;
  if (GetArenaNoVirtual() == NULL && sampling_frequency_ != NULL) {
    delete sampling_frequency_;
  }
  sampling_frequency_ = NULL;
  clear_source();
  _internal_metadata_.Clear();
}

bool Source::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensoris.protobuf.types.source.Source)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Int64Value id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Entity entity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_entity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.base.Int64Value sampling_frequency = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sampling_frequency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.source.Sensor sensor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensoris.protobuf.types.source.SensorFusion sensor_fusion = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_fusion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any extension = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_extension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensoris.protobuf.types.source.Source)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensoris.protobuf.types.source.Source)
  return false;
#undef DO_
}

void Source::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensoris.protobuf.types.source.Source)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int64Value id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  // .sensoris.protobuf.types.base.Entity entity = 2;
  if (this->has_entity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_entity(), output);
  }

  // .sensoris.protobuf.types.base.Int64Value sampling_frequency = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
  if (this->has_sampling_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_sampling_frequency(), output);
  }

  // .sensoris.protobuf.types.source.Sensor sensor = 4;
  if (has_sensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_sensor(), output);
  }

  // .sensoris.protobuf.types.source.SensorFusion sensor_fusion = 5;
  if (has_sensor_fusion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_sensor_fusion(), output);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->extension(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensoris.protobuf.types.source.Source)
}

::google::protobuf::uint8* Source::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensoris.protobuf.types.source.Source)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int64Value id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Entity entity = 2;
  if (this->has_entity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_entity(), deterministic, target);
  }

  // .sensoris.protobuf.types.base.Int64Value sampling_frequency = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
  if (this->has_sampling_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_sampling_frequency(), deterministic, target);
  }

  // .sensoris.protobuf.types.source.Sensor sensor = 4;
  if (has_sensor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_sensor(), deterministic, target);
  }

  // .sensoris.protobuf.types.source.SensorFusion sensor_fusion = 5;
  if (has_sensor_fusion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_sensor_fusion(), deterministic, target);
  }

  // repeated .google.protobuf.Any extension = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extension_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->extension(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensoris.protobuf.types.source.Source)
  return target;
}

size_t Source::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensoris.protobuf.types.source.Source)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.protobuf.Any extension = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->extension_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->extension(static_cast<int>(i)));
    }
  }

  // .google.protobuf.Int64Value id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .sensoris.protobuf.types.base.Entity entity = 2;
  if (this->has_entity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *entity_);
  }

  // .sensoris.protobuf.types.base.Int64Value sampling_frequency = 3 [(.sensoris.protobuf.types.base.exponent) = 3];
  if (this->has_sampling_frequency()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sampling_frequency_);
  }

  switch (source_case()) {
    // .sensoris.protobuf.types.source.Sensor sensor = 4;
    case kSensor: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *source_.sensor_);
      break;
    }
    // .sensoris.protobuf.types.source.SensorFusion sensor_fusion = 5;
    case kSensorFusion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *source_.sensor_fusion_);
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Source::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensoris.protobuf.types.source.Source)
  GOOGLE_DCHECK_NE(&from, this);
  const Source* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Source>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensoris.protobuf.types.source.Source)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensoris.protobuf.types.source.Source)
    MergeFrom(*source);
  }
}

void Source::MergeFrom(const Source& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensoris.protobuf.types.source.Source)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extension_.MergeFrom(from.extension_);
  if (from.has_id()) {
    mutable_id()->::google::protobuf::Int64Value::MergeFrom(from.id());
  }
  if (from.has_entity()) {
    mutable_entity()->::sensoris::protobuf::types::base::Entity::MergeFrom(from.entity());
  }
  if (from.has_sampling_frequency()) {
    mutable_sampling_frequency()->::sensoris::protobuf::types::base::Int64Value::MergeFrom(from.sampling_frequency());
  }
  switch (from.source_case()) {
    case kSensor: {
      mutable_sensor()->::sensoris::protobuf::types::source::Sensor::MergeFrom(from.sensor());
      break;
    }
    case kSensorFusion: {
      mutable_sensor_fusion()->::sensoris::protobuf::types::source::SensorFusion::MergeFrom(from.sensor_fusion());
      break;
    }
    case SOURCE_NOT_SET: {
      break;
    }
  }
}

void Source::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensoris.protobuf.types.source.Source)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Source::CopyFrom(const Source& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensoris.protobuf.types.source.Source)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Source::IsInitialized() const {
  return true;
}

void Source::Swap(Source* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Source* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Source::UnsafeArenaSwap(Source* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Source::InternalSwap(Source* other) {
  using std::swap;
  CastToBase(&extension_)->InternalSwap(CastToBase(&other->extension_));
  swap(id_, other->id_);
  swap(entity_, other->entity_);
  swap(sampling_frequency_, other->sampling_frequency_);
  swap(source_, other->source_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Source::GetMetadata() const {
  protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensoris_2fprotobuf_2ftypes_2fsource_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace source
}  // namespace types
}  // namespace protobuf
}  // namespace sensoris
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::source::NavigationSatelliteSystem* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::source::NavigationSatelliteSystem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::source::NavigationSatelliteSystem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::source::Sensor_MountingPositionAndOrientation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::source::Sensor* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::source::Sensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::source::Sensor >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::source::SensorFusion* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::source::SensorFusion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::source::SensorFusion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sensoris::protobuf::types::source::Source* Arena::CreateMaybeMessage< ::sensoris::protobuf::types::source::Source >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensoris::protobuf::types::source::Source >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
